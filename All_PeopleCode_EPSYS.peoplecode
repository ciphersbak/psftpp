<*
/* ZZ Vik Kuttappan 11-01-2005 Changed code to get address from Location table instead of Vendor table*/
/* ZZ Vik Kuttappan 10-5-2005 Modified code to Check if line status is cancelled*/

/* ZZ Vik Kuttappan 10-4-2005 Modified code to check component buffers for Cancelled PO's
/* ZZ Vik Kuttappan 10-4-2005 Added function z_errorHandler 

/* ZZ Vik Kuttappan hardcoded PO_LINE_SHIP.DUE_DT to be TODAY + 1   *** for testing only ***
/* ZZ Vik Kuttappan commented insert into PS_Z_PO_HDR for testing only*/

Declare Function callBusService PeopleCode Z_FUNCLIB_IBUS.Z_IBUS_FUNC_NAME FieldFormula;

/************************** $Qwest$ *****************************************************/
/**WU#:      Interface 1 - Replenishment Order
/**NAME:     Juan Alday Jr (JCA)
/**DATE:     08/29/2005
/**DESCR:    Publish the PO using the Dispatch Button in the PO Express
*****************************************************************************************/
/** SIR#     Developer(initials)       Date         Description
/** ----     ---------------------    ----------    -------------------------------------
/**   23     Juan Alday Jr (JCA)      09/22/2005    Re-ordering of the structure of the 
/**                                                 outbound xml message. Exchange position
/**                                                 of StorAddress Tag and ShippingInfo Tag.
*****************************************************************************************/

/*************** Start - Interface 1 - Replenishment Order (JCA) ***************/
Local Rowset &Rowset_Level1, &Msg_Rowset_Level1, &Rowset_Level2;
Local Record &Rec_PO_HDR, &Rec_PO_LINE_SHIP, &Rec_VNDR_LOC_ADDR, &Rec_Z_PO_HDR;
Local string &z_address;
Local XmlDoc &OutXml, &InXmlResponse;
Local boolean &ret;
Local string &str, &authentication_id, &authentication_password;
Local JavaObject &decryptor;
Local string &EncryptedUIDXML, &EncryptedPwdXML;

/*  ZZ Vik Kuttappan 10-4-2005 Added function z_errorHandler */
Function z_errorHandler(&error_message_details)
   
   &Rec_Z_AUTO_NUM_TBL = CreateRecord(Record.Z_AUTO_NUM_TBL);
   &Rec_Z_AUTO_NUM_TBL.SelectByKey();
   &seq_nbr = &Rec_Z_AUTO_NUM_TBL.LAST_AUTO_NBR.Value;
   SQLExec("Select LAST_AUTO_NBR from PS_Z_AUTO_NUM_TBL", &seq_nbr);
   
   /* Update the value of LAST_AUTO_NBR */
   &seq_nbr_new = &seq_nbr + 1;
   SQLExec("Update PS_Z_AUTO_NUM_TBL Set LAST_AUTO_NBR = :1", &seq_nbr_new);
   
   /* Populate PUBNODE, CHANNEL, PUBID and SUBCHANNEL data from PSAPMSGPUBHDR */
   SQLExec("Select A.PUBNODE, A.CHNLNAME, A.PUBID, A.SUBCHANNEL From PSAPMSGPUBHDR A Where A.MSGNAME = 'Z_PURCHASE_ORDER_ACK' And A.PUBNODE = 'Z_C2K_OUT' And A.SUBCHANNEL = 'PURCHASE_ORDER' And A.PUBID = (Select Max(B.PUBID) From PSAPMSGPUBHDR B Where B.PUBNODE = A.PUBNODE And B.CHNLNAME = A.CHNLNAME And B.SUBCHANNEL = A.SUBCHANNEL)", &pubnode, &channel, &pubid, &subchannel);
   
   /* Insert Row in PS_Z_TRANSERR_INV record */
   &Rec_Z_TRANS_ERR_INV = CreateRecord(Record.Z_TRANS_ERR_INV);
   &Rec_Z_TRANS_ERR_INV.SEQ_NBR.Value = &seq_nbr;
   &Rec_Z_TRANS_ERR_INV.Z_INTERFACE_ID.Value = 1;
   &Rec_Z_TRANS_ERR_INV.DTTM_ENTERED.Value = %Datetime;
   &Rec_Z_TRANS_ERR_INV.ERROR_MESSAGE.Value = &error_message_details;
   &Rec_Z_TRANS_ERR_INV.CLOSED_FLG.Value = "N";
   &Rec_Z_TRANS_ERR_INV.BUSINESS_UNIT.Value = &Rec_PO_HDR.BUSINESS_UNIT.Value;
   &Rec_Z_TRANS_ERR_INV.SERIAL_ID.Value = "NONE";
   &Rec_Z_TRANS_ERR_INV.ORDER_NO.Value = &po_id_value;
   &Rec_Z_TRANS_ERR_INV.Z_CTDI_STATUS.Value = &order_status;
   &Rec_Z_TRANS_ERR_INV.STATUS_DT.Value = &status_date;
   &Rec_Z_TRANS_ERR_INV.Z_STATUS_TM.Value = &status_time;
   &Rec_Z_TRANS_ERR_INV.PUBNODE.Value = &pubnode;
   &Rec_Z_TRANS_ERR_INV.CHANNEL.Value = &channel;
   &Rec_Z_TRANS_ERR_INV.PUBID.Value = &pubid;
   &Rec_Z_TRANS_ERR_INV.SUBCHANNEL.Value = &subchannel;
   &Rec_Z_TRANS_ERR_INV.MESSAGE_ID.Value = "Z_C2K_ORDER";
   &Rec_Z_TRANS_ERR_INV.Insert();
End-Function;


/* Dispatch Method equal to EDX */
If PO_HDR.DISP_METHOD = "EDX" Then
   
   /* Populate field values from PS_PO_HDR */
   &Rec_PO_HDR = CreateRecord(Record.PO_HDR);
   &Rec_PO_HDR.BUSINESS_UNIT.Value = PO_HDR.BUSINESS_UNIT;
   &Rec_PO_HDR.PO_ID.Value = PO_HDR.PO_ID;
   &Rec_PO_HDR.SelectByKey();
   
   /*ZZ Vik Kuttappan 11-01-2005 Get PO_LINE_SHIP Record*/
   &RS_PO_HDR = GetRowset();
   &RS_PO_Line = &RS_PO_HDR.GetRow(1).GetRowset(Scroll.PO_LINE);
   &RS_PO_LINE_Ship = &RS_PO_Line.GetRow(1).GetRowset(Scroll.PO_LINE_SHIP);
   &Rec_PO_LINE_SHIP = &RS_PO_LINE_Ship.GetRow(1).GetRecord(Record.PO_LINE_SHIP);
   
   /*ZZ Vik Kuttappan 11-01-2005 Changed code to get address from Location table instead of Vendor table*/
   /* Populate Address values from PS_LOCATION_TBL */
   &Date = %Date;
   &Rec_LOC_TBL = CreateRecord(Record.LOCATION_TBL);
   &Rec_LOC_TBL.SETID.Value = &Rec_PO_LINE_SHIP.SHIPTO_SETID.Value;
   &Rec_LOC_TBL.Location.Value = &Rec_PO_LINE_SHIP.SHIPTO_ID.Value;
   &Rec_LOC_TBL.SelectByKeyEffDt(&Date);
   
   /* Joind Address1, Address2 and Address3 */
   &z_address = &Rec_LOC_TBL.ADDRESS2.Value;
   &z_address = Substring(&z_address, 1, 30);
   
   /* Populate field values from PS_VNDR_LOC_ADDR 
   &Date = %Date;
   &Rec_VNDR_LOC_ADDR = CreateRecord(Record.VNDR_LOC_ADDR);
   &Rec_VNDR_LOC_ADDR.SETID.Value = PO_HDR.VENDOR_SETID;
   &Rec_VNDR_LOC_ADDR.VENDOR_ID.Value = PO_HDR.VENDOR_ID;
   &Rec_VNDR_LOC_ADDR.VNDR_LOC.Value = PO_HDR.VNDR_LOC;
   &Rec_VNDR_LOC_ADDR.SelectByKeyEffDt(&Date);
   
   /* Joind Address1, Address2 and Address3 
   &z_address = &Rec_VNDR_LOC_ADDR.ADDRESS1.Value | &Rec_VNDR_LOC_ADDR.ADDRESS2.Value | &Rec_VNDR_LOC_ADDR.ADDRESS3.Value;
   &z_address = Substring(&z_address, 1, 30);
*/
   
   /*  ZZ Vik Kuttappan 10-4-2005 Modified code to check component buffers for Cancelled PO's
   /* Action Code */
   If PO_HDR.PO_STATUS = "X" Or
         PO_HDR.PO_STATUS = "PX" Then
      &Action_code = "CAN";
   Else
      &Action_code = "ADD";
   End-If;
   
   /* Populate field values from PS_Z_PO_HDR */
   &Rec_Z_PO_HDR = CreateRecord(Record.Z_PO_HDR);
   &Rec_Z_PO_HDR.Z_RETAILER_ID.Value = 5;
   &Rec_Z_PO_HDR.BUSINESS_UNIT.Value = PO_HDR.BUSINESS_UNIT;
   &Rec_Z_PO_HDR.PO_ID.Value = PO_HDR.PO_ID;
   &Rec_Z_PO_HDR.SelectByKey();
   
   /* Initiating the Level1 data in PO_LINE record */
   &RS_Level0 = GetLevel0();
   &Row_Level1 = &RS_Level0.GetRow(1);
   &RS_Level1 = &Row_Level1.GetRowSet(Scroll.PO_LINE);
   
   /*  ZZ Vik Kuttappan hardcoded PO_LINE_SHIP.DUE_DT to be TODAY + 1   *** for testing only ***
Extracting Due Date 
   For &count = 1 To &RS_Level1.ActiveRowCount
      &RS_duedt_lvl2 = &RS_Level1.GetRow(&count).getrowset(Scroll.PO_LINE_SHIP);
      &due_dt = &RS_duedt_lvl2.getrow(1).PO_LINE_SHIP.DUE_DT.Value;
   End-For;
*/
   &due_dt = &Date + 2;
   
   &Record_Z_PO_HDR = CreateRecord(Record.Z_PO_HDR);
   &Record_Z_PO_HDR.Z_RETAILER_ID.Value = 5;
   &Record_Z_PO_HDR.BUSINESS_UNIT.Value = &Rec_PO_HDR.BUSINESS_UNIT.Value;
   &Record_Z_PO_HDR.PO_ID.Value = &Rec_PO_HDR.PO_ID.Value;
   &Record_Z_PO_HDR.Z_ADDRESS.Value = &z_address;
   
   /* ZZ Vik Kuttappan 11-01-2005 Changed code to get address from Location table*/
   &Record_Z_PO_HDR.CITY.Value = &Rec_LOC_TBL.CITY.Value;
   &Record_Z_PO_HDR.STATE.Value = &Rec_LOC_TBL.STATE.Value;
   &Record_Z_PO_HDR.POSTAL.Value = &Rec_LOC_TBL.POSTAL.Value;
   
   &address3 = &Rec_LOC_TBL.ADDRESS3.Value;
   &address3 = Substring(&address3, 1, 35);
   
   &Record_Z_PO_HDR.Z_SHP_MTHD_TYPE.Value = 3;
   &Record_Z_PO_HDR.Z_ATTENTION_LN.Value = &address3;
   &Record_Z_PO_HDR.DUE_DT.Value = &due_dt;
   &Record_Z_PO_HDR.Z_CTDI_STATUS.Value = "1";
   &Record_Z_PO_HDR.Z_ORDER_TYPE.Value = "FULFIL";
   &Record_Z_PO_HDR.PO_DT.Value = &Rec_PO_HDR.PO_DT.Value;
   &Record_Z_PO_HDR.Z_ACTION_CODE.Value = &Action_code;
   
   If Not &Record_Z_PO_HDR.Insert() Then
      &Record_Z_PO_HDR.Update()
      /*  Then
           
           &error_message = "Purchase order was not inserted. " | "Store ID= " | &store_id_value | "PO ID= " | &people_soft_order_id_value | "Sku= " | &SKU_value;
           z_errorHandler();
         
           End-If;
*/
      
   End-If;
   
   
   /* Initializing Outbound XmlDoc */
   &str = "<?xml version='1.0' encoding='UTF-8'?><InventoryMgmtOrderRequest/>";
   &OutXml = CreateXmlDoc("");
   &ret = &OutXml.ParseXmlString(&str);
   &OutXml.DocumentElement.AddAttribute("xmlns", "http://www.qwest.com/XMLSchema");
   
   /***** Application Name *****/
   &ApplicationNameNode = &OutXml.DocumentElement.AddElement("ApplicationName");
   &ApplicationNameNode.AddText("QrsIM");
   
   /***** Store Information *****/
   &storeInfoNode = &OutXml.DocumentElement.AddElement("StoreInfo");
   /** Retailer Id **/
   &retailerID = &storeInfoNode.AddElement("RetailerId");
   &retailerID.AddText("5");
   /** Store Id **/
   &storeID = &storeInfoNode.AddElement("StoreId");
   &storeID.AddText(&Rec_PO_HDR.BUSINESS_UNIT.Value);
   
   /******** Start - SIR#23 - Exchange position of ShippingInfo and StoreAddress Tags (JCA) *************/
   /***** Shipping Information *****/
   &shippinginfoNode = &OutXml.DocumentElement.AddElement("ShippingInfo");
   /** Expected Delivery Date **/
   &expecteddeliverydt = &shippinginfoNode.AddElement("DesiredDeliveryDate");
   &expecteddeliverydt.AddText(&due_dt);
   /** Tracking Code **/
   &trackingcode = &shippinginfoNode.AddElement("TrackingCode");
   &trackingcode.AddText(&Rec_Z_PO_HDR.Z_TRACKING_NUM.Value);
   /** Special Instruction **/
   &specialinstruction2 = &shippinginfoNode.AddElement("SpecialInstruction");
   &specialinstruction2.AddText(&Rec_Z_PO_HDR.Z_SPL_DLVRY_INSTN.Value);
   /******** Start - SIR#XXX - Re-Order the position of Shipping Method (JCA) *************/
   /** Shipping Method Code **/
   &shippingmethodcode = &shippinginfoNode.AddElement("ShippingMethodCode");
   &shippingmethodcode.AddText("3");
   /******** End - SIR#XXX - Re-Order the position of Shipping Method (JCA) *************/
   
   /***** Order Info *****/
   &orderinfoNode = &OutXml.DocumentElement.AddElement("OrderInfo");
   /** Peoplesoft PO Id **/
   &poid = &orderinfoNode.AddElement("PeopleSoftOrderId");
   &poidvalue = &poid.AddElement("Id");
   &poidvalue.AddText(&Rec_PO_HDR.PO_ID.Value);
   /** Order Type **/
   &ordertype = &orderinfoNode.AddElement("OrderType");
   &ordertype.AddText("FULFIL");
   /** C2K Order Id **/
   &c2korderid = &orderinfoNode.AddElement("C2KOrderId");
   &idvalue = &c2korderid.AddElement("Id");
   &idvalue.AddText(&Rec_Z_PO_HDR.Z_CTDI_PO_ID.Value);
   /** Creation Date **/
   &creationdt = &orderinfoNode.AddElement("CreationDate");
   &creationdt.AddText(&Rec_PO_HDR.PO_DT.Value);
   /** C2K Order Status **/
   &orderstatus = &orderinfoNode.AddElement("OrderStatus");
   &orderstatus.AddText(&Rec_Z_PO_HDR.Z_CTDI_STATUS.Value);
   /** Invoice Id **/
   &invoicenum = &orderinfoNode.AddElement("InvoiceId");
   &invoicenum.AddText(&Rec_Z_PO_HDR.Z_INVOICE_NUM.Value);
   
   /***** Store Address *****/
   &storeaddressNode = &OutXml.DocumentElement.AddElement("StoreAddress");
   /** Street Address **/
   &streetaddress = &storeaddressNode.AddElement("ns2:StreetAddress");
   &streetaddress.AddAttribute("xmlns:ns2", "http://www.qwest.com/XMLSchema/BIM");
   &streetaddress.AddText(&z_address);
   /** City **/
   &city = &storeaddressNode.AddElement("ns3:City");
   &city.AddAttribute("xmlns:ns3", "http://www.qwest.com/XMLSchema/BIM");
   
   
   /*ZZ Vik Kuttappan 11-01-2005 Changed code to get address from Location table */
   /*&city.AddText(&Rec_VNDR_LOC_ADDR.CITY.Value); */
   &city.AddText(&Rec_LOC_TBL.City.Value);
   
   
   /** Postal Code **/
   &postal = &storeaddressNode.AddElement("ns4:PostalCode");
   &postal.AddAttribute("xmlns:ns4", "http://www.qwest.com/XMLSchema/BIM");
   /*ZZ Vik Kuttappan 11-01-2005 Changed code to get address from Location table */
   /*&postal.AddText(&Rec_VNDR_LOC_ADDR.POSTAL.Value);*/
   &postal.AddText(&Rec_LOC_TBL.POSTAL.Value);
   
   
   /** State Province **/
   &state = &storeaddressNode.AddElement("StateProvince");
   /*ZZ Vik Kuttappan 11-01-2005 Changed code to get address from Location table */
   /*&state.AddText(&Rec_VNDR_LOC_ADDR.STATE.Value);*/
   &state.AddText(&Rec_LOC_TBL.STATE.Value);
   
   /** Special instruction - Attention Line**/
   &specialinstruction = &storeaddressNode.AddElement("SpecialInstruction");
   &specialinstruction.AddText(&address3);
   /******** End - SIR#23 - Exchange position of ShippingInfo and StoreAddress Tags (JCA) *************/
   
   
   
   For &rs_count = 1 To &RS_Level1.ActiveRowCount
      
      &RS_Level2 = &RS_Level1.GetRow(&rs_count).getrowset(Scroll.PO_LINE_SHIP);
      
      /*ZZ Vik Kuttappan 10-4-2005 Check if line status is cancelled*/
      If Not &RS_Level1.GetRow(&rs_count).Getrecord(Record.PO_LINE).CANCEL_STATUS.Value = "X" Then
         &qty_po = &RS_Level2.getrow(1).PO_LINE_SHIP.QTY_PO.Value;
         
         /***** SKU Information Line *****/
         &skuinfo = &OutXml.DocumentElement.AddElement("SKUInfo");
         /** Line Number **/
         &linenum = &skuinfo.AddElement("LineNum");
         &linenum.AddText(&RS_Level1.GetRow(&rs_count).PO_LINE.LINE_NBR.Value);
         /** SKU Id **/
         &sku = &skuinfo.AddElement("SKU");
         &sku.AddText(&RS_Level1.GetRow(&rs_count).PO_LINE.INV_ITEM_ID.Value);
         /** Quantity Order **/
         &orderqty = &skuinfo.AddElement("OrderQty");
         &orderqty.AddText(&RS_Level2.getrow(1).PO_LINE_SHIP.QTY_PO.Value);
         
      End-If;
   End-For;
   
   /***** Action Code *****/
   &actioncode = &OutXml.DocumentElement.AddElement("ActionCode");
   &actioncode.AddText(&Action_code);
   
   /*
 &response = SyncRequestXmlDoc(&OutXml, Message.Z_C2K_ORDER, Node.Z_C2K_PO_OUT);
*/
*>
<***
   &outStr = &OutXml.GenXmlString();
   
   /****** Start - SIR#XXX - Populate the Data from C2K Response ******/
   /* Check If the Test Dispatch Button was set to "Y" */
   If PO_PRINT_WRK.TEST_IND = "Y" Then
      
      WinMessage(&outStr, 0);
      
      /* Check If the Test Dispatch Button was set to "N" */
   Else
      
      &response = callBusService("PO_DISPATCH_C2K_WOBS", &outStr);
      
      WinMessage(&response, 0);
      /* Parse the Response String to Message  */
      &InXmlResponse = CreateXmlDoc(&response);
      
      /* Extract PeopleSoft Order Id */
      &po_id_value = &InXmlResponse.GetElementsByTagName("PeopleSoftOrderId").Get(1).GetChildNode(1).NodeValue;
      /* Extract Order Type */
      &order_type = &InXmlResponse.GetElementsByTagName("OrderType").Get(1).NodeValue;
      /* Extract Response Type */
      &response_type = &InXmlResponse.GetElementsByTagName("ResponseType").Get(1).NodeValue;
      
      /* Identify the Response Type equal to Failure */
      If &response_type = "Failure" Or
            &response_type = "FAILURE" Then
         
         &message_detail_array = &InXmlResponse.GetElementsByTagName("MessageDetail");
         /** Message Detail **/
         For &detail_count = 1 To &message_detail_array.len
            
            &message_detail_node = &message_detail_array.Get(&detail_count);
            /** Element Name **/
            &element_name_node = &message_detail_node.GetChildNode(1);
            &element_name_value = &element_name_node.Nodevalue;
            
            /** Message Status **/
            &message_status_node = &message_detail_node.GetChildNode(2);
            /** Severity Level **/
            &severity_level_node = &message_status_node.GetChildNode(1);
            &severity_level_value = &severity_level_node.NodeValue;
            /** Error Message **/
            &error_message_node = &message_status_node.GetChildNode(2);
            &error_message_value = &error_message_node.NodeValue;
            /** Error Code **/
            &error_code_node = &message_status_node.GetChildNode(3);
            &error_code_value = &error_code_node.NodeValue;
            
            /** Concatenate all the 4 fields of Message Details **/
            &error_message_details = &element_name_value | "-" | &severity_level_value | "-" | &error_message_value | "-" | &error_code_value;
            
            /*  ZZ Vik Kuttappan 10-4-2005 Added function z_errorHandler */
            /*Log to error table*/
            z_errorHandler(&error_message_details);
            
            
         End-For;
         /* Identify the Response Type equal to Success */
      Else
         /* Extract Order Status */
         &order_status = &InXmlResponse.GetElementsByTagName("OrderStatus").Get(1).NodeValue;
         /* Extract C2K Order Id */
         &c2k_order_id = &InXmlResponse.GetElementsByTagName("C2KOrderId").Get(1).GetChildNode(1).NodeValue;
         /* Extract Creation Date */
         &creation_date = &InXmlResponse.GetElementsByTagName("CreationDate").Get(1).NodeValue;
         
         /* Update the Z_CTDI_PO_ID/Z_CTDI_STATUS fields for Z_PO_HDR record */
         &Record_Z_PO_HDR.Z_CTDI_PO_ID.Value = &c2k_order_id;
         &Record_Z_PO_HDR.Z_CTDI_STATUS.Value = &order_status;
         &Record_Z_PO_HDR.Update();
      End-If;
   End-If;
   /****** End - SIR#XXX - Populate the Data from C2K Response ******/
End-If;
/*************** End - Interface 1 - Replenishment Order (JCA) ***************/


/*  FUNCTION CALL    */
Function BuildException(&excp As string) Returns string
   
   Local string &pre_pend, &post_pend;
   
   &pre_pend = "<?xml version='1.0'" | " encoding='UTF-8'?>" | "<Exception>" | "<IBusException>";
   &post_pend = "</IBusException></Exception>";
   
   Return &pre_pend | &excp | &post_pend;
   
End-Function;

Function CallBusService(&busService As string, &msg As string) Returns string
   
   Local JavaObject &oAA;
   Local string &results, &authFlag, &subject, &debugflag, &argosgrp;
   Local SQL &sql;
   
   /* Create an instance of the external Java object */
   &oAA = CreateJavaObject("com.qwest.ps.bus.BusRequester");
   <**
   &oAA = CreateJavaObject("execInput3");
   &results = &oAA.runExec();
   Return &results;
   **>
***>
<*****   
   /* set parameter values and call bus service */
   &sql = GetSQL(SQL.Z_IBUS_CFG_LOOKUP, Upper(&busService));
   If &sql.Status = 0 Then
      If &sql.Fetch(&subject, &debugflag, &argosgrp) Then
         /* Call the method within the class */
         /*&results = &oAA.callBusService(&subject, &msg);*/
         /*** bus service call with debug turned on ***/
         &results = &oAA.callBusService(&argosgrp, &subject, &msg, &debugflag);
      Else
         &results = BuildException("No active IBus Configuration found for service name: " | &busService);
      End-If;
   Else
      &results = BuildException("Unable to find Z_IBUS_CFG_LOOKUP SQL object...please contact your system administrator");
   End-If;
   &sql.Close();
   
   /* return results */
   &oAA = Null;
   Return &results;
   
End-Function;
*****>


Local Message &MSG;
Local XmlDoc &xmldoc;
Local boolean &yo;
Local string &filename;

rem &MSG = CreateMessage(Message.Z_OUTBND_MSG);
&MSG = GetMessage();
/* Override Properties */
&yo = &MSG.IBInfo.LoadConnectorPropFromNode("PSFT_FTP");
&MSG.IBInfo.ConnectorOverride = True;
&filename = "PP_" | %Datetime | ".xml";
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FILENAME", "PP_" | %Datetime | ".xml", %Property);
rem &pp = ConnectorRequest(&MSG);
rem ReturnToServer(&MSG);


Declare Function InitVariables PeopleCode Z_CUSTREC_WRK.EDITTABLE22 FieldFormula;

Local XmlDoc &xmldoc, &output;
Local Rowset &MSG_Rowset, &MSG_RS_1, &MSG_RS_2, &MSG_RS_3, &RS;
Local Row &MSG_ROW_1, &MSG_ROW_2, &MSG_ROW_3;
Local Record &MSG_REC_1, &MSG_REC_2, &MSG_REC_3;
Global Message &MSG, &MSG2;
Local string &PP, &STR;
Local boolean &TEST, &bool;

/* Populate the Message */

&MSG = CreateMessage(Message.Z_OUTBND_MSG);
&RS = GetLevel0();
&MSG.CopyRowset(&RS);
rem &MSG.Publish();

/* Publish the Message */
&xmldoc = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><myFile/>");

&MSG_Rowset = &MSG.GetRowset();
MessageBox(0, "", 0, 0, "CUSIP_ID " | &MSG_Rowset.GetRow(1).Z_CUST_LVL0_TBL.CUSIP_ID.Value);
InitVariables();

&CUSIP_ID = &MSG_Rowset.GetRow(1).Z_CUST_LVL0_TBL.CUSIP_ID.Value;
&DESCR150 = &MSG_Rowset.GetRow(1).Z_CUST_LVL0_TBL.DESCR150_TEXT.Value;

&MSG_RS_1 = &MSG_Rowset.GetRow(1).GetRowset(Scroll.Z_CUST_LVL1_TBL);
For &NEXT01 = 1 To &MSG_RS_1.ActiveRowCount
   &MSG_ROW_1 = &MSG_RS_1.GetRow(&NEXT01);
   &MSG_REC_1 = &MSG_ROW_1.Z_CUST_LVL1_TBL;
   &CUST_HOUSE_ID = &MSG_REC_1.GetField(Field.CUSTOMS_HOUSE_ID).Value;
   &DESCR254 = &MSG_REC_1.GetField(Field.DESCR254).Value;
   
   &MSG_RS_2 = &MSG_RS_1.GetRow(&NEXT01).GetRowset(Scroll.Z_CUST_LVL2_TBL);
   For &NEXT02 = 1 To &MSG_RS_2.ActiveRowCount
      &MSG_ROW_2 = &MSG_RS_2.GetRow(&NEXT02);
      &MSG_REC_2 = &MSG_ROW_2.Z_CUST_LVL2_TBL;
      &PACKAGE_ID = &MSG_REC_2.GetField(Field.PACKAGE_ID).Value;
      &DESCR100 = &MSG_REC_2.GetField(Field.DESCR100_4).Value;
      &MSG_RS_3 = &MSG_RS_2.GetRow(&NEXT02).GetRowset(Scroll.Z_CUST_LVL3_TBL);
      For &NEXT03 = 1 To &MSG_RS_3.ActiveRowCount
         &MSG_ROW_3 = &MSG_RS_3.GetRow(&NEXT03);
         &MSG_REC_3 = &MSG_ROW_3.Z_CUST_LVL3_TBL;
         &LABEL_ID = &MSG_REC_3.GetField(Field.LABEL_ID).Value;
         &COMMENTS = &MSG_REC_3.GetField(Field.COMMENT2).Value;
         &PP = GetHTMLText(HTML.Z_CUST_HTML, &CUSIP_ID, &DESCR150, &CUST_HOUSE_ID, &DESCR254, &PACKAGE_ID, &DESCR100, &LABEL_ID, &COMMENTS);
      End-For;
   End-For;
   
End-For;
rem &PP = GetHTMLText(HTML.Z_CUST_HTML, &CUSIP_ID, &DESCR150, &CUST_HOUSE_ID, &DESCR254, &PACKAGE_ID, &DESCR100, &LABEL_ID, &COMMENTS);
&bool = &xmldoc.ParseXmlString(&PP);
InitVariables();
rem &STR = &xmldoc.GenFormattedXmlString();
&MSGNAME = Message.Z_OUTBND_MSG;
&RET = PublishXmlDoc(&xmldoc, &MSGNAME, Node.PSFT_FTP);

/* Publish to the FTP Node by changing the File Name as required */
rem &filename = "PP_" | %Datetime | ".xml";
<*
/* Set ConnectorName and Connector ClassName */
rem &MSG.IBInfo.ConnectorOverride = True;
&MSG.IBInfo.IBConnectorInfo.ConnectorName = "FTPTARGET";
&MSG.IBInfo.IBConnectorInfo.ConnectorClassName = "FTPTargetConnector";
/* Set the FTP connector properties in the ConnectorInfo */
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("METHOD", "PUT", %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("HOSTNAME", "ftp.peoplesoft.com", %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("USERNAME", "crmcust", %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("sendUnCompressed", "Y", %Property);
/*  Encrypt the password */
Local JavaObject &pscipher = CreateJavaObject("com.peoplesoft.pt.integrationgateway.common.EncryptPassword");
&encPassword = &pscipher.encryptPassword("H0neyb3353");
&pscipher = Null;
/* Set the FTP connector properties in the ConnectorInfo */
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("PASSWORD", &encPassword, %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("DIRECTORY", "/incoming/CRM/Daily/GregSimpson/Filenet", %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FILENAME", &filename, %Property);
MessageBox(0, "", 0, 0, "File Name for publish " | &filename);
&TEST = PublishXmlDoc(&xmldoc, Message.Z_OUTBND_MSG, Node.PSFT_FTP);
MessageBox(0, "", 0, 0, "TEST " | &TEST);
/* Do Connector Request */
&MSG2 = ConnectorRequest(&MSG);
rem &output = &MSG2.GetXmlDoc();
*>
/* PRASHANT */
<*
&AddNode0 = &xmldoc.DocumentElement.AddElement("product");
&AddNode0.AddAttribute("docType", "product");
&AddNode0.AddAttribute("ObjectId", &NEXT0);

/****************** 
 Process Level ZERO
 ******************/

&CUSIP_ID = &MSG_Rowset.GetRow(1).Z_CUST_LVL0_TBL.CUSIP_ID.Value;
&DESCR150 = &MSG_Rowset.GetRow(1).Z_CUST_LVL0_TBL.DESCR150_TEXT.Value;

&AddNode_CUSIP_ID = &AddNode0.AddElement("CUSIPID");
&AddNode_CUSIP_ID.NodeValue = &CUSIP_ID;
&AddNode_DESCR150 = &AddNode0.AddElement("DESCR150");
&AddNode_DESCR150.NodeValue = &DESCR150;

/***************** 
 Process Level ONE
 *****************/

rem &MSG_RS_1 = &MSG_Rowset.GetRowset(Scroll.Z_CUST_LVL1_TBL);
&MSG_RS_1 = &MSG_Rowset.GetRow(1).GetRowset(Scroll.Z_CUST_LVL1_TBL);
For &NEXT01 = 1 To &MSG_RS_1.ActiveRowCount
   &MSG_ROW_1 = &MSG_RS_1.GetRow(&NEXT01);
   &MSG_REC_1 = &MSG_ROW_1.Z_CUST_LVL1_TBL;
   &CUST_HOUSE_ID = &MSG_REC_1.GetField(Field.CUSTOMS_HOUSE_ID).Value;
   &DESCR254 = &MSG_REC_1.GetField(Field.DESCR254).Value;
   
   &AddNode_CUSTOMS_HOUSE = &AddNode0.AddElement("CustomsHouse");
   &AddNode_CUSTOMS_HOUSE.NodeValue = &CUST_HOUSE_ID;
   &AddNode_DESCR254 = &AddNode0.AddElement("DESCR254");
   &AddNode_DESCR254.NodeValue = &DESCR254;
   
   
   /***************** 
	Process Level TWO
	*****************/
   rem &MSG_RS_2 = &MSG_Rowset(&NEXT01).GetRowset(Scroll.Z_CUST_LVL2_TBL);
   &MSG_RS_2 = &MSG_RS_1.GetRow(&NEXT01).GetRowset(Scroll.Z_CUST_LVL2_TBL);
   
   For &NEXT02 = 1 To &MSG_RS_2.ActiveRowCount
      &MSG_ROW_2 = &MSG_RS_2.GetRow(&NEXT02);
      &MSG_REC_2 = &MSG_ROW_2.Z_CUST_LVL2_TBL;
      &PACKAGE_ID = &MSG_REC_2.GetField(Field.PACKAGE_ID).Value;
      &DESCR100 = &MSG_REC_2.GetField(Field.DESCR100_4).Value;
      
      &AddNode_PACKAGE_ID = &AddNode0.AddElement("PackageID");
      &AddNode_PACKAGE_ID.NodeValue = &PACKAGE_ID;
      &AddNode_PACKAGE_ID.AddAttribute("docType", "party");
      &AddNode_PACKAGE_ID.AddAttribute("objectId", "0");
      
      &AddNode_DESCR100 = &AddNode0.AddElement("DESCR100_4");
      &AddNode_DESCR100.NodeValue = &DESCR100;
      &AddNode_DESCR100.AddAttribute("docType", "productGroup");
      &AddNode_DESCR100.AddAttribute("objectId", "0");
      
      /******************* 
	   Process Level THREE
	   *******************/
      
      rem &MSG_RS_3 = &MSG_Rowset(&NEXT02).GetRowset(Scroll.Z_CUST_LVL3_TBL);
      &MSG_RS_3 = &MSG_RS_2.GetRow(&NEXT02).GetRowset(Scroll.Z_CUST_LVL3_TBL);
      For &NEXT03 = 1 To &MSG_RS_3.ActiveRowCount
         &MSG_ROW_3 = &MSG_RS_3.GetRow(&NEXT03);
         &MSG_REC_3 = &MSG_ROW_3.Z_CUST_LVL3_TBL;
         &LABEL_ID = &MSG_REC_3.GetField(Field.LABEL_ID).Value;
         &COMMENTS = &MSG_REC_3.GetField(Field.COMMENT2).Value;;
         
         &AddNode_LABEL_ID = &AddNode0.AddElement("LabelID");
         &AddNode_LABEL_ID.NodeValue = &LABEL_ID;
         &AddNode_COMMENT = &AddNode0.AddElement("Comments");
         &AddNode_COMMENT.NodeValue = &COMMENTS;
      End-For;
   End-For;
   
   
   /*Initialize Variables*/
End-For;
*>
/* CHECK NODE */
<*
&ErrorInfo = PingNode("PSFT_FILEOUTPUT");
&Root = &ErrorInfo.DocumentElement;
&MsgNodeArray = &Root.GetElementsByTagName("msgnode");
For &M = 1 To &MsgNodeArray.Len
   &MsgNode = &MsgNodeArray [&M];
   &MsgText = &MsgNode.FindNode("status").NodeValue;
   If &MsgText = "Success (117,73)" Then
      /*PUBLISH MESSAGE ON NODE*/
      &RET = PublishXmlDoc(&xmldoc, &MSGNAME, Node.PSFT_FILEOUTPUT);
   Else
      Error ("Web Server not available for web service");
   End-If;
End-For;
*>
<*
For &NEXT0 = 1 To &MSG_Rowset.ActiveRowCount
   MessageBox(0, "", 0, 0, "2");
   &AddNode0 = &xmldoc.DocumentElement.AddElement("product");
   &AddNode0.AddAttribute("docType", "product");
   &AddNode0.AddAttribute("ObjectId", &NEXT0);
   
   /****************** 
	Process Level ZERO
	******************/
   
   &CUSIP_ID = &MSG_Rowset(&NEXT0).GetRecord(Record.Z_CUST_LVL0_TBL).GetField(Z_CUST_LVL0_TBL.CUSIP_ID).Value;
   &DESCR150 = &MSG_Rowset(&NEXT0).GetRecord(Record.Z_CUST_LVL0_TBL).GetField(Z_CUST_LVL0_TBL.DESCR150_TEXT).Value;
   
   &AddNode_CUSIP_ID = &AddNode0.AddElement("CUSIPID");
   &AddNode_CUSIP_ID.NodeValue = &CUSIP_ID;
   &AddNode_DESCR150 = &AddNode0.AddElement("DESCR150");
   &AddNode_DESCR150.NodeValue = &DESCR150;
   
   /***************** 
	Process Level ONE
	*****************/
   
   &MSG_RS_1 = &MSG_Rowset(&NEXT0).GetRowset(Scroll.Z_CUST_LVL1_TBL);
   For &NEXT01 = 1 To &MSG_RS_1.ActiveRowCount
      &MSG_ROW_1 = &MSG_RS_1.GetRow(&NEXT01);
      &MSG_REC_1 = &MSG_ROW_1.Z_CUST_LVL1_TBL;
      &CUST_HOUSE_ID = &MSG_REC_1.GetField(Z_CUST_LVL1_TBL.CUSTOMS_HOUSE_ID).Value;
      &DESCR254 = &MSG_REC_1.GetField(Z_CUST_LVL1_TBL.DESCR254).Value;
      
      &AddNode_CUSTOMS_HOUSE = &AddNode_CUSIP_ID.AddElement("CustomsHouse");
      &AddNode_CUSTOMS_HOUSE.NodeValue = &CUST_HOUSE_ID;
      &AddNode_DESCR254 = &AddNode_CUSIP_ID.AddElement("DESCR254");
      &AddNode_DESCR254.NodeValue = &DESCR254;
      
      
      /***************** 
	   Process Level TWO
	   *****************/
      &MSG_RS_2 = &MSG_Rowset(&NEXT01).GetRowset(Scroll.Z_CUST_LVL2_TBL);
      For &NEXT02 = 1 To &MSG_RS_2.ActiveRowCount
         &MSG_ROW_2 = &MSG_RS_2.GetRow(&NEXT02);
         &MSG_REC_2 = &MSG_ROW_2.Z_CUST_LVL2_TBL;
         &PACKAGE_ID = &MSG_REC_2.GetField(Z_CUST_LVL2_TBL.PACKAGE_ID).Value;
         &DESCR100 = &MSG_REC_2.GetField(Z_CUST_LVL2_TBL.DESCR100_4).Value;
         
         &AddNode_PACKAGE_ID = &AddNode_CUSIP_ID.AddElement("PackageID");
         &AddNode_PACKAGE_ID.NodeValue = &PACKAGE_ID;
         &AddNode_PACKAGE_ID.AddAttribute("docType", "party");
         &AddNode_PACKAGE_ID.AddAttribute("objectId", "0");
         
         &AddNode_DESCR100 = &AddNode_CUSIP_ID.AddElement("DESCR100_4");
         &AddNode_DESCR100.NodeValue = &DESCR100;
         &AddNode_DESCR100.AddAttribute("docType", "productGroup");
         &AddNode_DESCR100.AddAttribute("objectId", "0");
         
         /******************* 
	      Process Level THREE
	      *******************/
         &MSG_RS_3 = &MSG_Rowset(&NEXT02).GetRowset(Scroll.Z_CUST_LVL3_TBL);
         For &NEXT03 = 1 To &MSG_RS_3.ActiveRowCount
            &MSG_ROW_3 = &MSG_RS_3.GetRow(&NEXT03);
            &MSG_REC_3 = &MSG_ROW_3.Z_CUST_LVL3_TBL;
            &LABEL_ID = &MSG_REC_3.GetField(Z_CUST_LVL3_TBL.LABEL_ID).Value;
            &COMMENTS = &MSG_REC_3.GetField(Z_CUST_LVL3_TBL.COMMENT2).Value;;
            
            &AddNode_LABEL_ID = &AddNode_CUSIP_ID.AddElement("LabelID");
            &AddNode_LABEL_ID.NodeValue = &LABEL_ID;
            &AddNode_COMMENT = &AddNode_CUSIP_ID.AddElement("Comments");
            &AddNode_COMMENT.NodeValue = &COMMENTS;
         End-For;
      End-For;
      
      
      /*Initialize Variables*/
   End-For;
   InitVariables();
End-For;
&STR = &xmldoc.GenFormattedXmlString();
&MSGNAME = Message.Z_OUTBND_MSG;

/* CHECK NODE */

&ErrorInfo = PingNode("PSFT_FILEOUTPUT");
&Root = &ErrorInfo.DocumentElement;
&MsgNodeArray = &Root.GetElementsByTagName("msgnode");
For &M = 1 To &MsgNodeArray.Len
   &MsgNode = &MsgNodeArray [&M];
   &MsgText = &MsgNode.FindNode("status").NodeValue;
   If &MsgText = "Success (117,73)" Then
      /*PUBLISH MESSAGE ON NODE*/
      &RET = PublishXmlDoc(&xmldoc, @(&MSGNAME), Node.PSFT_FILEOUTPUT);
   Else
      Error ("Web Server not available for web service");
   End-If;
End-For;
*>


Declare Function IScript_TestJavaScript PeopleCode WEBLIB_XXX.EDITTABLE10 FieldFormula;


/*  Encrypt the password */
Local JavaObject &pscipher = CreateJavaObject("com.peoplesoft.pt.integrationgateway.common.EncryptPassword");
rem &pwd = "H0neyb3353";
&pwd = "<>";
MessageBox(0, "", 0, 0, "Password before encryption " | &pwd);
&encPassword = &pscipher.encryptPassword(&pwd);
&yo = &pscipher.isPasswordEncrypted(&encPassword);
&pscipher = Null;
MessageBox(0, "", 0, 0, "Encrypted Password " | &encPassword | " " | &yo);
rem &encPassword = "frSl/zYtgjz+bXLl+rzcPA==";
rem &encPassword = "ROygk1A5qYTNj8extO04EQ==";
rem &encPassword = "BA3E855E93B5B9B0";
&encPassword = "F/F//m/GEcZbl0PslYLsxw==";
rem &encPassword = "9pTcKQUFGmg=";
&encPassword = "SZywayYW1Ss1kXovK+ZaFA==";
Local JavaObject &psCYPHER = CreateJavaObject("psft.pt8.pshttp.PSCipher");
&DecPwd = &psCYPHER.decodePassword(&encPassword);
MessageBox(0, "", 0, 0, "&DecPwd " | &DecPwd);
&psnode = Null;

Local JavaObject &Simple = CreateJavaObject("com.peoplesoft.pt.simplepost.SimplePost");
&Time = &Simple.getTimeOut();
MessageBox(0, "", 0, 0, "&Time " | &Time);
&Simple = Null;

<*
Local Field &HTMLField;

&HTMLField = GetField();
&Str = GetHTMLText(HTML.X_PRINT_X);
rem MessageBox(0, "", 0, 0, "&Str " | &Str);
&HTMLField.Value = &Str;
*>
<*
Function IScript_TestJavaScript();

&str = %Response.WriteLine("<script src= " | %Response.GetJavaScriptURL(HTML.X_PRINT_X) | "></script>");
MessageBox(0, "", 0, 0, "&Str " | &str);
End-Function;
*>
rem IScript_TestJavaScript();

!************PRINT
<html>
<head>
<body>
<input type=button value=Print OnClick="window.print();">
</body>
</head>
</html>
!!!!!!!!!!!!!!!!!!

<?xml version="1.0" encoding="utf-8"?>
<myFile>
 <product docType="product" ObjectId="">
  <CUSIPID>%Bind(:1)</CUSIPID> 
  <DESCR150>%Bind(:2)</DESCR150> 
  <CustomsHouse>%Bind(:3)</CustomsHouse> 
  <DESCR254>%Bind(:4)</DESCR254> 
  <PackageID docType="party" objectId="0">%Bind(:5)</PackageID> 
  <DESCR100_4 docType="productGroup" objectId="0">%Bind(:6)</DESCR100_4> 
  <LabelID>%Bind(:7)</LabelID> 
  <Comments>%Bind(:8)</Comments> 
  </product>
</myFile>


/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    Added new functions APFlatFile, InitVariables, VendorNextancexmlfile

InitVariables-  This function is used to initiaze the variables used in the 
                APFlatfile and VendorNextanceXmlfile functions
Input	     -  None
Output       -  None

APFlatFile   -  This function is used to generate the Flat file as required by the AP Walker System
Input	     -  Message Object for the AP Walker system 
Output       -  Fixed format FLat file in a predefined folder.

VendorNextancexmlfile   -  This function is used to generate the XML Flat file as required by the Nextance System
Input	          -  Message Object for the Nextance System 
Output            -  XML FLat file in a predefined folder.

***********************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    Added the Evaluate statement to check for the message name and call corresponding functions 
		  based on the output format as required by the target system
***********************************************************************/

/************************** $Qwest$ ******************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     02/01/2006
DESCR:    Added New Function ItemNextancexmlfile and 
		  Added When clauses to the existing Evaluate Statement for Nextance

ItemNextancexmlfile - This function is used to generate the XML Flat file for 
					  Item Data as required by the Nextance System
Input	            -  Message Object for the Nextance System 
Output              -  XML FLat file in a predefined folder.
/*****************************************************************************/


/************************/
/*   Global variables   */
/************************/
Global string &MSGNAME, &PUBLISH_RULE_ID, &CHUNK_RULE_ID, &CHUNK_RULE_REC, &WHERE;
Global string &PUB_BASE_FLG, &BATCH_FULL, &MSG_CREATED, &BREAK_POINT, &FIRST_TIME, &MSGNODENAME;
Global number &PROCESS_INSTANCE, &NUM_RECTYPE;
Global date &DATE, &EFFDT;
Global Message &MSG;
Global Record &REC_CHUNK;

Global array of string &ARY_BREAKFLD, &ARY_STATUS, &ARY_ORDERBY, &ARY_LIST;
Global array of number &ARY_BREAKIDX;
Global array of SQL &ARY_SQL;
Global array of Record &ARY_REC;

Global array of array of string &ARY_ARY_KEYFLD, &ARY_ARY_RECNAME;
Global array of array of number &ARY_ARY_KEYSIDX;


/************************/
/*   Local  variables   */
/************************/
Local Rowset &RS_LVL0, &RS_LVL1, &RS_LVL2, &RS_LVL3, &RS_LVL4, &RS_LVL5;
Local Record &REC, &REC_RESTART, &REC_PREV;
Local Record &REC_MSG_LVL0, &REC_MSG_LVL1, &REC_MSG_LVL2, &REC_MSG_LVL3;
Local Record &REC_MSG_LVL4, &REC_MSG_LVL5, &REC_TBL_LVL1, &REC_TBL_LVL2, &REC_HIST;
Local Record &REC_TBL_LVL3, &REC_TBL_LVL4, &REC_TBL_LVL5;
Local SQL &SQL_LVL0, &SQL_LVL1, &SQL_LVL2, &SQL_LVL3, &SQL_LVL4, &SQL_LVL5;
Local string &RESTART, &ORDER_BY, &LIST;
Local number &I;

/********* Start QR2IPO004 *********/
/********* Start QR2IIN006 *********/
/*-------------------------------------------------------------------------------  
 Desc    : Function to Initialize the Variables used in the Functions VendorNextancexmlfile
 Input   : None
 Output  : None
 Returns : None
---------------------------------------------------------------------------------*/

Function InitVariables()
   &SETID = "";
   &VENDOR_ID = "";
   /* Added variables for the Item Publish to Nextance */
   &INV_ITEM_ID = "";
   &ITM_STATUS_CURRENT = "";
   &ITEM_DESCR0 = "";
   &MFG_ITM_ID = "";
   &DATE_CREATED = "";
   &CREATED_BY = "";
   &DATE_UPDATED = "";
   &UPDATED_BY = "";
   &UPDATE_COUNT = "";
   &PDT_VERSION = "";
   &DESCR = "";
   &IDE_TYPE = "";
   &IDE_VALUE = "";
   &DOC_NAME = "";
   &DOC_DESCR = "";
   &DOC_VERSION = "";
   &DOC_LOC = "";
   &DOC_CONT_NAME = "";
   &DOC_CONT_TYPE = "";
   &DOC_INTERNAL = "";
   &DOC_ATT_DATE = "";
   &DOC_ATT_BY = "";
   &FIELD_NAME = "";
   &FIELD_VALUE = "";
   &REF_NO = "";
   &NEXT_STATUS = "";
   &STD_UOM = "";
   &UNSPSC_CD = "";
   /*Fields added for Item Publish to Nextance */
   /* Fields Added For PO PUBLISH */
   &BU = "";
   &PO_ID = "";
   &CHNG_ORD_BATCH = "";
   &NAME1 = "";
   &VENADDR1 = "";
   &VENADDR2 = "";
   &VENADDR3 = "";
   &VENADDR4 = "";
   &VENCOUN = "";
   &VENCITY = "";
   &VENSTATE = "";
   &VENPOSTAL = "";
   &ATTN_TO = "";
   &DESCR = "";
   &ADDR1 = "";
   &ADDR2 = "";
   &ADDR3 = "";
   &ADDR4 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &COCD = "";
   &Z_ORDER_TYPE = "";
   &DSC_TRMS_AVAIL_FLG = "";
   &TERMS_ADJUST_DAYS = "";
   &DSCNT_TRMS_PERCENT = "";
   &TMG_DAY_INCR_VAL = "";
   &Z_FIRST_NAME = "";
   &MIDDLE_NAME = "";
   &Z_LAST_NAME = "";
   &Z_SMTP = "";
   &WS_WORK_PHONE = "";
   &OPRID = "";
   &COMMENT_ID = "";
   &RANDOM = "";
   &BU_LINE = "";
   &PO_LINE = "";
   &LINE_NBR = "";
   &INV_ITEM_ID = "";
   &ITM_ID_VNDR = "";
   &UOM = "";
   &MFG_ITM_ID = "";
   &CNTRCT_ID = "";
   &DESCR254 = "";
   &DESCR60 = "";
   &BU_SCHED = "";
   &PO_SCHED = "";
   &LINE_NBR_SCHED = "";
   &SCHED_NBR = "";
   &PRICE_PO = "";
   &SHIPTO_ID = "";
   &QTY_PO = "";
   &SHIP_TYPE_ID = "";
   &SHIP_DATE = "";
   &L_ADDR1 = "";
   &L_ADDR2 = "";
   &L_ADDR3 = "";
   &L_ADDR4 = "";
   &L_CO_CD = "";
   &L_CITY = "";
   &L_STATE = "";
   &L_POSTAL = "";
   &SHIP_DESCR = "";
   &BU_DISTRIB = "";
   &PO_ID_DISTRIB = "";
   &LINE_NBR_DISTRIB = "";
   &SCHED_NBR_DISTRIB = "";
   &DISTRIB_LINE_NUM = "";
   &DLOC = "";
   &BU_REQ = "";
   &REQ_ID = "";
   &REQ_LINE_NBR = "";
   &REQ_SCHED_NBR = "";
   &REQUESTER_ID = "";
   &D_Z_FIRST_NAME = "";
   &D_MIDDLE_NAME = "";
   &D_Z_LAST_NAME = "";
   &D_Z_SMTP = "";
   &D_WS_WORK_PHONE = "";
   &D_ADDR1 = "";
   &D_ADDR2 = "";
   &D_ADDR3 = "";
   &D_ADDR4 = "";
   &D_CO_CD = "";
   &D_CITY = "";
   &D_STATE = "";
   &D_POSTAL = "";
   /* Fields Added by PRASHANT */
   &DESCR = "";
   &VENDOR_LOC = "";
   &ADDRESS_SEQ_NUM = "";
   &REMIT_ADDRESS_SEQ_NUM = "";
   &ADDR_SEQ_NUM_ORDR = "";
   &ADDRESS1 = "";
   &ADDRESS2 = "";
   &ADDRESS3 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &PHONE_TYPE = "";
   &PHONE = "";
   &PHONE_FORMATTED = "";
   &PYMNT_TERMS_CD = "";
   &COUNTRY = "";
   
   
   
End-Function;

/********* End QR2IIN006 *********/
/*-------------------------------------------------------------------------------  
 Desc    : Function to write to a Fixed format flat file
 Input   : Message 
 Output  : Flat File in a predefined folder
 Returns : None
---------------------------------------------------------------------------------*/
Function APFlatFile(&APMsg As Message);
   
   Local File &MYFILE;
   Local Rowset &MSG_Rowset, &MSG_PR_RS, &MSG_CH2_RS, &MSG_CH1_RS, &FILEROWSET;
   Local Row &MSG_PRS_ROW, &MSG_PRS_ROW1;
   Local Record &MSG_PRS_REC, &MSG_PRS_REC1, &RECLINE, &HEADERREC, &TRAILERREC;
   
   Local number &RECORD_COUNT_LEN, &FIELDLENGTH, &DETAILSCNT;
   Local string &COUNTER, &FILECREATE;
   &VENDOR_STATUS = "";
   &VENDOR_TIN = "";
   &NAME1 = "";
   &FILECREATE = "N";
   
   
   /* To check whether any valid data is present to create a file starts */
   &MSG_Rowset = &APMsg.GetRowset();
   For &A0 = 1 To &MSG_Rowset.ActiveRowCount
      &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
      For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
         &MSG_PRS_ROW1 = &MSG_PR_RS.GetRow(&p1);
         &MSG_PRS_REC1 = &MSG_PRS_ROW1.VNDR_LOC_SCROL;
         If Upper(Left(&MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value, 1)) = "R" Or
               Upper(Left(&MSG_PRS_REC1.GetField(Field.DESCR).Value, 2)) = "R*" Then
            &FILECREATE = "Y";
         End-If;
      End-For;
   End-For;
   /* To check whether any valid data is present to create a file ends */
   
   If &FILECREATE = "Y" Then
      Evaluate EO_BATLIB_AET.MSGNAME
      When "Z_AP_VNDR_SYNC_EFF"
         &filename = "/psoft/fscmsys/interface/conversion/in/";
         &MYFILE = GetFile(&filename | "APSync.TXT", "W", %FilePath_Absolute);
         Break;
      When "Z_AP_VNDR_FULLSYNC_EFF"
         &filename = "/psoft/fscmsys/interface/conversion/in/";
         &MYFILE = GetFile(&filename | "APFullSync.TXT", "W", %FilePath_Absolute);
         Break;
      End-Evaluate;
      
      If &MYFILE.IsOpen Then
         If &MYFILE.SetFileLayout(FileLayout.Z_VND_AP_FLY) Then
            &FILEROWSET = &MYFILE.CreateRowset();
            &HEADERREC = &FILEROWSET(1).GetRecord(Record.HEADER);
            &HEADERREC.GetField(Field.RECORD_TYPE).Value = "H";
            &HEADERREC.GetField(Field.Z_FILE_TYPE).Value = "AP UPDATE VENDOR";
            &HEADERREC.GetField(Field.Z_HFILLER).Value = "";
            &MYFILE.WriteRecord(&HEADERREC);
         End-If;
      End-If;
   End-If;
   &MSG_Rowset = &APMsg.GetRowset();
   InitVariables();
   &DETAILSCNT = 0;
   If &FILECREATE = "Y" Then
      
      For &A0 = 1 To &MSG_Rowset.ActiveRowCount
         &SETID = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.SETID).Value;
         &VENDOR_ID = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.VENDOR_ID).Value;
         &VENDOR_STATUS = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.VENDOR_STATUS).Value;
         &NAME1 = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.NAME1).Value;
         
         /* Process Vendor TIN Records */
         &VENDOR_TIN = &MSG_Rowset(&A0).GetRowset(Scroll.VENDOR_ID_NBRS)(1).GetRecord(Record.VENDOR_ID_NBRS).GetField(Field.STD_ID_NUM).Value;
         
         /* Process Vendor Location  - Records */
         
         &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
         For &T1 = 1 To &MSG_PR_RS.ActiveRowCount
            
            &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
            &MSG_PRS_ROW1 = &MSG_PR_RS.GetRow(&T1);
            &MSG_PRS_REC1 = &MSG_PRS_ROW1.VNDR_LOC_SCROL;
            If Upper(Left(&MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value, 1)) = "R" Or
                  Upper(Left(&MSG_PRS_REC1.GetField(Field.DESCR).Value, 2)) = "R*" Then
               &VENDOR_LOC = &MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value;
               &MSG_CH1_RS = &MSG_PR_RS(&T1).GetRowset(Scroll.VENDOR_LOC);
               For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                  &MSG_PRS_ROW = &MSG_CH1_RS.GetRow(&p2);
                  &MSG_PRS_REC = &MSG_PRS_ROW.VENDOR_LOC;
                  /* To get the Remit to Addreses for the Vendor ----*/
                  &REMIT_ADDRESS_SEQ_NUM = &MSG_PRS_REC.GetField(Field.REMIT_ADDR_SEQ_NUM).Value;
                  &PYMNT_TERMS_CD = &MSG_PRS_REC.GetField(Field.PYMNT_TERMS_CD).Value;
                  
                  /* Addresss Details */
                  
                  &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_ADDR_SCROL);
                  For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
                     &MSG_CH1_RS = &MSG_PR_RS(&p1).GetRowset(Scroll.VENDOR_ADDR);
                     For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                        &MSG_PRS_ROW = &MSG_CH1_RS.GetRow(&p2);
                        &MSG_PRS_REC = &MSG_PRS_ROW.VENDOR_ADDR;
                        If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &REMIT_ADDRESS_SEQ_NUM Then
                           &ADDRESS1 = &MSG_PRS_REC.GetField(Field.ADDRESS1).Value;
                           &ADDRESS2 = &MSG_PRS_REC.GetField(Field.ADDRESS2).Value;
                           &ADDRESS3 = &MSG_PRS_REC.GetField(Field.ADDRESS3).Value;
                           &CITY = &MSG_PRS_REC.GetField(Field.CITY).Value;
                           &STATE = &MSG_PRS_REC.GetField(Field.STATE).Value;
                           &COUNTRY = &MSG_PRS_REC.GetField(Field.COUNTRY).Value;
                           &POSTAL = &MSG_PRS_REC.GetField(Field.POSTAL).Value;
                        End-If;
                     End-For;
                  End-For;
                  
                  /* Addresss Phone Details */
                  &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_ADDR_SCROL);
                  For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
                     &MSG_CH1_RS = &MSG_PR_RS.GetRow(&p1).GetRowset(Scroll.VENDOR_ADDR);
                     For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                        &MSG_CH2_RS = &MSG_CH1_RS.GetRow(&p2).GetRowset(Scroll.VENDOR_ADDR_PHN);
                        For &P3 = 1 To &MSG_CH2_RS.ActiveRowCount
                           &MSG_PRS_REC = &MSG_CH2_RS.GetRow(&P3).VENDOR_ADDR_PHN;
                           If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &REMIT_ADDRESS_SEQ_NUM Then
                              If &MSG_PRS_REC.GetField(Field.PHONE_TYPE).Value = "BUSN" Then
                                 &PHONE = &MSG_PRS_REC.GetField(Field.PHONE).Value;
                                 /* For Removing Special Characters from Phone - Starts */
                                 &PHONE = Substitute(&PHONE, "-", "");
                                 &PHONE = Substitute(&PHONE, "/", "");
                                 &PHONE = Substitute(&PHONE, "[", "");
                                 &PHONE = Substitute(&PHONE, "(", "");
                                 &PHONE = Substitute(&PHONE, "]", "");
                                 &PHONE = Substitute(&PHONE, ")", "");
                                 &PHONE_FORMATTED = "";
                                 For &I = 1 To Len(&PHONE)
                                    If Substring(&PHONE, &I, 1) <> " " Then
                                       &PHONE_FORMATTED = &PHONE_FORMATTED | Substring(&PHONE, &I, 1);
                                    End-If;
                                 End-For;
                                 &PHONE = &PHONE_FORMATTED;
                                 
                                 /* For Removing Special Characters from Phone - Ends */
                              End-If;
                           End-If;
                        End-For;
                     End-For;
                  End-For;
                  
                  &RECLINE = &FILEROWSET(1).GetRecord(Record.DETAILS);
                  &RECLINE.GetField(Field.RECORD_TYPE).Value = "D";
                  &RECLINE.GetField(Field.VNDR_LOC).Value = Upper(&VENDOR_LOC);
                  &RECLINE.GetField(Field.VENDOR_STATUS).Value = Upper(&VENDOR_STATUS);
                  &RECLINE.GetField(Field.VENDOR_TIN).Value = Upper(&VENDOR_TIN);
                  &RECLINE.GetField(Field.NAME1).Value = Upper(&NAME1);
                  &RECLINE.GetField(Field.ADDRESS1).Value = Upper(&ADDRESS1);
                  &RECLINE.GetField(Field.ADDRESS2).Value = Upper(&ADDRESS2);
                  &RECLINE.GetField(Field.ADDRESS3).Value = Upper(&ADDRESS3);
                  &RECLINE.GetField(Field.CITY).Value = Upper(&CITY);
                  &RECLINE.GetField(Field.STATE).Value = Upper(&STATE);
                  &RECLINE.GetField(Field.POSTAL).Value = Upper(&POSTAL);
                  &RECLINE.GetField(Field.PHONE).Value = &PHONE;
                  &RECLINE.GetField(Field.PYMNT_TERMS_CD).Value = Upper(&PYMNT_TERMS_CD);
                  &RECLINE.GetField(Field.COUNTRY).Value = Upper(&COUNTRY);
                  &MYFILE.WriteRecord(&RECLINE);
                  &DETAILSCNT = &DETAILSCNT + 1;
                  InitVariables();
               End-For;
            End-If;
         End-For;
      End-For;
      &TRAILERREC = &FILEROWSET(1).GetRecord(Record.TRAILER);
      &TRAILERREC.GetField(Field.RECORD_TYPE).Value = "T";
      
      /* Formating the Trailer Record - Record Count */
      &RECORD_COUNT = &DETAILSCNT + 2;
      &RECORD_COUNT_LEN = Len(&RECORD_COUNT);
      &FIELDLENGTH = &TRAILERREC.GetField(Field.Z_RECORD_CNT).FieldLength;
      If &RECORD_COUNT_LEN < &FIELDLENGTH Then
         For &I = 1 To (&FIELDLENGTH - &RECORD_COUNT_LEN)
            &COUNTER = &COUNTER | "0";
         End-For;
         &COUNTER = &COUNTER | &RECORD_COUNT;
      Else
         &COUNTER = &RECORD_COUNT;
      End-If;
      &TRAILERREC.GetField(Field.Z_RECORD_CNT).Value = &COUNTER;
      &TRAILERREC.GetField(Field.Z_TFILLER).Value = "";
      &MYFILE.WriteRecord(&TRAILERREC);
      &MYFILE.Close();
   End-If;
End-Function;

/*-------------------------------------------------------------------------------  
 Desc    : Function to write to a XMl File for Nextance (Vendor Publish)
 Input   : Message 
 Output  : a xml file
 Returns : None
---------------------------------------------------------------------------------*/

Function VendorNextanceXmlFile(&NTMsg As Message);
   Local XmlDoc &Xml, &ErrorInfo;
   Local Rowset &MSG_Rowset, &MSG_PR_RS, &MSG_CH1_RS, &MSG_CH2_RS;
   Local Row &MSG_PRS_ROW;
   Local Record &MSG_PRS_REC;
   Local datetime &CREATED_DTTM, &LAST_MODIFIED_DATE;
   &VENDOR_STATUS = "";
   &VENDOR_TIN = "";
   &NAME1 = "";
   
   &Xml = CreateXmlDoc("<?xml version='1.0' encoding='UTF-8' standalone='yes'?><docType/>");
   
   &MSG_Rowset = &NTMsg.GetRowset();
   InitVariables();
   For &AO = 1 To &MSG_Rowset.ActiveRowCount
      &SETID = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.SETID).Value;
      &VENDOR_ID = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.VENDOR_ID).Value;
      rem *** Code to populate values for doctype node ******************;
      &Node_party = &Xml.DocumentElement.AddElement("party");
      REM       &Node_party.AddAttribute("ObjectId ", "&AO");
      &Node_party.AddAttribute("ObjectId", "0");
      &Node_party.AddAttribute("docType", "party");
      
      &ADDR_SEQ_NUM_ORDR = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.ADDR_SEQ_NUM_ORDR).Value;
      
      rem *** Type field in nextance is mapped to Sys Audit field in Peoplesoft *** Murali - start;
      &Node_sysAudit = &Node_party.AddElement("sysAudit");
      &Node_createDate = &Node_sysAudit.AddElement("createDate");
      &Node_createDate.nodevalue = "2005-04-07 11:39:18";
      
      &Node_createdBy = &Node_sysAudit.AddElement("createdBy");
      &Node_createdBy.Nodevalue = "admin";
      
      &Node_updateDate = &Node_sysAudit.AddElement("updateDate");
      &Node_updateDate.nodevalue = "2005-04-07 11:43:03";
      
      &Node_updatedBy = &Node_sysAudit.AddElement("updatedBy");
      &Node_updatedBy.Nodevalue = "admin";
      
      &Node_updateCount = &Node_sysAudit.AddElement("updateCount");
      &Node_updateCount.nodevalue = 0;
      
      rem *** Name field in nextance is mapped to Vendor Name1 in Peoplesoft ***;
      &Node_name = &Node_party.AddElement("name");
      &Node_name.Nodevalue = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.NAME1).Value;
      &Node_name = &Node_party.AddElement("description");
      rem *** Type field in nextance is mapped to Sys Audit field in Peoplesoft *** Murali - End;
      
      
      rem *** Type field in nextance is mapped to Phone type field in Peoplesoft ***;
      &Node_partyTypes = &Node_party.AddElement("partyTypes");
      &Node_partyType = &Node_partyTypes.AddElement("partyType");
      &Node_partyType.AddAttribute("sysId", "0");
      &Node_type = &Node_partyType.Addelement("type");
      &Node_type.Nodevalue = "Internal";
      
      
      rem *** Type field in nextance is mapped to Backround in Peoplesoft *** Murali - start;
      &Node_background = &Node_party.AddElement("background");
      &Node_ownershipType = &Node_background.AddElement("ownershipType");
      &Node_yearEstablished = &Node_background.AddElement("yearEstablished");
      &Node_businessClassification = &Node_background.AddElement("businessClassification");
      &Node_noOfEmployees = &Node_background.AddElement("noOfEmployees");
      &Node_geographicCoverage = &Node_background.AddElement("geographicCoverage");
      &Node_annualSalesVolume = &Node_background.AddElement("annualSalesVolume ");
      
      &Node_OrgLevel = &Node_party.AddElement("orgLevel");
      &Node_OrgLevel.Nodevalue = "Corporation";
      
      &Node_url = &Node_party.AddElement("url");
      rem *** Type field in nextance is mapped to Backround in Peoplesoft *** Murali - End;
      
      rem *** enterpriseId field in nextance is mapped to VendorID field in Peoplesoft ***;
      
      &Node_enterpriseId = &Node_party.AddElement("enterpriseId");
      &Node_enterpriseId.Nodevalue = &VENDOR_ID;
      
      rem *** Type field in nextance is mapped to stateOfIncorporation in Peoplesoft *** Murali - start;
      &Node_stateOfIncorporation = &Node_party.AddElement("stateOfIncorporation");
      &Node_stcode = &Node_stateOfIncorporation.AddElement("code");
      rem *** Type field in nextance is mapped to stateOfIncorporation in Peoplesoft *** Murali - End;
      
      rem *** Type field in nextance is mapped to countryOfIncorporation in Peoplesoft *** Murali - start;
      &Node_countryOfIncorporation = &Node_party.AddElement("countryOfIncorporation");
      &Node_cycode = &Node_countryOfIncorporation.AddElement("code");
      rem *** Type field in nextance is mapped to countryOfIncorporation in Peoplesoft *** Murali - 
      
      rem *** isActive field in nextance is mapped to Status field in Peoplesoft ***;
      &Node_isActive = &Node_party.AddElement("isActive");
      
      &VENDOR_STATUS = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.VENDOR_STATUS).Value;
      Evaluate &VENDOR_STATUS
      When "A"
         &Node_isActive.Nodevalue = "Yes";
         Break;
      When-Other
         &Node_isActive.Nodevalue = "No";
         Break;
      End-Evaluate;
      
      rem *** Tag for isLegalEntity *** ;
      &Node_isLegalEntity = &Node_party.AddElement("isLegalEntity");
      &Node_isLegalEntity.nodevalue = "Yes";
      
      rem *** Tag for isInstalledParty *** ;
      &Node_isInternalEntity = &Node_party.AddElement("isInternalEntity");
      &Node_isInternalEntity.nodevalue = "Yes";
      
      rem *** Tag for isLegalEntity *** ;
      &Node_isInstalledParty = &Node_party.AddElement("isInstalledParty");
      
      rem *** Tag for parentEntity  - start*** ;
      &Node_parentEntity = &Node_party.AddElement("parentEntity");
      &Node_parentEntity.addattribute("docType", "party");
      &Node_parentEntity.addattribute("objectId", "0");
      rem murali
      rem *** Tag for parentEntity  - end *** ;
      
      rem *** Tag for corporateEntity   - start*** ;
      &Node_corporateEntity = &Node_party.AddElement("corporateEntity");
      &Node_corporateEntity.addattribute("docType", "party");
      &Node_corporateEntity.addattribute("objectId", "0");
      rem *** Tag for parentEntity d - end *** ;
      
      rem *** Tag for  synonyms - start*** ;
      &Node_synonyms = &Node_party.AddElement("synonyms");
      &Node_synonym = &Node_synonyms.AddElement("synonym");
      &Node_synonym.addattribute("Type", "Also known as");
      &Node_synonym.nodevalue = "Qwest";
      
      rem *** Tag for synonyms  - End*** ;
      
      /* Addresss Details */
      
      &MSG_PR_RS = &MSG_Rowset(&AO).GetRowset(Scroll.VNDR_ADDR_SCROL);
      For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
         &MSG_CH1_RS = &MSG_PR_RS(&p1).GetRowset(Scroll.VENDOR_ADDR);
         For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
            &MSG_PRS_ROW = &MSG_CH1_RS.GetRow(&p2);
            &MSG_PRS_REC = &MSG_PRS_ROW.VENDOR_ADDR;
            If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &ADDR_SEQ_NUM_ORDR Then
               &ADDRESS1 = &MSG_PRS_REC.GetField(Field.ADDRESS1).Value;
               &ADDRESS2 = &MSG_PRS_REC.GetField(Field.ADDRESS2).Value;
               &ADDRESS3 = &MSG_PRS_REC.GetField(Field.ADDRESS3).Value;
               &CITY = &MSG_PRS_REC.GetField(Field.CITY).Value;
               &STATE = &MSG_PRS_REC.GetField(Field.STATE).Value;
               &COUNTRY = &MSG_PRS_REC.GetField(Field.COUNTRY).Value;
               &POSTAL = &MSG_PRS_REC.GetField(Field.POSTAL).Value;
            End-If;
         End-For;
      End-For;
      
      rem *** Code to populate values for mailadresses  ***********;
      &Node_addresses = &Node_party.AddElement("addresses");
      &Node_mailAddresses = &Node_addresses.AddElement("mailAddresses");
      &Node_mailAddress = &Node_mailAddresses.AddElement("mailAddress");
      
      &Node_mailAddress.AddAttribute("type", "PrincipalPlaceOfBiz");
      rem *** street field in nextance is mapped to Address1 field in Peoplesoft ***;
      &Node_street1 = &Node_mailAddress.AddElement("street");
      &Node_street1.Nodevalue = &ADDRESS1;
      rem *** street field in nextance is mapped to Address2 field in Peoplesoft ***;
      &Node_street2 = &Node_mailAddress.AddElement("street");
      &Node_street2.Nodevalue = &ADDRESS2;
      rem *** street field in nextance is mapped to Address3 field in Peoplesoft ***;
      &Node_street3 = &Node_mailAddress.AddElement("street");
      &Node_street3.Nodevalue = &ADDRESS3;
      rem *** city field in nextance is mapped to City field in Peoplesoft ***;
      &Node_city = &Node_mailAddress.AddElement("city");
      &Node_city.Nodevalue = &CITY;
      rem *** stateProvincecode field in nextance is mapped to State field in Peoplesoft ***;
      &Node_stateProvince = &Node_mailAddress.AddElement("stateProvince");
      &Node_Code = &Node_stateProvince.AddElement("code");
      &Node_Code.Nodevalue = &STATE;
      rem *** postalCodeZip field in nextance is mapped to ZipCode field in Peoplesoft ***;
      &Node_postalCodeZip = &Node_mailAddress.AddElement("postalCodeZip");
      &Node_postalCodeZip.Nodevalue = &POSTAL;
      rem *** countrycode field in nextance is mapped to Country Code field in Peoplesoft ***;
      &Node_Country = &Node_mailAddress.AddElement("country");
      &Node_CountryCode = &Node_Country.AddElement("code");
      &Node_CountryCode.Nodevalue = &COUNTRY;
      
      rem *** Tag for email addresses   - start*** ;
      &Node_emailAddresses = &Node_addresses.AddElement("emailAddresses");
      &Node_emailAddress = &Node_emailAddresses.AddElement("emailAddress");
      &Node_emailAddress.AddAttribute("email", "");
      &Node_emailAddress.AddAttribute("type", "");
      
      rem *** Tag for email addresses   - End*** ;
      
      rem *** Code to populate values for phone address *****************;
      rem *** phoneAddress field in nextance is mapped to Telephone field in Peoplesoft ***;
      
      &MSG_PR_RS = &MSG_Rowset(&AO).GetRowset(Scroll.VNDR_ADDR_SCROL);
      For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
         &MSG_CH1_RS = &MSG_PR_RS.GetRow(&p1).GetRowset(Scroll.VENDOR_ADDR);
         For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
            &MSG_CH2_RS = &MSG_CH1_RS.GetRow(&p2).GetRowset(Scroll.VENDOR_ADDR_PHN);
            For &P3 = 1 To &MSG_CH2_RS.ActiveRowCount
               &MSG_PRS_REC = &MSG_CH2_RS.GetRow(&P3).VENDOR_ADDR_PHN;
               If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &ADDR_SEQ_NUM_ORDR Then
                  If &MSG_PRS_REC.GetField(Field.PHONE_TYPE).Value = "BUSN" Then
                     &PHONE = &MSG_PRS_REC.GetField(Field.PHONE).Value
                  End-If;
               End-If;
            End-For;
         End-For;
      End-For;
      
      &Node_phoneAddresses = &Node_addresses.AddElement("phoneAddresses");
      &Node_phoneAddress = &Node_phoneAddresses.AddElement("phoneAddress");
      &Node_phoneAddress.addattribute("phone", &PHONE);
      &Node_phoneAddress.addattribute("type", "Business");
      
      rem *** Tag for fax addresses   - start*** ;
      &Node_faxAddresses = &Node_addresses.AddElement("faxAddresses");
      &Node_faxAddress = &Node_faxAddresses.AddElement("faxAddress");
      &Node_faxAddress.AddAttribute("fax", "");
      &Node_faxAddress.AddAttribute("type", "");
      
      rem *** Tag for fax addresses    - end *** ;
      
      rem *** Tag for commercialInfo   - start*** ;
      &VENDOR_TIN = &MSG_Rowset(&AO).GetRowset(Scroll.VENDOR_ID_NBRS)(1).GetRecord(Record.VENDOR_ID_NBRS).GetField(Field.STD_ID_NUM).Value;
      &Node_commercialinfo = &Node_party.AddElement("commercialInfo");
      &Node_DUNS = &Node_commercialinfo.AddElement("DUNS");
      &Node_SICCode = &Node_commercialinfo.AddElement("SICCode");
      &Node_NAICSCode = &Node_commercialinfo.AddElement("NAICSCode");
      &Node_dnbRating = &Node_commercialinfo.AddElement("dnbRating");
      &Node_TIN = &Node_commercialinfo.AddElement("TIN");
      &Node_TIN.NodeValue = &VENDOR_TIN;
      &Node_TINType = &Node_commercialinfo.AddElement("TINType");
      rem *** Tag for commercialInfo   - ends*** ;
      
      rem *** Tag for diversityInfo   - start*** ;
      &Node_diversityInfo = &Node_party.AddElement("diversityInfo");
      &Node_SBE = &Node_diversityInfo.AddElement("SBE");
      &Node_MSBE = &Node_diversityInfo.AddElement("MSBE");
      &Node_WSBE = &Node_diversityInfo.AddElement("WSBE");
      &Node_VSBE = &Node_diversityInfo.AddElement("VSBE");
      &Node_SDBC = &Node_diversityInfo.AddElement("SDBC");
      &Node_HSBC = &Node_diversityInfo.AddElement("HSBC");
      &Node_PCO = &Node_diversityInfo.AddElement("PCO");
      
      &Node_minorityCertifications = &Node_diversityInfo.AddElement("minorityCertifications");
      &Node_attachment = &Node_minorityCertifications.AddElement("attachment");
      &Node_attachment.AddAttribute("sysId", "0");
      &Node_attachment.AddAttribute("type", "");
      &Node_docName = &Node_attachment.AddElement("docName");
      &Node_docDescription = &Node_attachment.AddElement("docDescription");
      &Node_docVersion = &Node_attachment.AddElement("docVersion");
      &Node_docLocation = &Node_attachment.AddElement("docLocation");
      &Node_docContentName = &Node_attachment.AddElement("docContentName");
      &Node_docContentType = &Node_attachment.AddElement("docContentType");
      &Node_docIsInternal = &Node_attachment.AddElement("docIsInternal");
      &Node_docIsInternal.nodevalue = "false";
      &Node_docAttachmentDate = &Node_attachment.AddElement("docAttachmentDate");
      &Node_docAttachedBy = &Node_attachment.AddElement("docAttachedBy");
      
      &Node_diversityCertifications = &Node_diversityInfo.AddElement("diversityCertifications");
      &Node_diversityCertification = &Node_diversityCertifications.AddElement("diversityCertification");
      &Node_diversityCertification.AddAttribute("sysId", "0");
      &Node_agency = &Node_diversityCertification.AddElement("agency");
      &Node_certificationDate = &Node_diversityCertification.AddElement("certificationDate");
      &Node_expirationDate = &Node_diversityCertification.AddElement("expirationDate");
      
      rem *** Tag for diversityInfo   - ends*** ;
      
      rem *** Tag for userDefinedFields   - start*** ;
      &Node_userDefinedFields = &Node_party.AddElement("userDefinedFields");
      &Node_userDefinedField = &Node_userDefinedFields.AddElement("userDefinedField");
      &Node_userDefinedField.AddAttribute("sysId", "0");
      
      &Node_fieldName = &Node_userDefinedField.AddElement("fieldName");
      &Node_fieldValue = &Node_userDefinedField.AddElement("fieldValue");
      rem *** Tag for userDefinedFields   - ends*** ;
      
      
      rem *** Tag for diversityInfo   - ends*** ;
      
      rem *** Tag for attachments   - start*** ;
      &Node_attachments = &Node_party.AddElement("attachments");
      &Node_attachment = &Node_attachments.AddElement("attachment");
      &Node_attachment.AddAttribute("sysId", "0");
      &Node_attachment.AddAttribute("type", "");
      
      &Node_docName = &Node_attachment.AddElement("docName");
      &Node_docDescription = &Node_attachment.AddElement("docDescription");
      &Node_docVersion = &Node_attachment.AddElement("docVersion");
      &Node_docLocation = &Node_attachment.AddElement("docLocation");
      &Node_docContentName = &Node_attachment.AddElement("docContentName");
      &Node_docContentType = &Node_attachment.AddElement("docContentType");
      &Node_docIsInternal = &Node_attachment.AddElement("docIsInternal");
      &Node_docIsInternal.nodevalue = "false";
      &Node_docAttachmentDate = &Node_attachment.AddElement("docAttachmentDate");
      &Node_docAttachedBy = &Node_attachment.AddElement("docAttachedBy");
      rem *** Tag for attachments   - ends*** ;
      
      rem *** Tag for Status  *** ;
      &Node_status = &Node_party.AddElement("status");
      rem *** Tag for supplierRelationship   - start*** ;
      &Node_supplierRelationship = &Node_party.AddElement("supplierRelationship");
      &Node_supplierSince = &Node_supplierRelationship.AddElement("supplierSince");
      &Node_currentSupplierClass = &Node_supplierRelationship.AddElement("currentSupplierClass");
      &Node_currentClassSince = &Node_supplierRelationship.AddElement("currentClassSince");
      
      rem *** Tag for supplierRelationship   - ends*** ;
      
      
      rem *** Tag for financialInformation   - start*** ;
      &Node_financialInformation = &Node_party.AddElement("financialInformation");
      &Node_fiscalYearEnding = &Node_financialInformation.AddElement("fiscalYearEnding");
      &Node_primaryCurrency = &Node_financialInformation.AddElement("primaryCurrency");
      &Node_bankruptcyFiled = &Node_financialInformation.AddElement("bankruptcyFiled");
      &Node_bankruptcyYear = &Node_financialInformation.AddElement("bankruptcyYear");
      &Node_chapter = &Node_financialInformation.AddElement("chapter");
      &Node_isReceivership = &Node_financialInformation.AddElement("isReceivership");
      &Node_receiverName = &Node_financialInformation.AddElement("receiverName");
      
      rem *** Tag for financialInformation   - ends*** ;
      
      rem *** Tag for financialDetails   - start*** ;
      &Node_financialDetails = &Node_party.AddElement("financialDetails");
      &Node_financialDetail = &Node_financialDetails.AddElement("financialDetail");
      &Node_financialDetail.AddAttribute("sysId", "0");
      &Node_fiscalYear = &Node_financialDetail.AddElement("fiscalYear");
      &Node_revenue = &Node_financialDetail.AddElement("revenue");
      &Node_revenue.AddAttribute("currency", "");
      &Node_revenue.nodevalue = "0.0";
      &Node_profitLoss = &Node_financialDetail.AddElement("profitLoss");
      &Node_profitLoss.AddAttribute("currency", "");
      &Node_profitLoss.AddAttribute("isProfit", "");
      &Node_profitLoss.nodevalue = "0.0";
      &Node_netWorth = &Node_financialDetail.AddElement("netWorth");
      &Node_netWorth.AddAttribute("currency", "");
      &Node_netWorth.nodevalue = "0.0";
      &Node_currentAssets = &Node_financialDetail.AddElement("currentAssets");
      &Node_currentAssets.AddAttribute("currency", "");
      &Node_currentAssets.nodevalue = "0.0";
      &Node_currentLiabilities = &Node_financialDetail.AddElement("currentLiabilities");
      &Node_currentLiabilities.AddAttribute("currency", "");
      &Node_currentLiabilities.nodevalue = "0.0";
      
      rem *** Tag for financialDetails   - ends*** ;
      
      rem *** Tag for bankingReference   - start*** ;
      &Node_bankingReference = &Node_party.AddElement("bankingReference");
      &Node_primaryRelationship = &Node_bankingReference.AddElement("primaryRelationship");
      &Node_accountOfficer = &Node_bankingReference.AddElement("accountOfficer");
      &Node_officerPhone = &Node_bankingReference.AddElement("officerPhone");
      &Node_address = &Node_bankingReference.AddElement("address");
      &Node_address.AddAttribute("preferenceNumber", "0");
      &Node_address.AddAttribute("type", "");
      &Node_streetbr1 = &Node_address.AddElement("street");
      &Node_streetbr2 = &Node_address.AddElement("street");
      &Node_streetbr3 = &Node_address.AddElement("street");
      &Node_citybr = &Node_address.AddElement("city");
      &Node_stateProvince = &Node_address.AddElement("stateProvince");
      &Node_codebrst = &Node_stateProvince.AddElement("code");
      &Node_postalCodeZip = &Node_address.AddElement("postalCodeZip");
      &Node_Country = &Node_address.AddElement("country");
      &Node_codebrcy = &Node_Country.AddElement("code");
      
      rem *** Tag for bankingReference   - ends*** ;
      
      rem *** Tag for productOfferings   - start*** ;
      
      &Node_productOfferings = &Node_party.AddElement("productOfferings");
      &Node_productOffering = &Node_productOfferings.AddElement("productOffering");
      &Node_productOffering.AddAttribute("sysId", "0");
      &Node_UNSPSCRef = &Node_productOffering.AddElement("UNSPSCRef");
      &Node_UNSPSCCode = &Node_UNSPSCRef.AddElement("UNSPSCCode");
      &Node_UNSPSCCode.nodevalue = "0";
      rem *** Tag for productOfferings   - ends*** ;
      
      rem *** Tag for products   - start*** ;
      &Node_products = &Node_party.AddElement("products");
      &Node_product = &Node_products.AddElement("product");
      &Node_product.AddAttribute("sysId", "0");
      &Node_productKey = &Node_product.AddElement("productKey");
      &Node_productKey.AddAttribute("docType", "product");
      &Node_productKey.AddAttribute("objectId", "0");
      rem *** Tag for products   - ends *** ;
      
      rem *** Tag for narratives   - start*** ;
      &Node_narratives = &Node_party.AddElement("narratives");
      &Node_narrative = &Node_narratives.AddElement("narrative");
      &Node_narrative.AddAttribute("sysId", "0");
      &Node_narrativeType = &Node_narrative.AddElement("narrativeType");
      &Node_enteredBy = &Node_narrative.AddElement("enteredBy");
      &Node_loginId = &Node_enteredBy.AddElement("loginId");
      &Node_date = &Node_narrative.AddElement("date");
      &Node_text = &Node_narrative.AddElement("text");
      rem *** Tag for narratives   - ends*** ;
   End-For;
   
   &VNDR_NEXT_MSGNAME = "MESSAGE." | EO_BATLIB_AET.MSGNAME;
   
   /* ERROR NOTIFICATION */
   
   /*&ErrorInfo = PingNode("PSFT_FTP");
   &Root = &ErrorInfo.DocumentElement;
   &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
   For &M = 1 To &MsgNodeArray.Len
      &MsgNode = &MsgNodeArray [&M];
      &MsgText = &MsgNode.FindNode("status").NodeValue;
      If &MsgText = "Success (117,73)" Then
         &RET = PublishXmlDoc(&Xml, @(&VNDR_NEXT_MSGNAME), Node.PSFT_FTP);
      Else
         Error ("Web Server not available for web service");
      End-If;
   End-For;*/
   /*PUBLISH MESSAGE ON NODE*/
   &RET = PublishXmlDoc(&Xml, @(&VNDR_NEXT_MSGNAME), Node.PSFT_FTP);
End-Function;

/********* End QR2IPO004 *********/
/********* Start QR2IIN006 *********/

/*********************************************
Added Function to Publish XML file to Nextance
**********************************************/

Function ItemNextanceXmlFile(&NEXT_Msg As Message);
   
   Local Rowset &NEXT_MSG_Rowset, &NEXT_ITM_MFG_RS;
   Local XmlDoc &ErrorInfo;
   Local Row &NEXT_MSG_ROW;
   Local Record &NEXT_MSG_REC;
   
   &NEXTxmlDoc = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><docType/>");
   /*&NEXTxmldata = "<?xml version='1.0'encoding='UTF-8'standalone='yes'?>";
   &NEXTxmlDoc = CreateXmlDoc(&NEXTxmldata);
   &NEXTrootNode = &NEXTxmlDoc.DocumentElement.AddElement("docType");*/
   
   &NEXT_MSG_Rowset = &NEXT_Msg.GetRowset();
   InitVariables();
   For &NEXT0 = 1 To &NEXT_MSG_Rowset.ActiveRowCount
      
      &AddNode0 = &NEXTxmlDoc.DocumentElement.AddElement("product");
      &AddNode0.AddAttribute("docType", "product");
      &AddNode0.AddAttribute("ObjectId", &NEXT0);
      
      /******************* 
	   Process Item Master
	   *******************/
      
      &INV_ITEM_ID = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.INV_ITEM_ID).Value;
      &ITM_STATUS_CURRENT = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.ITM_STATUS_CURRENT).Value;
      &DATE_CREATED = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.DATE_ADDED).Value;
      &CREATED_BY = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.ORIG_OPRID).Value;
      &DATE_UPDATED = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.LAST_DTTM_UPDATE).Value;
      &UPDATED_BY = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.LAST_MAINT_OPRID).Value;
      &UPDATE_COUNT = 0;
      Evaluate &ITM_STATUS_CURRENT
      When "1"
      When "7"
         &ITM_STATUS_CURRENT = "Yes";
         Break;
      When "4"
      When "3"
         &ITM_STATUS_CURRENT = "No";
         Break;
      End-Evaluate;
      
      &ITEM_DESCR0 = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.DESCR).Value;
      &STD_UOM = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.UNIT_MEASURE_STD).Value;
      &UPD_DATE = DatePart(&DATE_UPDATED) | " " | Substitute(Substring(String(TimePart(&DATE_UPDATED)), 1, 8), ".", ":");
      /* SYSAUDIT */
      
      &AddNode_AUDIT = &AddNode0.AddElement("sysAudit");
      &AddNode_CREATEDATE = &AddNode_AUDIT.AddElement("createDate");
      &AddNode_CREATEDATE.NodeValue = &DATE_CREATED;
      &AddNode_CREATED_BY = &AddNode_AUDIT.AddElement("createdBy");
      &AddNode_CREATED_BY.NodeValue = &CREATED_BY;
      &AddNode_DATE_UPDATED = &AddNode_AUDIT.AddElement("updateDate");
      &AddNode_DATE_UPDATED.NodeValue = &UPD_DATE;
      &AddNode_UPDATED_BY = &AddNode_AUDIT.AddElement("updatedBy");
      &AddNode_UPDATED_BY.NodeValue = &UPDATED_BY;
      &AddNode_UPD_COUNT = &AddNode_AUDIT.AddElement("updateCount");
      &AddNode_UPD_COUNT.NodeValue = &UPDATE_COUNT;
      
      
      
      /*Create TAGS for ITEM_ID and ITEM DESCR*/
      
      &AddNode_PDT_NO = &AddNode0.AddElement("productNo");
      &AddNode_PDT_NO.NodeValue = &INV_ITEM_ID;
      &AddNode_PDT_NAME = &AddNode0.AddElement("productName");
      &AddNode_PDT_NAME.NodeValue = &ITEM_DESCR0;
      &AddNode_PDT_VER = &AddNode0.AddElement("productVersion");
      &AddNode_PDT_VER.NodeValue = "1";
      &AddNode_DESCR = &AddNode0.AddElement("description");
      &AddNode_DESCR.NodeValue = &ITEM_DESCR0;
      
      /*Create Additional tags*/
      
      &AddNode_Owner = &AddNode0.AddElement("owner");
      &AddNode_Owner.AddAttribute("docType", "party");
      &AddNode_Owner.AddAttribute("objectId", "0");
      &AddNode_PDT_GRP = &AddNode0.AddElement("productGroup");
      &AddNode_PDT_GRP.AddAttribute("docType", "productGroup");
      &AddNode_PDT_GRP.AddAttribute("objectId", "0");
      
      /* PRODUCT BLOCK */
      
      &AddNode_PDT_IDENT_S = &AddNode0.AddElement("productIdentifiers");
      &AddNode_PDT_IDENT = &AddNode_PDT_IDENT_S.AddElement("productIdentifier");
      &AddNode_PDT_IDENT.AddAttribute("sysId", "0");
      &AddNode_IDENT_TYPE = &AddNode_PDT_IDENT.AddElement("identifierType");
      &AddNode_IDENT_VALUE = &AddNode_PDT_IDENT.AddElement("identifierValue");
      
      
      /*Create Status TAG*/
      
      &AddNode_STATUS = &AddNode0.AddElement("isActive");
      &AddNode_STATUS.NodeValue = &ITM_STATUS_CURRENT;
      
      /* ATTACHMENT BLOCK */
      
      &AddNode_ATTACH_S = &AddNode0.AddElement("attachments");
      &AddNode_ATTACH = &AddNode_ATTACH_S.AddElement("attachment");
      &AddNode_ATTACH.AddAttribute("sysId", "0");
      &AddNode_ATTACH.AddAttribute("type", "");
      
      &AddNode_DOC_NAME = &AddNode_ATTACH.AddElement("docName");
      &AddNode_DOC_DESCR = &AddNode_ATTACH.AddElement("docDescription");
      &AddNode_DOC_VERSION = &AddNode_ATTACH.AddElement("docVersion");
      &AddNode_DOC_LOCATION = &AddNode_ATTACH.AddElement("docLocation");
      &AddNode_DOC_CONT_NAME = &AddNode_ATTACH.AddElement("docContentName");
      &AddNode_DOC_CONT_TYPE = &AddNode_ATTACH.AddElement("docContentType");
      &AddNode_DOC_IS_INT = &AddNode_ATTACH.AddElement("docIsInternal");
      &AddNode_DOC_IS_INT.NodeValue = "false";
      &AddNode_DOC_ATT_DATE = &AddNode_ATTACH.AddElement("docAttachmentDate");
      &AddNode_DOC_ATT_BY = &AddNode_ATTACH.AddElement("docAttachedBy");
      
      /* USER DEFINED FIELDS BLOCK */
      
      &AddNode_USER_FIELDS = &AddNode0.AddElement("userDefinedfields");
      &AddNode_USER_FIELD = &AddNode_USER_FIELDS.AddElement("userDefinedField");
      &AddNode_USER_FIELD.AddAttribute("sysId", "0");
      &AddNode_FIELD_NAME = &AddNode_USER_FIELD.AddElement("fieldName");
      &AddNode_FIELD_VALUE = &AddNode_USER_FIELD.AddElement("fieldValue");
      
      /* Reference No */
      
      &AddNode_REF_NO = &AddNode0.AddElement("referenceNo");
      &AddNode_STATUS = &AddNode0.AddElement("status");
      
      /**************************
	   Process Item Manufacturers
	   **************************/
      
      &NEXT_ITM_MFG_RS = &NEXT_MSG_Rowset(&NEXT0).GetRowset(Scroll.Z_NEX_LVL1_E_VW);
      For &NEXT01 = 1 To &NEXT_ITM_MFG_RS.ActiveRowCount
         &NEXT_MSG_ROW = &NEXT_ITM_MFG_RS.GetRow(&NEXT01);
         &NEXT_MSG_REC = &NEXT_MSG_ROW.Z_NEX_LVL1_E_VW;
         &MFG_ITM_ID = &NEXT_MSG_REC.GetField(Field.MFG_ITM_ID).Value;
         
         /*Create MFG_ITM_ID TAG*/
         
         &AddNode_MPN = &AddNode0.AddElement("manufacturerPartNumber");
         &AddNode_MPN.NodeValue = &MFG_ITM_ID;
         &AddNode_STD_UOM = &AddNode0.AddElement("standardUOM");
         &AddNode_STD_UOM.NodeValue = &STD_UOM;
      End-For;
      
      /* UNSPSC BLOCK */
      
      &AddNode_UNSPSC_RF = &AddNode0.AddElement("UNSPSCRef");
      &AddNode_UNSPSC_CD = &AddNode_UNSPSC_RF.AddElement("UNSPSCCode");
      &AddNode_UNSPSC_CD.NodeValue = "0";
      
      /* RELATED IP */
      
      &AddNode_REL_IP_S = &AddNode0.AddElement("relatedIPs");
      &AddNode_REL_IP = &AddNode_REL_IP_S.AddElement("relatedIP");
      &AddNode_REL_IP.AddAttribute("sysId", "0");
      &AddNode_IP_KEY = &AddNode_REL_IP.AddElement("ipKey");
      &AddNode_IP_KEY.AddAttribute("docType", "");
      &AddNode_IP_KEY.AddAttribute("objectId", "0");
      
      /*Initialize Variables*/
      
      InitVariables();
   End-For;
   &NEXT_STR = &NEXTxmlDoc.GenFormattedXmlString();
   &NEXT_MSGNAME = "MESSAGE." | EO_BATLIB_AET.MSGNAME;
   
   
   /* VICTOR's Response */
   /* Set ConnectorName and Connector ClassName */
   &NEXT_Msg.IBInfo.IBConnectorInfo.ConnectorName = "FTPTARGET";
   &NEXT_Msg.IBInfo.IBConnectorInfo.ConnectorClassName = "FTPTargetConnector";
   /* Set the FTP connector properties in the ConnectorInfo */
   /* Mehtod name can be either Get or GetDirlist.  */
   &yo = &NEXT_Msg.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "PUT", %Property);
   &yo = &NEXT_Msg.IBInfo.IBConnectorInfo.AddConnectorProperties("HOSTNAME", "ftp.peoplesoft.com", %Property);
   &yo = &NEXT_Msg.IBInfo.IBConnectorInfo.AddConnectorProperties("USERNAME", "crmcust", %Property);
   /*  Encrypt the password */
   Local JavaObject &pscipher = CreateJavaObject("com.peoplesoft.pt.integrationgateway.common.EncryptPassword");
   &encPassword = &pscipher.encryptPassword("H0neyb3353");
   &pscipher = Null;
   &yo = &NEXT_Msg.IBInfo.IBConnectorInfo.AddConnectorProperties("PASSWORD", &encPassword, %Property);
   &yo = &NEXT_Msg.IBInfo.IBConnectorInfo.AddConnectorProperties("DIRECTORY", "/incoming/CRM/Daily/GregSimpson/Filenet", %Property);
   /* Do Connector Request */
   &MSG2 = ConnectorRequest(&NEXT_Msg);
   <*
   /* Get XMLDoc from MSG2*/
   &fileListXmlDoc = &MSG2.GetXmlDoc();
   /*Parse the XMLDoc. Structure of the DirList Message is <DirList>
     <File name="sample.bat">
        <Date></Date>
        <Size>1234</Size>
        <Time></Time>
        <isFile>True/False</isFile>
     </File>
   </DirList>*/
   
   &XmlNode = &fileListXmlDoc.DocumentElement.FindNode("File ");
   /* Get the file name */
   &filename = &XmlNode.NodeValue;
   /* Get the file name from the Remote FTPServer */
   &MSG = CreateMessage(Message.QE_FLIGHTPLAN_UNSTRUCT);
   /* Set ConnectorName and Connector ClassName */
   &MSG.IBInfo.IBConnectorInfo.ConnectorName = "FTPTARGET";
   &MSG.IBInfo.IBConnectorInfo.ConnectorClassName = "FTPTargetConnector";
   /* Set the FTP connector properties in the ConnectorInfo */
   /* Mehtod name can be either Get */
   &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "PUT", %Property);
   &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FILENAME", &filename, %Property);
   &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("HOSTNAME", "ftp.peoplesoft.com", %Property);
   &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("USERNAME", "crmcust", %Property);
   /*  Encrypt the password */
   &pscipher = CreateJavaObject("com.peoplesoft.pt.integrationgateway.common.EncryptPassword");
   &encPassword = &pscipher.encryptPassword("H0neyb3353");
   &pscipher = Null;
   &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("PASSWORD", &encPassword, %Property);
   &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("DIRECTORY", "/incoming/CRM/Daily/GregSimpson/Filenet", %Property);
   /* Do Connector Request */
   &MSG3 = ConnectorRequest(&MSG);
   *>
   /* VICTOR's Response */
   
   /* CHECK NODE */
   
   &ErrorInfo = PingNode("PSFT_FTP");
   &Root = &ErrorInfo.DocumentElement;
   &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
   For &M = 1 To &MsgNodeArray.Len
      &MsgNode = &MsgNodeArray [&M];
      &MsgText = &MsgNode.FindNode("status").NodeValue;
      If &MsgText = "Success (117,73)" Then
         /*PUBLISH MESSAGE ON NODE*/
         &NEXT_RET = PublishXmlDoc(&NEXTxmlDoc, @(&NEXT_MSGNAME), Node.PSFT_FTP);
      Else
         Error ("Web Server not available for web service");
      End-If;
   End-For;
   
   REM &NEXT_RET = PublishXmlDoc(&NEXTxmlDoc, @(&NEXT_MSGNAME), Node.PSFT_FTP);
End-Function;

/*-------------------------------------------------------------------------------  
 Desc    : Check Chunk Field Values.
 Input   : Level 0 record, breakfield array, chunk value array
 Output  : Chunk value 
 Returns : 
---------------------------------------------------------------------------------*/
Function CheckChunkValues(&REC_SAVE As Record, &REC_OLD As Record) Returns boolean;
   &KEYCHANGE = False;
   &I = 0;
   While &ARY_BREAKFLD.Next(&I)
      &FIELD_SAVE = &REC_SAVE.GetField(@("FIELD." | &ARY_BREAKFLD [&I]));
      &FIELD_OLD = &REC_OLD.GetField(@("FIELD." | &ARY_BREAKFLD [&I]));
      
      If &FIELD_SAVE.Value <> &FIELD_OLD.Value Then
         
         /*     If &REC_SAVE.GetField(@("FIELD." | &ARY_BREAKFLD[&I])).Value <> &REC_OLD.GetField(@("FIELD." | &ARY_BREAKFLD[&I])).Value Then
 */
         &KEYCHANGE = True;
         Break;
      End-If;
   End-While;
   Return &KEYCHANGE
End-Function;



/************************/
/*       Function       */
/*  Check if child row  */
/************************/
Function isChildRow(&REC_PARENT As Record, &REC_CHILD As Record, &PIDX As number, &CIDX As number) Returns number;
   
   If &ARY_STATUS [&CIDX] = "B" Then
      Return - 1;
   Else
      If &ARY_STATUS [&CIDX] = "E" Then
         Return 1;
      End-If;
   End-If;
   
   &ARY_KEYSIDX = &ARY_ARY_KEYSIDX [&PIDX];
   
   For &I = 1 To &ARY_KEYSIDX.Len;
      &PARENTF = &REC_PARENT.GetField(&ARY_KEYSIDX [&I]);
      &CURRNTF = &REC_CHILD.GetField(&ARY_KEYSIDX [&I]);
      
      If &PARENTF.value > &CURRNTF.value Then
         Return - 1;
      Else
         If &PARENTF.value < &CURRNTF.value Then
            Return 1;
         End-If;
      End-If;
   End-For;
   
   Return 0;
   
End-Function;



/************************/
/*       Function       */
/*     Get Next Row     */
/************************/
Function getNextRow(&REC_CHILD As Record, &CIDX As number);
   
   If Not &ARY_STATUS [&CIDX] = "E" Then
      &SQL = &ARY_SQL [&CIDX];
      If &SQL.Fetch(&REC_CHILD) Then
         &ARY_STATUS [&CIDX] = " ";
      Else
         &ARY_STATUS [&CIDX] = "E";
      End-If;
   End-If;
   
End-Function;


/************************/
/*   Level 5 Rowset     */
/************************/
Function Level_5_RowSet()
   
   &ROWCNT5 = 1;
   &REC_MSG_LVL5 = &RS_LVL5(&ROWCNT5).GetRecord(1);
   &LVL5_PSCAMA = &RS_LVL5(&ROWCNT5).PSCAMA;
   
   &X5 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL5.Name);
   &REC_TBL_LVL5 = &ARY_REC [&X5];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL4, &REC_TBL_LVL5, &X4, &X5);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL5, &X5);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL4, &REC_TBL_LVL5, &X4, &X5);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL5.CopyFieldsTo(&REC_MSG_LVL5);
      
      If &BATCH_FULL = "B" Then
         &LVL5_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL5.AUDIT_ACTN.Value;
      Else
         &LVL5_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL5.InsertRow(&ROWCNT5);
      &ROWCNT5 = &ROWCNT5 + 1;
      &REC_MSG_LVL5 = &RS_LVL5(&ROWCNT5).GetRecord(1);
      &LVL5_PSCAMA = &RS_LVL5(&ROWCNT5).PSCAMA;
      
      getNextRow(&REC_TBL_LVL5, &X5);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL4, &REC_TBL_LVL5, &X4, &X5);
   End-While;
   
   &RS_LVL5.DeleteRow(&ROWCNT5);
   
End-Function;


/************************/
/*   Level 4 Rowset     */
/************************/
Function Level_4_RowSet();
   
   &ROWCNT4 = 1;
   &REC_MSG_LVL4 = &RS_LVL4(&ROWCNT4).GetRecord(1);
   &LVL4_PSCAMA = &RS_LVL4(&ROWCNT4).PSCAMA;
   
   &X4 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL4.Name);
   &REC_TBL_LVL4 = &ARY_REC [&X4];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL3, &REC_TBL_LVL4, &X3, &X4);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL4, &X4);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL3, &REC_TBL_LVL4, &X3, &X4);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL4.CopyFieldsTo(&REC_MSG_LVL4);
      
      For &C4 = 1 To &RS_LVL4(&ROWCNT4).ChildCount
         &RS_LVL5 = &RS_LVL4(&ROWCNT4).GetRowset(&C4);
         Level_5_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL4_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL4.AUDIT_ACTN.Value;
      Else
         &LVL4_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL4.InsertRow(&ROWCNT4);
      &ROWCNT4 = &ROWCNT4 + 1;
      &REC_MSG_LVL4 = &RS_LVL4(&ROWCNT4).GetRecord(1);
      &LVL4_PSCAMA = &RS_LVL4(&ROWCNT4).PSCAMA;
      
      getNextRow(&REC_TBL_LVL4, &X4);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL3, &REC_TBL_LVL4, &X3, &X4);
   End-While;
   
   &RS_LVL4.DeleteRow(&ROWCNT4);
   
End-Function;


/************************/
/*   Level 3 Rowset     */
/************************/
Function Level_3_RowSet();
   
   &ROWCNT3 = 1;
   &REC_MSG_LVL3 = &RS_LVL3(&ROWCNT3).GetRecord(1);
   &LVL3_PSCAMA = &RS_LVL3(&ROWCNT3).PSCAMA;
   
   &X3 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL3.Name);
   &REC_TBL_LVL3 = &ARY_REC [&X3];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL2, &REC_TBL_LVL3, &X2, &X3);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL3, &X3);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL2, &REC_TBL_LVL3, &X2, &X3);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL3.CopyFieldsTo(&REC_MSG_LVL3);
      
      For &C3 = 1 To &RS_LVL3(&ROWCNT3).ChildCount
         &RS_LVL4 = &RS_LVL3(&ROWCNT3).GetRowset(&C3);
         Level_4_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL3_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL3.AUDIT_ACTN.Value;
      Else
         &LVL3_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL3.InsertRow(&ROWCNT3);
      &ROWCNT3 = &ROWCNT3 + 1;
      &REC_MSG_LVL3 = &RS_LVL3(&ROWCNT3).GetRecord(1);
      &LVL3_PSCAMA = &RS_LVL3(&ROWCNT3).PSCAMA;
      
      getNextRow(&REC_TBL_LVL3, &X3);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL2, &REC_TBL_LVL3, &X2, &X3);
   End-While;
   
   &RS_LVL3.DeleteRow(&ROWCNT3);
   
End-Function;



/************************/
/*   Level 2 Rowset     */
/************************/
Function Level_2_RowSet();
   
   &ROWCNT2 = 1;
   &REC_MSG_LVL2 = &RS_LVL2(&ROWCNT2).GetRecord(1);
   &LVL2_PSCAMA = &RS_LVL2(&ROWCNT2).PSCAMA;
   
   &X2 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL2.Name);
   &REC_TBL_LVL2 = &ARY_REC [&X2];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL1, &REC_TBL_LVL2, &X1, &X2);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL2, &X2);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL1, &REC_TBL_LVL2, &X1, &X2);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL2.CopyFieldsTo(&REC_MSG_LVL2);
      
      For &C2 = 1 To &RS_LVL2(&ROWCNT2).ChildCount
         &RS_LVL3 = &RS_LVL2(&ROWCNT2).GetRowset(&C2);
         Level_3_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL2_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL2.AUDIT_ACTN.Value;
      Else
         &LVL2_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL2.InsertRow(&ROWCNT2);
      &ROWCNT2 = &ROWCNT2 + 1;
      &REC_MSG_LVL2 = &RS_LVL2(&ROWCNT2).GetRecord(1);
      &LVL2_PSCAMA = &RS_LVL2(&ROWCNT2).PSCAMA;
      
      getNextRow(&REC_TBL_LVL2, &X2);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL1, &REC_TBL_LVL2, &X1, &X2);
   End-While;
   
   &RS_LVL2.DeleteRow(&ROWCNT2);
   
End-Function;



/************************/
/*   Level 1 Rowset     */
/************************/
Function Level_1_RowSet()
   
   &ROWCNT1 = 1;
   &REC_MSG_LVL1 = &RS_LVL1(&ROWCNT1).GetRecord(1);
   &LVL1_PSCAMA = &RS_LVL1(&ROWCNT1).PSCAMA;
   
   &X1 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL1.Name);
   &REC_TBL_LVL1 = &ARY_REC [&X1];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL0, &REC_TBL_LVL1, &X0, &X1);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL1, &X1);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL0, &REC_TBL_LVL1, &X0, &X1);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL1.CopyFieldsTo(&REC_MSG_LVL1);
      
      For &C1 = 1 To &RS_LVL1(&ROWCNT1).ChildCount
         &RS_LVL2 = &RS_LVL1(&ROWCNT1).GetRowset(&C1);
         Level_2_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL1_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL1.AUDIT_ACTN.Value;
      Else
         &LVL1_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL1.InsertRow(&ROWCNT1);
      &ROWCNT1 = &ROWCNT1 + 1;
      &REC_MSG_LVL1 = &RS_LVL1(&ROWCNT1).GetRecord(1);
      &LVL1_PSCAMA = &RS_LVL1(&ROWCNT1).PSCAMA;
      
      getNextRow(&REC_TBL_LVL1, &X1);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL0, &REC_TBL_LVL1, &X0, &X1);
   End-While;
   
   &RS_LVL1.DeleteRow(&ROWCNT1);
   
End-Function;




/**************************/
/*   Start of Peoplecode  */
/*    Check for Restart   */
/**************************/
For &I = 1 To &ARY_SQL.Len;
   &SQL = &ARY_SQL [&I];
   
   If Not &SQL.IsOpen Then
      
      &REC = &ARY_REC [&I];
      &ORDER_BY = &ARY_ORDERBY [&I];
      &LIST = &ARY_LIST [&I];
      
      If All(&CHUNK_RULE_REC) And
            &NUM_RECTYPE < 2 Then
         If &BATCH_FULL = "F" Then
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where EXISTS (Select 'Y' from %Table(:2) B where B.CHUNK_RULE_ID = :3 and B.EFFDT = %DateIn(:4) " | &WHERE | &ORDER_BY, &REC, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         Else
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2 and EXISTS (Select 'Y' from %Table(:3) B where B.CHUNK_RULE_ID = :4 and B.EFFDT = %DateIn(:5) " | &WHERE | &ORDER_BY, &REC, &PROCESS_INSTANCE, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         End-If
      Else
         If &BATCH_FULL = "F" Then
            /********* Start QR2IPO004 *********/
            /********* Start QR2IIN006 *********/
            Evaluate EO_BATLIB_AET.MSGNAME
            When-Other
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
               Break;
            End-Evaluate;
            
            REM &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            /* The above existing sql statement has been commented and taken care in the 
		    when-other Part of the Evaluate statement above */
            /*********  End  QR2IPO004 *********/
            /*********  End  QR2IIN006 *********/
         Else
            
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2" | &ORDER_BY, &REC, &PROCESS_INSTANCE);
            
         End-If;
         
      End-If;
      
      &SQL.ReuseCursor = True;
      
      &ARY_SQL.Replace(&I, 1, &SQL);
      &RECNAME = &REC.Name;
      &REC_RESTART = CreateRecord(@("RECORD." | &RECNAME));
      &REC.CopyFieldsTo(&REC_RESTART);
      &ARY_STATUS [&I] = "";
      
      &KEYEQUAL = - 1;
      
      While &KEYEQUAL = - 1;
         getNextRow(&REC, &I);
         &KEYEQUAL = isChildRow(&REC_RESTART, &REC, &I, &I);
      End-While;
      
   End-If;
   
   
End-For;


/**************************/
/*   Start of Peoplecode  */
/*     Publish Message    */
/**************************/
&MAXMSGSIZE = %MaxMessageSize;
&MSG = CreateMessage(@("MESSAGE." | &MSGNAME));
MessageBox(0, "", 0, 0, "&MSG " | &MSG);
&ROWCNT0 = 1;
&RS_LVL0 = &MSG.GetRowset();
&REC_MSG_LVL0 = &RS_LVL0(&ROWCNT0).GetRecord(1);
&LVL0_PSCAMA = &RS_LVL0(&ROWCNT0).PSCAMA;
&X0 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL0.Name);
&REC_TBL_LVL0 = &ARY_REC [&X0];
&REC_PREV = CreateRecord(@("RECORD." | &REC_TBL_LVL0.Name));
&SQL_LVL0 = &ARY_SQL [&X0];
&BREAK_POINT = "N";

If &FIRST_TIME = "Y" Then
   If &SQL_LVL0.Fetch(&REC_TBL_LVL0) Then
      &ARY_REC.Replace(&X0, 1, &REC_TBL_LVL0);
   Else
      &BREAK_POINT = "Y";
      EO_BATLIB_AET.END_TRANS_FLG = "N";
      Exit (0);
   End-If;
   &FIRST_TIME = "N";
End-If;

While &BREAK_POINT = "N"
   &REC_TBL_LVL0.CopyFieldsTo(&REC_MSG_LVL0);
   &REC_TBL_LVL0.CopyFieldsTo(&REC_PREV);
   
   &LVL0_PSCAMA.PUBLISH_RULE_ID.Value = &PUBLISH_RULE_ID;
   &LVL0_PSCAMA.PROCESS_INSTANCE.Value = &PROCESS_INSTANCE;
   &LVL0_PSCAMA.MSGNODENAME.Value = &MSGNODENAME;
   &LVL0_PSCAMA.LANGUAGE_CD.Value = %Language_Base;
   &LVL0_PSCAMA.BASE_LANGUAGE_CD.Value = %Language_Base;
   
   If &BATCH_FULL = "B" Then
      &LVL0_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL0.AUDIT_ACTN.Value;
   Else
      &LVL0_PSCAMA.AUDIT_ACTN.Value = "A";
   End-If;
   
   For &C0 = 1 To &RS_LVL0(&ROWCNT0).ChildCount
      &RS_LVL1 = &RS_LVL0(&ROWCNT0).GetRowset(&C0);
      Level_1_RowSet();
   End-For;
   
   If &SQL_LVL0.Fetch(&REC_TBL_LVL0) Then
      &ARY_REC.Replace(&X0, 1, &REC_TBL_LVL0);
   Else
      If &PUB_BASE_FLG = "Y" Then
         /*********  Start  QR2IPO004 *********/
         /*********  Start  QR2IINO06 *********/
         Evaluate EO_BATLIB_AET.MSGNAME
         When "Z_AP_VNDR_SYNC_EFF"
         When "Z_AP_VNDR_FULLSYNC_EFF"
            APFlatFile(&MSG);
            Break;
         When "Z_NT_VNDR_SYNC_EFF"
         When "Z_NT_VNDR_FULLSYNC_EFF"
            VendorNextanceXmlFile(&MSG);
            Break;
         When "Z_NEXT_BATPUB_MSG"
         When "Z_NEXT_FULLPUB_MSG"
            ItemNextanceXmlFile(&MSG);
            Break;
         When-Other
            MessageBox(0, "", 0, 0, "PUBLISHING THE MESSAGE");
            rem NEWPOPUB();
            rem POD(&MSG);
            &MSG.Publish();
            Break;
         End-Evaluate;
         REM &MSG.Publish();
         
         /* The above existing Publish statement has been commented and taken care in the 
		 when-other Part of the Evaluate statement above */
         /*********  End  QR2IINO06 *********/
         /*********  End  QR2IPO004 *********/
      End-If;
      &MSG_CREATED = "Y";
      EO_BATLIB_AET.END_TRANS_FLG = "N";
      Exit (0);
   End-If;
   
   If &MSG.Size > &MAXMSGSIZE Then
      If &PUB_BASE_FLG = "Y" Then
         MessageBox(0, "", 0, 0, "Creating New XML File coz the Limit has exceeded");
         /*********  Start  QR2IPO004 *********/
         /*********  Start  QR2IINO06 *********/
         Evaluate EO_BATLIB_AET.MSGNAME
         When "Z_AP_VNDR_SYNC_EFF"
         When "Z_AP_VNDR_FULLSYNC_EFF"
            APFlatFile(&MSG);
            Break;
         When "Z_NT_VNDR_SYNC_EFF"
         When "Z_NT_VNDR_FULLSYNC_EFF"
            VendorNextanceXmlFile(&MSG);
            Break;
         When "Z_NEXT_BATPUB_MSG"
         When "Z_NEXT_FULLPUB_MSG"
            ItemNextanceXmlFile(&MSG);
            Break;
         When-Other
            MessageBox(0, "", 0, 0, "PUBLISHING THE MESSAGE  11");
            rem POD(&MSG);
            &MSG.Publish();
            Break;
         End-Evaluate;
         REM &MSG.Publish();
         
         /* The above existing Publish statement has been commented and taken care in the 
		 when-other Part of the Evaluate statement above */
         /*********  End  QR2IINO06 *********/
         /*********  End  QR2IPO004 *********/
         
      End-If;
      &MSG_CREATED = "Y";
      EO_BATLIB_AET.END_TRANS_FLG = "Y";
      Exit (0);
   End-If;
   
   
   If All(&CHUNK_RULE_REC)
      /* And &NUM_RECTYPE = 2 */
      Then
      
      If CheckChunkValues(&REC_TBL_LVL0, &REC_PREV) Then
         If &PUB_BASE_FLG = "Y" Then
            /*********  Start  QR2IPO004 *********/
            /*********  Start  QR2IINO06 *********/
            Evaluate EO_BATLIB_AET.MSGNAME
            When "Z_AP_VNDR_SYNC_EFF"
            When "Z_AP_VNDR_FULLSYNC_EFF"
               APFlatFile(&MSG);
               Break;
            When "Z_NT_VNDR_SYNC_EFF"
            When "Z_NT_VNDR_FULLSYNC_EFF"
               VendorNextanceXmlFile(&MSG);
               Break;
            When "Z_NEXT_BATPUB_MSG"
            When "Z_NEXT_FULLPUB_MSG"
               ItemNextanceXmlFile(&MSG);
               Break;
            When-Other
               MessageBox(0, "", 0, 0, "PUBLISHING THE MESSAGE  1111");
               rem POD(&MSG);
               rem NEWPOPUB();
               &MSG.Publish();
               Break;
            End-Evaluate;
            REM &MSG.Publish();
            /*********  End  QR2IINO06 *********/
            /*********  End  QR2IPO004 *********/
         End-If;
         &MSG_CREATED = "Y";
         EO_BATLIB_AET.END_TRANS_FLG = "Y";
         Exit (0);
         
      End-If;
   End-If;
   
   
   &RS_LVL0.InsertRow(&ROWCNT0);
   &ROWCNT0 = &ROWCNT0 + 1;
   &REC_MSG_LVL0 = &RS_LVL0(&ROWCNT0).GetRecord(1);
   &LVL0_PSCAMA = &RS_LVL0(&ROWCNT0).PSCAMA;
   
End-While;


/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    Added the Evaluate statment to check for the message name and change the 
          SQL query based on whether the message is for Batch Publish or Full Publish
***********************************************************************/

/************************** $Qwest$ *******************************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     01/20/2006
DESCR:    Added the Evaluate statment to check for the message name and Publish accordingly
/******************************************************************************************/


/************************/
/*   Global variables   */
/************************/
Global string &MSGNAME, &PUBLISH_RULE_ID, &CHUNK_RULE_ID, &CHUNK_RULE_REC, &REL_LANG_FOUND;
Global string &PUB_BASE_FLG, &BATCH_FULL, &FIRST_TIME, &MSGNODENAME, &WHERE;
Global number &PROCESS_INSTANCE, &NUM_RECTYPE;
Global date &DATE, &EFFDT;
Global Record &REC_CHUNK;

Global array of string &ARY_BREAKFLD, &ARY_STATUS, &ARY_ORDERBY, &ARY_LIST;
Global array of string &ARY_PRNTRECNAME, &ARY_EFFDT;
Global array of number &ARY_BREAKIDX;
Global array of SQL &ARY_SQL;
Global array of Record &ARY_REC;

Global array of array of string &ARY_ARY_KEYFLD, &ARY_ARY_RECNAME;
Global array of array of number &ARY_ARY_KEYSIDX;

/************************/
/*   Local variables    */
/************************/
Local string &RECNAME, &FIELDNUM, &FIELDNAME;
Local string &MSGRECNAME, &SRCRECNAME, &RELRECNAME;
Local string &ORDER_BY, &CHUNK_CLAUSE;
Local SQL &SQL, &SQL_BRKFLDS, &SQL_RECLIST, &SQL_ALTREC, &SQL_PSRECDEFN, &SQL_CHUNK;
Local Record &REC;

Local array of string &ARY_KEYFLD, &ARY_RECNAME;
Local array of number &ARY_KEYSIDX;




/************************/
/*      Function        */
/* Build SQL Statement  */
/************************/
Function buildSQLStmt();
   
   &ARY_KEYFLD = CreateArrayRept("", 0);
   &ARY_KEYSIDX = CreateArrayRept(0, 0);
   
   &ORDER_BY = " order by ";
   &COMMA = " ";
   &LIST = " ";
   &EFFDT_SW = "N";
   
   For &I = 1 To &REC.FieldCount;
      &FIELD = &REC.GetField(&I);
      
      
      If &FIELD.Name = "EFFDT" Then
         &EFFDT_SW = "Y";
      End-If;
      
      Evaluate &FIELD.Type
      When = "DATE"
         &LIST = &LIST | &COMMA | " %DateOut(A." | &FIELD.Name | ")";
         Break;
      When = "TIME"
         &LIST = &LIST | &COMMA | " %TimeOut(A." | &FIELD.Name | ")";
         Break;
      When = "DATETIME"
         &LIST = &LIST | &COMMA | " %DateTimeOut(A." | &FIELD.Name | ")";
         Break;
      When-Other
         &LIST = &LIST | &COMMA | "A." | &FIELD.Name;
         Break;
      End-Evaluate;
      
      
      &COMMA = ", ";
      
      If &FIELD.IsKey Then
         &ARY_KEYFLD.Push(&FIELD.Name);
         &ARY_KEYSIDX.Push(&I);
         
         If &ARY_KEYSIDX.Len > 1 Then
            &ORDER_BY = &ORDER_BY | ", ";
         End-If;
         
         &ORDER_BY = &ORDER_BY | "A." | &FIELD.NAME;
         
      End-If;
   End-For;
   
End-Function;





/************************/
/*       Set            */
/*   Global Variables   */
/************************/
If EO_BATLIB_AET.PRCSINSTANCE = 0 Then
   &BATCH_FULL = "F";
   &PROCESS_INSTANCE = EO_BATLIB_AET.PROCESS_INSTANCE;
Else
   &BATCH_FULL = "B";
   &PROCESS_INSTANCE = EO_BATLIB_AET.PRCSINSTANCE;
End-If;

If EO_BATLIB_AET.CREATE_FILE_FLG = "N" Then
   EO_BATLIB_AET.AE_APPLID = "EOL_PUBLISH";
   EO_BATLIB_AET.AE_SECTION = "PUBDTL";
Else
   EO_BATLIB_AET.CREATE_HDR_FLG = "N";
   EO_BATLIB_AET.CREATE_TRL_FLG = "N";
   EO_BATLIB_AET.AE_APPLID = "EOL_PUBLISH";
   EO_BATLIB_AET.AE_SECTION = "FLATFILE";
End-If;

&MSGNAME = EO_BATLIB_AET.MSGNAME;
&MSGNODENAME = EO_BATLIB_AET.MSGNODENAME;
&PUBLISH_RULE_ID = EO_BATLIB_AET.PUBLISH_RULE_ID;
&CHUNK_RULE_ID = EO_BATLIB_AET.CHUNK_RULE_ID;
&CHUNK_RULE_REC = EO_BATLIB_AET.RECNAME_CHUNK;
&PUB_BASE_FLG = EO_BATLIB_AET.PUBLISH_BASE_LANG;
&FIRST_TIME = "Y";
&Y = "Y";
&DATE = %Date;


MessageBox(0, "", 0, 0, "IN PUBLISH2");
/************************/
/*       Set            */
/*   Cache Variables    */
/************************/
EO_BATLIB_AET.END_TRANS_FLG = "Y";
EO_BATLIB_AET.BASE_LANGUAGE_CD = %Language_Base;


/************************/
/*       Build          */
/*     Chunk Array      */
/************************/
&ARY_BREAKFLD = CreateArrayRept("", 0);
&ARY_BREAKIDX = CreateArrayRept(0, 0);

If All(&CHUNK_RULE_ID) And
      None(&CHUNK_RULE_REC) Then
   
   &SQL_CHUNKRULE = GetSQL(SQL.EO_SEL_CHUNKRULE, &CHUNK_RULE_ID);
   
   If Not &SQL_CHUNKRULE.Fetch(&CHUNK_RULE_REC) Then
      &CHUNK_RULE_ID = "";
   End-If;
   
   &SQL_CHUNKRULE.Close()
End-If;

If All(&CHUNK_RULE_ID) And
      All(&CHUNK_RULE_REC) Then
   
   &WHERE = " ";
   
   &SQL_BRKFLDS = GetSQL(SQL.EO_SEL_CHUNKFIELDS, &CHUNK_RULE_REC);
   
   While &SQL_BRKFLDS.Fetch(&FIELDNUM, &FIELDNAME)
      &ARY_BREAKFLD.Push(&FIELDNAME);
      &ARY_BREAKIDX.Push(&FIELDNUM);
      
      &WHERE = &WHERE | " and A." | &FIELDNAME | " = " | "B." | &FIELDNAME;
      
   End-While;
   
   &WHERE = &WHERE | ")";
   
   &SQL_BRKFLDS.Close();
   
   &SQL_PSRECDEFN = GetSQL(SQL.EO_SEL_RECTYPE, &CHUNK_RULE_REC);
   
   If &SQL_PSRECDEFN.Fetch(&NUM_RECTYPE) Then
   End-If;
   
   &SQL_PSRECDEFN.Close();
   
   &REC_CHUNK = CreateRecord(@("RECORD." | &CHUNK_RULE_REC));
   
   If &NUM_RECTYPE < 2 Then
      &SQL_CHUNKEFFDT = GetSQL(SQL.EO_SEL_CHUNKEFFDT, &CHUNK_RULE_ID, &DATE);
      If Not &SQL_CHUNKEFFDT.Fetch(&EFFDT) Then
         Exit (1);
      End-If;
      
      &SQL_CHUNKEFFDT.Close();
      
   End-If;
   
End-If;


/************************/
/*       Build          */
/*  SQL Object Array    */
/************************/
&ARY_REC = CreateArrayRept(&REC, 0);
&ARY_SQL = CreateArrayRept(&SQL, 0);
&ARY_STATUS = CreateArrayRept(" ", 0);
&ARY_ORDERBY = CreateArrayRept(" ", 0);
&ARY_LIST = CreateArrayRept(" ", 0);
&ARY_PRNTRECNAME = CreateArrayRept(" ", 0);
&ARY_EFFDT = CreateArrayRept(" ", 0);
&ARY_ARY_KEYFLD = CreateArrayRept(CreateArrayRept(" ", 0), 0);
&ARY_ARY_RECNAME = CreateArrayRept(CreateArrayRept(" ", 0), 0);
&ARY_ARY_KEYSIDX = CreateArrayRept(CreateArrayRept(0, 0), 0);

&SQL_RECLIST = GetSQL(SQL.EO_SEL_MSGREC, &MSGNAME);

While &SQL_RECLIST.Fetch(&MSGRECNAME, &PRNTRECNAME)
   &REC = CreateRecord(@("RECORD." | &MSGRECNAME));
   &RELRECNAME = &REC.RelLangRecName;
   If All(&RELRECNAME) Then
      &REL_LANG_FOUND = "Y";
   End-If;
   &SRCRECNAME = " ";
   
   &SQL_ALTREC = GetSQL(SQL.EO_SEL_RECMAP, &MSGNAME, &PUBLISH_RULE_ID, &MSGRECNAME);
   
   If &SQL_ALTREC.Fetch(&SRCRECNAME) Then
      If All(&SRCRECNAME) Then
         &REC = CreateRecord(@("RECORD." | &SRCRECNAME));
      End-If;
   End-If;
   
   &SQL_ALTREC.Close();
   MessageBox(0, "", 0, 0, "Creating the SQL");
   buildSQLStmt();
   
   If All(&CHUNK_RULE_REC) And
         &NUM_RECTYPE < 2 Then
      
      If &BATCH_FULL = "F" Then
         &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where EXISTS (Select 'Y' from %Table(:2) B where B.CHUNK_RULE_ID = :3 and B.EFFDT = %DateIn(:4) " | &WHERE | &ORDER_BY, &REC, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         
      Else
         /* Modified the SQL to pick up relevant data */
         rem &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2 and EXISTS (Select 'Y' from %Table(:3) B where B.CHUNK_RULE_ID = :4 and B.EFFDT = %DateIn(:5) " | &WHERE | &ORDER_BY, &REC, &PROCESS_INSTANCE, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
         MessageBox(0, "", 0, 0, "Creating the SQL for the Message");
      End-If
   Else
      If &BATCH_FULL = "F" Then
         
         /********* Start QR2IPO004 *********/
         Evaluate EO_BATLIB_AET.MSGNAME
         When "VENDOR_SYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "Z_AP_VNDR_SYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "Z_NT_VNDR_SYNC_EFF"
            
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "VENDOR_FULLSYNC_EFF"
         When "Z_NT_VNDR_FULLSYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A WHERE A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "Z_AP_VNDR_FULLSYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_VENDOR B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND B.VENDOR_STATUS = 'A' AND B.Z_RFX_CD = 'N' AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_VENDOR B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND B.VENDOR_STATUS = 'A' AND B.Z_RFX_CD = 'N'" | &ORDER_BY, &REC);
            End-If;
            Break;
            
            /********* Start QR2IIN006 *********/
         When "Z_PMPO_BATPUB_MSG"
            &SQL = CreateSQL("Select " | &LIST | " from %Table(:1) A, PS_Z_PMPOBATPUB_VW B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID" | &ORDER_BY, &REC);
            &STR = ExpandSqlBinds("Select " | &LIST | " from %Table(:1) A, PS_Z_PMPOBATPUB_VW B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID" | &ORDER_BY, &REC);
            MessageBox(0, "", 0, 0, "SQL " | &STR);
            Break;
         When "Z_NEXT_BATPUB_MSG"
            &SQL = CreateSQL("Select " | &LIST | " from %Table(:1) A, PS_Z_NEXTBATPUB_VW B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID" | &ORDER_BY, &REC);
            Break;
         When "Z_POD_FINAL_MSG"
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            MessageBox(0, "", 0, 0, "Publish for PURCHASE_ORDER_DISPATCH");
            Break;
            /********* End QR2IIN006 *********/
         When-Other
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            Break;
         End-Evaluate;
         
         REM &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
         /* The above existing sql statement has been commented and taken care in the 
		 when-other Part of the Evaluate statement above */
         /*********  End  QR2IPO004 *********/
         
      Else
         
         &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2" | &ORDER_BY, &REC, &PROCESS_INSTANCE);
         
      End-If;
      
   End-If;
   
   &SQL.ReuseCursor = True;
   
   &ARY_REC.Push(&REC);
   &ARY_SQL.Push(&SQL);
   &ARY_STATUS.Push("B");
   &ARY_ORDERBY.Push(&ORDER_BY);
   &ARY_LIST.Push(&LIST);
   &ARY_PRNTRECNAME.Push(&PRNTRECNAME);
   &ARY_EFFDT.Push(&EFFDT_SW);
   &ARY_ARY_KEYSIDX.Push(&ARY_KEYSIDX);
   &ARY_ARY_KEYFLD.Push(&ARY_KEYFLD);
   &ARY_RECNAME = CreateArray(&MSGRECNAME, &SRCRECNAME, &RELRECNAME);
   &ARY_ARY_RECNAME.Push(&ARY_RECNAME);
   
End-While;

&SQL_RECLIST.Close();

If EO_BATLIB_AET.CREATE_DELAY_FLG = "Y" Then
   
   &AI = 0;
   While &ARY_ARY_RECNAME.Next(&AI)
      If &ARY_EFFDT [&AI] = "Y" And
            All(&ARY_PRNTRECNAME [&AI]) Then
         &BI = &ARY_ARY_RECNAME.Find(&ARY_PRNTRECNAME [&AI]);
         If &BI > 0 Then
            If &ARY_EFFDT [&BI] = "Y" Then
               &ARY_EFFDT.Replace(&AI, 1, "N");
            End-If;
         End-If;
      End-If;
   End-While;
End-If;


/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    This new Peoplecode action was added to check for the messages and update the corresponding 
	      Pub Flags and Pub Date fields for the respective messages
          For Batch Publish, the Vendor Id's published in the current batch execution alone, 
		  the Publish Flags and Publish Date fields of the respective application will be updated 
		  with 'N' and current date.
		  For Full Publish, for all the Vendor's in the Vendor Master table, the Publish Flags and Publish Date fields 
		  of the respective application will be updated with 'N' and current date.
***********************************************************************/

/************************** $Qwest$ ******************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     01/20/2006
DESCR:    Added Code to Update the Flags and Date to indicate the Last Publish
/*****************************************************************************/

/********* Start QR2IPO004 *********/
Evaluate EO_BATLIB_AET.MSGNAME
When "VENDOR_SYNC_EFF"
   SQLExec("UPDATE PS_VENDOR   SET Z_PO_PUB_FLAG_CD = 'N' , Z_PO_PUB_DT = SYSDATE WHERE VENDOR_ID IN (SELECT A.VENDOR_ID FROM PS_VENDOR A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID)");
   Break;
When "VENDOR_FULLSYNC_EFF"
   SQLExec("UPDATE PS_VENDOR   SET Z_PO_PUB_FLAG_CD = 'N' , Z_PO_PUB_DT = SYSDATE");
   Break;
When "Z_AP_VNDR_SYNC_EFF"
   SQLExec("UPDATE PS_VENDOR   SET Z_AP_PUB_FLAG_CD = 'N' , Z_AP_PUB_DT = SYSDATE WHERE VENDOR_ID IN (SELECT A.VENDOR_ID FROM PS_VENDOR A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID)");
   Break;
When "Z_AP_VNDR_FULLSYNC_EFF"
   SQLExec("UPDATE PS_VENDOR   SET Z_AP_PUB_FLAG_CD = 'N' , Z_AP_PUB_DT = SYSDATE");
   Break;
When "Z_NT_VNDR_SYNC_EFF"
   SQLExec("UPDATE PS_VENDOR   SET Z_NT_PUB_FLAG_CD = 'N' , Z_NT_PUB_DT = SYSDATE WHERE VENDOR_ID IN (SELECT A.VENDOR_ID FROM PS_VENDOR A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID)");
   Break;
When "Z_NT_VNDR_FULLSYNC_EFF"
   SQLExec("UPDATE PS_VENDOR   SET Z_NT_PUB_FLAG_CD = 'N' , Z_NT_PUB_DT = SYSDATE");
   Break;
   /********* Start QR2IIN006 *********/
When "Z_PMPO_BATPUB_MSG"
   SQLExec("UPDATE PS_MASTER_ITEM_TBL  SET Z_PMPO_PUB_CD ='N' , Z_PMPO_PUB_DTTM = SYSDATE where INV_ITEM_ID IN (SELECT A.INV_ITEM_ID FROM PS_Z_PMPOBATPUB_VW A, PS_MASTER_ITEM_TBL B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID)");
   Break;
When "Z_PMPO_FULLPUB_MSG"
   SQLExec(" UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = 'N' , Z_PMPO_PUB_DTTM = SYSDATE where INV_ITEM_ID IN (SELECT A.INV_ITEM_ID FROM PS_MASTER_ITEM_TBL A)");
   Break;
When "Z_NEXT_BATPUB_MSG"
   SQLExec("UPDATE PS_MASTER_ITEM_TBL  SET Z_NEXTPUB_CD ='N' , Z_NEXTPUB_DTTM = SYSDATE where INV_ITEM_ID IN (SELECT A.INV_ITEM_ID FROM PS_Z_NEXTBATPUB_VW A, PS_MASTER_ITEM_TBL B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID)");
   Break;
When "Z_NEXT_FULLPUB_MSG"
   SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_NEXTPUB_CD = 'N' , Z_NEXTPUB_DTTM = SYSDATE where INV_ITEM_ID IN (SELECT A.INV_ITEM_ID FROM PS_MASTER_ITEM_TBL A)");
   Break;
   /********* End QR2IIN006 *********/
End-Evaluate;
/*********  End  QR2IPO004 *********/


Declare Function UpdateVerityStage PeopleCode FUNCLIB_PP_SRCH.INDEX FieldFormula;

If INSTALLATION.PV = "Y" Then
   UpdateVerityStage("I");
End-If;


/************************** $Qwest$ ***************************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     01/20/2006
DESCR:    Added Code to update the Master Item Table when a Triggering Field is Changed

- - HIERARCHY - -
MASTER_ITEM_TBL
|_ INV_ITEMS
|_ INV_ITEM_UOM
|_ ITEM_MFG
|_ SUBSTITUTE_ITM
- - - - - - - - - 

/**************************************************************************************/

/********* Start QR2IIN006 *********/

Local Rowset &invitems, &itmfg1, &subitm11, &LVL0RS;
Local string &Z_NT_PUB_FLG, &Z_PMPO_PUB_FLG;
Local Record &LVL0REC, &LVL0RECCUS;


&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.MASTER_ITEM_TBL);
rem &LVL0RECCUS = &LVL0RS.GetRow(1).GetRecord(Record.Z_ITEM_ATT_TBL);

/************************************************
To Check in Add Mode for the ITEM_DEFIN Component
*************************************************/
If %Mode = "A" Then
   MASTER_ITEM_TBL.Z_NEXTPUB_CD.Value = "A";
   MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "A";
   rem End-If;
   
Else
   
   /****************************************************
	To Check in Update Mode for the ITEM_DEFIN Component
	****************************************************/
   If %Mode = "U" Or
         %Mode = "C" Then
      
      /****************
	   To Check Level 0
	   ****************/
      If &LVL0REC.LAST_DTTM_UPDATE.IsChanged And
            &LVL0REC.INV_ITEM_ID.IsChanged Or
            &LVL0REC.DATE_ADDED.IsChanged Or
            &LVL0REC.UNIT_MEASURE_STD.IsChanged Or
            &LVL0REC.NON_OWN_FLAG.IsChanged Or
            rem &LVL0REC.CONSIGNED_FLAG.IsChanged Or; /*Greyed out for both Nextance and PMPO*/
            &LVL0REC.INVENTORY_ITEM.IsChanged Or
            &LVL0REC.CATEGORY_ID.IsChanged Then
         MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
      End-If;
      If (&LVL0REC.ITM_STATUS_CURRENT.IsChanged And
            (&LVL0REC.ITM_STATUS_CURRENT.Value = "1" Or
               &LVL0REC.ITM_STATUS_CURRENT.Value = "4")) Then
         MASTER_ITEM_TBL.Z_NEXTPUB_CD.Value = "C";
         MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
      End-If;
      
      /*********************************
	   CHECK NEXTANCE FIELDS FOR LEVEL 0
	   *********************************/
      /*
      If &LVL0REC.INV_ITEM_ID.IsChanged Or
            &LVL0REC.UNIT_MEASURE_STD.IsChanged Or
            &LVL0REC.DESCR.IsChanged Then
         MASTER_ITEM_TBL.Z_NEXTPUB_CD.Value = "C";
      End-If;
      */
      /****************************
	   CODE ADDED FOR CUSTOM FIELDS
	   ****************************/
      /*
      If (&LVL0RECCUS.Z_CPR_FLD.IsChanged) Then
         MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
      End-If;
      */
      /*******************************************
	   To Check Level 1(Inventory Tab) for Updates
       *******************************************/
      
      &invitems = &LVL0RS.GetRow(1).GetRowset(Scroll.INV_ITEMS);
      For &inv = 1 To &invitems.RowCount;
         REM For &inv = &invitems.RowCount To 1 Step - 1;
         If Not &invitems.GetRow(&inv).IsNew And
               &invitems.GetRow(&inv).IsDeleted Then
            MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
         Else
            If (&invitems.GetRow(&inv).INV_ITEMS.INV_ITEM_HEIGHT.IsChanged Or
                  &invitems.GetRow(&inv).INV_ITEMS.INV_ITEM_LENGTH.IsChanged Or
                  rem &invitems.GetRow(&inv).INV_ITEMS.UNIT_MEASURE_DIM.IsChanged Or; /*Greyed out for both Nextance and PMPO*/
                  &invitems.GetRow(&inv).INV_ITEMS.INV_ITEM_WIDTH.IsChanged Or
                  &invitems.GetRow(&inv).INV_ITEMS.INV_ITEM_WEIGHT.IsChanged Or
                  &invitems.GetRow(&inv).IsNew Or
                  rem &invitems.GetRow(&inv).INV_ITEMS.UNIT_MEASURE_WT.IsChanged Or; /*Greyed out for both Nextance and PMPO*/
                  rem &invitems.GetRow(&inv).INV_ITEMS.DESCR254.IsChanged Or; /*Greyed out for both Nextance and PMPO*/
                  &invitems.GetRow(&inv).INV_ITEMS.HAZ_CLASS_CD.IsChanged) And
                  rem &invitems.GetRow(&inv).INV_ITEMS.SHELF_LIFE.IsChanged) And; /*Greyed out for both Nextance and PMPO*/
                  Not &invitems.GetRow(&inv).IsDeleted Then
               MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
            End-If;
         End-If;
      End-For;
      
      /************
	   INV_ITEM_UOM
	   ************/
      &invitemuom = &LVL0RS.GetRow(1).GetRowset(Scroll.INV_ITEM_UOM);
      For &invuom = 1 To &invitemuom.RowCount
         If Not &invitemuom.GetRow(&invuom).IsNew And
               &invitemuom.GetRow(&invuom).IsDeleted Then
            MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
         Else
            If &invitemuom.GetRow(&invuom).INV_ITEM_UOM.UNIT_OF_MEASURE.IsChanged Or
                  &invitemuom.GetRow(&invuom).IsNew Or
                  &invitemuom.GetRow(&invuom).INV_ITEM_UOM.CONVERSION_RATE.IsChanged And
                     Not &invitemuom.GetRow(&invuom).IsDeleted Then
               MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
            End-If;
         End-If;
      End-For;
      
      /*************
	   MANUFACTURERS
       *************/
      
      &itmfg1 = &LVL0RS.GetRow(1).GetRowset(Scroll.ITEM_MFG);
      For &mfg = 1 To &itmfg1.RowCount
         If Not &itmfg1.GetRow(&mfg).IsNew And
               &itmfg1.GetRow(&mfg).IsDeleted Then
            MASTER_ITEM_TBL.Z_NEXTPUB_CD.Value = "C";
            MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
         Else
            If &itmfg1.GetRow(&mfg).ITEM_MFG.MFG_ID.IsChanged Or
                  &itmfg1.GetRow(&mfg).ITEM_MFG.PREFERRED_MFG.IsChanged Or
                  &itmfg1.GetRow(&mfg).IsNew Or
                  &itmfg1.GetRow(&mfg).ITEM_MFG.MFG_ITM_ID.IsChanged And
                     Not &itmfg1.GetRow(&mfg).IsDeleted Then
               MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
            End-If;
         End-If;
      End-For;
      
      /***************************************
	   CHECK NEXTANCE FIELDS FOR MANUFACTURERS
	   ***************************************/
      
      &itmfg1 = &LVL0RS.GetRow(1).GetRowset(Scroll.ITEM_MFG);
      For &mfg = 1 To &itmfg1.RowCount
         If (&itmfg1.GetRow(&mfg).ITEM_MFG.MFG_ID.IsChanged Or
               &itmfg1.GetRow(&mfg).IsNew) And
               Not &itmfg1.GetRow(&mfg).IsDeleted Then
            MASTER_ITEM_TBL.Z_NEXTPUB_CD.Value = "C";
         End-If;
      End-For;
      
      /****************
	   SUBSTITUTE ITEMS
       ****************/
      &subitm11 = &LVL0RS.GetRow(1).GetRowset(Scroll.SUBSTITUTE_ITM);
      For &subs = 1 To &subitm11.RowCount
         If Not &subitm11.GetRow(&subs).IsNew And
               &subitm11.GetRow(&subs).IsDeleted Then
            MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
         Else
            If &subitm11.GetRow(&subs).SUBSTITUTE_ITM.SUB_ITM_ID.IsChanged Or
                  &subitm11.GetRow(&subs).IsNew Or
                  &subitm11.GetRow(&subs).SUBSTITUTE_ITM.SUB_PRIORITY_NBR.IsChanged And
                     Not &subitm11.GetRow(&subs).IsDeleted Then
               MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
            End-If;
         End-If;
      End-For;
   End-If;
End-If;

/********* End QR2IIN006 *********/


Declare Function UpdateVerityStage PeopleCode FUNCLIB_PP_SRCH.INDEX FieldFormula;

If INSTALLATION.PV = "Y" Then
   UpdateVerityStage("P");
End-If;

/************************** $Qwest$ ******************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     01/20/2006
DESCR:    Added Code to Update the Flags and Date to indicate the Last Publish

- - HIERARCHY - -
PURCH_ITEM_ATTR
MASTER_ITEM_TBL
|_ ITM_VENDOR
  |_ ITM_VENDOR_LOC
  |_ ITM_VNDR_UOM
    |_ ITM_VNDR_UOM_PR
- - - - - - - - - 
/*****************************************************************************/

/********* Start QR2IIN006 *********/
Local Rowset &LVL0RSPIA, &itmven, &itmvnduom, &itmvndruompr, &itmvndloc;
Local Record &LVL0RECPIA, &LVL01REC;

&LVL0RSPIA = GetLevel0();
&LVL0RECPIA = &LVL0RSPIA.GetRow(1).GetRecord(Record.MASTER_ITEM_TBL);
&LVL01REC = &LVL0RSPIA.GetRow(1).GetRecord(Record.PURCH_ITEM_ATTR);



/*****************************************************
To Check in Add Mode for the PURCH_ITEM_ATTR Component
******************************************************/
If %Mode = "A" Then
   MASTER_ITEM_TBL.Z_NEXTPUB_CD.Value = "A";
   MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "A";
Else
   /********************************************************
    To Check in Update Mode for the PURCH_ITEM_ATTR Component
    *********************************************************/
   If %Mode = "U" Or
         %Mode = "C" Then
      
      /**********************************
	   To Check Level 0 (PURCH_ITEM_ATTR)
	   **********************************/
      
      If &LVL01REC.DESCR.IsChanged Or
            &LVL01REC.DESCR254_MIXED.IsChanged Or
            rem &LVL01REC.PRICE_LIST.IsChanged Or; /*Greyed out for both Nextance and PMPO*/
            &LVL01REC.STD_LEAD.IsChanged Then
         MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
      End-If;
      
      /****************************************
	   To Check Level 1(ITM_VENDOR) for Updates
       ****************************************/
      
      &itmven = &LVL0RSPIA.GetRow(1).GetRowset(Scroll.ITM_VENDOR);
      For &itmv = 1 To &itmven.RowCount
         If Not &itmven.GetRow(&itmv).IsNew And
               &itmven.GetRow(&itmv).IsDeleted Then
            rem MessageBox(0, "", 0, 0, "ITM_VENDOR");
            MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
            rem End-If;
         Else /* Else for If Not &itmven.GetRow(&itmv).IsNew And
            &itmven.GetRow(&itmv).IsDeleted Then */
            rem If MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value <> "U" Then;
            If (&itmven.GetRow(&itmv).ITM_VENDOR.ITM_ID_VNDR.IsChanged Or
                  &itmven.GetRow(&itmv).IsNew Or
                  &itmven.GetRow(&itmv).ITM_VENDOR.ITM_STATUS.IsChanged Or
                  &itmven.GetRow(&itmv).ITM_VENDOR.VENDOR_ID.IsChanged Or
                  /* Added as per new requirement */
                  &itmven.GetRow(&itmv).ITM_VENDOR.DESCR254.IsChanged Or
                  &itmven.GetRow(&itmv).ITM_VENDOR.ITM_VNDR_PRIORITY.IsChanged) And
                  Not &itmven.GetRow(&itmv).IsDeleted Then
               rem MessageBox(0, "", 0, 0, "ITM_VENDOR else");
               MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
            End-If;
            
            
            /*******************************************
	         To Check Level (ITM_VENDOR_LOC) for Updates
             *******************************************/
            
            &itmvndloc = &itmven.GetRow(&itmv).GetRowset(Scroll.ITM_VENDOR_LOC);
            rem For &itmloc = &itmvndloc.RowCount To 1 Step - 1;
            For &itmloc = 1 To &itmvndloc.RowCount
               If Not &itmvndloc.GetRow(&itmloc).IsNew And
                     &itmvndloc.GetRow(&itmloc).IsDeleted Then
                  rem MessageBox(0, "", 0, 0, "loc");
                  MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
               Else
                  If (&itmvndloc.GetRow(&itmloc).ITM_VENDOR_LOC.VNDR_LOC.IsChanged Or
                        /* Added as per new requirement */
                        &itmvndloc.GetRow(&itmloc).ITM_VENDOR_LOC.LEAD_TIME.IsChanged Or
                        &itmvndloc.GetRow(&itmloc).IsNew) And
                        Not &itmvndloc.GetRow(&itmloc).IsDeleted Then
                     MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
                     rem MessageBox(0, "", 0, 0, "else loc " | &itmloc);
                  End-If;
                  REM HERE End-If;
                  rem End-For;
                  
                  /******************************
	               To Check Level 2(ITM_VNDR_UOM)
	               ******************************/
                  
                  &itmvnduom = &itmven.GetRow(&itmv).GetRowset(Scroll.ITM_VNDR_UOM);
                  rem For &itmvndr = &itmvnduom.RowCount To 1 Step - 1;
                  For &itmvndr = 1 To &itmvnduom.RowCount;
                     If Not &itmvnduom.GetRow(&itmvndr).IsNew And
                           &itmvnduom.GetRow(&itmvndr).IsDeleted Then
                        MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
                        rem End-If;
                     Else /* Else for If Not &itmvnduom.GetRow(&itmvndr).IsNew And
                           &itmvnduom.GetRow(&itmvndr).IsDeleted Then */
                        If (&itmvnduom.GetRow(&itmvndr).ITM_VNDR_UOM.UNIT_OF_MEASURE.IsChanged Or
                              &itmvnduom.GetRow(&itmvndr).IsNew Or
                              &itmvnduom.GetRow(&itmvndr).ITM_VNDR_UOM.VNDR_LOC.IsChanged Or
                              &itmvnduom.GetRow(&itmvndr).ITM_VNDR_UOM.CONVERSION_RATE.IsChanged) And
                              Not &itmvnduom.GetRow(&itmvndr).IsDeleted Then
                           MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
                        End-If;
                        REM HERE 1 End-If;
                        
                        /*********************************
	                     To Check Level 3(ITM_VNDR_UOM_PR)
	                     *********************************/
                        
                        &itmvndruompr = &itmvnduom.GetRow(&itmvndr).GetRowset(Scroll.ITM_VNDR_UOM_PR);
                        rem          For &itmvndumpr = &itmvndruompr.RowCount To 1 Step - 1;
                        For &itmvndumpr = 1 To &itmvndruompr.RowCount
                           If Not &itmvndruompr.GetRow(&itmvndumpr).IsNew And
                                 &itmvndruompr.GetRow(&itmvndumpr).IsDeleted Then
                              MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
                              rem MessageBox(0, "", 0, 0, "loc PR");
                           Else /* For If Not &itmvndruompr.GetRow(&itmvndumpr).IsNew And
                                 &itmvndruompr.GetRow(&itmvndumpr).IsDeleted  */
                              rem End-If;
                              If
                                 rem (&itmvndruompr.GetRow(&itmvndumpr).ITM_VNDR_UOM_PR.PRICE_VNDR.IsChanged Or;
                                 (&itmvndruompr.GetRow(&itmvndumpr).ITM_VNDR_UOM_PR.LEAD_TIME.IsChanged Or
                                    /* Added as per new requirement */
                                    &itmvndruompr.GetRow(&itmvndumpr).ITM_VNDR_UOM_PR.PRICE_VNDR.IsChanged Or
                                    &itmvndruompr.GetRow(&itmvndumpr).IsNew) And
                                    Not &itmvndruompr.GetRow(&itmvndumpr).IsDeleted Then
                                 MASTER_ITEM_TBL.Z_PMPO_PUB_CD.Value = "C";
                                 rem MessageBox(0, "", 0, 0, "else loc PR");
                              End-If;
                           End-If;
                        End-For;
                     End-If;
                  End-For;
               End-If;
            End-For;
         End-If;
      End-For;
   End-If;
End-If;

/********* END QR2IIN006 *********/


Local Message &MSG;
Local Rowset &RS;
Local string &MSGNODENAME;
Local array &NODE_ARRAY;
Local SQL &SQL;

&MSG = GetMessage();
&RS = &MSG.GetRowset();
&NODE_ARRAY = CreateArray();

If &RS(1).PROD_GROUP_VW.PROD_GRP_TYPE.Value = "DONOTSEND" Then
   &SQL = GetSQL(SQL.OM_MSG_PUBTO_NODES_SQL, "OA", "PRODUCT_GROUP_SYNC", "OM_CRMPRDG_X");
Else
   &SQL = GetSQL(SQL.OM_MSG_ALL_NODES_SQL, "OA", "PRODUCT_GROUP_SYNC");
End-If;

While &SQL.Fetch(&MSGNODENAME)
   &NODE_ARRAY.Push(&MSGNODENAME);
End-While;
ReturnToServer(&NODE_ARRAY);

Local boolean &yo;
Local Message &MSG;
Local string &filename;

/* Get the Message Z_PMPO_BATPUB_MSG */
&MSG = GetMessage();
/* Load Connector Properties from Node */
&yo = &MSG.IBInfo.LoadConnectorPropFromNode("PSFT_FILEOUTPUT");
/* Property to Overrite */
&filename = "Z_PMPO_BATPUB_MSG_" | %Datetime | ".xml";
/* Overrite Selected/All properties */
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FileName", &filename, %Property);


/************************** $Qwest$ **********************************************
RICEF NO#: QR3EPO080
NAME: Vik Kuttapan
DATE: 06/28/2006
DESCR: Funciton to obtain the next Sequence number and Log error to Error log table
************************************************************************************
*/


/*Begin QWEST QR3EPO080 Vik Kuttapan 06/28/2006 PSCIO-R3
Funciton to obtain the next Sequence number and Log error to Error log table
*/

Function GetLastAutoNum() Returns number;
   
   &SQL = CreateSQL("Select LAST_AUTO_NBR From PS_Z_AUTO_NUM_PPM");
   &SQL.Fetch(&OLD_SEQ_NUM);
   
   If None(&OLD_SEQ_NUM) Then
      &SQL = CreateSQL("INSERT INTO PS_Z_AUTO_NUM_PPM VALUES (:1)");
      &SQL.Execute(1);
      WinMessage("PS_Z_AUTO_NUM_PPM has now been populated", 0)
   End-If;
   
   &SQL = CreateSQL("UPDATE PS_Z_AUTO_NUM_PPM SET LAST_AUTO_NBR = :1 ");
   &NEW_SEQ_NUM = &OLD_SEQ_NUM + 1;
   
   If &SQL.Execute(&NEW_SEQ_NUM) Then
      Return &NEW_SEQ_NUM
   Else
      Return 0;
   End-If;
   
End-Function;


Function Log_PPM_error(&Interface_id, &KeyName1, &KeyName2, &KeyName3, &KeyName4, &KeyName5, &KeyName6, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message) Returns boolean;
   
   /*Instantiate the error table*/
   &error_tbl = CreateRecord(Record.Z_ERROR_LOG);
   
   /*Get error sequence no*/
   &AutoNum = GetLastAutoNum();
   If &AutoNum = 0 Then
      WinMessage("PS_Z_AUTO_NUM_PPM table update failed");
      Return False
   Else
      /* Begin QWEST QR3EPO080 Prashant Prakash 10/05/2006 PSCIO-R3 
      This code was added to replace the SEQNO field with LAST_AUTO_NUM PO */
      rem &error_tbl.SEQNO.Value = &AutoNum;
      &error_tbl.LAST_AUTO_NBR.Value = &AutoNum;
      /* End QWEST QR3EPO080 Prashant Prakash 10/05/2006 PSCIO-R3 */
      &error_tbl.Z_ERR_ORIGIN_ID.Value = &Interface_id;
      &error_tbl.CLOSED_FLG.value = "N";
      &error_tbl.DTTM_CREATED.Value = %Datetime;
      &error_tbl.DESCRLONG.Value = &error_message;
      /*Begin QWEST QR3EPO017 Damodar Pai 07/17/2006 PSCIO-R3*/
      If &Interface_id = "EPOA" Or
            &Interface_id = "EASN" Then
         &error_tbl.Z_ERR_CODE.value = "PSERROR";
      Else
         &error_tbl.Z_ERR_CODE.value = &error_code;
      End-If;
      /*End QWEST QR3EPO017 Damodar Pai 07/17/2006 PSCIO-R3*/
      
      /*Assign the ky fields passed in by the parent app*/
      &error_tbl.z_key1.Value = &KeyName1;
      &error_tbl.z_key2.Value = &KeyName2;
      &error_tbl.z_key3.Value = &KeyName3;
      &error_tbl.z_key4.Value = &KeyName4;
      &error_tbl.z_key5.Value = &KeyName5;
      &error_tbl.z_key6.Value = &KeyName6;
      
      /*Get the Message Information    
   SQLExec("Select A.PUBNODE, A.CHNLNAME, A.PUBID, A.SUBCHANNEL From PSAPMSGPUBHDR A Where A.MSGNAME = 'Z_C2K_ORDER2' And A.PUBNODE = 'Z_C2K_OUT' And A.SUBCHANNEL = 'PURCHASE_ORDER' And A.PUBID = (Select Max(B.PUBID) From PSAPMSGPUBHDR B Where B.PUBNODE = A.PUBNODE And B.CHNLNAME = A.CHNLNAME And B.SUBCHANNEL = A.SUBCHANNEL)", &Pubnode, &Channel, &PubId, &Subchannel);
*/
      &error_tbl.PUBNODE.value = &Pubnode;
      &error_tbl.CHANNEL.value = &Channel;
      &error_tbl.PUBID.value = &PubId;
      &error_tbl.SUBCHANNEL.value = &Subchannel;
      &error_tbl.MESSAGE_ID.value = &Message_ID;
      
      /*If the data did not save correctly return an error*/
      If &error_tbl.Insert() Then
         Return True
      Else
         Return False
      End-If
   End-If;
   
End-Function;

/*End QWEST QR3EPO080 Vik Kuttapan 06/28/2006 PSCIO-R3 */


<*
/*****************************************
 FUNCTION TO RETRIEVE THE PROCESS INSTANCE 
 *****************************************/
Function IsJob(&pi As number) Returns boolean;
   Local boolean &found, &job;
   Local Record &rcd;
   MessageBox(0, "", 0, 0, "Get the JOB Instance");
   &rcd = CreateRecord(Record.PSPRCSRQST);
   &rcd.PRCSINSTANCE.Value = &pi;
   &found = &rcd.SelectByKey();
   If &found Then
      If All(&rcd.JOBINSTANCE.Value) Then
         &job = True;
      End-If;
   End-If;
   Return &job;
End-Function;

Function CriteriaForProcessInstance(&pi As number) Returns number;
   Local number &retval;
   Local number &pi_sqr;
   MessageBox(0, "", 0, 0, "Inside the Alter Process Instance Function");
   MessageBox(0, "", 0, 0, "PI " | &pi);
   rem &retval = &NEWPI;
   If IsJob(&pi) Then
      MessageBox(0, "", 0, 0, "RETURN VALUE " | &retval);
      &pi_sqr = &pi - 2;
      MessageBox(0, "", 0, 0, "New Process Instance " | &pi_sqr);
      rem &retval = ExpandSqlBinds(&retval, &pi_sqr);
      &retval = &pi_sqr;
      MessageBox(0, "", 0, 0, "New return Value " | &retval);
   End-If;
   Return &retval;
End-Function;

/* GET THE ACTUAL PROCESS INSTANCE */
Local Record &Z_PO_PUB_AET;
Local number &NEW_PI;

rem &Z_PO_PUB_AET = GetRecord(Record.Z_PO_PUB_AET);

Z_PO_PUB_AET.BUSINESS_UNIT.Value = Z_PO_PUB_AET.BUSINESS_UNIT;
Z_PO_PUB_AET.PO_ID.Value = Z_PO_PUB_AET.PO_ID;
MessageBox(0, "", 0, 0, "Processing For Business Unit " | Z_PO_PUB_AET.BUSINESS_UNIT | " and PO_ID " | Z_PO_PUB_AET.PO_ID | " AND PI " | Z_PO_PUB_AET.PROCESS_INSTANCE);
&NEW_PI = CriteriaForProcessInstance(Z_PO_PUB_AET.PROCESS_INSTANCE);
Z_PO_PUB_AET.PROCESS_INST_STG.Value = &NEW_PI;
rem &Z_PO_PUB_AET.Update();
*>
/*****************************************
 FUNCTION TO RETRIEVE THE PROCESS INSTANCE 
 *****************************************/
Function IsJob(&pi As number) Returns boolean;
   Local boolean &found, &job;
   Local Record &rcd;
   
   &rcd = CreateRecord(Record.PSPRCSRQST);
   &rcd.PRCSINSTANCE.Value = &pi;
   &found = &rcd.SelectByKey();
   If &found Then
      If All(&rcd.JOBINSTANCE.Value) Then
         &job = True;
      End-If;
   End-If;
   Return &job;
End-Function;

Function CriteriaForProcessInstance(&pi As number, &where As string) Returns string;
   Local string &retval;
   Local number &pi_sqr;
   
   &retval = &where;
   If IsJob(&pi) Then
      &retval = &retval | " AND PROCESS_INSTANCE = :1 AND Z_PUB_FLAG <> 'P' ";
      MessageBox(0, "", 0, 0, "Return Value " | &retval);
      &pi_sqr = &pi - 2;
      MessageBox(0, "", 0, 0, "New PI " | &pi_sqr);
      &retval = ExpandSqlBinds(&retval, &pi_sqr);
   Else
      &retval = &retval | " AND Z_PUB_FLAG <> 'P' ";
   End-If;
   Return &retval;
End-Function;

/***  MAIN  ***/
Local string &sqltext;

Z_PO_PUB_AET.BUSINESS_UNIT.Value = Z_PO_PUB_AET.BUSINESS_UNIT;
Z_PO_PUB_AET.PO_ID.Value = Z_PO_PUB_AET.PO_ID;
MessageBox(0, "", 0, 0, "Processing For Business Unit " | Z_PO_PUB_AET.BUSINESS_UNIT | " and PO_ID " | Z_PO_PUB_AET.PO_ID | " AND PI " | Z_PO_PUB_AET.PROCESS_INSTANCE);
&sqltext = CriteriaForProcessInstance(Z_PO_PUB_AET.PROCESS_INSTANCE, "");
Z_PO_PUB_AET.WHERE_CLAUSE.Value = &sqltext;
rem Z_PO_PUB_AET.PROCESS_INST_STG.Value = &NEW_PI;


rem Declare Function Load_Comments_Tbl PeopleCode COMM_WRK1.FORMULA FieldFormula;

/************************
 Initialize the variables
*************************/
Function InitVariables()
   /* Fields Added For PO PUBLISH */
   &BU = "";
   &PO_ID = "";
   &CHNG_ORD_BATCH = "";
   &NAME1 = "";
   &VENADDR1 = "";
   &VENADDR2 = "";
   &VENADDR3 = "";
   &VENADDR4 = "";
   &VENCOUN = "";
   &VENCITY = "";
   &VENSTATE = "";
   &VENPOSTAL = "";
   &ATTN_TO = "";
   &DESCR = "";
   &ADDR1 = "";
   &ADDR2 = "";
   &ADDR3 = "";
   &ADDR4 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &COCD = "";
   &Z_ORDER_TYPE = "";
   &DSC_TRMS_AVAIL_FLG = "";
   &TERMS_ADJUST_DAYS = "";
   &DSCNT_TRMS_PERCENT = "";
   &TMG_DAY_INCR_VAL = "";
   &Z_FIRST_NAME = "";
   &MIDDLE_NAME = "";
   &Z_LAST_NAME = "";
   &Z_SMTP = "";
   &WS_WORK_PHONE = "";
   &OPRID = "";
   &COMMENT_ID = "";
   &RANDOM = "";
   &BU_LINE = "";
   &PO_LINE = "";
   &LINE_NBR = "";
   &INV_ITEM_ID = "";
   &ITM_ID_VNDR = "";
   &UOM = "";
   &MFG_ITM_ID = "";
   &CNTRCT_ID = "";
   &DESCR254 = "";
   &DESCR60 = "";
   &BU_SCHED = "";
   &PO_SCHED = "";
   &LINE_NBR_SCHED = "";
   &SCHED_NBR = "";
   &PRICE_PO = "";
   &SHIPTO_ID = "";
   &QTY_PO = "";
   &SHIP_TYPE_ID = "";
   &SHIP_DATE = "";
   &L_ADDR1 = "";
   &L_ADDR2 = "";
   &L_ADDR3 = "";
   &L_ADDR4 = "";
   &L_CO_CD = "";
   &L_CITY = "";
   &L_STATE = "";
   &L_POSTAL = "";
   &SHIP_DESCR = "";
   &BU_DISTRIB = "";
   &PO_ID_DISTRIB = "";
   &LINE_NBR_DISTRIB = "";
   &SCHED_NBR_DISTRIB = "";
   &DISTRIB_LINE_NUM = "";
   &DLOC = "";
   &BU_REQ = "";
   &REQ_ID = "";
   &REQ_LINE_NBR = "";
   &REQ_SCHED_NBR = "";
   &REQUESTER_ID = "";
   &D_Z_FIRST_NAME = "";
   &D_MIDDLE_NAME = "";
   &D_Z_LAST_NAME = "";
   &D_Z_SMTP = "";
   &D_WS_WORK_PHONE = "";
   &D_ADDR1 = "";
   &D_ADDR2 = "";
   &D_ADDR3 = "";
   &D_ADDR4 = "";
   &D_CO_CD = "";
   &D_CITY = "";
   &D_STATE = "";
   &D_POSTAL = "";
   /*EO_BATLIB_AET.CREATE_HDR_FLG = "N";
   EO_BATLIB_AET.CREATE_TRL_FLG = "N";
   EO_BATLIB_AET.AE_APPLID = "EOL_PUBLISH";
   EO_BATLIB_AET.AE_SECTION = "FLATFILE";*/
   /* Fields Added by PRASHANT */
End-Function;


/*******************************
 NEW PO FUNCTION FOR EDX PUBLISH
 *******************************/
rem Function EDX_PUBLISH(&Z_PO_HDR As Record, &Z_PO_LINE As Rowset, &Z_PO_SCHED As Rowset, &Z_PO_DISTRIB As Rowset);
Function EDX_PUBLISH(&Z_PO_HDR As Record)
   
   SQLExec("Select BUSINESS_UNIT from PS_Z_BU_PM_TBL Where Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &NON_BU);
   If All(&NON_BU) Then
      Local XmlDoc &NEWDOC;
      Local string &PPSTR;
      
      &PPSTR = "Prashant Srivastava. Creater, PROPRIETOR" | Char(13) | "PP - 9819625468";
      
      MessageBox(0, "", 0, 0, "Starting Header Call with PO_ID " | Z_PO_PUB_AET.PO_ID);
      InitVariables();
      /* Retrieve HEADER Values for the BUSINESS UNIT and PO_ID */
      MessageBox(0, "", 0, 0, "Retrieve Header Values");
      rem SQLExec("Select PO_DT, PO_REF, PO_STATUS, RECV_STATUS, VENDOR_SETID, VENDOR_ID, VNDR_LOC, BUYER_ID, PYMNT_TERMS_CD, BUYER_ID, BILL_LOCATION, CHNG_ORD_BATCH, CHNG_ORD_SEQ, CHANGE_STATUS , ORIGIN , OPRID_ENTERED_BY, ENTERED_DT, OPRID_APPROVED_BY, APPROVAL_DT, OPRID_MODIFIED_BY, LAST_DTTM_UPDATE FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &PO_DT, &PO_REF, &PO_STATUS, &RECV_STATUS, &VENSETID, &VENID, &VNDR_LOC, &BUYER_ID, &PYMNT_CD, &BUYER_ID, &BILL_LOC, &CHNG_ORD_BATCH, &CHNG_ORD_SEQ, &CHNG_STATUS, &ORIGIN, &OPRID_ENT, &ENT_DT, &OPRID_APP, &APP_DT, &OPRID_MODIF, &LAST_DTTM_UPD);
      
      /* HEADER ROWSET */
      
      &DISP_METHOD = &Z_PO_HDR.DISP_METHOD.Value;
      &PO_DT = &Z_PO_HDR.PO_DT.Value;
      &PO_REF = &Z_PO_HDR.PO_REF.Value;
      &PO_STATUS = &Z_PO_HDR.PO_STATUS.Value;
      &RECV_STATUS = &Z_PO_HDR.RECV_STATUS.Value;
      &VENSETID = &Z_PO_HDR.VENDOR_SETID.Value;
      &VENID = &Z_PO_HDR.VENDOR_ID.Value;
      &VNDR_LOC = &Z_PO_HDR.VNDR_LOC.Value;
      &PYMNT_CD = &Z_PO_HDR.PYMNT_TERMS_CD.Value;
      &BUYER_ID = &Z_PO_HDR.BUYER_ID.Value;
      &BILL_LOC = &Z_PO_HDR.BILL_LOCATION.Value;
      &CHNG_ORD_BATCH = &Z_PO_HDR.CHNG_ORD_BATCH.Value;
      &CHNG_ORD_SEQ = &Z_PO_HDR.CHNG_ORD_SEQ.Value;
      &CHNG_STATUS = &Z_PO_HDR.CHANGE_STATUS.Value;
      &ORIGIN = &Z_PO_HDR.ORIGIN.Value;
      &OPRID_ENT = &Z_PO_HDR.OPRID_ENTERED_BY.Value;
      &ENT_DT = &Z_PO_HDR.ENTERED_DT.Value;
      &OPRID_APP = &Z_PO_HDR.OPRID_APPROVED_BY.Value;
      &APP_DT = &Z_PO_HDR.APPROVAL_DT.Value;
      &OPRID_MODIF = &Z_PO_HDR.OPRID_MODIFIED_BY.Value;
      &LAST_DTTM_UPD = &Z_PO_HDR.LAST_DTTM_UPDATE.Value;
      
      rem &SQL_HDR = CreateSQL("Select VENDOR_SETID, VENDOR_ID, PYMNT_TERMS_CD, BUYER_ID, BILL_LOCATION, CHNG_ORD_BATCH FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      
      rem While &SQL_HDR.Fetch(&VENSETID, &VENID, &PYMNT_CD, &BUYER_ID, &BILL_LOC, &CHNG_ORD_BATCH);
      /* Retrieve Address Details from Cross Reference Location Table */
      SQLExec("Select DESCR, ATTN_TO, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, PHONE, CITY, STATE, POSTAL, COUNTRY FROM PS_Z_PO_LOC_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LOCATION = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &BILL_LOC, &DESCR, &ATTN_TO, &ADDR1, &ADDR2, &ADDR3, &ADDR4, &PHONE, &CITY, &STATE, &POSTAL, &COUNT_HDR);
      /* Retrieve Comments */
      rem SQLExec("Select OPRID, COMMENT_ID, RANDOM_CMMT_NBR , COMMENTS_2000 From PS_Z_PO_COMMTS_EVW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
      /* Retrieve the VENDOR ADDRESS */
      SQLExec("Select NAME1, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, COUNTRY, CITY, STATE, POSTAL From PS_Z_N_PO_VADD_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NAME1, &VENADDR1, &VENADDR2, &VENADDR3, &VENADDR4, &VENCOUN, &VENCITY, &VENSTATE, &VENPOSTAL);
      /* Retrieve PAYMENT DETAILS */
      SQLExec("Select DSC_TRMS_AVAIL_FLG, TERMS_ADJUST_DAYS, DSCNT_TRMS_PERCENT, TMG_DAY_INCR_VAL From PS_Z_PO_PYMNT_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DSC_TRMS_AVAIL_FLG, &TERMS_ADJUST_DAYS, &DSCNT_TRMS_PERCENT, &TMG_DAY_INCR_VAL);
      rem SQLExec("Select DISP_METHOD From PS_PO_HDR where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD);
      /* Retrieve the BUSINESS UNIT DETAILS */
      rem SQLExec("Select DESCR From PS_BUS_UNIT_TBL_FS Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &DESCR_BU);
      /* Retrieve Terms and Conditions for the BUSINESS_UNIT */
      /* Retrieve the BUSINESS UNIT DETAILS */
      rem SQLExec("Select BUSINESS_UNIT , DESCR, STD_COMMENT_TYPE, STD_COMMENT_ID From PS_Z_PO_BU_DET_EVW Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      rem SQLExec("Select STD_COMMENT_TYPE, STD_COMMENT_ID From PS_BUS_UNIT_TBL_PM Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2", Record.Z_PO_BU_DET_EVW, Z_PO_PUB_AET.BUSINESS_UNIT, &NEW_BU, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      
      /* PO Total */
      rem SQLExec("Select");
      rem &LOG_PO.WriteLine("BUSINESS UNIT :" | Z_PO_PUB_AET.BUSINESS_UNIT);
      rem &LOG_PO.WriteLine("PO_ID : " | Z_PO_PUB_AET.PO_ID);
      rem &LOG_PO.WriteLine("Vendor SETID: " | &VENSETID);
      
      rem &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><PO_FILE/>");
      &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><Z_PO_PUBLISH_MSG/>");
      /* LOAD IB CONTENT */
      rem &ret = &NEWDOC.LoadIBContent(&PPSTR);
      rem &procInst = &NEWDOC.DocumentElement.AddProcessInstruction("xml-stylesheet", "href=""book.css"" type=""text/css""");
      rem &AddNode0 = &NEWDOC.DocumentElement.AddElement("POD");
      &AddNode0 = &NEWDOC.DocumentElement.AddElement("MsgData");
      rem &AddNode0.AddAttribute("BU_PUB", Z_PO_PUB_AET.BUSINESS_UNIT);
      rem &AddNode0.AddAttribute("PO_PUB", Z_PO_PUB_AET.PO_ID);
      rem &AddNode0.AddAttribute("PO_TOTAL", Z_PO_PUB_AET.PO_AMT_TTL);
      /* Add CDATA Section */
      rem &cdataNode = &AddNode0.AddCDataSection("Testing...STARTS");
      
      /********************** 
       Create the Header Loop 
       **********************/
      
      rem &AddNode_DbName = &AddNode0.AddElement("DBNAME");
      rem &AddNode_DbName.NodeValue = %DbName;
      &AddNode_TRANSACTION = &AddNode0.AddElement("Transaction");
      &AddNode_HEADER = &AddNode_TRANSACTION.AddElement("Z_HEADER_VW");
      &AddNode_HEADER.AddAttribute("class", "R");
      &AddNode_BU = &AddNode_HEADER.AddElement("BUSINESS_UNIT");
      &AddNode_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
      rem &AddNode_BU.NodeValue = "US001";
      &AddNode_DESCR_BU = &AddNode_HEADER.AddElement("DESCR_BU");
      &AddNode_DESCR_BU.NodeValue = &DESCR_BU;
      &AddNode_PO_ID = &AddNode_HEADER.AddElement("PO_ID");
      &AddNode_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
      rem &AddNode_PO_ID.NodeValue = "0000000062";
      &AddNode_CHNG_ORD_BATCH = &AddNode_HEADER.AddElement("CHNG_ORD_BATCH");
      &AddNode_CHNG_ORD_BATCH.NodeValue = &CHNG_ORD_BATCH;
      &AddNode_CHNG_ORD_SEQ = &AddNode_HEADER.AddElement("CHNG_ORD_SEQ");
      &AddNode_CHNG_ORD_SEQ.NodeValue = &CHNG_ORD_SEQ;
      &AddNode_CHNG_STATUS = &AddNode_HEADER.AddElement("CHANGE_STATUS");
      &AddNode_CHNG_STATUS.NodeValue = &CHNG_STATUS;
      &AddNode_Z_ORD = &AddNode_HEADER.AddElement("Z_ORD_TYPE");
      &AddNode_Z_ORD.NodeValue = &Z_ORD_TYPE;
      &AddNode_Z_JOB = &AddNode_HEADER.AddElement("Z_JOB_TYPE");
      &AddNode_Z_JOB.NodeValue = &Z_JOB_TYPE;
      &AddNode_ORIGIN = &AddNode_HEADER.AddElement("ORIGIN");
      &AddNode_ORIGIN.NodeValue = &ORIGIN;
      &AddNode_PO_STATUS = &AddNode_HEADER.AddElement("PO_STATUS");
      &AddNode_PO_STATUS.NodeValue = &PO_STATUS;
      &AddNode_RECV_STATUS = &AddNode_HEADER.AddElement("RECV_STATUS");
      &AddNode_RECV_STATUS.NodeValue = &RECV_STATUS;
      /* ADD DISPATCH METHOD TAG */
      &AddNode_DISP_METHOD = &AddNode_HEADER.AddElement("DISP_METHOD");
      &AddNode_PO_DT = &AddNode_HEADER.AddElement("PO_DT");
      &AddNode_PO_DT.NodeValue = &PO_DT;
      &AddNode_Z_BVAPP = &AddNode_HEADER.AddElement("Z_BVAPP_NUMBER");
      &AddNode_Z_BVAPP.NodeValue = &Z_BVAPP_NUMBER;
      &AddNode_PO_REF = &AddNode_HEADER.AddElement("PO_REF");
      &AddNode_PO_REF.NodeValue = &PO_REF;
      &AddNode_BILL_LOC = &AddNode_HEADER.AddElement("BILL_LOCATION");
      &AddNode_BILL_LOC.NodeValue = &BILL_LOC;
      /* BILL LOCATION ADDRESS */
      &AddNode_ADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_BILL");
      &AddNode_ADDR1.NodeValue = &ADDR1;
      &AddNode_ADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_BILL");
      &AddNode_ADDR2.NodeValue = &ADDR2;
      &AddNode_ADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_BILL");
      &AddNode_ADDR3.NodeValue = &ADDR3;
      &AddNode_ADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_BILL");
      &AddNode_ADDR4.NodeValue = &ADDR4;
      &AddNode_CITY = &AddNode_HEADER.AddElement("CITY_BILL");
      &AddNode_CITY.NodeValue = &CITY;
      &AddNode_STATE = &AddNode_HEADER.AddElement("STATE_BILL");
      &AddNode_STATE.NodeValue = &STATE;
      &AddNode_POSTAL = &AddNode_HEADER.AddElement("POSTAL_BILL");
      &AddNode_POSTAL.NodeValue = &POSTAL;
      &AddNode_COCD = &AddNode_HEADER.AddElement("COUNTRY_BILL"); /* CONFIRM WHETHER ITS THE COUNTRY CODE */
      &AddNode_COCD.NodeValue = &COUNT_HDR;
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("Provide Flags at Zero Level to identify the System.");
      
      /* CHECK FOR DISPATCH METHODS */
      /*
      Evaluate &DISP_METHOD
      When "B2B"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "EDX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "EML"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "FAX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "LCM"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "ORB"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "PHN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "PRN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "RMD"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      End-Evaluate;
	  */
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("DISPATCH BLOCK....ENDS");
      
      /* Vendor Details */
      
      &AddNode_VENDOR_SETID = &AddNode_HEADER.AddElement("VENDOR_SETID");
      rem &AddNode_VENDOR_SETID.NodeValue = &VENSETID;
      &AddNode_VENDOR_SETID.NodeValue = "USWC"; /* Client Wants USWC */
      &AddNode_VENDOR_ID = &AddNode_HEADER.AddElement("VENDOR_ID");
      &AddNode_VENDOR_ID.NodeValue = &VENID;
      &AddNode_VNDR_LOC = &AddNode_HEADER.AddElement("VNDR_LOC");
      &AddNode_VNDR_LOC.NodeValue = &VNDR_LOC;
      /* Create Vendor Address Block */
      &AddNode_VENADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_VNDR");
      &AddNode_VENADDR1.NodeValue = &VENADDR1;
      &AddNode_VENADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_VNDR");
      &AddNode_VENADDR2.NodeValue = &VENADDR2;
      &AddNode_VENADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_VNDR");
      &AddNode_VENADDR3.NodeValue = &VENADDR3;
      &AddNode_VENADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_VNDR");
      &AddNode_VENADDR4.NodeValue = &VENADDR4;
      &AddNode_VENCITY = &AddNode_HEADER.AddElement("CITY_VNDR");
      &AddNode_VENCITY.NodeValue = &VENCITY;
      &AddNode_VENSTATE = &AddNode_HEADER.AddElement("STATE_VNDR");
      &AddNode_VENSTATE.NodeValue = &VENSTATE;
      &AddNode_VENPOSTAL = &AddNode_HEADER.AddElement("POSTAL_VNDR");
      &AddNode_VENPOSTAL.NodeValue = &VENPOSTAL;
      &AddNode_VENCOUNTRY = &AddNode_HEADER.AddElement("COUNTRY_VNDR");
      &AddNode_VENCOUNTRY.NodeValue = &VENCOUN;
      
      /* PAYMENT TERMS CODE */
      &AddNode_DSC_TRMS_AVAIL_FLG = &AddNode_HEADER.AddElement("DSC_TRMS_AVAIL_FLG");
      &AddNode_DSC_TRMS_AVAIL_FLG.NodeValue = &DSC_TRMS_AVAIL_FLG;
      &AddNode_DSCNT_PER = &AddNode_HEADER.AddElement("DSCNT_TRMS_PERCENT");
      &AddNode_DSCNT_PER.NodeValue = &DSCNT_TRMS_PERCENT;
      &AddNode_TERMS_DAYS = &AddNode_HEADER.AddElement("TERMS_ADJUST_DAYS");
      &AddNode_TERMS_DAYS.NodeValue = &TERMS_ADJUST_DAYS;
      &AddNode_TMG_DAY = &AddNode_HEADER.AddElement("TMG_DAY_INCR_VAL");
      &AddNode_TMG_DAY.NodeValue = &TMG_DAY_INCR_VAL;
      
      &AddNode_BUYER = &AddNode_HEADER.AddElement("BUYER_ID");
      &AddNode_BUYER.NodeValue = &BUYER_ID;
      rem &LOG_PO.WriteLine("Vendor ID " | &VENID);
      
      
      
      rem &AddNode_CommentNode_VENDOR = &AddNode_HEADER.AddComment("Vendor Address Block....STARTS");
      rem &AddNode_VNAME1 = &AddNode_HEADER.AddElement("V_NAME1_V");
      rem &AddNode_VNAME1.NodeValue = &NAME1;
      rem &AddNode_CommentNode_VENDOR = &AddNode_HEADER.AddComment("Vendor Address Block....ENDS");
      
      /* Create the Address Block */
      
      rem &AddNode_CommentNode_ADDR = &AddNode_HEADER.AddComment("Address Block....STARTS");
      rem &AddNode_ATTN_TO = &AddNode_HEADER.AddElement("ATTN_TO");
      rem &AddNode_ATTN_TO.NodeValue = &ATTN_TO;
      rem &AddNode_DESCR0 = &AddNode_HEADER.AddElement("DESCR");
      rem &AddNode_DESCR0.NodeValue = &DESCR;
      rem &AddNode_CommentNode_ADDR = &AddNode_HEADER.AddComment("Address Block....ENDS");
      
      
      /* PS_Z_PO_HDR_PPM */
      
      rem &AddNode_CommentTable = &AddNode_HEADER.AddComment("All Values to be picked up from PS_Z_PO_HDR_PPM");
      
      
      &AddNode_Z_REQ = &AddNode_HEADER.AddElement("Z_REQUESTOR_ID");
      &AddNode_Z_REQ.NodeValue = &Z_REQ_ID;
      /* PS_Z_MNET_TBL */
      
      rem &AddNode_CommentNode_MNET = &AddNode_HEADER.AddComment("MNET BLOCK....STARTS");
      &AddNode_Z_FIRST_NAME = &AddNode_HEADER.AddElement("Z_FIRST_NAME");
      &AddNode_Z_FIRST_NAME.NodeValue = &Z_FIRST_NAME;
      &AddNode_MIDDLE_NAME = &AddNode_HEADER.AddElement("MIDDLE_NAME");
      &AddNode_MIDDLE_NAME.NodeValue = &MIDDLE_NAME;
      &AddNode_Z_LAST_NAME = &AddNode_HEADER.AddElement("Z_LAST_NAME");
      &AddNode_Z_LAST_NAME.NodeValue = &Z_LAST_NAME;
      &AddNode_Z_SMTP = &AddNode_HEADER.AddElement("Z_SMTP_ADDR");
      &AddNode_Z_SMTP.NodeValue = &Z_SMTP;
      
      /* PS_PO_HDR AGAIN */
      &AddNode_OPRID_ENT = &AddNode_HEADER.AddElement("OPRID_ENTERED_BY");
      &AddNode_OPRID_ENT.NodeValue = &OPRID_ENT;
      &AddNode_ENT_DT = &AddNode_HEADER.AddElement("ENTERED_DT");
      &AddNode_ENT_DT.NodeValue = &ENT_DT;
      &AddNode_OPRID_APP = &AddNode_HEADER.AddElement("OPRID_APPROVED_BY");
      &AddNode_OPRID_APP.NodeValue = &OPRID_APP;
      &AddNode_APP_DT = &AddNode_HEADER.AddElement("APPROVAL_DT");
      &AddNode_APP_DT.NodeValue = &APP_DT;
      &AddNode_OPRID_MODIF = &AddNode_HEADER.AddElement("OPRID_MODIFIED_BY");
      &AddNode_OPRID_MODIF.NodeValue = &OPRID_MODIF;
      &AddNode_LAST_DTTM_UPD = &AddNode_HEADER.AddElement("LAST_DTTM_UPDATE");
      &AddNode_LAST_DTTM_UPD.NodeValue = &LAST_DTTM_UPD;
      
      rem &AddNode_WS_WORK_PHONE = &AddNode_HEADER.AddElement("WS_WORK_PHONE");
      rem &AddNode_WS_WORK_PHONE.NodeValue = &WS_WORK_PHONE;
      rem &AddNode_CommentNode_MNET = &AddNode_HEADER.AddComment("MNET BLOCK....ENDS");
      /* PO TOTAL AMOUNT DERIVED */
      &AddNode_PO_AMT_TTL = &AddNode_HEADER.AddElement("PO_AMOUNT");
      &AddNode_PO_AMT_TTL.NodeValue = Z_PO_PUB_AET.PO_AMT_TTL;
      /* Create the Comment Block */
      rem &AddNode_CommentNode_COMM = &AddNode_HEADER.AddComment("COMMENT BLOCK....STARTS");
      /* Call function for Comment Block */
      rem Load_Comments_Tbl(&COMMENT_ID, &OPRID, &RANDOM, &COMM_2000);
      Local SQL &COMMENTS_SQL_HDR = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "HDR", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, 0);
      While &COMMENTS_SQL_HDR.Fetch(&COM_BU, &COM_PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
         MessageBox(0, "", 0, 0, "ADD HEADER COMMENTS");
         &AddNode_COMMENTS_HDR = &AddNode_HEADER.AddElement("COMMENTS_HDR");
         rem &AddNode_OPRID = &AddNode_COMMENTS_HDR.AddElement("OPRID");
         rem &AddNode_OPRID.NodeValue = &OPRID;
         rem &AddNode_COMMENT_ID = &AddNode_COMMENTS_HDR.AddElement("COMMENT_ID");
         rem &AddNode_COMMENT_ID.NodeValue = &COMMENT_ID;
         rem &AddNode_RANDOM = &AddNode_COMMENTS_HDR.AddElement("RANDOM_CMMT_NBR");
         rem &AddNode_RANDOM.NodeValue = &RANDOM;
         &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_HDR.AddElement("HEADER_COMMENTS");
         &AddNode_COMMENTS_2000.NodeValue = &COMM_2000;
         /* REUSE CURSOR PROPERTY */
         &COMMENTS_SQL_HDR.ReuseCursor = True;
      End-While; /* WHILE End HDR LEVEL */
      /* PURCHASING BU DETAILS */
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_TYPE");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_TYPE;
      &AddNode_BU_STD_COMM_ID = &AddNode_HEADER.AddElement("STD_COMMENT_ID");
      &AddNode_BU_STD_COMM_ID.NodeValue = &STD_COMMENT_ID;
      rem Load_Comments_Tbl(&COMMENT_ID, &OPRID, &RANDOM_CMMT_NBR, &COMM_2000);
      rem &LOG_PO.WriteLine("Random Comment Number " | &RANDOM);
      rem &AddNode_CommentNode_COMM = &AddNode_HEADER.AddComment("COMMENT BLOCK....ENDS");
      
      /* PS_PO_HDR AGAIN */
      
      rem &AddNode_Comments_HDR = &AddNode_HEADER.AddComment("ENTERED...APPROVED...MODIFIED BY...STARTS");
      rem &AddNode_Comments_HDR = &AddNode_HEADER.AddComment("ENTERED...APPROVED...MODIFIED BY...ENDS");
      
      /* Get Count of No of Lines */
      rem For &iLine = 1 to &Z_PO_LINE.ActiveRowCount;
      SQLExec("Select Count(*) from PS_PO_LINE where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NO_LINES);
      rem MessageBox(0, "", 0, 0, "Rows Affected " | %SqlRows);
      rem &RTNCD = "" | %SqlRows | " row(s) affected.";
      If All(&NO_LINES) Then
         
         /**********************
          Generate the Line Loop
          **********************/
         MessageBox(0, "", 0, 0, "No Lines " | &NO_LINES);
         For &Line = 1 To &NO_LINES;
            rem For &iLine = 1 To &Z_PO_LINE.ActiveRowCount;
            Local Record &AA_PO_LINE = CreateRecord(Record.Z_PO_LN_E_VW);
            rem SQLExec("Select LINE_NBR, CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, ITM_SETID, INV_ITEM_ID, DESCR254_MIXED, ITM_ID_VNDR, VNDR_CATALOG_ID, CATEGORY_ID, CATEGORY_CD, DESCR, UNIT_OF_MEASURE, PRICE_DT_TYPE, MFG_ID, DESCR1, MFG_ITM_ID, CNTRCT_SETID, CNTRCT_ID, CNTRCT_LINE_NBR, RECV_REQ FROM PS_Z_PO_LN_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
            rem SQLExec("%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4", &AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &L_BU, &L_PO_ID, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
            Local string &LINE_STR = "%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4";
            Local SQL &SQL_LINE = CreateSQL(&LINE_STR, &AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
            rem Local SQL &SQL_LINE = CreateSQL("%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4");
            rem &SQL_LINE.Execute(&AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
            rem &SQL_LINE.TraceName = "Z_PO_PUBLISH.6620.STEP1.PC.001";
            Evaluate &SQL_LINE.Status
            When = %SQLStatus_OK
               MessageBox(0, "", 0, 0, "Correct LINE");
               /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
               While &SQL_LINE.Fetch(&L_BU, &L_PO_ID, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ)
                  MessageBox(0, "", 0, 0, "Line " | &Line);
                  &SQL_STR = &SQL_LINE.Value;
                  MessageBox(0, "", 0, 0, "SQL STR LINE " | &SQL_STR);
                  &SQL_LINE.TraceName = "Z_PO_PUBLISH.6620.STEP1.PC.LINE." | &Line;
                  /* LINE LEVEL */
                  &AddNode_LINE = &AddNode_HEADER.AddElement("Z_LINE_VW");
                  &AddNode_LINE.AddAttribute("class", "R");
                  rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....STARTS");
                  &AddNode_LINE_BU = &AddNode_LINE.AddElement("BUSINESS_UNIT");
                  &AddNode_LINE_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                  &AddNode_LINE_PO_ID = &AddNode_LINE.AddElement("PO_ID");
                  &AddNode_LINE_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                  &AddNode_LINE_NBR = &AddNode_LINE.AddElement("LINE_NBR");
                  &AddNode_LINE_NBR.NodeValue = &Line;
                  &AddNode_CN_STS_LINE = &AddNode_LINE.AddElement("CANCEL_STATUS_LINE");
                  &AddNode_CN_STS_LINE.NodeValue = &CANCEL_STATUS_LINE;
                  &AddNode_CHNG_STS = &AddNode_LINE.AddElement("CHANGE_STATUS");
                  &AddNode_CHNG_STS.NodeValue = &CHANGE_STATUS;
                  &AddNode_CHNG_ORD_SEQ_LINE = &AddNode_LINE.AddElement("CHNG_ORD_SEQ_LINE");
                  &AddNode_CHNG_ORD_SEQ_LINE.NodeValue = &CHNG_ORD_SEQ_LINE;
                  /* ITEM DESCRIPTION */
                  &AddNode_ITEM_SETID = &AddNode_LINE.AddElement("ITM_SETID");
                  &AddNode_ITEM_SETID.NodeValue = "USWC"; /* As Per Client Requirement */
                  &AddNode_ITEM_ID = &AddNode_LINE.AddElement("INV_ITEM_ID");
                  &AddNode_ITEM_ID.NodeValue = &INV_ITM_ID;
                  &AddNode_DESCR254_MIXED = &AddNode_LINE.AddElement("ITEM_DESCR");
                  &AddNode_DESCR254_MIXED.NodeValue = &DESCR254_MIXED;
                  &AddNode_ITM_ID_VNDR = &AddNode_LINE.AddElement("ITM_ID_VNDR");
                  &AddNode_ITM_ID_VNDR.NodeValue = &VNDR_ITM_ID;
                  &AddNode_VNDR_CATALOG_ID = &AddNode_LINE.AddElement("VNDR_CATALOG_ID");
                  &AddNode_VNDR_CATALOG_ID.NodeValue = &VNDR_CATALOG_ID;
                  /*CATEGORY CODE */
                  &AddNode_CATEGORY_ID = &AddNode_LINE.AddElement("CATEGORY_ID");
                  &AddNode_CATEGORY_ID.NodeValue = &CAT_ID;
                  &AddNode_CATEGORY_CD = &AddNode_LINE.AddElement("CATEGORY_CD");
                  &AddNode_CATEGORY_CD.NodeValue = &CAT_CD;
                  &AddNode_CATEGORY_DESCR = &AddNode_LINE.AddElement("CATEGORY_DESCR");
                  &AddNode_CATEGORY_DESCR.NodeValue = &CAT_DESCR;
                  /* UNIT OF MEASURE */
                  &AddNode_UOM = &AddNode_LINE.AddElement("UNIT_OF_MEASURE");
                  &AddNode_UOM.NodeValue = &UOM;
                  &AddNode_PRICE_DT_TYPE = &AddNode_LINE.AddElement("PRICE_DT_TYPE");
                  &AddNode_PRICE_DT_TYPE.NodeValue = &PRICE_DT_TYPE;
                  /* MANUFACTURERS DETAILS */
                  &AddNode_MFG_ID = &AddNode_LINE.AddElement("MFG_ID");
                  &AddNode_MFG_ID.NodeValue = &MFG_ID;
                  &AddNode_MFG_DESCR = &AddNode_LINE.AddElement("MFG_DESCR");
                  &AddNode_MFG_DESCR.NodeValue = &MFG_DESCR;
                  &AddNode_MFG_ITM_ID = &AddNode_LINE.AddElement("MFG_ITM_ID");
                  &AddNode_MFG_ITM_ID.NodeValue = &MFG_ITM_ID;
                  /* Add Code for Custom Item Attribute Table - Z_ITEM_ATT_TBL */
                  &AddNode_Z_ICC_CD = &AddNode_LINE.AddElement("Z_ICC_CODE_CD");
                  &AddNode_Z_ICC_CD.NodeValue = &Z_ICC_CD;
                  &AddNode_Z_AIC_CD = &AddNode_LINE.AddElement("Z_AIC_CODE_FLD");
                  &AddNode_Z_AIC_CD.NodeValue = &Z_AIC_FLD;
                  &AddNode_Z_DEVICE_IND = &AddNode_LINE.AddElement("Z_DEVICE_IND");
                  &AddNode_Z_DEVICE_IND.NodeValue = &Z_DEVICE_IND;
                  /* REMEDY REQUEST FLAG */
                  &AddNode_Z_REM_REQ_FLG = &AddNode_LINE.AddElement("Z_REMEDY_RQST_FLG");
                  &AddNode_Z_REM_REQ_FLG.NodeValue = &Z_REM_REQ_FLG;
                  /* CONTRACT DETAILS */
                  &AddNode_CNTRCT_SETID = &AddNode_LINE.AddElement("CNTRCT_SETID");
                  &AddNode_CNTRCT_SETID.NodeValue = &CNTRCT_SETID;
                  &AddNode_CNTRCT_ID = &AddNode_LINE.AddElement("CNTRCT_ID");
                  &AddNode_CNTRCT_ID.NodeValue = &CNTRCT_ID;
                  &AddNode_CNTRCT_LINE_NBR = &AddNode_LINE.AddElement("CNTRCT_LINE_NBR");
                  &AddNode_CNTRCT_LINE_NBR.NodeValue = &CNTRCT_LINE_NBR;
                  &AddNode_RECV_REQ = &AddNode_LINE.AddElement("RECV_REQ");
                  &AddNode_RECV_REQ.NodeValue = &RECV_REQ;
                  /* Create the COMMENTS BLOCK LINE LEVEL */
                  Local SQL &COMMENTS_SQL_LINE = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "LIN", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
                  While &COMMENTS_SQL_LINE.Fetch(&COM_BU, &COM_PO_ID, &OPRID_LN, &COMMENT_ID_LN, &RANDOM_LN, &COMM_2000_LN);
                     MessageBox(0, "", 0, 0, "Adding Line Comments");
                     &AddNode_COMMENTS_LINE = &AddNode_LINE.AddElement("COMMENTS_LINE");
                     rem &AddNode_OPRID_LN = &AddNode_COMMENTS_LINE.AddElement("OPRID_LN");
                     rem &AddNode_OPRID_LN.NodeValue = &OPRID_LN;
                     rem &AddNode_COMMENT_ID_LN = &AddNode_COMMENTS_LINE.AddElement("COMMENT_ID_LN");
                     rem &AddNode_COMMENT_ID_LN.NodeValue = &COMMENT_ID_LN;
                     rem &AddNode_RANDOM_LN = &AddNode_COMMENTS_LINE.AddElement("RANDOM_CMMT_NBR_LN");
                     rem &AddNode_RANDOM_LN.NodeValue = &RANDOM_LN;
                     &AddNode_COMMENTS_2000_LN = &AddNode_COMMENTS_LINE.AddElement("LINE_COMMENTS");
                     &AddNode_COMMENTS_2000_LN.NodeValue = &COMM_2000_LN;
                     &COMMENTS_SQL_LINE.ReuseCursor = True;
                  End-While; /* WHILE End LINE LEVEL */
                  &AddNode_Z_QUOTE_NBR = &AddNode_LINE.AddElement("Z_QUOTE_NUMBER");
                  &AddNode_Z_QUOTE_NBR.NodeValue = &Z_QUOTE_NBR;
                  &SQL_LINE.ReuseCursor = True;
               End-While; /* LINE LEVEL */
               &SQL_LINE.Close();
               Break;
            When = %SQLStatus_NotFound
               rem MessageBox(0, "", 0, 0, "NOT FOUND LINE");
               Error ("LINE Not Found");
               Break;
            When = %SQLStatus_Duplicate
               rem MessageBox(0, "", 0, 0, "DUPLICATE LINE");
               Error ("DUPLICATE LINE");
               Break;
            End-Evaluate;
            rem &SQL_LINE = CreateSQL("Select LINE_NBR, CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, ITM_SETID, INV_ITEM_ID, DESCR254_MIXED, ITM_ID_VNDR, VNDR_CATALOG_ID, CATEGORY_ID, CATEGORY_CD, DESCR, UNIT_OF_MEASURE, PRICE_DT_TYPE, MFG_ID, DESCR1, MFG_ITM_ID, CNTRCT_SETID, CNTRCT_ID, CNTRCT_LINE_NBR, RECV_REQ FROM PS_Z_PO_LN_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &iLine);
            rem While &SQL_LINE.Fetch(&LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
            rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....ENDS");
            
            /* Get Count of No of Schedules */
            rem For &iSched = 1 to &Z_PO_SCHED.ActiveRowCount;
            SQLExec("Select Count(*) from PS_PO_LINE_SHIP Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &NO_SCHED);
            
            If All(&NO_SCHED) Then
               
               /**************************
                Generate the Schedule Loop
                **************************/
               MessageBox(0, "", 0, 0, "No of Schedules " | &NO_SCHED);
               For &SCHED = 1 To &NO_SCHED;
                  Local Record &AA_PO_SCHED = CreateRecord(Record.Z_PO_SCHED_EVW);
                  rem For &iSched = 1 To &Z_PO_SCHED.ActiveRowCount;
                  /* Instead Use CreateSQL and While loop */
                  &SQL_STRING_SCHED = "%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5";
                  Local SQL &SQL_SCHEDULE = CreateSQL(&SQL_STRING_SCHED, &AA_PO_SCHED, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED);
                  rem Local SQL &SQL_SCHEDULE = CreateSQL("%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5");
                  rem &SQL_SCHEDULE.Execute(&AA_PO_SCHED, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED);
                  Evaluate &SQL_SCHEDULE.Status
                  When = %SQLStatus_OK
                     MessageBox(0, "", 0, 0, "Correct SCHEDULE");
                     /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
                     While &SQL_SCHEDULE.Fetch(&S_BU, &S_PO_ID, &S_LINE, &S_SCHED, &CANCEL_STATUS_SCHED, &CHNG_STATUS_SCHED, &CHNG_ORD_SEQ_SCHED, &PRICE_PO, &CURRENCY_CD, &SHIPTO_SETID, &SHIPTO_ID, &QTY_PO, &ZERO_PRICE_IND, &SCHED_MERCHANDISE_AMT, &SUT_APP, &FREIGHT_TERMS, &SHIP_TYPE_ID, &SHIP_DATE, &DUE_DT, &DUE_TIME, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &COUNTRY_SCHED, &SHIP_DESCR)
                        rem While &SQL_SCHEDULE.Fetch(&AA_PO_SCHED);
                        rem &SCHED = &SCHED + 1;
                        MessageBox(0, "", 0, 0, "Schedule " | &SCHED);
                        &SQL_SCHEDULE.TraceName = "Z_PO_PUBLISH.6620.Step1.PC.SCHEDULE." | &SCHED;
                        MessageBox(0, "", 0, 0, "&CANCEL_STATUS_SCHED " | &CANCEL_STATUS_SCHED);
                        rem End-While;
                        rem &SQL_SCHEDULE.Close();
                        /* PS_PO_LINE */
                        rem &LOG_PO.WriteLine("No of Schedules " | &NO_SCHED);
                        &AddNode_SCHEDULE = &AddNode_LINE.AddElement("Z_SCHEDULE_VW");
                        &AddNode_SCHEDULE.AddAttribute("class", "R");
                        rem &AddNode_CommentNode_SCHED = &AddNode_SCHEDULE.AddComment("SCHEDULE Block....STARTS");
                        &AddNode_SCHED_BU = &AddNode_SCHEDULE.AddElement("BUSINESS_UNIT");
                        &AddNode_SCHED_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                        &AddNode_SCHED_PO_ID = &AddNode_SCHEDULE.AddElement("PO_ID");
                        &AddNode_SCHED_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                        &AddNode_SCHED_LINE_NBR = &AddNode_SCHEDULE.AddElement("LINE_NBR");
                        &AddNode_SCHED_LINE_NBR.NodeValue = &Line;
                        &AddNode_SCHED_NBR = &AddNode_SCHEDULE.AddElement("SCHED_NBR");
                        &AddNode_SCHED_NBR.NodeValue = &SCHED;
                        &AddNode_CN_STS_SCHED = &AddNode_SCHEDULE.AddElement("CANCEL_STATUS_SCHED");
                        &AddNode_CN_STS_SCHED.NodeValue = &CANCEL_STATUS_SCHED;
                        &AddNode_CHNG_STATUS_SCHED = &AddNode_SCHEDULE.AddElement("CHANGE_STATUS_SCHED");
                        &AddNode_CHNG_STATUS_SCHED.NodeValue = &CHNG_STATUS_SCHED;
                        &AddNode_CHNG_ORD_SEQ_SCHED = &AddNode_SCHEDULE.AddElement("CHNG_ORD_SEQ_SCHED");
                        &AddNode_CHNG_ORD_SEQ_SCHED.NodeValue = &CHNG_ORD_SEQ_SCHED;
                        &AddNode_PRICE_PO = &AddNode_SCHEDULE.AddElement("PRICE_PO");
                        &AddNode_PRICE_PO.NodeValue = &PRICE_PO;
                        &AddNode_CURRENCY_CD = &AddNode_SCHEDULE.AddElement("CURRENCY_CD");
                        &AddNode_CURRENCY_CD.NodeValue = &CURRENCY_CD;
                        &AddNode_QTY_PO = &AddNode_SCHEDULE.AddElement("QTY_PO");
                        &AddNode_QTY_PO.NodeValue = &QTY_PO;
                        &AddNode_ZERO_PRICE_IND = &AddNode_SCHEDULE.AddElement("ZERO_PRICE_IND");
                        &AddNode_ZERO_PRICE_IND.NodeValue = &ZERO_PRICE_IND;
                        &AddNode_SHIP_DATE = &AddNode_SCHEDULE.AddElement("SHIP_DATE");
                        &AddNode_SHIP_DATE.NodeValue = &SHIP_DATE;
                        &AddNode_DUE_DT = &AddNode_SCHEDULE.AddElement("DUE_DT");
                        &AddNode_DUE_DT.NodeValue = &DUE_DT;
                        &AddNode_DUE_TIME = &AddNode_SCHEDULE.AddElement("DUE_TIME");
                        &AddNode_DUE_TIME.NodeValue = &DUE_TIME;
                        /* SHIP TO LOCATION DETAILS */
                        &AddNode_SHIPTO_SETID = &AddNode_SCHEDULE.AddElement("SHIPTO_SETID");
                        &AddNode_SHIPTO_SETID.NodeValue = &SHIPTO_SETID;
                        &AddNode_SHIPTO_ID = &AddNode_SCHEDULE.AddElement("SHIPTO_ID");
                        &AddNode_SHIPTO_ID.NodeValue = &SHIPTO_ID;
                        /* PS_SHIPTO_TBL */
                        &AddNode_DESCR_SHIP_SCHED = &AddNode_SCHEDULE.AddElement("DESCR_SHIPTO");
                        &AddNode_DESCR_SHIP_SCHED.NodeValue = &DESCR_SHIP_SCHED;
                        /* LOCATION_TBL */
                        &AddNode_L_ADDR1 = &AddNode_SCHEDULE.AddElement("ADDRESS1_SHIPTO");
                        &AddNode_L_ADDR1.NodeValue = &L_ADDR1;
                        &AddNode_L_ADDR2 = &AddNode_SCHEDULE.AddElement("ADDRESS2_SHIPTO");
                        &AddNode_L_ADDR2.NodeValue = &L_ADDR2;
                        &AddNode_L_ADDR3 = &AddNode_SCHEDULE.AddElement("ADDRESS3_SHIPTO");
                        &AddNode_L_ADDR3.NodeValue = &L_ADDR3;
                        &AddNode_L_ADDR4 = &AddNode_SCHEDULE.AddElement("ADDRESS4_SHIPTO");
                        &AddNode_L_ADDR4.NodeValue = &L_ADDR4;
                        &AddNode_L_CITY = &AddNode_SCHEDULE.AddElement("CITY_SHIPTO");
                        &AddNode_L_CITY.NodeValue = &L_CITY;
                        &AddNode_L_STATE = &AddNode_SCHEDULE.AddElement("STATE_SHIPTO");
                        &AddNode_L_STATE.NodeValue = &L_STATE;
                        &AddNode_L_POSTAL = &AddNode_SCHEDULE.AddElement("POSTAL_SHIPTO");
                        &AddNode_L_POSTAL.NodeValue = &L_POSTAL;
                        &AddNode_L_COUNTRY_CD = &AddNode_SCHEDULE.AddElement("COUNTRY_SHIPTO");
                        &AddNode_L_COUNTRY_CD.NodeValue = &COUNTRY_SCHED;
                        &AddNode_MERCHANDISE_AMT_SCHED = &AddNode_SCHEDULE.AddElement("MERCHANDISE_AMT");
                        &AddNode_MERCHANDISE_AMT_SCHED.NodeValue = &SCHED_MERCHANDISE_AMT;
                        &AddNode_SUT_APP = &AddNode_SCHEDULE.AddElement("SUT_APPLICABILITY");
                        &AddNode_SUT_APP.NodeValue = &SUT_APP;
                        &AddNode_FREIGHT_TERMS = &AddNode_SCHEDULE.AddElement("FREIGHT_TERMS");
                        &AddNode_FREIGHT_TERMS.NodeValue = &FREIGHT_TERMS;
                        rem &AddNode_DESCR111.NodeValue = &SHIP_DESCR;
                        &AddNode_SHIP_TYPE_ID = &AddNode_SCHEDULE.AddElement("SHIP_TYPE_ID");
                        &AddNode_SHIP_TYPE_ID.NodeValue = &SHIP_TYPE_ID;
                        rem &AddNode_CommentNode_SCHED = &AddNode_SCHEDULE.AddComment("SCHEDULE Block....ENDS");
                        &SQL_SCHEDULE.ReuseCursor = True;
                     End-While; /* SCHEDULE LEVEL */
                     &SQL_SCHEDULE.Close();
                     Break;
                  When = %SQLStatus_NotFound
                     MessageBox(0, "", 0, 0, "NOT FOUND SCHEDULE");
                     Break;
                  When = %SQLStatus_Duplicate
                     MessageBox(0, "", 0, 0, "DUPLICATE SCHEDULE");
                     Break;
                  End-Evaluate;
                  /* Cannot be used with Select Statements */
                  rem &SQL_SCHEDULE.BulkMode = True;
                  
                  /* Get Count of No of Distributions */
                  rem For &iDistrib = 1 to &Z_PO_DISTRIB.ActiveRowCount;
                  SQLExec("Select Count(*) from PS_PO_LINE_DISTRIB Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &NO_DISTRIB);
                  
                  If All(&NO_DISTRIB) Then
                     
                     /******************************
                      Generate the Distribution Loop
                      ******************************/
                     
                     For &DISTRIB = 1 To &NO_DISTRIB;
                        rem For &iDistrib = 1 To &Z_PO_DISTRIB.ActiveRowCount;
                        Local Record &AA_PO_DIST = CreateRecord(Record.Z_PO_DISTR_E_VW);
                        rem SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6", &AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &D_BU, &D_PO_ID, &D_LINE, &D_SCHED, &D_DIST, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                        Local string &SQL_DIST = "%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6";
                        Local SQL &SQL_DISTRIB = CreateSQL(&SQL_DIST, &AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB);
                        rem Local SQL &SQL_DISTRIB = CreateSQL("%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6");
                        rem &SQL_DISTRIB.Execute(&AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB);
                        Evaluate &SQL_DISTRIB.Status
                        When = %SQLStatus_OK
                           MessageBox(0, "", 0, 0, "Correct DISTRIB");
                           /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
                           While &SQL_DISTRIB.Fetch(&D_BU, &D_PO_ID, &D_LINE, &D_SCHED, &D_DIST, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                              rem &DISTRIB = &DISTRIB + 1;
                              MessageBox(0, "", 0, 0, "Distribution " | &DISTRIB);
                              &SQL_DISTRIB.TraceName = "Z_PO_PUBLISH.6620.Step1.PC.DISTRIB." | &DISTRIB;
                              /* PS_PO_LINE_DISTRIB */
                              rem &LOG_PO.WriteLine("No of Distributions " | &NO_DISTRIB);
                              &AddNode_DISTRIBUTION = &AddNode_SCHEDULE.AddElement("Z_DISTRIB_VW");
                              &AddNode_DISTRIBUTION.AddAttribute("class", "R");
                              rem &AddNode_CommentNode_DISTRIB = &AddNode_DISTRIBUTION.AddComment("DISTRIBUTION Block....STARTS");
                              &AddNode_DISTRIB_BU = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT");
                              &AddNode_DISTRIB_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                              &AddNode_DISTRIB_PO_ID = &AddNode_DISTRIBUTION.AddElement("PO_ID");
                              &AddNode_DISTRIB_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                              &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("LINE_NBR");
                              &AddNode_DISTRIB_LINE_NBR.NodeValue = &Line;
                              &AddNode_DISTRIB_SCHED_NBR = &AddNode_DISTRIBUTION.AddElement("SCHED_NBR");
                              &AddNode_DISTRIB_SCHED_NBR.NodeValue = &SCHED;
                              &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LINE_NUM");
                              &AddNode_DISTRIB_LINE_NBR.NodeValue = &DISTRIB;
                              &AddNode_DISTRIB_LN_STATUS = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LN_STATUS");
                              &AddNode_DISTRIB_LN_STATUS.NodeValue = &DISTRIB_LN_STATUS;
                              &AddNode_DISTRIB_QTY_PO = &AddNode_DISTRIBUTION.AddElement("QTY_PO");
                              &AddNode_DISTRIB_QTY_PO.NodeValue = &DISTRIB_QTY_PO;
                              &AddNode_CURRENCY_CD_DISTRIB = &AddNode_DISTRIBUTION.AddElement("CURRENCY_CD");
                              &AddNode_CURRENCY_CD_DISTRIB.NodeValue = &CURRENCY_CD_DISTRIB;
                              &AddNode_MERCHANDISE_AMT = &AddNode_DISTRIBUTION.AddElement("MERCHANDISE_AMT");
                              &AddNode_MERCHANDISE_AMT.NodeValue = &MERCHANDISE_AMT;
                              /* TAX DETAILS */
                              &AddNode_SALES_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("SALETX_AMT");
                              &AddNode_SALES_TAX_AMT.NodeValue = &SALES_TAX_AMT;
                              &AddNode_USE_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("USETAX_AMT");
                              &AddNode_USE_TAX_AMT.NodeValue = &USE_TAX_AMT;
                              &AddNode_BU_REQ = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_REQ");
                              &AddNode_BU_REQ.NodeValue = &BU_REQ;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_ID");
                              &AddNode_REQ_ID.NodeValue = &REQ_ID;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_LINE_NBR");
                              &AddNode_REQ_ID.NodeValue = &REQ_LINE_NBR;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_SCHED_NBR");
                              &AddNode_REQ_ID.NodeValue = &REQ_SCHED_NBR;
                              &AddNode_REQUESTOR_ID = &AddNode_DISTRIBUTION.AddElement("REQUESTOR_ID");
                              &AddNode_REQUESTOR_ID.NodeValue = &REQUESTOR_ID;
                              /* PS_Z_MNET_TBL */
                              &AddNode_Z_FIRST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_FIRST_NAME");
                              &AddNode_Z_FIRST_NAME.NodeValue = &D_Z_FIRST_NAME;
                              &AddNode_MIDDLE_NAME = &AddNode_DISTRIBUTION.AddElement("MIDDLE_NAME");
                              &AddNode_MIDDLE_NAME.NodeValue = &D_MIDDLE_NAME;
                              &AddNode_Z_LAST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_LAST_NAME");
                              &AddNode_Z_LAST_NAME.NodeValue = &D_Z_LAST_NAME;
                              &AddNode_Z_SMTP = &AddNode_DISTRIBUTION.AddElement("Z_SMTP_ADDR");
                              &AddNode_Z_SMTP.NodeValue = &D_Z_SMTP;
                              /* PS_REQ_HDR */
                              &AddNode_OPRID = &AddNode_DISTRIBUTION.AddElement("OPRID");
                              &AddNode_OPRID.NodeValue = &OPRID_DISTRIB;
                              &AddNode_D_LOCATION = &AddNode_DISTRIBUTION.AddElement("LOCATION");
                              &AddNode_D_LOCATION.NodeValue = &DLOC;
                              /* PS_LOCATION_TBL */
                              &AddNode_D_ADDR1 = &AddNode_DISTRIBUTION.AddElement("ADDRESS1");
                              &AddNode_D_ADDR1.NodeValue = &D_ADDR1;
                              &AddNode_D_ADDR2 = &AddNode_DISTRIBUTION.AddElement("ADDRESS2");
                              &AddNode_D_ADDR2.NodeValue = &D_ADDR2;
                              &AddNode_D_ADDR3 = &AddNode_DISTRIBUTION.AddElement("ADDRESS3");
                              &AddNode_D_ADDR3.NodeValue = &D_ADDR3;
                              &AddNode_D_ADDR4 = &AddNode_DISTRIBUTION.AddElement("ADDRESS4");
                              &AddNode_D_ADDR4.NodeValue = &D_ADDR4;
                              &AddNode_D_CITY = &AddNode_DISTRIBUTION.AddElement("CITY");
                              &AddNode_D_CITY.NodeValue = &D_CITY;
                              &AddNode_D_STATE = &AddNode_DISTRIBUTION.AddElement("STATE");
                              &AddNode_D_STATE.NodeValue = &D_STATE;
                              &AddNode_D_POSTAL = &AddNode_DISTRIBUTION.AddElement("POSTAL");
                              &AddNode_D_POSTAL.NodeValue = &D_POSTAL;
                              &AddNode_D_COUNTRY_CD = &AddNode_DISTRIBUTION.AddElement("COUNTRY");
                              &AddNode_D_COUNTRY_CD.NodeValue = &COUNTRY_DISTRIB;
                              
                              &AddNode_ACCOUNT = &AddNode_DISTRIBUTION.AddElement("ACCOUNT");
                              &AddNode_ACCOUNT.NodeValue = &ACCOUNT;
                              /* CUSTOM FIELDS */
                              &AddNode_Z_COMBOD_CD = &AddNode_DISTRIBUTION.AddElement("Z_COMBD_CD");
                              &AddNode_Z_COMBOD_CD.NodeValue = &Z_COMBD_CD;
                              &AddNode_Z_EXTC = &AddNode_DISTRIBUTION.AddElement("Z_EXTC");
                              &AddNode_Z_EXTC.NodeValue = &Z_EXTC;
                              &AddNode_Z_JOBNO = &AddNode_DISTRIBUTION.AddElement("Z_JOBNO");
                              &AddNode_Z_JOBNO.NodeValue = &Z_JOBNO;
                              &AddNode_Z_JEO = &AddNode_DISTRIBUTION.AddElement("Z_JEO");
                              &AddNode_Z_JEO.NodeValue = &Z_JEO;
                              &AddNode_Z_ADRS = &AddNode_DISTRIBUTION.AddElement("Z_ADRS");
                              &AddNode_Z_ADRS.NodeValue = &Z_ADRS;
                              &AddNode_Z_RCBS = &AddNode_DISTRIBUTION.AddElement("Z_RCBS");
                              &AddNode_Z_RCBS.NodeValue = &Z_RCBS;
                              &AddNode_Z_CPIM = &AddNode_DISTRIBUTION.AddElement("Z_CPIM");
                              &AddNode_Z_CPIM.NodeValue = &Z_CPIM;
                              &AddNode_Z_RCC = &AddNode_DISTRIBUTION.AddElement("Z_RCC");
                              &AddNode_Z_RCC.NodeValue = &Z_RCC;
                              &AddNode_TAG_NUMBER = &AddNode_DISTRIBUTION.AddElement("TAG_NUMBER");
                              &AddNode_TAG_NUMBER.NodeValue = &TAG_NUMBER;
                              &AddNode_Z_SERIAL_NO = &AddNode_DISTRIBUTION.AddElement("Z_SERIAL_NO");
                              &AddNode_Z_SERIAL_NO.NodeValue = &Z_SERIAL_NO;
                              
                              rem &AddNode_WS_WORK_PHONE = &AddNode_DISTRIBUTION.AddElement("WS_WORK_PHONE");
                              rem &AddNode_WS_WORK_PHONE.NodeValue = &D_WS_WORK_PHONE;
                              
                              &SQL_DISTRIB.ReuseCursor = True;
                           End-While; /* DISTRIB LEVEL */
                           &SQL_DISTRIB.Close();
                           Break;
                        When = %SQLStatus_NotFound
                           MessageBox(0, "", 0, 0, "NOT FOUND DISTRIB");
                           Break;
                        When = %SQLStatus_Duplicate
                           MessageBox(0, "", 0, 0, "DUPLICATE DISTRIB");
                           Break;
                        End-Evaluate;
                        rem SQLExec("Select DISTRIB_LN_STATUS, QTY_PO, CURRENCY_CD, MERCHANDISE_AMT, SALETX_AMT, USETAX_AMT, ACCOUNT, TAG_NUMBER, LOCATION, BUSINESS_UNIT_REQ, REQ_ID, REQ_LINE_NBR, REQ_SCHED_NBR, REQUESTOR_ID, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, POSTAL, STATE, COUNTRY FROM PS_Z_PO_DISTR_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                        rem &SQL_DISTRIB = CreateSQL("Select DISTRIB_LN_STATUS, QTY_PO, CURRENCY_CD, MERCHANDISE_AMT, SALETX_AMT, USETAX_AMT, ACCOUNT, TAG_NUMBER, LOCATION, BUSINESS_UNIT_REQ, REQ_ID, REQ_LINE_NBR, REQ_SCHED_NBR, REQUESTOR_ID, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, POSTAL, STATE, COUNTRY FROM PS_Z_PO_DISTR_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &iDistrib);
                        rem While &SQL_DISTRIB.Fetch(&BU_DISTRIB, &PO_ID_DISTRIB, &LN_NBR_D, &SCHED_NBR_D, &DISTRIB_NUM, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &D_CO_CD);
                        rem While &SQL_DISTRIB.Fetch(&DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                        
                        rem &AddNode_CommentNode_DISTRIB = &AddNode_DISTRIBUTION.AddComment("DISTRIBUTION Block....ENDS");
                        
                        rem End-For; /* Distribution Loop */
                        rem End-While; /* Distribution Level */
                     End-For; /* Distribution Loop */
                  End-If; /* Distribution Loop */
                  rem End-While; /* SCHEDULE LEVEL */
                  rem &SQL_SCHEDULE.Close();
               End-For; /* Schedule Loop */
            End-If; /* Schedule Loop */
            rem End-While; /* LINE LEVEL */
            rem &SQL_LINE.Close();
         End-For; /* Line Loop */
      End-If; /* Line Loop */
      rem End-While; /* Header Level */
      rem &cdataNode = &AddNode0.AddCDataSection("Testing...ENDS");
      /* Generate the Formatted XML */
      InitVariables();
      &STR = &NEWDOC.GenFormattedXmlString();
      rem &LOG_PO.WriteLine(&STR);
      rem &MSGNAME = Message.PURCHASE_ORDER_DISPATCH;
      &MSGNAME = Message.Z_POD_FINAL_MSG;
      &MAXMSGSIZE = %MaxMessageSize;
      MessageBox(0, "", 0, 0, "Max Message Size " | &MAXMSGSIZE);
      /* CHECK NODE */
      
      <*&ErrorInfo = PingNode("PSFT_FILEOUTPUT");
      &Root = &ErrorInfo.DocumentElement;
      &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
      For &M = 1 To &MsgNodeArray.Len
         &MsgNode = &MsgNodeArray [&M];
         &MsgText = &MsgNode.FindNode("status").NodeValue;
         If &MsgText = "Success (117,73)" Then
            /*PUBLISH MESSAGE ON NODE*/
            Evaluate &DISP_METHOD
            When "EDX"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
               &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
               rem &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
               &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
               Break;
            When "B2B"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
               Break;
            When "RMD"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
               Break;
            When "ORB"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
               Break;
            When-Other
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
               Break;
            End-Evaluate;
            rem &RET = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
            rem &LOG_PO.WriteLine("Message Successfully Published " | &ret);
            If (&ret = "TRUE") Then
               &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
               MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
               SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
            End-If;
         Else
            Error ("Web Server not available for web service");
         End-If;
      End-For;
	  *>
      /* &FAT_NODE = GetURL(URL.Z_FAT_NODE);

REM &response = SyncRequestXmlDoc(&Approvalxmldoc, Message.Z_APPROVAL_FAT, &FAT_NODE);

&response = PublishXmlDoc(&Approvalxmldoc, Message.Z_APPROVAL_FAT, &FAT_NODE); */
      Evaluate &DISP_METHOD
      When "EDX"
      When "EML"
      When "FAX"
      When "PHN"
      When "PRN"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         /* ORBIT PUBLISH WILL BE DEALT IN A SEPERATE FUNCTION */
         rem &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
         Break;
      When "B2B"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         Break;
      When "RMD"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         Break;
         rem When-Other
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         rem Break;
      End-Evaluate;
      If (&ret = "TRUE") Then
         &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P', Z_PUB_FLAG_B2B = 'P', Z_PUB_FLAG_RMD = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
         MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
         SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P', Z_PUB_FLAG_B2B = 'P', Z_PUB_FLAG_RMD = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Non Retail BU selected for processing");
   End-If; /* RETAIL BU CHECK */
End-Function;

/**********************
 ORBIT PUBLISH FUNCTION
 **********************/

Function ORBIT_PUBLISH(&Z_PO_HDR As Record)
   SQLExec("Select BUSINESS_UNIT from PS_Z_BU_PM_TBL Where Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &NON_BU);
   If All(&NON_BU) Then
      Local XmlDoc &ORBDOC;
      MessageBox(0, "", 0, 0, "Starting Header Call with PO_ID FOR ORBIT " | Z_PO_PUB_AET.PO_ID);
      InitVariables();
      /* HEADER ROWSET */
      &DISP_METHOD = &Z_PO_HDR.DISP_METHOD.Value;
      &PO_STATUS = &Z_PO_HDR.PO_STATUS.Value;
      &BILL_LOC = &Z_PO_HDR.BILL_LOCATION.Value;
      &VENID = &Z_PO_HDR.VENDOR_ID.Value;
      &VNDR_LOC = &Z_PO_HDR.VNDR_LOC.Value;
      &BUYER_ID = &Z_PO_HDR.BUYER_ID.Value;
      &CHNG_ORD_BATCH = &Z_PO_HDR.CHNG_ORD_BATCH.Value;
      &CHNG_ORD_SEQ = &Z_PO_HDR.CHNG_ORD_SEQ.Value;
      &OPRID_ENT = &Z_PO_HDR.OPRID_ENTERED_BY.Value;
      &ENT_DT = &Z_PO_HDR.ENTERED_DT.Value;
      &OPRID_APP = &Z_PO_HDR.OPRID_APPROVED_BY.Value;
      &APP_DT = &Z_PO_HDR.APPROVAL_DT.Value;
      &OPRID_MODIF = &Z_PO_HDR.OPRID_MODIFIED_BY.Value;
      &LAST_DTTM_UPD = &Z_PO_HDR.LAST_DTTM_UPDATE.Value;
      /* Retrieve Address Details from Cross Reference Location Table */
      SQLExec("Select DESCR, ATTN_TO, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, PHONE, CITY, STATE, POSTAL, COUNTRY FROM PS_Z_PO_LOC_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LOCATION = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &BILL_LOC, &DESCR, &ATTN_TO, &ADDR1, &ADDR2, &ADDR3, &ADDR4, &PHONE, &CITY, &STATE, &POSTAL, &COUNT_HDR);
      /* Retrieve the VENDOR ADDRESS */
      SQLExec("Select NAME1, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, COUNTRY, CITY, STATE, POSTAL From PS_Z_N_PO_VADD_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NAME1, &VENADDR1, &VENADDR2, &VENADDR3, &VENADDR4, &VENCOUN, &VENCITY, &VENSTATE, &VENPOSTAL);
      /* Retrieve PAYMENT DETAILS */
      SQLExec("Select DSC_TRMS_AVAIL_FLG, TERMS_ADJUST_DAYS, DSCNT_TRMS_PERCENT, TMG_DAY_INCR_VAL From PS_Z_PO_PYMNT_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DSC_TRMS_AVAIL_FLG, &TERMS_ADJUST_DAYS, &DSCNT_TRMS_PERCENT, &TMG_DAY_INCR_VAL);
      SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2", Record.Z_PO_BU_DET_EVW, Z_PO_PUB_AET.BUSINESS_UNIT, &NEW_BU, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      &ORBDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><Z_PO_PUBLISH_MSG/>");
      &AddNode0 = &ORBDOC.DocumentElement.AddElement("MsgData");
      /********************** 
       Create the Header Loop 
       **********************/
      &AddNode_TRANSACTION = &AddNode0.AddElement("Transaction");
      &AddNode_HEADER = &AddNode_TRANSACTION.AddElement("Z_HEADER_VW");
      &AddNode_HEADER.AddAttribute("class", "R");
      &AddNode_BU = &AddNode_HEADER.AddElement("BUSINESS_UNIT");
      &AddNode_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
      &AddNode_DESCR_BU = &AddNode_HEADER.AddElement("DESCR_BU");
      &AddNode_DESCR_BU.NodeValue = &DESCR_BU;
      &AddNode_PO_ID = &AddNode_HEADER.AddElement("PO_ID");
      &AddNode_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
      &AddNode_CHNG_ORD_BATCH = &AddNode_HEADER.AddElement("CHNG_ORD_BATCH");
      &AddNode_CHNG_ORD_BATCH.NodeValue = &CHNG_ORD_BATCH;
      &AddNode_CHNG_ORD_SEQ = &AddNode_HEADER.AddElement("CHNG_ORD_SEQ");
      &AddNode_CHNG_ORD_SEQ.NodeValue = &CHNG_ORD_SEQ;
      
      &AddNode_Z_ORD = &AddNode_HEADER.AddElement("Z_ORD_TYPE");
      &AddNode_Z_ORD.NodeValue = &Z_ORD_TYPE;
      &AddNode_Z_JOB = &AddNode_HEADER.AddElement("Z_JOB_TYPE");
      &AddNode_Z_JOB.NodeValue = &Z_JOB_TYPE;
      &AddNode_PO_STATUS = &AddNode_HEADER.AddElement("PO_STATUS");
      &AddNode_PO_STATUS.NodeValue = &PO_STATUS;
      /* ADD DISPATCH METHOD TAG */
      &AddNode_DISP_METHOD = &AddNode_HEADER.AddElement("DISP_METHOD");
      /* NODE VALUE FOR DISP_METHOD PENDING - XSD */
      &AddNode_PO_DT = &AddNode_HEADER.AddElement("PO_DT");
      &AddNode_PO_DT.NodeValue = &PO_DT;
      &AddNode_PO_REF = &AddNode_HEADER.AddElement("PO_REF");
      &AddNode_PO_REF.NodeValue = &PO_REF;
      &AddNode_BILL_LOC = &AddNode_HEADER.AddElement("BILL_LOCATION");
      &AddNode_BILL_LOC.NodeValue = &BILL_LOC;
      /* BILL LOCATION ADDRESS */
      &AddNode_ADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_BILL");
      &AddNode_ADDR1.NodeValue = &ADDR1;
      &AddNode_ADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_BILL");
      &AddNode_ADDR2.NodeValue = &ADDR2;
      &AddNode_ADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_BILL");
      &AddNode_ADDR3.NodeValue = &ADDR3;
      &AddNode_ADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_BILL");
      &AddNode_ADDR4.NodeValue = &ADDR4;
      &AddNode_CITY = &AddNode_HEADER.AddElement("CITY_BILL");
      &AddNode_CITY.NodeValue = &CITY;
      &AddNode_STATE = &AddNode_HEADER.AddElement("STATE_BILL");
      &AddNode_STATE.NodeValue = &STATE;
      &AddNode_POSTAL = &AddNode_HEADER.AddElement("POSTAL_BILL");
      &AddNode_POSTAL.NodeValue = &POSTAL;
      &AddNode_COCD = &AddNode_HEADER.AddElement("COUNTRY_BILL");
      &AddNode_COCD.NodeValue = &COUNT_HDR;
      /* CHECK FOR DISPATCH METHODS */
      /*
      Evaluate &DISP_METHOD
      When "B2B"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "EDX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "EML"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "FAX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "LCM"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "ORB"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "PHN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "PRN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "RMD"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      End-Evaluate;
	  */
      /* Vendor Details */
      &AddNode_VENDOR_SETID = &AddNode_HEADER.AddElement("VENDOR_SETID");
      rem &AddNode_VENDOR_SETID.NodeValue = &VENSETID;
      &AddNode_VENDOR_SETID.NodeValue = "USWC"; /* Client Wants USWC */
      &AddNode_VENDOR_ID = &AddNode_HEADER.AddElement("VENDOR_ID");
      &AddNode_VENDOR_ID.NodeValue = &VENID;
      &AddNode_VNDR_LOC = &AddNode_HEADER.AddElement("VNDR_LOC");
      &AddNode_VNDR_LOC.NodeValue = &VNDR_LOC;
      /* Create Vendor Address Block */
      &AddNode_VNAME1 = &AddNode_HEADER.AddElement("NAME1");
      &AddNode_VNAME1.NodeValue = &NAME1;
      &AddNode_VENADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_VNDR");
      &AddNode_VENADDR1.NodeValue = &VENADDR1;
      &AddNode_VENADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_VNDR");
      &AddNode_VENADDR2.NodeValue = &VENADDR2;
      &AddNode_VENADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_VNDR");
      &AddNode_VENADDR3.NodeValue = &VENADDR3;
      &AddNode_VENADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_VNDR");
      &AddNode_VENADDR4.NodeValue = &VENADDR4;
      &AddNode_VENCITY = &AddNode_HEADER.AddElement("CITY_VNDR");
      &AddNode_VENCITY.NodeValue = &VENCITY;
      &AddNode_VENSTATE = &AddNode_HEADER.AddElement("STATE_VNDR");
      &AddNode_VENSTATE.NodeValue = &VENSTATE;
      &AddNode_VENPOSTAL = &AddNode_HEADER.AddElement("POSTAL_VNDR");
      &AddNode_VENPOSTAL.NodeValue = &VENPOSTAL;
      &AddNode_VENCOUNTRY = &AddNode_HEADER.AddElement("COUNTRY_VNDR");
      &AddNode_VENCOUNTRY.NodeValue = &VENCOUN;
      /* PAYMENT TERMS CODE */
      &AddNode_DSC_TRMS_AVAIL_FLG = &AddNode_HEADER.AddElement("DSC_TRMS_AVAIL_FLG");
      &AddNode_DSC_TRMS_AVAIL_FLG.NodeValue = &DSC_TRMS_AVAIL_FLG;
      &AddNode_DSCNT_PER = &AddNode_HEADER.AddElement("DSCNT_TRMS_PERCENT");
      &AddNode_DSCNT_PER.NodeValue = &DSCNT_TRMS_PERCENT;
      &AddNode_TERMS_DAYS = &AddNode_HEADER.AddElement("TERMS_ADJUST_DAYS");
      &AddNode_TERMS_DAYS.NodeValue = &TERMS_ADJUST_DAYS;
      &AddNode_TMG_DAY = &AddNode_HEADER.AddElement("TMG_DAY_INCR_VAL");
      &AddNode_TMG_DAY.NodeValue = &TMG_DAY_INCR_VAL;
      /* BUYER ID */
      &AddNode_BUYER = &AddNode_HEADER.AddElement("BUYER_ID");
      &AddNode_BUYER.NodeValue = &BUYER_ID;
      /* PS_Z_PO_HDR_PPM */
      &AddNode_Z_REQ = &AddNode_HEADER.AddElement("Z_REQUESTOR_ID");
      &AddNode_Z_REQ.NodeValue = &Z_REQ_ID;
      /* PS_Z_MNET_TBL */
      &AddNode_Z_FIRST_NAME = &AddNode_HEADER.AddElement("Z_FIRST_NAME");
      &AddNode_Z_FIRST_NAME.NodeValue = &Z_FIRST_NAME;
      &AddNode_MIDDLE_NAME = &AddNode_HEADER.AddElement("MIDDLE_NAME");
      &AddNode_MIDDLE_NAME.NodeValue = &MIDDLE_NAME;
      &AddNode_Z_LAST_NAME = &AddNode_HEADER.AddElement("Z_LAST_NAME");
      &AddNode_Z_LAST_NAME.NodeValue = &Z_LAST_NAME;
      &AddNode_Z_SMTP = &AddNode_HEADER.AddElement("Z_SMTP_ADDR");
      &AddNode_Z_SMTP.NodeValue = &Z_SMTP;
      /* PS_PO_HDR AGAIN */
      &AddNode_OPRID_ENT = &AddNode_HEADER.AddElement("OPRID_ENTERED_BY");
      &AddNode_OPRID_ENT.NodeValue = &OPRID_ENT;
      &AddNode_ENT_DT = &AddNode_HEADER.AddElement("ENTERED_DT");
      &AddNode_ENT_DT.NodeValue = &ENT_DT;
      &AddNode_OPRID_APP = &AddNode_HEADER.AddElement("OPRID_APPROVED_BY");
      &AddNode_OPRID_APP.NodeValue = &OPRID_APP;
      &AddNode_APP_DT = &AddNode_HEADER.AddElement("APPROVAL_DT");
      &AddNode_APP_DT.NodeValue = &APP_DT;
      &AddNode_OPRID_MODIF = &AddNode_HEADER.AddElement("OPRID_MODIFIED_BY");
      &AddNode_OPRID_MODIF.NodeValue = &OPRID_MODIF;
      &AddNode_LAST_DTTM_UPD = &AddNode_HEADER.AddElement("LAST_DTTM_UPDATE");
      &AddNode_LAST_DTTM_UPD.NodeValue = &LAST_DTTM_UPD;
      /* PO TOTAL AMOUNT DERIVED */
      &AddNode_PO_AMT_TTL = &AddNode_HEADER.AddElement("PO_AMOUNT");
      &AddNode_PO_AMT_TTL.NodeValue = Z_PO_PUB_AET.PO_AMT_TTL;
      /* HEADER COMMENTS */
      Local SQL &COMMENTS_SQL_HDR = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "HDR", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, 0);
      While &COMMENTS_SQL_HDR.Fetch(&COM_BU, &COM_PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
         &AddNode_COMMENTS_HDR = &AddNode_HEADER.AddElement("COMMENTS_HDR");
         rem &AddNode_OPRID = &AddNode_COMMENTS_HDR.AddElement("OPRID");
         rem &AddNode_OPRID.NodeValue = &OPRID;
         rem &AddNode_COMMENT_ID = &AddNode_COMMENTS_HDR.AddElement("COMMENT_ID");
         rem &AddNode_COMMENT_ID.NodeValue = &COMMENT_ID;
         rem &AddNode_RANDOM = &AddNode_COMMENTS_HDR.AddElement("RANDOM_CMMT_NBR");
         rem &AddNode_RANDOM.NodeValue = &RANDOM;
         &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_HDR.AddElement("HEADER_COMMENTS");
         &AddNode_COMMENTS_2000.NodeValue = &COMM_2000;
         /* REUSE CURSOR PROPERTY */
         &COMMENTS_SQL_HDR.ReuseCursor = True;
      End-While; /* WHILE End HDR LEVEL */
      /* PURCHASING BU DETAILS */
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_TYPE");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_TYPE;
      &AddNode_BU_STD_COMM_ID = &AddNode_HEADER.AddElement("STD_COMMENT_ID");
      &AddNode_BU_STD_COMM_ID.NodeValue = &STD_COMMENT_ID;
      /* Generate the Formatted XML */
      InitVariables();
      &STR = &ORBDOC.GenFormattedXmlString();
      &MSGNAME = Message.Z_POD_FINAL_MSG;
      &MAXMSGSIZE = %MaxMessageSize;
      MessageBox(0, "", 0, 0, "Max Message Size " | &MAXMSGSIZE);
      /* CHECK NODE */
      &ErrorInfo = PingNode("PSFT_ORBIT");
      &Root = &ErrorInfo.DocumentElement;
      &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
      For &M = 1 To &MsgNodeArray.Len
         &MsgNode = &MsgNodeArray [&M];
         &MsgText = &MsgNode.FindNode("status").NodeValue;
         If &MsgText = "Success (117,73)" Then
            /*PUBLISH MESSAGE ON NODE*/
            &RET_OB = PublishXmlDoc(&ORBDOC, &MSGNAME, Node.PSFT_ORBIT);
            If (&RET_OB = "TRUE") Then
               &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG_ORB = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
               MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
               SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG_ORB = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
            End-If;
         Else
            Error ("Web Server not available for web service");
         End-If;
      End-For;
      /* 
		&FAT_NODE = GetURL(URL.Z_FAT_NODE);
		REM &response = SyncRequestXmlDoc(&Approvalxmldoc, Message.Z_APPROVAL_FAT, &FAT_NODE);
	    &response = PublishXmlDoc(&Approvalxmldoc, Message.Z_APPROVAL_FAT, &FAT_NODE); 
	  */
   Else
      MessageBox(0, "", 0, 0, "Non Retail BU selected for processing");
   End-If; /* RETAIL BU CHECK */
End-Function;

/* Code Added to Cater to new requirement for PO Data PUBLISH */

/*DEFINE ROWSETS*/
rem Local Rowset &Z_PO_HDR = CreateRowset(Record.Z_PO_TEMP_VW);
Local Rowset &Z_PO_HDR = CreateRowset(Record.PO_HDR);

/* SAMPLE GETSETID FUNCTION */
rem &BOOK_SETID = GetSetId("BUSINESS_UNIT", ASSET.BUSINESS_UNIT, "DEPR_RT_TBL", "");

/* Declare Global Variables */
&NEW_PO_ID = Z_PO_PUB_AET.PO_ID;
&NEW_BU = Z_PO_PUB_AET.BUSINESS_UNIT;
&NEW_DISP = Z_PO_PUB_AET.DISP_METHOD;

/* Fill the HDR Rowset for the PO_ID */
rem MessageBox(0, "", 0, 0, "Filling the Rowset for " | &NEW_BU | " and " | &NEW_PO_ID);
&NO_PO_LOADED = &Z_PO_HDR.Fill("Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
MessageBox(0, "", 0, 0, "No of PO's Loaded " | &NO_PO_LOADED);


/* Initiate Retrieving Values */

If All(&NO_PO_LOADED) Then
   For &PO = 1 To &Z_PO_HDR.ActiveRowCount
      Evaluate &NEW_DISP
      When "EDX"
      When "EML"
      When "FAX"
      When "PHN"
      When "PRN"
         MessageBox(0, "", 0, 0, "Publishing for ALL");
         rem SetTracePC(%TracePC_Assigns + %TracePC_ParamsOut + %TracePC_Starts + %TracePC_Functions + %TracePC_ParamsIn);
         rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
         EDX_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
         /* Also call the ORBIT function seperately */
         ORBIT_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
         Break;
      When "B2B"
      When "RMD"
         EDX_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
         Break;
      When "ORB"
         MessageBox(0, "", 0, 0, "Publishing for ORBIT ONLY");
         ORBIT_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
         Break;
      End-Evaluate;
   End-For; /* HEADER FILL */
   &Z_PO_HDR.Flush();
Else
   MessageBox(0, "", 10662, 280, "No Processing", "Purchase Order", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
End-If;
/* This is where it all ENDS !!!! HOPEFULLY !!!!*/


/************************
 Initialize the variables
*************************/
Function InitVariables()
   /* Fields Added For PO PUBLISH */
   &BU = "";
   &PO_ID = "";
   &CHNG_ORD_BATCH = "";
   &NAME1 = "";
   &VENADDR1 = "";
   &VENADDR2 = "";
   &VENADDR3 = "";
   &VENADDR4 = "";
   &VENCOUN = "";
   &VENCITY = "";
   &VENSTATE = "";
   &VENPOSTAL = "";
   &ATTN_TO = "";
   &DESCR = "";
   &ADDR1 = "";
   &ADDR2 = "";
   &ADDR3 = "";
   &ADDR4 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &COCD = "";
   &Z_ORDER_TYPE = "";
   &DSC_TRMS_AVAIL_FLG = "";
   &TERMS_ADJUST_DAYS = "";
   &DSCNT_TRMS_PERCENT = "";
   &TMG_DAY_INCR_VAL = "";
   &Z_FIRST_NAME = "";
   &MIDDLE_NAME = "";
   &Z_LAST_NAME = "";
   &Z_SMTP = "";
   &WS_WORK_PHONE = "";
   &OPRID = "";
   &COMMENT_ID = "";
   &RANDOM = "";
   &BU_LINE = "";
   &PO_LINE = "";
   &LINE_NBR = "";
   &INV_ITEM_ID = "";
   &ITM_ID_VNDR = "";
   &UOM = "";
   &MFG_ITM_ID = "";
   &CNTRCT_ID = "";
   &DESCR254 = "";
   &DESCR60 = "";
   &BU_SCHED = "";
   &PO_SCHED = "";
   &LINE_NBR_SCHED = "";
   &SCHED_NBR = "";
   &PRICE_PO = "";
   &SHIPTO_ID = "";
   &QTY_PO = "";
   &SHIP_TYPE_ID = "";
   &SHIP_DATE = "";
   &L_ADDR1 = "";
   &L_ADDR2 = "";
   &L_ADDR3 = "";
   &L_ADDR4 = "";
   &L_CO_CD = "";
   &L_CITY = "";
   &L_STATE = "";
   &L_POSTAL = "";
   &SHIP_DESCR = "";
   &BU_DISTRIB = "";
   &PO_ID_DISTRIB = "";
   &LINE_NBR_DISTRIB = "";
   &SCHED_NBR_DISTRIB = "";
   &DISTRIB_LINE_NUM = "";
   &DLOC = "";
   &BU_REQ = "";
   &REQ_ID = "";
   &REQ_LINE_NBR = "";
   &REQ_SCHED_NBR = "";
   &REQUESTER_ID = "";
   &D_Z_FIRST_NAME = "";
   &D_MIDDLE_NAME = "";
   &D_Z_LAST_NAME = "";
   &D_Z_SMTP = "";
   &D_WS_WORK_PHONE = "";
   &D_ADDR1 = "";
   &D_ADDR2 = "";
   &D_ADDR3 = "";
   &D_ADDR4 = "";
   &D_CO_CD = "";
   &D_CITY = "";
   &D_STATE = "";
   &D_POSTAL = "";
   /* Fields Added by PRASHANT */
End-Function;


/*****************************
 NEW PO FUNCTION WITH SQL EXEC
 *****************************/
Function CALL_PO(&Z_PO_HDR As Record, &Z_PO_LINE As Rowset, &Z_PO_SCHED As Rowset, &Z_PO_DISTRIB As Rowset);
   rem Function CALL_PO(&Z_PO_HDR As Record);
   
   SQLExec("Select BUSINESS_UNIT from PS_Z_BU_PM_TBL Where Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &NON_BU);
   If All(&NON_BU) Then
      Local XmlDoc &NEWDOC;
      Local string &PPSTR;
      
      &PPSTR = "Prashant Srivastava. Creater, PROPRIETOR" | Char(13) | "PP - 9819625468";
      
      MessageBox(0, "", 0, 0, "Starting Header Call with PO_ID " | Z_PO_PUB_AET.PO_ID);
      InitVariables();
      /* Retrieve HEADER Values for the BUSINESS UNIT and PO_ID */
      MessageBox(0, "", 0, 0, "Retrieve Header Values");
      &PO_DT = &Z_PO_HDR.PO_DT.Value;
      &PO_REF = &Z_PO_HDR.PO_REF.Value;
      &PO_STATUS = &Z_PO_HDR.PO_STATUS.Value;
      &RECV_STATUS = &Z_PO_HDR.RECV_STATUS.Value;
      &VENSETID = &Z_PO_HDR.VENDOR_SETID.Value;
      &VENID = &Z_PO_HDR.VENDOR_ID.Value;
      &VNDR_LOC = &Z_PO_HDR.VNDR_LOC.Value;
      &PYMNT_CD = &Z_PO_HDR.PYMNT_TERMS_CD.Value;
      &BUYER_ID = &Z_PO_HDR.BUYER_ID.Value;
      &BILL_LOC = &Z_PO_HDR.BILL_LOCATION.Value;
      &CHNG_ORD_BATCH = &Z_PO_HDR.CHNG_ORD_BATCH.Value;
      &CHNG_ORD_SEQ = &Z_PO_HDR.CHNG_ORD_SEQ.Value;
      &CHNG_STATUS = &Z_PO_HDR.CHANGE_STATUS.Value;
      &ORIGIN = &Z_PO_HDR.ORIGIN.Value;
      &OPRID_ENT = &Z_PO_HDR.OPRID_ENTERED_BY.Value;
      &ENT_DT = &Z_PO_HDR.ENTERED_DT.Value;
      &OPRID_APP = &Z_PO_HDR.OPRID_APPROVED_BY.Value;
      &APP_DT = &Z_PO_HDR.APPROVAL_DT.Value;
      &OPRID_MODIF = &Z_PO_HDR.OPRID_MODIFIED_BY.Value;
      &LAST_DTTM_UPD = &Z_PO_HDR.LAST_DTTM_UPDATE.Value;
      
      rem SQLExec("Select PO_DT, PO_REF, PO_STATUS, RECV_STATUS, VENDOR_SETID, VENDOR_ID, VNDR_LOC, BUYER_ID, PYMNT_TERMS_CD, BUYER_ID, BILL_LOCATION, CHNG_ORD_BATCH, CHNG_ORD_SEQ, CHANGE_STATUS , ORIGIN , OPRID_ENTERED_BY, ENTERED_DT, OPRID_APPROVED_BY, APPROVAL_DT, OPRID_MODIFIED_BY, LAST_DTTM_UPDATE FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &PO_DT, &PO_REF, &PO_STATUS, &RECV_STATUS, &VENSETID, &VENID, &VNDR_LOC, &BUYER_ID, &PYMNT_CD, &BUYER_ID, &BILL_LOC, &CHNG_ORD_BATCH, &CHNG_ORD_SEQ, &CHNG_STATUS, &ORIGIN, &OPRID_ENT, &ENT_DT, &OPRID_APP, &APP_DT, &OPRID_MODIF, &LAST_DTTM_UPD);
      rem MessageBox(0, "", 0, 0, "Bill Location " | &BILL_LOC);
      rem &SQL_HDR = CreateSQL("Select VENDOR_SETID, VENDOR_ID, PYMNT_TERMS_CD, BUYER_ID, BILL_LOCATION, CHNG_ORD_BATCH FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      
      rem While &SQL_HDR.Fetch(&VENSETID, &VENID, &PYMNT_CD, &BUYER_ID, &BILL_LOC, &CHNG_ORD_BATCH);
      /* Retrieve Address Details from Cross Reference Location Table */
      SQLExec("Select DESCR, ATTN_TO, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, PHONE, CITY, STATE, POSTAL, COUNTRY FROM PS_Z_PO_LOC_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LOCATION = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &BILL_LOC, &DESCR, &ATTN_TO, &ADDR1, &ADDR2, &ADDR3, &ADDR4, &PHONE, &CITY, &STATE, &POSTAL, &COUNT_HDR);
      /* Retrieve Comments */
      
      SQLExec("Select OPRID, COMMENT_ID, RANDOM_CMMT_NBR From PS_Z_PO_COMMTS_EVW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &OPRID, &COMMENT_ID, &RANDOM);
      /* Retrieve the VENDOR ADDRESS */
      
      SQLExec("Select NAME1, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, COUNTRY, CITY, STATE, POSTAL From PS_Z_N_PO_VADD_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NAME1, &VENADDR1, &VENADDR2, &VENADDR3, &VENADDR4, &VENCOUN, &VENCITY, &VENSTATE, &VENPOSTAL);
      /* Retrieve PAYMENT DETAILS */
      
      SQLExec("Select DSC_TRMS_AVAIL_FLG, TERMS_ADJUST_DAYS, DSCNT_TRMS_PERCENT, TMG_DAY_INCR_VAL From PS_Z_PO_PYMNT_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DSC_TRMS_AVAIL_FLG, &TERMS_ADJUST_DAYS, &DSCNT_TRMS_PERCENT, &TMG_DAY_INCR_VAL);
      SQLExec("Select DISP_METHOD From PS_PO_HDR where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD);
      /* Retrieve the BUSINESS UNIT DETAILS */
      
      SQLExec("Select DESCR From PS_BUS_UNIT_TBL_FS Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &DESCR_BU);
      /* Retrieve Terms and Conditions for the BUSINESS_UNIT */
      SQLExec("Select STD_COMMENT_TYPE, STD_COMMENT_ID From PS_BUS_UNIT_TBL_PM Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      
      /* PO Total */
      rem SQLExec("Select");
      rem &LOG_PO.WriteLine("BUSINESS UNIT :" | Z_PO_PUB_AET.BUSINESS_UNIT);
      rem &LOG_PO.WriteLine("PO_ID : " | Z_PO_PUB_AET.PO_ID);
      rem &LOG_PO.WriteLine("Vendor SETID: " | &VENSETID);
      
      &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><PO_FILE/>");
      /* LOAD IB CONTENT */
      rem &ret = &NEWDOC.LoadIBContent(&PPSTR);
      rem &procInst = &NEWDOC.DocumentElement.AddProcessInstruction("xml-stylesheet", "href=""book.css"" type=""text/css""");
      &AddNode0 = &NEWDOC.DocumentElement.AddElement("POD");
      &AddNode0.AddAttribute("BU_PUB", Z_PO_PUB_AET.BUSINESS_UNIT);
      &AddNode0.AddAttribute("PO_PUB", Z_PO_PUB_AET.PO_ID);
      /* Add CDATA Section */
      &cdataNode = &AddNode0.AddCDataSection("Testing...STARTS");
      
      /********************** 
       Create the Header Loop 
       **********************/
      
      rem &AddNode_DbName = &AddNode0.AddElement("DBNAME");
      rem &AddNode_DbName.NodeValue = %DbName;
      &AddNode_HEADER = &AddNode0.AddElement("HEADER");
      &AddNode_BU = &AddNode_HEADER.AddElement("BUSINESS_UNIT");
      &AddNode_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
      rem &AddNode_BU.NodeValue = "US001";
      &AddNode_DESCR_BU = &AddNode_HEADER.AddElement("DESCR_BU");
      &AddNode_DESCR_BU.NodeValue = &DESCR_BU;
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_TYPE");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_TYPE;
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_ID");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_ID;
      &AddNode_PO_ID = &AddNode_HEADER.AddElement("PO_ID");
      &AddNode_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
      rem &AddNode_PO_ID.NodeValue = "0000000062";
      &AddNode_PO_DT = &AddNode_HEADER.AddElement("PO_DT");
      &AddNode_PO_DT.NodeValue = &PO_DT;
      &AddNode_CHNG_ORD_BATCH = &AddNode_HEADER.AddElement("CHNG_ORD_BATCH");
      &AddNode_CHNG_ORD_BATCH.NodeValue = &CHNG_ORD_BATCH;
      &AddNode_CHNG_ORD_SEQ = &AddNode_HEADER.AddElement("CHNG_ORD_SEQ");
      &AddNode_CHNG_ORD_SEQ.NodeValue = &CHNG_ORD_SEQ;
      &AddNode_CHNG_STATUS = &AddNode_HEADER.AddElement("CHANGE_STATUS");
      &AddNode_CHNG_STATUS.NodeValue = &CHNG_STATUS;
      &AddNode_ORIGIN = &AddNode_HEADER.AddElement("ORIGIN");
      &AddNode_ORIGIN.NodeValue = &ORIGIN;
      &AddNode_PO_STATUS = &AddNode_HEADER.AddElement("PO_STATUS");
      &AddNode_PO_STATUS.NodeValue = &PO_STATUS;
      &AddNode_RECV_STATUS = &AddNode_HEADER.AddElement("RECV_STATUS");
      &AddNode_RECV_STATUS.NodeValue = &RECV_STATUS;
      &AddNode_PO_REF = &AddNode_HEADER.AddElement("PO_REF");
      &AddNode_PO_REF.NodeValue = &PO_REF;
      &AddNode_BILL_LOC = &AddNode_HEADER.AddElement("BILL_LOCATION");
      &AddNode_BILL_LOC.NodeValue = &BILL_LOC;
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("Provide Flags at Zero Level to identify the System.");
      &AddNode_DISP_METHOD = &AddNode_HEADER.AddElement("DISP_METHOD");
      
      /* CHECK FOR DISPATCH METHODS */
      
      Evaluate &DISP_METHOD
      When "B2B"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "EDX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "EML"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "FAX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "LCM"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "ORB"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "PHN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "PRN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "RMD"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      End-Evaluate;
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("DISPATCH BLOCK....ENDS");
      
      /* Vendor Details */
      
      &AddNode_VENDOR_SETID = &AddNode_HEADER.AddElement("VENDOR_SETID");
      rem &AddNode_VENDOR_SETID.NodeValue = &VENSETID;
      &AddNode_VENDOR_SETID.NodeValue = "USWC"; /* Client Wants USWC */
      &AddNode_VENDOR_ID = &AddNode_HEADER.AddElement("VENDOR_ID");
      &AddNode_VENDOR_ID.NodeValue = &VENID;
      &AddNode_VNDR_LOC = &AddNode_HEADER.AddElement("VNDR_LOC");
      &AddNode_VNDR_LOC.NodeValue = &VNDR_LOC;
      &AddNode_BUYER = &AddNode_HEADER.AddElement("BUYER_ID");
      &AddNode_BUYER.NodeValue = &BUYER_ID;
      rem &LOG_PO.WriteLine("Vendor ID " | &VENID);
      
      /* Create Vendor Address Block */
      
      rem &AddNode_CommentNode_VENDOR = &AddNode_HEADER.AddComment("Vendor Address Block....STARTS");
      &AddNode_VNAME1 = &AddNode_HEADER.AddElement("V_NAME1_V");
      &AddNode_VNAME1.NodeValue = &NAME1;
      &AddNode_VENADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_VNDR");
      &AddNode_VENADDR1.NodeValue = &VENADDR1;
      &AddNode_VENADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_VNDR");
      &AddNode_VENADDR2.NodeValue = &VENADDR2;
      &AddNode_VENADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_VNDR");
      &AddNode_VENADDR3.NodeValue = &VENADDR3;
      &AddNode_VENADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_VNDR");
      &AddNode_VENADDR4.NodeValue = &VENADDR4;
      &AddNode_VENPHN = &AddNode_HEADER.AddElement("PHONE");
      &AddNode_VENPHN.NodeValue = &PHONE;
      &AddNode_VENCITY = &AddNode_HEADER.AddElement("CITY_VNDR");
      &AddNode_VENCITY.NodeValue = &VENCITY;
      &AddNode_VENSTATE = &AddNode_HEADER.AddElement("STATE_VNDR");
      &AddNode_VENSTATE.NodeValue = &VENSTATE;
      &AddNode_VENPOSTAL = &AddNode_HEADER.AddElement("POSTAL_VNDR");
      &AddNode_VENPOSTAL.NodeValue = &VENPOSTAL;
      &AddNode_VENCOUNTRY = &AddNode_HEADER.AddElement("COUNTRY_VNDR");
      &AddNode_VENCOUNTRY.NodeValue = &VENCOUN;
      rem &AddNode_CommentNode_VENDOR = &AddNode_HEADER.AddComment("Vendor Address Block....ENDS");
      
      /* Create the Address Block */
      
      rem &AddNode_CommentNode_ADDR = &AddNode_HEADER.AddComment("Address Block....STARTS");
      &AddNode_ATTN_TO = &AddNode_HEADER.AddElement("ATTN_TO");
      &AddNode_ATTN_TO.NodeValue = &ATTN_TO;
      &AddNode_DESCR0 = &AddNode_HEADER.AddElement("DESCR");
      &AddNode_DESCR0.NodeValue = &DESCR;
      &AddNode_ADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_BILL");
      &AddNode_ADDR1.NodeValue = &ADDR1;
      &AddNode_ADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_BILL");
      &AddNode_ADDR2.NodeValue = &ADDR2;
      &AddNode_ADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_BILL");
      &AddNode_ADDR3.NodeValue = &ADDR3;
      &AddNode_ADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_BILL");
      &AddNode_ADDR4.NodeValue = &ADDR4;
      &AddNode_CITY = &AddNode_HEADER.AddElement("CITY_BILL");
      &AddNode_CITY.NodeValue = &CITY;
      &AddNode_STATE = &AddNode_HEADER.AddElement("STATE_BILL");
      &AddNode_STATE.NodeValue = &STATE;
      &AddNode_POSTAL = &AddNode_HEADER.AddElement("POSTAL_BILL");
      &AddNode_POSTAL.NodeValue = &POSTAL;
      &AddNode_COCD = &AddNode_HEADER.AddElement("COUNTRY_BILL"); /* CONFIRM WHETHER ITS THE COUNTRY CODE */
      &AddNode_COCD.NodeValue = &COUNT_HDR;
      rem &AddNode_CommentNode_ADDR = &AddNode_HEADER.AddComment("Address Block....ENDS");
      
      
      /* PS_Z_PO_HDR_PPM */
      
      rem &AddNode_CommentTable = &AddNode_HEADER.AddComment("All Values to be picked up from PS_Z_PO_HDR_PPM");
      &AddNode_Z_ORD = &AddNode_HEADER.AddElement("Z_ORD_TYPE");
      &AddNode_Z_ORD.NodeValue = &Z_ORD_TYPE;
      &AddNode_Z_JOB = &AddNode_HEADER.AddElement("Z_JOB_TYPE");
      &AddNode_Z_JOB.NodeValue = &Z_JOB_TYPE;
      &AddNode_Z_BVAPP = &AddNode_HEADER.AddElement("Z_BVAPP_NUMBER");
      &AddNode_Z_BVAPP.NodeValue = &Z_BVAPP_NUMBER;
      &AddNode_Z_REQ = &AddNode_HEADER.AddElement("Z_REQUESTOR_ID");
      &AddNode_Z_REQ.NodeValue = &Z_REQ_ID;
      
      /* PS_PYMT_TRMS_NET */
      
      &AddNode_DSC_TRMS_AVAIL_FLG = &AddNode_HEADER.AddElement("DSC_TRMS_AVAIL_FLG");
      &AddNode_DSC_TRMS_AVAIL_FLG.NodeValue = &DSC_TRMS_AVAIL_FLG;
      
      /* PS_PYMT_TRMS_DSCNT */
      
      &AddNode_TERMS_DAYS = &AddNode_HEADER.AddElement("TERMS_ADJUST_DAYS");
      &AddNode_TERMS_DAYS.NodeValue = &TERMS_ADJUST_DAYS;
      &AddNode_DSCNT_PER = &AddNode_HEADER.AddElement("DSCNT_TERMS_PERCENT");
      &AddNode_DSCNT_PER.NodeValue = &DSCNT_TRMS_PERCENT;
      
      /* PS_PYMT_TRMS_TIME */
      
      &AddNode_TMG_DAY = &AddNode_HEADER.AddElement("TMG_DAY_INCR_VAL");
      &AddNode_TMG_DAY.NodeValue = &TMG_DAY_INCR_VAL;
      
      /* PS_Z_MNET_TBL */
      
      rem &AddNode_CommentNode_MNET = &AddNode_HEADER.AddComment("MNET BLOCK....STARTS");
      &AddNode_Z_FIRST_NAME = &AddNode_HEADER.AddElement("Z_FIRST_NAME");
      &AddNode_Z_FIRST_NAME.NodeValue = &Z_FIRST_NAME;
      &AddNode_MIDDLE_NAME = &AddNode_HEADER.AddElement("MIDDLE_NAME");
      &AddNode_MIDDLE_NAME.NodeValue = &MIDDLE_NAME;
      &AddNode_Z_LAST_NAME = &AddNode_HEADER.AddElement("Z_LAST_NAME");
      &AddNode_Z_LAST_NAME.NodeValue = &Z_LAST_NAME;
      &AddNode_Z_SMTP = &AddNode_HEADER.AddElement("Z_SMTP_ADDR");
      &AddNode_Z_SMTP.NodeValue = &Z_SMTP;
      rem &AddNode_WS_WORK_PHONE = &AddNode_HEADER.AddElement("WS_WORK_PHONE");
      rem &AddNode_WS_WORK_PHONE.NodeValue = &WS_WORK_PHONE;
      rem &AddNode_CommentNode_MNET = &AddNode_HEADER.AddComment("MNET BLOCK....ENDS");
      
      /* Create the Comment Block */
      
      rem &AddNode_CommentNode_COMM = &AddNode_HEADER.AddComment("COMMENT BLOCK....STARTS");
      &AddNode_OPRID = &AddNode_HEADER.AddElement("OPRID");
      &AddNode_OPRID.NodeValue = &OPRID;
      rem &LOG_PO.WriteLine("OPRID " | &OPRID);
      &AddNode_COMMENT_ID = &AddNode_HEADER.AddElement("COMMENT_ID");
      &AddNode_COMMENT_ID.NodeValue = &COMMENT_ID;
      rem &LOG_PO.WriteLine("Comment ID " | &COMMENT_ID);
      &AddNode_RANDOM = &AddNode_HEADER.AddElement("RANDOM_CMMT_NBR");
      &AddNode_RANDOM.NodeValue = &RANDOM;
      rem &LOG_PO.WriteLine("Random Comment Number " | &RANDOM);
      rem &AddNode_CommentNode_COMM = &AddNode_HEADER.AddComment("COMMENT BLOCK....ENDS");
      
      /* PS_PO_HDR AGAIN */
      
      rem &AddNode_Comments_HDR = &AddNode_HEADER.AddComment("ENTERED...APPROVED...MODIFIED BY...STARTS");
      &AddNode_OPRID_ENT = &AddNode_HEADER.AddElement("OPRID_ENTERED_BY");
      &AddNode_OPRID_ENT.NodeValue = &OPRID_ENT;
      &AddNode_ENT_DT = &AddNode_HEADER.AddElement("ENTERED_DT");
      &AddNode_ENT_DT.NodeValue = &ENT_DT;
      &AddNode_OPRID_APP = &AddNode_HEADER.AddElement("OPRID_APPROVED_BY");
      &AddNode_OPRID_APP.NodeValue = &OPRID_APP;
      &AddNode_APP_DT = &AddNode_HEADER.AddElement("APPROVAL_DT");
      &AddNode_APP_DT.NodeValue = &APP_DT;
      &AddNode_OPRID_MODIF = &AddNode_HEADER.AddElement("OPRID_MODIFIED_BY");
      &AddNode_OPRID_MODIF.NodeValue = &OPRID_MODIF;
      &AddNode_LAST_DTTM_UPD = &AddNode_HEADER.AddElement("LAST_DTTM_UPDATE");
      &AddNode_LAST_DTTM_UPD.NodeValue = &LAST_DTTM_UPD;
      rem &AddNode_Comments_HDR = &AddNode_HEADER.AddComment("ENTERED...APPROVED...MODIFIED BY...ENDS");
      
      /* Get Count of No of Lines */
      rem For &iLine = 1 to &Z_PO_LINE.ActiveRowCount;
      rem SQLExec("Select Count(*) from PS_PO_LINE where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NO_LINES);
      rem MessageBox(0, "", 0, 0, "Rows Affected " | %SqlRows);
      rem &RTNCD = "" | %SqlRows | " row(s) affected.";
      rem If All(&NO_LINES) Then
         
         /**********************
          Generate the Line Loop
          **********************/
         
         For &Line = 1 To &NO_LINES;
      For &Line = 1 To &Z_PO_LINE.ActiveRowCount
         
         &LINE_NBR = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.LINE_NBR.Value;
         &CANCEL_STATUS_LINE = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CANCEL_STATUS.Value;
         &CHANGE_STATUS = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CHANGE_STATUS.Value;
         &CHNG_ORD_SEQ_LINE = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CHNG_ORD_SEQ.Value;
         &ITEM_SETID_L = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.ITM_SETID.Value;
         &INV_ITM_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.INV_ITEM_ID.Value;
         &DESCR254_MIXED = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.DESCR254_MIXED.Value;
         &VNDR_ITM_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.ITM_ID_VNDR.Value;
         &VNDR_CATALOG_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.VNDR_CATALOG_ID.Value;
         &CAT_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CATEGORY_ID.Value;
         &CAT_CD = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CATEGORY_CD.Value;
         &CAT_DESCR = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.DESCR.Value;
         &UOM = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.UNIT_OF_MEASURE.Value;
         &PRICE_DT_TYPE = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.PRICE_DT_TYPE.Value;
         &MFG_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.MFG_ID.Value;
         &MFG_DESCR = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.DESCR1.Value;
         &MFG_ITM_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.MFG_ITM_ID.Value;
         &CNTRCT_SETID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CNTRCT_SETID.Value;
         &CNTRCT_ID = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CNTRCT_ID.Value;
         &CNTRCT_LINE_NBR = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.CNTRCT_LINE_NBR.Value;
         &RECV_REQ = &Z_PO_LINE(&Line).Z_PO_LN_E_VW.RECV_REQ.Value;
         
         rem SQLExec("Select LINE_NBR, CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, ITM_SETID, INV_ITEM_ID, DESCR254_MIXED, ITM_ID_VNDR, VNDR_CATALOG_ID, CATEGORY_ID, CATEGORY_CD, DESCR, UNIT_OF_MEASURE, PRICE_DT_TYPE, MFG_ID, DESCR1, MFG_ITM_ID, CNTRCT_SETID, CNTRCT_ID, CNTRCT_LINE_NBR, RECV_REQ FROM PS_Z_PO_LN_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
         
         rem &SQL_LINE = CreateSQL("Select LINE_NBR, CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, ITM_SETID, INV_ITEM_ID, DESCR254_MIXED, ITM_ID_VNDR, VNDR_CATALOG_ID, CATEGORY_ID, CATEGORY_CD, DESCR, UNIT_OF_MEASURE, PRICE_DT_TYPE, MFG_ID, DESCR1, MFG_ITM_ID, CNTRCT_SETID, CNTRCT_ID, CNTRCT_LINE_NBR, RECV_REQ FROM PS_Z_PO_LN_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &iLine);
         
         rem While &SQL_LINE.Fetch(&LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
         
         &AddNode_LINE = &AddNode_HEADER.AddElement("LINE");
         rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....STARTS");
         &AddNode_LINE_BU = &AddNode_LINE.AddElement("BUSINESS_UNIT");
         &AddNode_LINE_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
         &AddNode_LINE_PO_ID = &AddNode_LINE.AddElement("PO_ID");
         &AddNode_LINE_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
         &AddNode_LINE_NBR = &AddNode_LINE.AddElement("LINE_NBR");
         &AddNode_LINE_NBR.NodeValue = &Line;
         &AddNode_CN_STS_LINE = &AddNode_LINE.AddElement("CANCEL_STATUS_LINE");
         &AddNode_CN_STS_LINE.NodeValue = &CANCEL_STATUS_LINE;
         &AddNode_CHNG_STS = &AddNode_LINE.AddElement("CHANGE_STATUS");
         &AddNode_CHNG_STS.NodeValue = &CHANGE_STATUS;
         &AddNode_CHNG_ORD_SEQ_LINE = &AddNode_LINE.AddElement("CHNG_ORD_SEQ_LINE");
         &AddNode_CHNG_ORD_SEQ_LINE.NodeValue = &CHNG_ORD_SEQ_LINE;
         /* ITEM DESCRIPTION */
         &AddNode_ITEM_SETID = &AddNode_LINE.AddElement("ITM_SETID");
         &AddNode_ITEM_SETID.NodeValue = "USWC"; /* As Per Client Requirement */
         &AddNode_ITEM_ID = &AddNode_LINE.AddElement("INV_ITEM_ID");
         &AddNode_ITEM_ID.NodeValue = &INV_ITM_ID;
         &AddNode_DESCR254_MIXED = &AddNode_LINE.AddElement("ITEM_DESCR");
         &AddNode_DESCR254_MIXED.NodeValue = &DESCR254_MIXED;
         &AddNode_ITM_ID_VNDR = &AddNode_LINE.AddElement("ITM_ID_VNDR");
         &AddNode_ITM_ID_VNDR.NodeValue = &VNDR_ITM_ID;
         &AddNode_VNDR_CATALOG_ID = &AddNode_LINE.AddElement("VNDR_CATALOG_ID");
         &AddNode_VNDR_CATALOG_ID.NodeValue = &VNDR_CATALOG_ID;
         /*CATEGORY CODE */
         &AddNode_CATEGORY_ID = &AddNode_LINE.AddElement("CATEGORY_ID");
         &AddNode_CATEGORY_ID.NodeValue = &CAT_ID;
         &AddNode_CATEGORY_CD = &AddNode_LINE.AddElement("CATEGORY_CD");
         &AddNode_CATEGORY_CD.NodeValue = &CAT_CD;
         &AddNode_CATEGORY_DESCR = &AddNode_LINE.AddElement("CATEGORY_DESCR");
         &AddNode_CATEGORY_DESCR.NodeValue = &CAT_DESCR;
         /* UNIT OF MEASURE */
         &AddNode_UOM = &AddNode_LINE.AddElement("UNIT_OF_MEASURE");
         &AddNode_UOM.NodeValue = &UOM;
         &AddNode_PRICE_DT_TYPE = &AddNode_LINE.AddElement("PRICE_DT_TYPE");
         &AddNode_PRICE_DT_TYPE.NodeValue = &PRICE_DT_TYPE;
         /* MANUFACTURERS DETAILS */
         &AddNode_MFG_ID = &AddNode_LINE.AddElement("MFG_ID");
         &AddNode_MFG_ID.NodeValue = &MFG_ID;
         &AddNode_MFG_DESCR = &AddNode_LINE.AddElement("MFG_DESCR");
         &AddNode_MFG_DESCR.NodeValue = &MFG_DESCR;
         &AddNode_MFG_ITM_ID = &AddNode_LINE.AddElement("MFG_ITM_ID");
         &AddNode_MFG_ITM_ID.NodeValue = &MFG_ITM_ID;
         /* Add Code for Custom Item Attribute Table - Z_ITEM_ATT_TBL */
         &AddNode_Z_ICC_CD = &AddNode_LINE.AddElement("Z_ICC_CODE_CD");
         &AddNode_Z_ICC_CD.NodeValue = &Z_ICC_CD;
         &AddNode_Z_AIC_CD = &AddNode_LINE.AddElement("Z_AIC_CODE_FLD");
         &AddNode_Z_AIC_CD.NodeValue = &Z_AIC_FLD;
         &AddNode_Z_DEVICE_IND = &AddNode_LINE.AddElement("Z_DEVICE_IND");
         &AddNode_Z_DEVICE_IND.NodeValue = &Z_DEVICE_IND;
         /* REMEDY REQUEST FLAG */
         &AddNode_Z_REM_REQ_FLG = &AddNode_LINE.AddElement("Z_REMEDY_RQST_FLG");
         &AddNode_Z_REM_REQ_FLG.NodeValue = &Z_REM_REQ_FLG;
         /* CONTRACT DETAILS */
         &AddNode_CNTRCT_SETID = &AddNode_LINE.AddElement("CNTRCT_SETID");
         &AddNode_CNTRCT_SETID.NodeValue = &CNTRCT_SETID;
         &AddNode_CNTRCT_ID = &AddNode_LINE.AddElement("CNTRCT_ID");
         &AddNode_CNTRCT_ID.NodeValue = &CNTRCT_ID;
         &AddNode_CNTRCT_LINE_NBR = &AddNode_LINE.AddElement("CNTRCT_LINE_NBR");
         &AddNode_CNTRCT_LINE_NBR.NodeValue = &CNTRCT_LINE_NBR;
         &AddNode_RECV_REQ = &AddNode_LINE.AddElement("RECV_REQ");
         &AddNode_RECV_REQ.NodeValue = &RECV_REQ;
         &AddNode_Z_QUOTE_NBR = &AddNode_LINE.AddElement("Z_QUOTE_NUMBER");
         &AddNode_Z_QUOTE_NBR.NodeValue = &Z_QUOTE_NBR;
         rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....ENDS");
         
         /* Get Count of No of Schedules */
         rem For &iSched = 1 to &Z_PO_SCHED.ActiveRowCount;
         rem SQLExec("Select Count(*) from PS_PO_LINE_SHIP Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &NO_SCHED);
         
         rem If All(&NO_SCHED) Then
               
               /**************************
                Generate the Schedule Loop
                **************************/
               
               For &SCHED = 1 To &NO_SCHED;
         For &SCHED = 1 To &Z_PO_SCHED.ActiveRowCount;
            
            &CANCEL_STATUS_SCHED = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.CANCEL_STATUS.Value;
            &CHNG_STATUS_SCHED = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.CHANGE_STATUS.Value;
            &CHNG_ORD_SEQ_SCHED = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.CHNG_ORD_SEQ.Value;
            &PRICE_PO = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.PRICE_PO.Value;
            &CURRENCY_CD = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.CURRENCY_CD.Value;
            &SHIPTO_SETID = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.SHIPTO_SETID.Value;
            &SHIPTO_ID = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.SHIPTO_ID.Value;
            &QTY_PO = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.QTY_PO.Value;
            &ZERO_PRICE_IND = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.ZERO_PRICE_IND.Value;
            &SCHED_MERCHANDISE_AMT = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.MERCHANDISE_AMT.Value;
            &SUT_APP = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.SUT_APPLICABILITY.Value;
            &FREIGHT_TERMS = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.FREIGHT_TERMS.Value;
            &SHIP_TYPE_ID = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.SHIP_TYPE_ID.Value;
            &SHIP_DATE = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.SHIP_DATE.Value;
            &DUE_DT = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.DUE_DT.Value;
            &DUE_TIME = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.DUE_TIME.Value;
            &L_ADDR1 = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.ADDRESS1.Value;
            &L_ADDR2 = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.ADDRESS2.Value;
            &L_ADDR3 = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.ADDRESS3.Value;
            &L_ADDR4 = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.ADDRESS4.Value;
            &L_CITY = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.CITY.Value;
            &L_STATE = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.STATE.Value;
            &L_POSTAL = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.POSTAL.Value;
            &COUNTRY_SCHED = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.COUNTRY.Value;
            &SHIP_DESCR = &Z_PO_SCHED(&SCHED).Z_PO_SCHED_EVW.DESCR.Value;
            
            /* Instead Use CreateSQL and While loop */
            rem SQLExec("Select CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, PRICE_PO, CURRENCY_CD, SHIPTO_SETID, SHIPTO_ID, QTY_PO, ZERO_PRICE_IND, MERCHANDISE_AMT, SUT_APPLICABILITY, FREIGHT_TERMS, SHIP_TYPE_ID, SHIP_DATE, DUE_DT, DUE_TIME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, STATE, POSTAL, COUNTRY, DESCR FROM PS_Z_PO_SCHED_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &CANCEL_STATUS_SCHED, &CHNG_STATUS_SCHED, &CHNG_ORD_SEQ_SCHED, &PRICE_PO, &CURRENCY_CD, &SHIPTO_SETID, &SHIPTO_ID, &QTY_PO, &ZERO_PRICE_IND, &SCHED_MERCHANDISE_AMT, &SUT_APP, &FREIGHT_TERMS, &SHIP_TYPE_ID, &SHIP_DATE, &DUE_DT, &DUE_TIME, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &COUNTRY_SCHED, &SHIP_DESCR);
            rem &SQL_SCHEDULE = CreateSQL("Select CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, PRICE_PO, CURRENCY_CD, SHIPTO_SETID, SHIPTO_ID, QTY_PO, ZERO_PRICE_IND, MERCHANDISE_AMT, SUT_APPLICABILITY, FREIGHT_TERMS, SHIP_TYPE_ID, SHIP_DATE, DUE_DT, DUE_TIME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, STATE, POSTAL, COUNTRY, DESCR FROM PS_Z_PO_SCHED_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &iSched);
            rem While &SQL_SCHEDULE.Fetch(&BU_SCHED, &PO_SCHED, &LN_NBR1, &SCHED_NBR1, &PRICE_PO, &SHIPTO_ID, &QTY_PO, &SHIP_TYPE_ID, &SHIP_DATE, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &L_CO_CD, &SHIP_DESCR);
            rem While &SQL_SCHEDULE.Fetch(&CANCEL_STATUS_SCHED, &CHNG_STATUS_SCHED, &CHNG_ORD_SEQ_SCHED, &PRICE_PO, &CURRENCY_CD, &SHIPTO_SETID, &SHIPTO_ID, &QTY_PO, &ZERO_PRICE_IND, &SCHED_MERCHANDISE_AMT, &SUT_APP, &FREIGHT_TERMS, &SHIP_TYPE_ID, &SHIP_DATE, &DUE_DT, &DUE_TIME, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &COUNTRY_SCHED, &SHIP_DESCR);
            /* PS_PO_LINE */
            rem &LOG_PO.WriteLine("No of Schedules " | &NO_SCHED);
            &AddNode_SCHEDULE = &AddNode_LINE.AddElement("SCHEDULE");
            rem &AddNode_CommentNode_SCHED = &AddNode_SCHEDULE.AddComment("SCHEDULE Block....STARTS");
            &AddNode_SCHED_BU = &AddNode_SCHEDULE.AddElement("BUSINESS_UNIT");
            &AddNode_SCHED_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
            &AddNode_SCHED_PO_ID = &AddNode_SCHEDULE.AddElement("PO_ID");
            &AddNode_SCHED_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
            &AddNode_SCHED_LINE_NBR = &AddNode_SCHEDULE.AddElement("LINE_NBR");
            &AddNode_SCHED_LINE_NBR.NodeValue = &Line;
            &AddNode_SCHED_NBR = &AddNode_SCHEDULE.AddElement("SCHED_NBR");
            &AddNode_SCHED_NBR.NodeValue = &SCHED;
            &AddNode_CN_STS_SCHED = &AddNode_SCHEDULE.AddElement("CANCEL_STATUS_SCHED");
            &AddNode_CN_STS_SCHED.NodeValue = &CANCEL_STATUS_SCHED;
            &AddNode_CHNG_STATUS_SCHED = &AddNode_SCHEDULE.AddElement("CHANGE_STATUS_SCHED");
            &AddNode_CHNG_STATUS_SCHED.NodeValue = &CHNG_STATUS_SCHED;
            &AddNode_CHNG_ORD_SEQ_SCHED = &AddNode_SCHEDULE.AddElement("CHNG_ORD_SEQ_SCHED");
            &AddNode_CHNG_ORD_SEQ_SCHED.NodeValue = &CHNG_ORD_SEQ_SCHED;
            &AddNode_PRICE_PO = &AddNode_SCHEDULE.AddElement("PRICE_PO");
            &AddNode_PRICE_PO.NodeValue = &PRICE_PO;
            &AddNode_CURRENCY_CD = &AddNode_SCHEDULE.AddElement("CURRENCY_CD");
            &AddNode_CURRENCY_CD.NodeValue = &CURRENCY_CD;
            &AddNode_QTY_PO = &AddNode_SCHEDULE.AddElement("QTY_PO");
            &AddNode_QTY_PO.NodeValue = &QTY_PO;
            &AddNode_ZERO_PRICE_IND = &AddNode_SCHEDULE.AddElement("ZERO_PRICE_IND");
            &AddNode_ZERO_PRICE_IND.NodeValue = &ZERO_PRICE_IND;
            &AddNode_SHIP_DATE = &AddNode_SCHEDULE.AddElement("SHIP_DATE");
            &AddNode_SHIP_DATE.NodeValue = &SHIP_DATE;
            &AddNode_DUE_DT = &AddNode_SCHEDULE.AddElement("DUE_DT");
            &AddNode_DUE_DT.NodeValue = &DUE_DT;
            &AddNode_DUE_TIME = &AddNode_SCHEDULE.AddElement("DUE_TIME");
            &AddNode_DUE_TIME.NodeValue = &DUE_TIME;
            &AddNode_SUT_APP = &AddNode_SCHEDULE.AddElement("SUT_APPLICABILITY");
            &AddNode_SUT_APP.NodeValue = &SUT_APP;
            &AddNode_MERCHANDISE_AMT_SCHED = &AddNode_SCHEDULE.AddElement("SCHED_MERCHANDISE_AMT");
            &AddNode_MERCHANDISE_AMT_SCHED.NodeValue = &SCHED_MERCHANDISE_AMT;
            &AddNode_FREIGHT_TERMS = &AddNode_SCHEDULE.AddElement("FREIGHT_TERMS");
            &AddNode_FREIGHT_TERMS.NodeValue = &FREIGHT_TERMS;
            /* SHIP TO LOCATION DETAILS */
            &AddNode_SHIPTO_SETID = &AddNode_SCHEDULE.AddElement("SHIPTO_SETID");
            &AddNode_SHIPTO_SETID.NodeValue = &SHIPTO_SETID;
            &AddNode_SHIPTO_ID = &AddNode_SCHEDULE.AddElement("SHIPTO_ID");
            &AddNode_SHIPTO_ID.NodeValue = &SHIPTO_ID;
            /* PS_SHIPTO_TBL */
            &AddNode_DESCR_SHIP_SCHED = &AddNode_SCHEDULE.AddElement("DESCR_SHIPTO");
            &AddNode_DESCR_SHIP_SCHED.NodeValue = &DESCR_SHIP_SCHED;
            rem &AddNode_DESCR111.NodeValue = &SHIP_DESCR;
            &AddNode_SHIP_TYPE_ID = &AddNode_SCHEDULE.AddElement("SHIP_TYPE_ID");
            &AddNode_SHIP_TYPE_ID.NodeValue = &SHIP_TYPE_ID;
            
            
            /* LOCATION_TBL */
            
            &AddNode_L_ADDR1 = &AddNode_SCHEDULE.AddElement("ADDRESS1_SHIPTO");
            &AddNode_L_ADDR1.NodeValue = &L_ADDR1;
            &AddNode_L_ADDR2 = &AddNode_SCHEDULE.AddElement("ADDRESS2_SHIPTO");
            &AddNode_L_ADDR2.NodeValue = &L_ADDR2;
            &AddNode_L_ADDR3 = &AddNode_SCHEDULE.AddElement("ADDRESS3_SHIPTO");
            &AddNode_L_ADDR3.NodeValue = &L_ADDR3;
            &AddNode_L_ADDR4 = &AddNode_SCHEDULE.AddElement("ADDRESS4_SHIPTO");
            &AddNode_L_ADDR4.NodeValue = &L_ADDR4;
            &AddNode_L_CITY = &AddNode_SCHEDULE.AddElement("CITY_SHIPTO");
            &AddNode_L_CITY.NodeValue = &L_CITY;
            &AddNode_L_STATE = &AddNode_SCHEDULE.AddElement("STATE_SHIPTO");
            &AddNode_L_STATE.NodeValue = &L_STATE;
            &AddNode_L_POSTAL = &AddNode_SCHEDULE.AddElement("POSTAL_SHIPTO");
            &AddNode_L_POSTAL.NodeValue = &L_POSTAL;
            &AddNode_L_COUNTRY_CD = &AddNode_SCHEDULE.AddElement("COUNTRY_SHIPTO");
            &AddNode_L_COUNTRY_CD.NodeValue = &COUNTRY_SCHED;
            
            rem &AddNode_CommentNode_SCHED = &AddNode_SCHEDULE.AddComment("SCHEDULE Block....ENDS");
            
            /* Get Count of No of Distributions */
            rem For &iDistrib = 1 to &Z_PO_DISTRIB.ActiveRowCount;
            rem SQLExec("Select Count(*) from PS_PO_LINE_DISTRIB Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &NO_DISTRIB);
            
            rem If All(&NO_DISTRIB) Then
                     
                     /******************************
                      Generate the Distribution Loop
                      ******************************/
                     
                     For &DISTRIB = 1 To &NO_DISTRIB;
            For &DISTRIB = 1 To &Z_PO_DISTRIB.ActiveRowCount;
               
               &DISTRIB_LN_STATUS = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.DISTRIB_LN_STATUS.Value;
               &DISTRIB_QTY_PO = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.QTY_PO.Value;
               &CURRENCY_CD_DISTRIB = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.CURRENCY_CD.Value;
               &MERCHANDISE_AMT = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.MERCHANDISE_AMT.Value;
               &SALES_TAX_AMT = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.SALETX_AMT.Value;
               &USE_TAX_AMT = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.USETAX_AMT.Value;
               &ACCOUNT = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.ACCOUNT.Value;
               &TAG_NUMBER = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.TAG_NUMBER.Value;
               &DLOC = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.LOCATION.Value;
               &BU_REQ = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.BUSINESS_UNIT_REQ.Value;
               &REQ_ID = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.REQ_ID.Value;
               &REQ_LINE_NBR = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.REQ_LINE_NBR.Value;
               &REQ_SCHED_NBR = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.REQ_SCHED_NBR.Value;
               &REQUESTOR_ID = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.REQUESTOR_ID.Value;
               &D_ADDR1 = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.ADDRESS1.Value;
               &D_ADDR2 = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.ADDRESS2.Value;
               &D_ADDR3 = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.ADDRESS3.Value;
               &D_ADDR4 = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.ADDRESS4.Value;
               &D_CITY = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.CITY.Value;
               &D_POSTAL = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.POSTAL.Value;
               &D_STATE = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.STATE.Value;
               &COUNTRY_DISTRIB = &Z_PO_DISTRIB(&DISTRIB).Z_PO_DISTR_E_VW.COUNTRY.Value;
               
               rem SQLExec("Select DISTRIB_LN_STATUS, QTY_PO, CURRENCY_CD, MERCHANDISE_AMT, SALETX_AMT, USETAX_AMT, ACCOUNT, TAG_NUMBER, LOCATION, BUSINESS_UNIT_REQ, REQ_ID, REQ_LINE_NBR, REQ_SCHED_NBR, REQUESTOR_ID, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, POSTAL, STATE, COUNTRY FROM PS_Z_PO_DISTR_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
               rem &SQL_DISTRIB = CreateSQL("Select DISTRIB_LN_STATUS, QTY_PO, CURRENCY_CD, MERCHANDISE_AMT, SALETX_AMT, USETAX_AMT, ACCOUNT, TAG_NUMBER, LOCATION, BUSINESS_UNIT_REQ, REQ_ID, REQ_LINE_NBR, REQ_SCHED_NBR, REQUESTOR_ID, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, POSTAL, STATE, COUNTRY FROM PS_Z_PO_DISTR_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &iDistrib);
               rem While &SQL_DISTRIB.Fetch(&BU_DISTRIB, &PO_ID_DISTRIB, &LN_NBR_D, &SCHED_NBR_D, &DISTRIB_NUM, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &D_CO_CD);
               rem While &SQL_DISTRIB.Fetch(&DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
               /* PS_PO_LINE_DISTRIB */
               rem &LOG_PO.WriteLine("No of Distributions " | &NO_DISTRIB);
               &AddNode_DISTRIBUTION = &AddNode_SCHEDULE.AddElement("DISTRIBUTION");
               rem &AddNode_CommentNode_DISTRIB = &AddNode_DISTRIBUTION.AddComment("DISTRIBUTION Block....STARTS");
               &AddNode_DISTRIB_BU = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT");
               &AddNode_DISTRIB_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
               &AddNode_DISTRIB_PO_ID = &AddNode_DISTRIBUTION.AddElement("PO_ID");
               &AddNode_DISTRIB_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
               &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("LINE_NBR");
               &AddNode_DISTRIB_LINE_NBR.NodeValue = &Line;
               &AddNode_DISTRIB_SCHED_NBR = &AddNode_DISTRIBUTION.AddElement("SCHED_NBR");
               &AddNode_DISTRIB_SCHED_NBR.NodeValue = &SCHED;
               &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LINE_NUM");
               &AddNode_DISTRIB_LINE_NBR.NodeValue = &DISTRIB;
               &AddNode_DISTRIB_LN_STATUS = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LN_STATUS");
               &AddNode_DISTRIB_LN_STATUS.NodeValue = &DISTRIB_LN_STATUS;
               &AddNode_DISTRIB_QTY_PO = &AddNode_DISTRIBUTION.AddElement("DISTRIB_QTY_PO");
               &AddNode_DISTRIB_QTY_PO.NodeValue = &DISTRIB_QTY_PO;
               &AddNode_CURRENCY_CD_DISTRIB = &AddNode_DISTRIBUTION.AddElement("DISTRIB_CURRENCY_CD");
               &AddNode_CURRENCY_CD_DISTRIB.NodeValue = &CURRENCY_CD_DISTRIB;
               &AddNode_MERCHANDISE_AMT = &AddNode_DISTRIBUTION.AddElement("MERCHANDISE_AMT");
               &AddNode_MERCHANDISE_AMT.NodeValue = &MERCHANDISE_AMT;
               /* TAX DETAILS */
               &AddNode_SALES_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("SALES_TAX_AMT");
               &AddNode_SALES_TAX_AMT.NodeValue = &SALES_TAX_AMT;
               &AddNode_USE_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("USE_TAX_AMT");
               &AddNode_USE_TAX_AMT.NodeValue = &USE_TAX_AMT;
               &AddNode_ACCOUNT = &AddNode_DISTRIBUTION.AddElement("ACCOUNT");
               &AddNode_ACCOUNT.NodeValue = &ACCOUNT;
               /* CUSTOM FIELDS */
               &AddNode_Z_COMBOD_CD = &AddNode_DISTRIBUTION.AddElement("Z_COMBD_CD");
               &AddNode_Z_COMBOD_CD.NodeValue = &Z_COMBD_CD;
               &AddNode_Z_EXTC = &AddNode_DISTRIBUTION.AddElement("Z_EXTC");
               &AddNode_Z_EXTC.NodeValue = &Z_EXTC;
               &AddNode_Z_JOBNO = &AddNode_DISTRIBUTION.AddElement("Z_JOBNO");
               &AddNode_Z_JOBNO.NodeValue = &Z_JOBNO;
               &AddNode_Z_JEO = &AddNode_DISTRIBUTION.AddElement("Z_JEO");
               &AddNode_Z_JEO.NodeValue = &Z_JEO;
               &AddNode_Z_ADRS = &AddNode_DISTRIBUTION.AddElement("Z_ADRS");
               &AddNode_Z_ADRS.NodeValue = &Z_ADRS;
               &AddNode_Z_RCBS = &AddNode_DISTRIBUTION.AddElement("Z_RCBS");
               &AddNode_Z_RCBS.NodeValue = &Z_RCBS;
               &AddNode_Z_CPIM = &AddNode_DISTRIBUTION.AddElement("Z_CPIM");
               &AddNode_Z_CPIM.NodeValue = &Z_CPIM;
               &AddNode_Z_RCC = &AddNode_DISTRIBUTION.AddElement("Z_RCC");
               &AddNode_Z_RCC.NodeValue = &Z_RCC;
               &AddNode_TAG_NUMBER = &AddNode_DISTRIBUTION.AddElement("TAG_NUMBER");
               &AddNode_TAG_NUMBER.NodeValue = &TAG_NUMBER;
               &AddNode_Z_SERIAL_NO = &AddNode_DISTRIBUTION.AddElement("Z_SERIAL_NO");
               &AddNode_Z_SERIAL_NO.NodeValue = &Z_SERIAL_NO;
               &AddNode_D_LOCATION = &AddNode_DISTRIBUTION.AddElement("D_LOCATION_D");
               &AddNode_D_LOCATION.NodeValue = &DLOC;
               &AddNode_BU_REQ = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_REQ");
               &AddNode_BU_REQ.NodeValue = &BU_REQ;
               &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_ID");
               &AddNode_REQ_ID.NodeValue = &REQ_ID;
               &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_LINE_NBR");
               &AddNode_REQ_ID.NodeValue = &REQ_LINE_NBR;
               &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_SCHED_NBR");
               &AddNode_REQ_ID.NodeValue = &REQ_SCHED_NBR;
               
               /* PS_REQ_HDR */
               
               &AddNode_REQUESTOR_ID = &AddNode_DISTRIBUTION.AddElement("REQUESTOR_ID");
               &AddNode_REQUESTOR_ID.NodeValue = &REQUESTOR_ID;
               &AddNode_OPRID = &AddNode_DISTRIBUTION.AddElement("OPRID");
               &AddNode_OPRID.NodeValue = &OPRID_DISTRIB;
               
               /* PS_Z_MNET_TBL */
               
               &AddNode_Z_FIRST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_FIRST_NAME");
               &AddNode_Z_FIRST_NAME.NodeValue = &D_Z_FIRST_NAME;
               &AddNode_MIDDLE_NAME = &AddNode_DISTRIBUTION.AddElement("MIDDLE_NAME");
               &AddNode_MIDDLE_NAME.NodeValue = &D_MIDDLE_NAME;
               &AddNode_Z_LAST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_LAST_NAME");
               &AddNode_Z_LAST_NAME.NodeValue = &D_Z_LAST_NAME;
               &AddNode_Z_SMTP = &AddNode_DISTRIBUTION.AddElement("Z_SMTP_ADDR");
               &AddNode_Z_SMTP.NodeValue = &D_Z_SMTP;
               rem &AddNode_WS_WORK_PHONE = &AddNode_DISTRIBUTION.AddElement("WS_WORK_PHONE");
               rem &AddNode_WS_WORK_PHONE.NodeValue = &D_WS_WORK_PHONE;
               
               /* PS_LOCATION_TBL */
               
               &AddNode_D_ADDR1 = &AddNode_DISTRIBUTION.AddElement("D_ADDRESS1_D");
               &AddNode_D_ADDR1.NodeValue = &D_ADDR1;
               &AddNode_D_ADDR2 = &AddNode_DISTRIBUTION.AddElement("D_ADDRESS2_D");
               &AddNode_D_ADDR2.NodeValue = &D_ADDR2;
               &AddNode_D_ADDR3 = &AddNode_DISTRIBUTION.AddElement("D_ADDRESS3_D");
               &AddNode_D_ADDR3.NodeValue = &D_ADDR3;
               &AddNode_D_ADDR4 = &AddNode_DISTRIBUTION.AddElement("D_ADDRESS4_D");
               &AddNode_D_ADDR4.NodeValue = &D_ADDR4;
               &AddNode_D_CITY = &AddNode_DISTRIBUTION.AddElement("D_CITY_D");
               &AddNode_D_CITY.NodeValue = &D_CITY;
               &AddNode_D_STATE = &AddNode_DISTRIBUTION.AddElement("D_STATE_D");
               &AddNode_D_STATE.NodeValue = &D_STATE;
               &AddNode_D_POSTAL = &AddNode_DISTRIBUTION.AddElement("D_POSTAL_D");
               &AddNode_D_POSTAL.NodeValue = &D_POSTAL;
               &AddNode_D_COUNTRY_CD = &AddNode_DISTRIBUTION.AddElement("D_COUNTRY_D");
               &AddNode_D_COUNTRY_CD.NodeValue = &COUNTRY_DISTRIB;
               
               rem &AddNode_CommentNode_DISTRIB = &AddNode_DISTRIBUTION.AddComment("DISTRIBUTION Block....ENDS");
               
               rem End-For; /* Distribution Loop */
               rem End-While; /* Distribution Level */
            End-For; /* Distribution Loop */
            rem End-If; /* Distribution Loop */
            rem End-While; /* Schedule Level */
         End-For; /* Schedule Loop */
         rem End-If; /* Schedule Loop */
         rem End-While; /* Line Level */
      End-For; /* Line Loop */
      rem End-If; /* Line Loop */
      rem End-While; /* Header Level */
      &cdataNode = &AddNode0.AddCDataSection("Testing...ENDS");
      /* Generate the Formatted XML */
      InitVariables();
      &STR = &NEWDOC.GenFormattedXmlString();
      rem &LOG_PO.WriteLine(&STR);
      rem &MSGNAME = Message.PURCHASE_ORDER_DISPATCH;
      &MSGNAME = Message.Z_POD_FINAL_MSG;
      
      /* CHECK NODE */
      
      <*&ErrorInfo = PingNode("PSFT_FILEOUTPUT");
      &Root = &ErrorInfo.DocumentElement;
      &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
      For &M = 1 To &MsgNodeArray.Len
         &MsgNode = &MsgNodeArray [&M];
         &MsgText = &MsgNode.FindNode("status").NodeValue;
         If &MsgText = "Success (117,73)" Then
            /*PUBLISH MESSAGE ON NODE*/
            Evaluate &DISP_METHOD
            When "EDX"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
               &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
               rem &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
               &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
               Break;
            When "B2B"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
               Break;
            When "RMD"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
               Break;
            When "ORB"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
               Break;
            When-Other
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
               Break;
            End-Evaluate;
            rem &RET = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
            rem &LOG_PO.WriteLine("Message Successfully Published " | &ret);
            If (&ret = "TRUE") Then
               &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
               MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
               SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
            End-If;
         Else
            Error ("Web Server not available for web service");
         End-If;
      End-For;
	  *>
      Evaluate &DISP_METHOD
      When "EDX"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         rem &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
         Break;
      When "B2B"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         Break;
      When "RMD"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         Break;
      When "ORB"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
         Break;
      When-Other
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         Break;
      End-Evaluate;
      If (&ret = "TRUE") Then
         &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
         MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
         SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Non Retail BU selected for processing");
   End-If; /* RETAIL BU CHECK */
End-Function;

/* Code Added to Cater to new requirement for PO Data PUBLISH */

/*DEFINE ROWSETS*/
Local Rowset &Z_PO_HDR = CreateRowset(Record.PO_HDR);
rem Local Rowset &Z_PO_LINE = CreateRowset(Record.Z_PO_LINE_VW1);
Local Rowset &Z_PO_LINE = CreateRowset(Record.Z_PO_LN_E_VW);
rem Local Rowset &Z_PO_SCHED = CreateRowset(Record.Z_PO_SHIP_VW1);
Local Rowset &Z_PO_SCHED = CreateRowset(Record.Z_PO_SCHED_EVW);
rem Local Rowset &Z_PO_DISTRIB = CreateRowset(Record.Z_PO_DIST_VW1);
Local Rowset &Z_PO_DISTRIB = CreateRowset(Record.Z_PO_DISTR_E_VW);
/* SAMPLE GETSETID FUNCTION */
rem &BOOK_SETID = GetSetId("BUSINESS_UNIT", ASSET.BUSINESS_UNIT, "DEPR_RT_TBL", "");

/* Declare Global Variables */
&NEW_PO_ID = Z_PO_PUB_AET.PO_ID;
&NEW_BU = Z_PO_PUB_AET.BUSINESS_UNIT;

/* Fill the HDR Rowset for the PO_ID */
rem MessageBox(0, "", 0, 0, "Filling the Rowset for " | &NEW_BU | " and " | &NEW_PO_ID);
&NO_PO_LOADED = &Z_PO_HDR.Fill("Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
rem MessageBox(0, "", 0, 0, "No of PO's Loaded " | &NO_PO_LOADED);


/* Initiate Retrieving Values */

If All(&NO_PO_LOADED) Then
   For &PO = 1 To &Z_PO_HDR.ActiveRowCount
      rem CALL_PO_HDR(&Z_PO_HDR(&PO).GetRecord(Record.Z_PO_TEMP_VW));
      rem SetTracePC(%TracePC_Assigns + %TracePC_ParamsOut + %TracePC_Starts + %TracePC_Functions + %TracePC_ParamsIn);
      rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
      &Line = &Z_PO_LINE.Fill("where BUSINESS_UNIT =:1 AND PO_ID = :2", &NEW_BU, &NEW_PO_ID);
      rem CALL_PO_LINE(&Z_PO_HDR(&PO).GetRecord(Record.Z_PO_TEMP_VW), &Z_PO_LINE);
      For &POL = 1 To &Z_PO_LINE.ActiveRowCount
         &SCHED = &Z_PO_SCHED.Fill("where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 ", &Z_PO_LINE(&POL).Z_PO_LN_E_VW.BUSINESS_UNIT.Value, &Z_PO_LINE(&POL).Z_PO_LN_E_VW.PO_ID.Value, &Z_PO_LINE(&POL).Z_PO_LN_E_VW.LINE_NBR.Value);
         For &POLS = 1 To &Z_PO_SCHED.ActiveRowCount
            &DISTRIB = &Z_PO_DISTRIB.Fill("where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", &Z_PO_SCHED(&POLS).Z_PO_SCHED_EVW.BUSINESS_UNIT.Value, &Z_PO_SCHED(&POLS).Z_PO_SCHED_EVW.PO_ID.Value, &Z_PO_SCHED(&POLS).Z_PO_SCHED_EVW.LINE_NBR.Value, &Z_PO_SCHED(&POLS).Z_PO_SCHED_EVW.SCHED_NBR.Value);
            For &POLDIS = 1 To &Z_PO_DISTRIB.ActiveRowCount
               /* Declare Files */
               rem &FileName_PUB = "C:\temp\NEW PO\PO_PUB" | %Datetime | ".log";
               rem &LOG_PO = GetFile(&FileName_PUB, "W", %FilePath_Absolute);
               rem &LOG_PO.WriteLine("Begin");
               rem &LOG_PO.WriteLine("Start Publishing for PO_ID " | Z_PO_PUB_AET.PO_ID);
               CALL_PO(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR), &Z_PO_LINE, &Z_PO_SCHED, &Z_PO_DISTRIB);
               rem CALL_PO(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
               rem CALL_PO(&Z_PO_HDR(&PO).GetRecord(Record.Z_PO_TEMP_VW), &Z_PO_LINE, &Z_PO_SCHED, &Z_PO_DISTRIB);
               /* File Handling */
               rem &LOG_PO.WriteLine("End");
               rem &LOG_PO.Close();
               rem Else
               MessageBox(0, "", 10662, 280, "No Processing", "Purchase Order", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
               rem End-If;
            End-For; /* DISTRIBUTION FILL */
            &Z_PO_DISTRIB.Flush();
         End-For; /* SCHEDULE FILL */
         &Z_PO_SCHED.Flush();
      End-For; /* LINE FILL */
      &Z_PO_LINE.Flush();
   End-For; /* HEADER FILL */
   &Z_PO_HDR.Flush();
Else
   MessageBox(0, "", 10662, 280, "No Processing", "Purchase Order", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
End-If;
/* This is where it all ENDS !!!! HOPEFULLY !!!!*/


rem Declare Function Load_Comments_Tbl PeopleCode COMM_WRK1.FORMULA FieldFormula;

/************************
 Initialize the variables
*************************/
Function InitVariables()
   /* Fields Added For PO PUBLISH */
   &BU = "";
   &PO_ID = "";
   &CHNG_ORD_BATCH = "";
   &NAME1 = "";
   &VENADDR1 = "";
   &VENADDR2 = "";
   &VENADDR3 = "";
   &VENADDR4 = "";
   &VENCOUN = "";
   &VENCITY = "";
   &VENSTATE = "";
   &VENPOSTAL = "";
   &ATTN_TO = "";
   &DESCR = "";
   &ADDR1 = "";
   &ADDR2 = "";
   &ADDR3 = "";
   &ADDR4 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &COCD = "";
   &Z_ORDER_TYPE = "";
   &DSC_TRMS_AVAIL_FLG = "";
   &TERMS_ADJUST_DAYS = "";
   &DSCNT_TRMS_PERCENT = "";
   &TMG_DAY_INCR_VAL = "";
   &Z_FIRST_NAME = "";
   &MIDDLE_NAME = "";
   &Z_LAST_NAME = "";
   &Z_SMTP = "";
   &WS_WORK_PHONE = "";
   &OPRID = "";
   &COMMENT_ID = "";
   &RANDOM = "";
   &BU_LINE = "";
   &PO_LINE = "";
   &LINE_NBR = "";
   &INV_ITEM_ID = "";
   &ITM_ID_VNDR = "";
   &UOM = "";
   &MFG_ITM_ID = "";
   &CNTRCT_ID = "";
   &DESCR254 = "";
   &DESCR60 = "";
   &BU_SCHED = "";
   &PO_SCHED = "";
   &LINE_NBR_SCHED = "";
   &SCHED_NBR = "";
   &PRICE_PO = "";
   &SHIPTO_ID = "";
   &QTY_PO = "";
   &SHIP_TYPE_ID = "";
   &SHIP_DATE = "";
   &L_ADDR1 = "";
   &L_ADDR2 = "";
   &L_ADDR3 = "";
   &L_ADDR4 = "";
   &L_CO_CD = "";
   &L_CITY = "";
   &L_STATE = "";
   &L_POSTAL = "";
   &SHIP_DESCR = "";
   &BU_DISTRIB = "";
   &PO_ID_DISTRIB = "";
   &LINE_NBR_DISTRIB = "";
   &SCHED_NBR_DISTRIB = "";
   &DISTRIB_LINE_NUM = "";
   &DLOC = "";
   &BU_REQ = "";
   &REQ_ID = "";
   &REQ_LINE_NBR = "";
   &REQ_SCHED_NBR = "";
   &REQUESTER_ID = "";
   &D_Z_FIRST_NAME = "";
   &D_MIDDLE_NAME = "";
   &D_Z_LAST_NAME = "";
   &D_Z_SMTP = "";
   &D_WS_WORK_PHONE = "";
   &D_ADDR1 = "";
   &D_ADDR2 = "";
   &D_ADDR3 = "";
   &D_ADDR4 = "";
   &D_CO_CD = "";
   &D_CITY = "";
   &D_STATE = "";
   &D_POSTAL = "";
   /*EO_BATLIB_AET.CREATE_HDR_FLG = "N";
   EO_BATLIB_AET.CREATE_TRL_FLG = "N";
   EO_BATLIB_AET.AE_APPLID = "EOL_PUBLISH";
   EO_BATLIB_AET.AE_SECTION = "FLATFILE";*/
   /* Fields Added by PRASHANT */
End-Function;


/*****************************
 NEW PO FUNCTION WITH SQL EXEC
 *****************************/
rem Function EDX_PUBLISH(&Z_PO_HDR As Record, &Z_PO_LINE As Rowset, &Z_PO_SCHED As Rowset, &Z_PO_DISTRIB As Rowset);
Function EDX_PUBLISH(&Z_PO_HDR As Record)
   
   SQLExec("Select BUSINESS_UNIT from PS_Z_BU_PM_TBL Where Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &NON_BU);
   If All(&NON_BU) Then
      Local XmlDoc &NEWDOC;
      Local string &PPSTR;
      
      &PPSTR = "Prashant Srivastava. Creater, PROPRIETOR" | Char(13) | "PP - 9819625468";
      
      MessageBox(0, "", 0, 0, "Starting Header Call with PO_ID " | Z_PO_PUB_AET.PO_ID);
      InitVariables();
      /* Retrieve HEADER Values for the BUSINESS UNIT and PO_ID */
      MessageBox(0, "", 0, 0, "Retrieve Header Values");
      rem SQLExec("Select PO_DT, PO_REF, PO_STATUS, RECV_STATUS, VENDOR_SETID, VENDOR_ID, VNDR_LOC, BUYER_ID, PYMNT_TERMS_CD, BUYER_ID, BILL_LOCATION, CHNG_ORD_BATCH, CHNG_ORD_SEQ, CHANGE_STATUS , ORIGIN , OPRID_ENTERED_BY, ENTERED_DT, OPRID_APPROVED_BY, APPROVAL_DT, OPRID_MODIFIED_BY, LAST_DTTM_UPDATE FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &PO_DT, &PO_REF, &PO_STATUS, &RECV_STATUS, &VENSETID, &VENID, &VNDR_LOC, &BUYER_ID, &PYMNT_CD, &BUYER_ID, &BILL_LOC, &CHNG_ORD_BATCH, &CHNG_ORD_SEQ, &CHNG_STATUS, &ORIGIN, &OPRID_ENT, &ENT_DT, &OPRID_APP, &APP_DT, &OPRID_MODIF, &LAST_DTTM_UPD);
      
      /* HEADER ROWSET */
      
      &DISP_METHOD = &Z_PO_HDR.DISP_METHOD.Value;
      &PO_DT = &Z_PO_HDR.PO_DT.Value;
      &PO_REF = &Z_PO_HDR.PO_REF.Value;
      &PO_STATUS = &Z_PO_HDR.PO_STATUS.Value;
      &RECV_STATUS = &Z_PO_HDR.RECV_STATUS.Value;
      &VENSETID = &Z_PO_HDR.VENDOR_SETID.Value;
      &VENID = &Z_PO_HDR.VENDOR_ID.Value;
      &VNDR_LOC = &Z_PO_HDR.VNDR_LOC.Value;
      &PYMNT_CD = &Z_PO_HDR.PYMNT_TERMS_CD.Value;
      &BUYER_ID = &Z_PO_HDR.BUYER_ID.Value;
      &BILL_LOC = &Z_PO_HDR.BILL_LOCATION.Value;
      &CHNG_ORD_BATCH = &Z_PO_HDR.CHNG_ORD_BATCH.Value;
      &CHNG_ORD_SEQ = &Z_PO_HDR.CHNG_ORD_SEQ.Value;
      &CHNG_STATUS = &Z_PO_HDR.CHANGE_STATUS.Value;
      &ORIGIN = &Z_PO_HDR.ORIGIN.Value;
      &OPRID_ENT = &Z_PO_HDR.OPRID_ENTERED_BY.Value;
      &ENT_DT = &Z_PO_HDR.ENTERED_DT.Value;
      &OPRID_APP = &Z_PO_HDR.OPRID_APPROVED_BY.Value;
      &APP_DT = &Z_PO_HDR.APPROVAL_DT.Value;
      &OPRID_MODIF = &Z_PO_HDR.OPRID_MODIFIED_BY.Value;
      &LAST_DTTM_UPD = &Z_PO_HDR.LAST_DTTM_UPDATE.Value;
      
      rem &SQL_HDR = CreateSQL("Select VENDOR_SETID, VENDOR_ID, PYMNT_TERMS_CD, BUYER_ID, BILL_LOCATION, CHNG_ORD_BATCH FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      
      rem While &SQL_HDR.Fetch(&VENSETID, &VENID, &PYMNT_CD, &BUYER_ID, &BILL_LOC, &CHNG_ORD_BATCH);
      /* Retrieve Address Details from Cross Reference Location Table */
      SQLExec("Select DESCR, ATTN_TO, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, PHONE, CITY, STATE, POSTAL, COUNTRY FROM PS_Z_PO_LOC_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LOCATION = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &BILL_LOC, &DESCR, &ATTN_TO, &ADDR1, &ADDR2, &ADDR3, &ADDR4, &PHONE, &CITY, &STATE, &POSTAL, &COUNT_HDR);
      /* Retrieve Comments */
      rem SQLExec("Select OPRID, COMMENT_ID, RANDOM_CMMT_NBR , COMMENTS_2000 From PS_Z_PO_COMMTS_EVW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
      /* Retrieve the VENDOR ADDRESS */
      SQLExec("Select NAME1, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, COUNTRY, CITY, STATE, POSTAL From PS_Z_N_PO_VADD_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NAME1, &VENADDR1, &VENADDR2, &VENADDR3, &VENADDR4, &VENCOUN, &VENCITY, &VENSTATE, &VENPOSTAL);
      /* Retrieve PAYMENT DETAILS */
      SQLExec("Select DSC_TRMS_AVAIL_FLG, TERMS_ADJUST_DAYS, DSCNT_TRMS_PERCENT, TMG_DAY_INCR_VAL From PS_Z_PO_PYMNT_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DSC_TRMS_AVAIL_FLG, &TERMS_ADJUST_DAYS, &DSCNT_TRMS_PERCENT, &TMG_DAY_INCR_VAL);
      rem SQLExec("Select DISP_METHOD From PS_PO_HDR where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD);
      /* Retrieve the BUSINESS UNIT DETAILS */
      rem SQLExec("Select DESCR From PS_BUS_UNIT_TBL_FS Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &DESCR_BU);
      /* Retrieve Terms and Conditions for the BUSINESS_UNIT */
      /* Retrieve the BUSINESS UNIT DETAILS */
      rem SQLExec("Select BUSINESS_UNIT , DESCR, STD_COMMENT_TYPE, STD_COMMENT_ID From PS_Z_PO_BU_DET_EVW Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      rem SQLExec("Select STD_COMMENT_TYPE, STD_COMMENT_ID From PS_BUS_UNIT_TBL_PM Where BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2", Record.Z_PO_BU_DET_EVW, Z_PO_PUB_AET.BUSINESS_UNIT, &NEW_BU, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      
      /* PO Total */
      rem SQLExec("Select");
      rem &LOG_PO.WriteLine("BUSINESS UNIT :" | Z_PO_PUB_AET.BUSINESS_UNIT);
      rem &LOG_PO.WriteLine("PO_ID : " | Z_PO_PUB_AET.PO_ID);
      rem &LOG_PO.WriteLine("Vendor SETID: " | &VENSETID);
      
      rem &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><PO_FILE/>");
      &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><Z_PO_PUBLISH_MSG/>");
      /* LOAD IB CONTENT */
      rem &ret = &NEWDOC.LoadIBContent(&PPSTR);
      rem &procInst = &NEWDOC.DocumentElement.AddProcessInstruction("xml-stylesheet", "href=""book.css"" type=""text/css""");
      rem &AddNode0 = &NEWDOC.DocumentElement.AddElement("POD");
      &AddNode0 = &NEWDOC.DocumentElement.AddElement("MsgData");
      rem &AddNode0.AddAttribute("BU_PUB", Z_PO_PUB_AET.BUSINESS_UNIT);
      rem &AddNode0.AddAttribute("PO_PUB", Z_PO_PUB_AET.PO_ID);
      rem &AddNode0.AddAttribute("PO_TOTAL", Z_PO_PUB_AET.PO_AMT_TTL);
      /* Add CDATA Section */
      rem &cdataNode = &AddNode0.AddCDataSection("Testing...STARTS");
      
      /********************** 
       Create the Header Loop 
       **********************/
      
      rem &AddNode_DbName = &AddNode0.AddElement("DBNAME");
      rem &AddNode_DbName.NodeValue = %DbName;
      &AddNode_TRANSACTION = &AddNode0.AddElement("Transaction");
      &AddNode_HEADER = &AddNode_TRANSACTION.AddElement("Z_HEADER_VW");
      &AddNode_HEADER.AddAttribute("class", "R");
      &AddNode_BU = &AddNode_HEADER.AddElement("BUSINESS_UNIT");
      &AddNode_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
      rem &AddNode_BU.NodeValue = "US001";
      &AddNode_DESCR_BU = &AddNode_HEADER.AddElement("DESCR_BU");
      &AddNode_DESCR_BU.NodeValue = &DESCR_BU;
      &AddNode_PO_ID = &AddNode_HEADER.AddElement("PO_ID");
      &AddNode_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
      rem &AddNode_PO_ID.NodeValue = "0000000062";
      &AddNode_CHNG_ORD_BATCH = &AddNode_HEADER.AddElement("CHNG_ORD_BATCH");
      &AddNode_CHNG_ORD_BATCH.NodeValue = &CHNG_ORD_BATCH;
      &AddNode_CHNG_ORD_SEQ = &AddNode_HEADER.AddElement("CHNG_ORD_SEQ");
      &AddNode_CHNG_ORD_SEQ.NodeValue = &CHNG_ORD_SEQ;
      &AddNode_CHNG_STATUS = &AddNode_HEADER.AddElement("CHANGE_STATUS");
      &AddNode_CHNG_STATUS.NodeValue = &CHNG_STATUS;
      &AddNode_Z_ORD = &AddNode_HEADER.AddElement("Z_ORD_TYPE");
      &AddNode_Z_ORD.NodeValue = &Z_ORD_TYPE;
      &AddNode_Z_JOB = &AddNode_HEADER.AddElement("Z_JOB_TYPE");
      &AddNode_Z_JOB.NodeValue = &Z_JOB_TYPE;
      &AddNode_ORIGIN = &AddNode_HEADER.AddElement("ORIGIN");
      &AddNode_ORIGIN.NodeValue = &ORIGIN;
      &AddNode_PO_STATUS = &AddNode_HEADER.AddElement("PO_STATUS");
      &AddNode_PO_STATUS.NodeValue = &PO_STATUS;
      &AddNode_RECV_STATUS = &AddNode_HEADER.AddElement("RECV_STATUS");
      &AddNode_RECV_STATUS.NodeValue = &RECV_STATUS;
      /* ADD DISPATCH METHOD TAG */
      &AddNode_DISP_METHOD = &AddNode_HEADER.AddElement("DISP_METHOD");
      &AddNode_PO_DT = &AddNode_HEADER.AddElement("PO_DT");
      &AddNode_PO_DT.NodeValue = &PO_DT;
      &AddNode_Z_BVAPP = &AddNode_HEADER.AddElement("Z_BVAPP_NUMBER");
      &AddNode_Z_BVAPP.NodeValue = &Z_BVAPP_NUMBER;
      &AddNode_PO_REF = &AddNode_HEADER.AddElement("PO_REF");
      &AddNode_PO_REF.NodeValue = &PO_REF;
      &AddNode_BILL_LOC = &AddNode_HEADER.AddElement("BILL_LOCATION");
      &AddNode_BILL_LOC.NodeValue = &BILL_LOC;
      /* BILL LOCATION ADDRESS */
      &AddNode_ADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_BILL");
      &AddNode_ADDR1.NodeValue = &ADDR1;
      &AddNode_ADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_BILL");
      &AddNode_ADDR2.NodeValue = &ADDR2;
      &AddNode_ADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_BILL");
      &AddNode_ADDR3.NodeValue = &ADDR3;
      &AddNode_ADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_BILL");
      &AddNode_ADDR4.NodeValue = &ADDR4;
      &AddNode_CITY = &AddNode_HEADER.AddElement("CITY_BILL");
      &AddNode_CITY.NodeValue = &CITY;
      &AddNode_STATE = &AddNode_HEADER.AddElement("STATE_BILL");
      &AddNode_STATE.NodeValue = &STATE;
      &AddNode_POSTAL = &AddNode_HEADER.AddElement("POSTAL_BILL");
      &AddNode_POSTAL.NodeValue = &POSTAL;
      &AddNode_COCD = &AddNode_HEADER.AddElement("COUNTRY_BILL"); /* CONFIRM WHETHER ITS THE COUNTRY CODE */
      &AddNode_COCD.NodeValue = &COUNT_HDR;
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("Provide Flags at Zero Level to identify the System.");
      
      /* CHECK FOR DISPATCH METHODS */
      /*
      Evaluate &DISP_METHOD
      When "B2B"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "EDX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "EML"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "FAX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "LCM"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "ORB"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "PHN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "PRN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "RMD"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      End-Evaluate;
	  */
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("DISPATCH BLOCK....ENDS");
      
      /* Vendor Details */
      
      &AddNode_VENDOR_SETID = &AddNode_HEADER.AddElement("VENDOR_SETID");
      rem &AddNode_VENDOR_SETID.NodeValue = &VENSETID;
      &AddNode_VENDOR_SETID.NodeValue = "USWC"; /* Client Wants USWC */
      &AddNode_VENDOR_ID = &AddNode_HEADER.AddElement("VENDOR_ID");
      &AddNode_VENDOR_ID.NodeValue = &VENID;
      &AddNode_VNDR_LOC = &AddNode_HEADER.AddElement("VNDR_LOC");
      &AddNode_VNDR_LOC.NodeValue = &VNDR_LOC;
      /* Create Vendor Address Block */
      &AddNode_VENADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_VNDR");
      &AddNode_VENADDR1.NodeValue = &VENADDR1;
      &AddNode_VENADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_VNDR");
      &AddNode_VENADDR2.NodeValue = &VENADDR2;
      &AddNode_VENADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_VNDR");
      &AddNode_VENADDR3.NodeValue = &VENADDR3;
      &AddNode_VENADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_VNDR");
      &AddNode_VENADDR4.NodeValue = &VENADDR4;
      &AddNode_VENCITY = &AddNode_HEADER.AddElement("CITY_VNDR");
      &AddNode_VENCITY.NodeValue = &VENCITY;
      &AddNode_VENSTATE = &AddNode_HEADER.AddElement("STATE_VNDR");
      &AddNode_VENSTATE.NodeValue = &VENSTATE;
      &AddNode_VENPOSTAL = &AddNode_HEADER.AddElement("POSTAL_VNDR");
      &AddNode_VENPOSTAL.NodeValue = &VENPOSTAL;
      &AddNode_VENCOUNTRY = &AddNode_HEADER.AddElement("COUNTRY_VNDR");
      &AddNode_VENCOUNTRY.NodeValue = &VENCOUN;
      
      /* PAYMENT TERMS CODE */
      &AddNode_DSC_TRMS_AVAIL_FLG = &AddNode_HEADER.AddElement("DSC_TRMS_AVAIL_FLG");
      &AddNode_DSC_TRMS_AVAIL_FLG.NodeValue = &DSC_TRMS_AVAIL_FLG;
      &AddNode_DSCNT_PER = &AddNode_HEADER.AddElement("DSCNT_TRMS_PERCENT");
      &AddNode_DSCNT_PER.NodeValue = &DSCNT_TRMS_PERCENT;
      &AddNode_TERMS_DAYS = &AddNode_HEADER.AddElement("TERMS_ADJUST_DAYS");
      &AddNode_TERMS_DAYS.NodeValue = &TERMS_ADJUST_DAYS;
      &AddNode_TMG_DAY = &AddNode_HEADER.AddElement("TMG_DAY_INCR_VAL");
      &AddNode_TMG_DAY.NodeValue = &TMG_DAY_INCR_VAL;
      
      &AddNode_BUYER = &AddNode_HEADER.AddElement("BUYER_ID");
      &AddNode_BUYER.NodeValue = &BUYER_ID;
      rem &LOG_PO.WriteLine("Vendor ID " | &VENID);
      
      
      
      rem &AddNode_CommentNode_VENDOR = &AddNode_HEADER.AddComment("Vendor Address Block....STARTS");
      rem &AddNode_VNAME1 = &AddNode_HEADER.AddElement("V_NAME1_V");
      rem &AddNode_VNAME1.NodeValue = &NAME1;
      rem &AddNode_CommentNode_VENDOR = &AddNode_HEADER.AddComment("Vendor Address Block....ENDS");
      
      /* Create the Address Block */
      
      rem &AddNode_CommentNode_ADDR = &AddNode_HEADER.AddComment("Address Block....STARTS");
      rem &AddNode_ATTN_TO = &AddNode_HEADER.AddElement("ATTN_TO");
      rem &AddNode_ATTN_TO.NodeValue = &ATTN_TO;
      rem &AddNode_DESCR0 = &AddNode_HEADER.AddElement("DESCR");
      rem &AddNode_DESCR0.NodeValue = &DESCR;
      rem &AddNode_CommentNode_ADDR = &AddNode_HEADER.AddComment("Address Block....ENDS");
      
      
      /* PS_Z_PO_HDR_PPM */
      
      rem &AddNode_CommentTable = &AddNode_HEADER.AddComment("All Values to be picked up from PS_Z_PO_HDR_PPM");
      
      
      &AddNode_Z_REQ = &AddNode_HEADER.AddElement("Z_REQUESTOR_ID");
      &AddNode_Z_REQ.NodeValue = &Z_REQ_ID;
      /* PS_Z_MNET_TBL */
      
      rem &AddNode_CommentNode_MNET = &AddNode_HEADER.AddComment("MNET BLOCK....STARTS");
      &AddNode_Z_FIRST_NAME = &AddNode_HEADER.AddElement("Z_FIRST_NAME");
      &AddNode_Z_FIRST_NAME.NodeValue = &Z_FIRST_NAME;
      &AddNode_MIDDLE_NAME = &AddNode_HEADER.AddElement("MIDDLE_NAME");
      &AddNode_MIDDLE_NAME.NodeValue = &MIDDLE_NAME;
      &AddNode_Z_LAST_NAME = &AddNode_HEADER.AddElement("Z_LAST_NAME");
      &AddNode_Z_LAST_NAME.NodeValue = &Z_LAST_NAME;
      &AddNode_Z_SMTP = &AddNode_HEADER.AddElement("Z_SMTP_ADDR");
      &AddNode_Z_SMTP.NodeValue = &Z_SMTP;
      
      /* PS_PO_HDR AGAIN */
      &AddNode_OPRID_ENT = &AddNode_HEADER.AddElement("OPRID_ENTERED_BY");
      &AddNode_OPRID_ENT.NodeValue = &OPRID_ENT;
      &AddNode_ENT_DT = &AddNode_HEADER.AddElement("ENTERED_DT");
      &AddNode_ENT_DT.NodeValue = &ENT_DT;
      &AddNode_OPRID_APP = &AddNode_HEADER.AddElement("OPRID_APPROVED_BY");
      &AddNode_OPRID_APP.NodeValue = &OPRID_APP;
      &AddNode_APP_DT = &AddNode_HEADER.AddElement("APPROVAL_DT");
      &AddNode_APP_DT.NodeValue = &APP_DT;
      &AddNode_OPRID_MODIF = &AddNode_HEADER.AddElement("OPRID_MODIFIED_BY");
      &AddNode_OPRID_MODIF.NodeValue = &OPRID_MODIF;
      &AddNode_LAST_DTTM_UPD = &AddNode_HEADER.AddElement("LAST_DTTM_UPDATE");
      &AddNode_LAST_DTTM_UPD.NodeValue = &LAST_DTTM_UPD;
      
      rem &AddNode_WS_WORK_PHONE = &AddNode_HEADER.AddElement("WS_WORK_PHONE");
      rem &AddNode_WS_WORK_PHONE.NodeValue = &WS_WORK_PHONE;
      rem &AddNode_CommentNode_MNET = &AddNode_HEADER.AddComment("MNET BLOCK....ENDS");
      /* PO TOTAL AMOUNT DERIVED */
      &AddNode_PO_AMT_TTL = &AddNode_HEADER.AddElement("PO_AMOUNT");
      &AddNode_PO_AMT_TTL.NodeValue = Z_PO_PUB_AET.PO_AMT_TTL;
      /* Create the Comment Block */
      rem &AddNode_CommentNode_COMM = &AddNode_HEADER.AddComment("COMMENT BLOCK....STARTS");
      /* Call function for Comment Block */
      rem Load_Comments_Tbl(&COMMENT_ID, &OPRID, &RANDOM, &COMM_2000);
      Local SQL &COMMENTS_SQL_HDR = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "HDR", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, 0);
      While &COMMENTS_SQL_HDR.Fetch(&COM_BU, &COM_PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
         MessageBox(0, "", 0, 0, "ADD HEADER COMMENTS");
         &AddNode_COMMENTS_HDR = &AddNode_HEADER.AddElement("COMMENTS_HDR");
         rem &AddNode_OPRID = &AddNode_COMMENTS_HDR.AddElement("OPRID");
         rem &AddNode_OPRID.NodeValue = &OPRID;
         rem &AddNode_COMMENT_ID = &AddNode_COMMENTS_HDR.AddElement("COMMENT_ID");
         rem &AddNode_COMMENT_ID.NodeValue = &COMMENT_ID;
         rem &AddNode_RANDOM = &AddNode_COMMENTS_HDR.AddElement("RANDOM_CMMT_NBR");
         rem &AddNode_RANDOM.NodeValue = &RANDOM;
         &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_HDR.AddElement("HEADER_COMMENTS");
         &AddNode_COMMENTS_2000.NodeValue = &COMM_2000;
         /* REUSE CURSOR PROPERTY */
         &COMMENTS_SQL_HDR.ReuseCursor = True;
      End-While; /* WHILE End HDR LEVEL */
      /* PURCHASING BU DETAILS */
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_TYPE");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_TYPE;
      &AddNode_BU_STD_COMM_ID = &AddNode_HEADER.AddElement("STD_COMMENT_ID");
      &AddNode_BU_STD_COMM_ID.NodeValue = &STD_COMMENT_ID;
      rem Load_Comments_Tbl(&COMMENT_ID, &OPRID, &RANDOM_CMMT_NBR, &COMM_2000);
      rem &LOG_PO.WriteLine("Random Comment Number " | &RANDOM);
      rem &AddNode_CommentNode_COMM = &AddNode_HEADER.AddComment("COMMENT BLOCK....ENDS");
      
      /* PS_PO_HDR AGAIN */
      
      rem &AddNode_Comments_HDR = &AddNode_HEADER.AddComment("ENTERED...APPROVED...MODIFIED BY...STARTS");
      rem &AddNode_Comments_HDR = &AddNode_HEADER.AddComment("ENTERED...APPROVED...MODIFIED BY...ENDS");
      
      /* Get Count of No of Lines */
      rem For &iLine = 1 to &Z_PO_LINE.ActiveRowCount;
      SQLExec("Select Count(*) from PS_PO_LINE where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NO_LINES);
      rem MessageBox(0, "", 0, 0, "Rows Affected " | %SqlRows);
      rem &RTNCD = "" | %SqlRows | " row(s) affected.";
      If All(&NO_LINES) Then
         
         /**********************
          Generate the Line Loop
          **********************/
         MessageBox(0, "", 0, 0, "No Lines " | &NO_LINES);
         For &Line = 1 To &NO_LINES;
            rem For &iLine = 1 To &Z_PO_LINE.ActiveRowCount;
            Local Record &AA_PO_LINE = CreateRecord(Record.Z_PO_LN_E_VW);
            rem SQLExec("Select LINE_NBR, CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, ITM_SETID, INV_ITEM_ID, DESCR254_MIXED, ITM_ID_VNDR, VNDR_CATALOG_ID, CATEGORY_ID, CATEGORY_CD, DESCR, UNIT_OF_MEASURE, PRICE_DT_TYPE, MFG_ID, DESCR1, MFG_ITM_ID, CNTRCT_SETID, CNTRCT_ID, CNTRCT_LINE_NBR, RECV_REQ FROM PS_Z_PO_LN_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
            rem SQLExec("%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4", &AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &L_BU, &L_PO_ID, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
            Local string &LINE_STR = "%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4";
            Local SQL &SQL_LINE = CreateSQL(&LINE_STR, &AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
            rem Local SQL &SQL_LINE = CreateSQL("%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4");
            rem &SQL_LINE.Execute(&AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
            rem &SQL_LINE.TraceName = "Z_PO_PUBLISH.6620.STEP1.PC.001";
            Evaluate &SQL_LINE.Status
            When = %SQLStatus_OK
               MessageBox(0, "", 0, 0, "Correct LINE");
               /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
               While &SQL_LINE.Fetch(&L_BU, &L_PO_ID, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ)
                  MessageBox(0, "", 0, 0, "Line " | &Line);
                  &SQL_STR = &SQL_LINE.Value;
                  MessageBox(0, "", 0, 0, "SQL STR LINE " | &SQL_STR);
                  &SQL_LINE.TraceName = "Z_PO_PUBLISH.6620.STEP1.PC.LINE." | &Line;
                  /* LINE LEVEL */
                  &AddNode_LINE = &AddNode_HEADER.AddElement("Z_LINE_VW");
                  &AddNode_LINE.AddAttribute("class", "R");
                  rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....STARTS");
                  &AddNode_LINE_BU = &AddNode_LINE.AddElement("BUSINESS_UNIT");
                  &AddNode_LINE_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                  &AddNode_LINE_PO_ID = &AddNode_LINE.AddElement("PO_ID");
                  &AddNode_LINE_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                  &AddNode_LINE_NBR = &AddNode_LINE.AddElement("LINE_NBR");
                  &AddNode_LINE_NBR.NodeValue = &Line;
                  &AddNode_CN_STS_LINE = &AddNode_LINE.AddElement("CANCEL_STATUS_LINE");
                  &AddNode_CN_STS_LINE.NodeValue = &CANCEL_STATUS_LINE;
                  &AddNode_CHNG_STS = &AddNode_LINE.AddElement("CHANGE_STATUS");
                  &AddNode_CHNG_STS.NodeValue = &CHANGE_STATUS;
                  &AddNode_CHNG_ORD_SEQ_LINE = &AddNode_LINE.AddElement("CHNG_ORD_SEQ_LINE");
                  &AddNode_CHNG_ORD_SEQ_LINE.NodeValue = &CHNG_ORD_SEQ_LINE;
                  /* ITEM DESCRIPTION */
                  &AddNode_ITEM_SETID = &AddNode_LINE.AddElement("ITM_SETID");
                  &AddNode_ITEM_SETID.NodeValue = "USWC"; /* As Per Client Requirement */
                  &AddNode_ITEM_ID = &AddNode_LINE.AddElement("INV_ITEM_ID");
                  &AddNode_ITEM_ID.NodeValue = &INV_ITM_ID;
                  &AddNode_DESCR254_MIXED = &AddNode_LINE.AddElement("ITEM_DESCR");
                  &AddNode_DESCR254_MIXED.NodeValue = &DESCR254_MIXED;
                  &AddNode_ITM_ID_VNDR = &AddNode_LINE.AddElement("ITM_ID_VNDR");
                  &AddNode_ITM_ID_VNDR.NodeValue = &VNDR_ITM_ID;
                  &AddNode_VNDR_CATALOG_ID = &AddNode_LINE.AddElement("VNDR_CATALOG_ID");
                  &AddNode_VNDR_CATALOG_ID.NodeValue = &VNDR_CATALOG_ID;
                  /*CATEGORY CODE */
                  &AddNode_CATEGORY_ID = &AddNode_LINE.AddElement("CATEGORY_ID");
                  &AddNode_CATEGORY_ID.NodeValue = &CAT_ID;
                  &AddNode_CATEGORY_CD = &AddNode_LINE.AddElement("CATEGORY_CD");
                  &AddNode_CATEGORY_CD.NodeValue = &CAT_CD;
                  &AddNode_CATEGORY_DESCR = &AddNode_LINE.AddElement("CATEGORY_DESCR");
                  &AddNode_CATEGORY_DESCR.NodeValue = &CAT_DESCR;
                  /* UNIT OF MEASURE */
                  &AddNode_UOM = &AddNode_LINE.AddElement("UNIT_OF_MEASURE");
                  &AddNode_UOM.NodeValue = &UOM;
                  &AddNode_PRICE_DT_TYPE = &AddNode_LINE.AddElement("PRICE_DT_TYPE");
                  &AddNode_PRICE_DT_TYPE.NodeValue = &PRICE_DT_TYPE;
                  /* MANUFACTURERS DETAILS */
                  &AddNode_MFG_ID = &AddNode_LINE.AddElement("MFG_ID");
                  &AddNode_MFG_ID.NodeValue = &MFG_ID;
                  &AddNode_MFG_DESCR = &AddNode_LINE.AddElement("MFG_DESCR");
                  &AddNode_MFG_DESCR.NodeValue = &MFG_DESCR;
                  &AddNode_MFG_ITM_ID = &AddNode_LINE.AddElement("MFG_ITM_ID");
                  &AddNode_MFG_ITM_ID.NodeValue = &MFG_ITM_ID;
                  /* Add Code for Custom Item Attribute Table - Z_ITEM_ATT_TBL */
                  &AddNode_Z_ICC_CD = &AddNode_LINE.AddElement("Z_ICC_CODE_CD");
                  &AddNode_Z_ICC_CD.NodeValue = &Z_ICC_CD;
                  &AddNode_Z_AIC_CD = &AddNode_LINE.AddElement("Z_AIC_CODE_FLD");
                  &AddNode_Z_AIC_CD.NodeValue = &Z_AIC_FLD;
                  &AddNode_Z_DEVICE_IND = &AddNode_LINE.AddElement("Z_DEVICE_IND");
                  &AddNode_Z_DEVICE_IND.NodeValue = &Z_DEVICE_IND;
                  /* REMEDY REQUEST FLAG */
                  &AddNode_Z_REM_REQ_FLG = &AddNode_LINE.AddElement("Z_REMEDY_RQST_FLG");
                  &AddNode_Z_REM_REQ_FLG.NodeValue = &Z_REM_REQ_FLG;
                  /* CONTRACT DETAILS */
                  &AddNode_CNTRCT_SETID = &AddNode_LINE.AddElement("CNTRCT_SETID");
                  &AddNode_CNTRCT_SETID.NodeValue = &CNTRCT_SETID;
                  &AddNode_CNTRCT_ID = &AddNode_LINE.AddElement("CNTRCT_ID");
                  &AddNode_CNTRCT_ID.NodeValue = &CNTRCT_ID;
                  &AddNode_CNTRCT_LINE_NBR = &AddNode_LINE.AddElement("CNTRCT_LINE_NBR");
                  &AddNode_CNTRCT_LINE_NBR.NodeValue = &CNTRCT_LINE_NBR;
                  &AddNode_RECV_REQ = &AddNode_LINE.AddElement("RECV_REQ");
                  &AddNode_RECV_REQ.NodeValue = &RECV_REQ;
                  /* Create the COMMENTS BLOCK LINE LEVEL */
                  Local SQL &COMMENTS_SQL_LINE = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "LIN", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
                  While &COMMENTS_SQL_LINE.Fetch(&COM_BU, &COM_PO_ID, &OPRID_LN, &COMMENT_ID_LN, &RANDOM_LN, &COMM_2000_LN);
                     MessageBox(0, "", 0, 0, "Adding Line Comments");
                     &AddNode_COMMENTS_LINE = &AddNode_LINE.AddElement("COMMENTS_LINE");
                     rem &AddNode_OPRID_LN = &AddNode_COMMENTS_LINE.AddElement("OPRID_LN");
                     rem &AddNode_OPRID_LN.NodeValue = &OPRID_LN;
                     rem &AddNode_COMMENT_ID_LN = &AddNode_COMMENTS_LINE.AddElement("COMMENT_ID_LN");
                     rem &AddNode_COMMENT_ID_LN.NodeValue = &COMMENT_ID_LN;
                     rem &AddNode_RANDOM_LN = &AddNode_COMMENTS_LINE.AddElement("RANDOM_CMMT_NBR_LN");
                     rem &AddNode_RANDOM_LN.NodeValue = &RANDOM_LN;
                     &AddNode_COMMENTS_2000_LN = &AddNode_COMMENTS_LINE.AddElement("LINE_COMMENTS");
                     &AddNode_COMMENTS_2000_LN.NodeValue = &COMM_2000_LN;
                     &COMMENTS_SQL_LINE.ReuseCursor = True;
                  End-While; /* WHILE End LINE LEVEL */
                  &AddNode_Z_QUOTE_NBR = &AddNode_LINE.AddElement("Z_QUOTE_NUMBER");
                  &AddNode_Z_QUOTE_NBR.NodeValue = &Z_QUOTE_NBR;
                  &SQL_LINE.ReuseCursor = True;
               End-While; /* LINE LEVEL */
               &SQL_LINE.Close();
               Break;
            When = %SQLStatus_NotFound
               rem MessageBox(0, "", 0, 0, "NOT FOUND LINE");
               Error ("LINE Not Found");
               Break;
            When = %SQLStatus_Duplicate
               rem MessageBox(0, "", 0, 0, "DUPLICATE LINE");
               Error ("DUPLICATE LINE");
               Break;
            End-Evaluate;
            rem &SQL_LINE = CreateSQL("Select LINE_NBR, CANCEL_STATUS, CHANGE_STATUS, CHNG_ORD_SEQ, ITM_SETID, INV_ITEM_ID, DESCR254_MIXED, ITM_ID_VNDR, VNDR_CATALOG_ID, CATEGORY_ID, CATEGORY_CD, DESCR, UNIT_OF_MEASURE, PRICE_DT_TYPE, MFG_ID, DESCR1, MFG_ITM_ID, CNTRCT_SETID, CNTRCT_ID, CNTRCT_LINE_NBR, RECV_REQ FROM PS_Z_PO_LN_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &iLine);
            rem While &SQL_LINE.Fetch(&LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ);
            rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....ENDS");
            
            /* Get Count of No of Schedules */
            rem For &iSched = 1 to &Z_PO_SCHED.ActiveRowCount;
            SQLExec("Select Count(*) from PS_PO_LINE_SHIP Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &NO_SCHED);
            
            If All(&NO_SCHED) Then
               
               /**************************
                Generate the Schedule Loop
                **************************/
               MessageBox(0, "", 0, 0, "No of Schedules " | &NO_SCHED);
               For &SCHED = 1 To &NO_SCHED;
                  Local Record &AA_PO_SCHED = CreateRecord(Record.Z_PO_SCHED_EVW);
                  rem For &iSched = 1 To &Z_PO_SCHED.ActiveRowCount;
                  /* Instead Use CreateSQL and While loop */
                  &SQL_STRING_SCHED = "%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5";
                  Local SQL &SQL_SCHEDULE = CreateSQL(&SQL_STRING_SCHED, &AA_PO_SCHED, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED);
                  rem Local SQL &SQL_SCHEDULE = CreateSQL("%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5");
                  rem &SQL_SCHEDULE.Execute(&AA_PO_SCHED, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED);
                  Evaluate &SQL_SCHEDULE.Status
                  When = %SQLStatus_OK
                     MessageBox(0, "", 0, 0, "Correct SCHEDULE");
                     /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
                     While &SQL_SCHEDULE.Fetch(&S_BU, &S_PO_ID, &S_LINE, &S_SCHED, &CANCEL_STATUS_SCHED, &CHNG_STATUS_SCHED, &CHNG_ORD_SEQ_SCHED, &PRICE_PO, &CURRENCY_CD, &SHIPTO_SETID, &SHIPTO_ID, &QTY_PO, &ZERO_PRICE_IND, &SCHED_MERCHANDISE_AMT, &SUT_APP, &FREIGHT_TERMS, &SHIP_TYPE_ID, &SHIP_DATE, &DUE_DT, &DUE_TIME, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &COUNTRY_SCHED, &SHIP_DESCR)
                        rem While &SQL_SCHEDULE.Fetch(&AA_PO_SCHED);
                        rem &SCHED = &SCHED + 1;
                        MessageBox(0, "", 0, 0, "Schedule " | &SCHED);
                        &SQL_SCHEDULE.TraceName = "Z_PO_PUBLISH.6620.Step1.PC.SCHEDULE." | &SCHED;
                        MessageBox(0, "", 0, 0, "&CANCEL_STATUS_SCHED " | &CANCEL_STATUS_SCHED);
                        rem End-While;
                        rem &SQL_SCHEDULE.Close();
                        /* PS_PO_LINE */
                        rem &LOG_PO.WriteLine("No of Schedules " | &NO_SCHED);
                        &AddNode_SCHEDULE = &AddNode_LINE.AddElement("Z_SCHEDULE_VW");
                        &AddNode_SCHEDULE.AddAttribute("class", "R");
                        rem &AddNode_CommentNode_SCHED = &AddNode_SCHEDULE.AddComment("SCHEDULE Block....STARTS");
                        &AddNode_SCHED_BU = &AddNode_SCHEDULE.AddElement("BUSINESS_UNIT");
                        &AddNode_SCHED_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                        &AddNode_SCHED_PO_ID = &AddNode_SCHEDULE.AddElement("PO_ID");
                        &AddNode_SCHED_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                        &AddNode_SCHED_LINE_NBR = &AddNode_SCHEDULE.AddElement("LINE_NBR");
                        &AddNode_SCHED_LINE_NBR.NodeValue = &Line;
                        &AddNode_SCHED_NBR = &AddNode_SCHEDULE.AddElement("SCHED_NBR");
                        &AddNode_SCHED_NBR.NodeValue = &SCHED;
                        &AddNode_CN_STS_SCHED = &AddNode_SCHEDULE.AddElement("CANCEL_STATUS_SCHED");
                        &AddNode_CN_STS_SCHED.NodeValue = &CANCEL_STATUS_SCHED;
                        &AddNode_CHNG_STATUS_SCHED = &AddNode_SCHEDULE.AddElement("CHANGE_STATUS_SCHED");
                        &AddNode_CHNG_STATUS_SCHED.NodeValue = &CHNG_STATUS_SCHED;
                        &AddNode_CHNG_ORD_SEQ_SCHED = &AddNode_SCHEDULE.AddElement("CHNG_ORD_SEQ_SCHED");
                        &AddNode_CHNG_ORD_SEQ_SCHED.NodeValue = &CHNG_ORD_SEQ_SCHED;
                        &AddNode_PRICE_PO = &AddNode_SCHEDULE.AddElement("PRICE_PO");
                        &AddNode_PRICE_PO.NodeValue = &PRICE_PO;
                        &AddNode_CURRENCY_CD = &AddNode_SCHEDULE.AddElement("CURRENCY_CD");
                        &AddNode_CURRENCY_CD.NodeValue = &CURRENCY_CD;
                        &AddNode_QTY_PO = &AddNode_SCHEDULE.AddElement("QTY_PO");
                        &AddNode_QTY_PO.NodeValue = &QTY_PO;
                        &AddNode_ZERO_PRICE_IND = &AddNode_SCHEDULE.AddElement("ZERO_PRICE_IND");
                        &AddNode_ZERO_PRICE_IND.NodeValue = &ZERO_PRICE_IND;
                        &AddNode_SHIP_DATE = &AddNode_SCHEDULE.AddElement("SHIP_DATE");
                        &AddNode_SHIP_DATE.NodeValue = &SHIP_DATE;
                        &AddNode_DUE_DT = &AddNode_SCHEDULE.AddElement("DUE_DT");
                        &AddNode_DUE_DT.NodeValue = &DUE_DT;
                        &AddNode_DUE_TIME = &AddNode_SCHEDULE.AddElement("DUE_TIME");
                        &AddNode_DUE_TIME.NodeValue = &DUE_TIME;
                        /* SHIP TO LOCATION DETAILS */
                        &AddNode_SHIPTO_SETID = &AddNode_SCHEDULE.AddElement("SHIPTO_SETID");
                        &AddNode_SHIPTO_SETID.NodeValue = &SHIPTO_SETID;
                        &AddNode_SHIPTO_ID = &AddNode_SCHEDULE.AddElement("SHIPTO_ID");
                        &AddNode_SHIPTO_ID.NodeValue = &SHIPTO_ID;
                        /* PS_SHIPTO_TBL */
                        &AddNode_DESCR_SHIP_SCHED = &AddNode_SCHEDULE.AddElement("DESCR_SHIPTO");
                        &AddNode_DESCR_SHIP_SCHED.NodeValue = &DESCR_SHIP_SCHED;
                        /* LOCATION_TBL */
                        &AddNode_L_ADDR1 = &AddNode_SCHEDULE.AddElement("ADDRESS1_SHIPTO");
                        &AddNode_L_ADDR1.NodeValue = &L_ADDR1;
                        &AddNode_L_ADDR2 = &AddNode_SCHEDULE.AddElement("ADDRESS2_SHIPTO");
                        &AddNode_L_ADDR2.NodeValue = &L_ADDR2;
                        &AddNode_L_ADDR3 = &AddNode_SCHEDULE.AddElement("ADDRESS3_SHIPTO");
                        &AddNode_L_ADDR3.NodeValue = &L_ADDR3;
                        &AddNode_L_ADDR4 = &AddNode_SCHEDULE.AddElement("ADDRESS4_SHIPTO");
                        &AddNode_L_ADDR4.NodeValue = &L_ADDR4;
                        &AddNode_L_CITY = &AddNode_SCHEDULE.AddElement("CITY_SHIPTO");
                        &AddNode_L_CITY.NodeValue = &L_CITY;
                        &AddNode_L_STATE = &AddNode_SCHEDULE.AddElement("STATE_SHIPTO");
                        &AddNode_L_STATE.NodeValue = &L_STATE;
                        &AddNode_L_POSTAL = &AddNode_SCHEDULE.AddElement("POSTAL_SHIPTO");
                        &AddNode_L_POSTAL.NodeValue = &L_POSTAL;
                        &AddNode_L_COUNTRY_CD = &AddNode_SCHEDULE.AddElement("COUNTRY_SHIPTO");
                        &AddNode_L_COUNTRY_CD.NodeValue = &COUNTRY_SCHED;
                        &AddNode_MERCHANDISE_AMT_SCHED = &AddNode_SCHEDULE.AddElement("MERCHANDISE_AMT");
                        &AddNode_MERCHANDISE_AMT_SCHED.NodeValue = &SCHED_MERCHANDISE_AMT;
                        &AddNode_SUT_APP = &AddNode_SCHEDULE.AddElement("SUT_APPLICABILITY");
                        &AddNode_SUT_APP.NodeValue = &SUT_APP;
                        &AddNode_FREIGHT_TERMS = &AddNode_SCHEDULE.AddElement("FREIGHT_TERMS");
                        &AddNode_FREIGHT_TERMS.NodeValue = &FREIGHT_TERMS;
                        rem &AddNode_DESCR111.NodeValue = &SHIP_DESCR;
                        &AddNode_SHIP_TYPE_ID = &AddNode_SCHEDULE.AddElement("SHIP_TYPE_ID");
                        &AddNode_SHIP_TYPE_ID.NodeValue = &SHIP_TYPE_ID;
                        rem &AddNode_CommentNode_SCHED = &AddNode_SCHEDULE.AddComment("SCHEDULE Block....ENDS");
                        &SQL_SCHEDULE.ReuseCursor = True;
                     End-While; /* SCHEDULE LEVEL */
                     &SQL_SCHEDULE.Close();
                     Break;
                  When = %SQLStatus_NotFound
                     MessageBox(0, "", 0, 0, "NOT FOUND SCHEDULE");
                     Break;
                  When = %SQLStatus_Duplicate
                     MessageBox(0, "", 0, 0, "DUPLICATE SCHEDULE");
                     Break;
                  End-Evaluate;
                  /* Cannot be used with Select Statements */
                  rem &SQL_SCHEDULE.BulkMode = True;
                  
                  /* Get Count of No of Distributions */
                  rem For &iDistrib = 1 to &Z_PO_DISTRIB.ActiveRowCount;
                  SQLExec("Select Count(*) from PS_PO_LINE_DISTRIB Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &NO_DISTRIB);
                  
                  If All(&NO_DISTRIB) Then
                     
                     /******************************
                      Generate the Distribution Loop
                      ******************************/
                     
                     For &DISTRIB = 1 To &NO_DISTRIB;
                        rem For &iDistrib = 1 To &Z_PO_DISTRIB.ActiveRowCount;
                        Local Record &AA_PO_DIST = CreateRecord(Record.Z_PO_DISTR_E_VW);
                        rem SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6", &AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &D_BU, &D_PO_ID, &D_LINE, &D_SCHED, &D_DIST, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                        Local string &SQL_DIST = "%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6";
                        Local SQL &SQL_DISTRIB = CreateSQL(&SQL_DIST, &AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB);
                        rem Local SQL &SQL_DISTRIB = CreateSQL("%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6");
                        rem &SQL_DISTRIB.Execute(&AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB);
                        Evaluate &SQL_DISTRIB.Status
                        When = %SQLStatus_OK
                           MessageBox(0, "", 0, 0, "Correct DISTRIB");
                           /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
                           While &SQL_DISTRIB.Fetch(&D_BU, &D_PO_ID, &D_LINE, &D_SCHED, &D_DIST, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                              rem &DISTRIB = &DISTRIB + 1;
                              MessageBox(0, "", 0, 0, "Distribution " | &DISTRIB);
                              &SQL_DISTRIB.TraceName = "Z_PO_PUBLISH.6620.Step1.PC.DISTRIB." | &DISTRIB;
                              /* PS_PO_LINE_DISTRIB */
                              rem &LOG_PO.WriteLine("No of Distributions " | &NO_DISTRIB);
                              &AddNode_DISTRIBUTION = &AddNode_SCHEDULE.AddElement("Z_DISTRIB_VW");
                              &AddNode_DISTRIBUTION.AddAttribute("class", "R");
                              rem &AddNode_CommentNode_DISTRIB = &AddNode_DISTRIBUTION.AddComment("DISTRIBUTION Block....STARTS");
                              &AddNode_DISTRIB_BU = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT");
                              &AddNode_DISTRIB_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                              &AddNode_DISTRIB_PO_ID = &AddNode_DISTRIBUTION.AddElement("PO_ID");
                              &AddNode_DISTRIB_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                              &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("LINE_NBR");
                              &AddNode_DISTRIB_LINE_NBR.NodeValue = &Line;
                              &AddNode_DISTRIB_SCHED_NBR = &AddNode_DISTRIBUTION.AddElement("SCHED_NBR");
                              &AddNode_DISTRIB_SCHED_NBR.NodeValue = &SCHED;
                              &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LINE_NUM");
                              &AddNode_DISTRIB_LINE_NBR.NodeValue = &DISTRIB;
                              &AddNode_DISTRIB_LN_STATUS = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LN_STATUS");
                              &AddNode_DISTRIB_LN_STATUS.NodeValue = &DISTRIB_LN_STATUS;
                              &AddNode_DISTRIB_QTY_PO = &AddNode_DISTRIBUTION.AddElement("QTY_PO");
                              &AddNode_DISTRIB_QTY_PO.NodeValue = &DISTRIB_QTY_PO;
                              &AddNode_CURRENCY_CD_DISTRIB = &AddNode_DISTRIBUTION.AddElement("CURRENCY_CD");
                              &AddNode_CURRENCY_CD_DISTRIB.NodeValue = &CURRENCY_CD_DISTRIB;
                              &AddNode_MERCHANDISE_AMT = &AddNode_DISTRIBUTION.AddElement("MERCHANDISE_AMT");
                              &AddNode_MERCHANDISE_AMT.NodeValue = &MERCHANDISE_AMT;
                              /* TAX DETAILS */
                              &AddNode_SALES_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("SALETX_AMT");
                              &AddNode_SALES_TAX_AMT.NodeValue = &SALES_TAX_AMT;
                              &AddNode_USE_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("USETAX_AMT");
                              &AddNode_USE_TAX_AMT.NodeValue = &USE_TAX_AMT;
                              &AddNode_BU_REQ = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_REQ");
                              &AddNode_BU_REQ.NodeValue = &BU_REQ;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_ID");
                              &AddNode_REQ_ID.NodeValue = &REQ_ID;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_LINE_NBR");
                              &AddNode_REQ_ID.NodeValue = &REQ_LINE_NBR;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_SCHED_NBR");
                              &AddNode_REQ_ID.NodeValue = &REQ_SCHED_NBR;
                              &AddNode_REQUESTOR_ID = &AddNode_DISTRIBUTION.AddElement("REQUESTOR_ID");
                              &AddNode_REQUESTOR_ID.NodeValue = &REQUESTOR_ID;
                              /* PS_Z_MNET_TBL */
                              &AddNode_Z_FIRST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_FIRST_NAME");
                              &AddNode_Z_FIRST_NAME.NodeValue = &D_Z_FIRST_NAME;
                              &AddNode_MIDDLE_NAME = &AddNode_DISTRIBUTION.AddElement("MIDDLE_NAME");
                              &AddNode_MIDDLE_NAME.NodeValue = &D_MIDDLE_NAME;
                              &AddNode_Z_LAST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_LAST_NAME");
                              &AddNode_Z_LAST_NAME.NodeValue = &D_Z_LAST_NAME;
                              &AddNode_Z_SMTP = &AddNode_DISTRIBUTION.AddElement("Z_SMTP_ADDR");
                              &AddNode_Z_SMTP.NodeValue = &D_Z_SMTP;
                              /* PS_REQ_HDR */
                              &AddNode_OPRID = &AddNode_DISTRIBUTION.AddElement("OPRID");
                              &AddNode_OPRID.NodeValue = &OPRID_DISTRIB;
                              &AddNode_D_LOCATION = &AddNode_DISTRIBUTION.AddElement("LOCATION");
                              &AddNode_D_LOCATION.NodeValue = &DLOC;
                              /* PS_LOCATION_TBL */
                              &AddNode_D_ADDR1 = &AddNode_DISTRIBUTION.AddElement("ADDRESS1");
                              &AddNode_D_ADDR1.NodeValue = &D_ADDR1;
                              &AddNode_D_ADDR2 = &AddNode_DISTRIBUTION.AddElement("ADDRESS2");
                              &AddNode_D_ADDR2.NodeValue = &D_ADDR2;
                              &AddNode_D_ADDR3 = &AddNode_DISTRIBUTION.AddElement("ADDRESS3");
                              &AddNode_D_ADDR3.NodeValue = &D_ADDR3;
                              &AddNode_D_ADDR4 = &AddNode_DISTRIBUTION.AddElement("ADDRESS4");
                              &AddNode_D_ADDR4.NodeValue = &D_ADDR4;
                              &AddNode_D_CITY = &AddNode_DISTRIBUTION.AddElement("CITY");
                              &AddNode_D_CITY.NodeValue = &D_CITY;
                              &AddNode_D_STATE = &AddNode_DISTRIBUTION.AddElement("STATE");
                              &AddNode_D_STATE.NodeValue = &D_STATE;
                              &AddNode_D_POSTAL = &AddNode_DISTRIBUTION.AddElement("POSTAL");
                              &AddNode_D_POSTAL.NodeValue = &D_POSTAL;
                              &AddNode_D_COUNTRY_CD = &AddNode_DISTRIBUTION.AddElement("COUNTRY");
                              &AddNode_D_COUNTRY_CD.NodeValue = &COUNTRY_DISTRIB;
                              
                              &AddNode_ACCOUNT = &AddNode_DISTRIBUTION.AddElement("ACCOUNT");
                              &AddNode_ACCOUNT.NodeValue = &ACCOUNT;
                              /* CUSTOM FIELDS */
                              &AddNode_Z_COMBOD_CD = &AddNode_DISTRIBUTION.AddElement("Z_COMBD_CD");
                              &AddNode_Z_COMBOD_CD.NodeValue = &Z_COMBD_CD;
                              &AddNode_Z_EXTC = &AddNode_DISTRIBUTION.AddElement("Z_EXTC");
                              &AddNode_Z_EXTC.NodeValue = &Z_EXTC;
                              &AddNode_Z_JOBNO = &AddNode_DISTRIBUTION.AddElement("Z_JOBNO");
                              &AddNode_Z_JOBNO.NodeValue = &Z_JOBNO;
                              &AddNode_Z_JEO = &AddNode_DISTRIBUTION.AddElement("Z_JEO");
                              &AddNode_Z_JEO.NodeValue = &Z_JEO;
                              &AddNode_Z_ADRS = &AddNode_DISTRIBUTION.AddElement("Z_ADRS");
                              &AddNode_Z_ADRS.NodeValue = &Z_ADRS;
                              &AddNode_Z_RCBS = &AddNode_DISTRIBUTION.AddElement("Z_RCBS");
                              &AddNode_Z_RCBS.NodeValue = &Z_RCBS;
                              &AddNode_Z_CPIM = &AddNode_DISTRIBUTION.AddElement("Z_CPIM");
                              &AddNode_Z_CPIM.NodeValue = &Z_CPIM;
                              &AddNode_Z_RCC = &AddNode_DISTRIBUTION.AddElement("Z_RCC");
                              &AddNode_Z_RCC.NodeValue = &Z_RCC;
                              &AddNode_TAG_NUMBER = &AddNode_DISTRIBUTION.AddElement("TAG_NUMBER");
                              &AddNode_TAG_NUMBER.NodeValue = &TAG_NUMBER;
                              &AddNode_Z_SERIAL_NO = &AddNode_DISTRIBUTION.AddElement("Z_SERIAL_NO");
                              &AddNode_Z_SERIAL_NO.NodeValue = &Z_SERIAL_NO;
                              
                              rem &AddNode_WS_WORK_PHONE = &AddNode_DISTRIBUTION.AddElement("WS_WORK_PHONE");
                              rem &AddNode_WS_WORK_PHONE.NodeValue = &D_WS_WORK_PHONE;
                              
                              &SQL_DISTRIB.ReuseCursor = True;
                           End-While; /* DISTRIB LEVEL */
                           &SQL_DISTRIB.Close();
                           Break;
                        When = %SQLStatus_NotFound
                           MessageBox(0, "", 0, 0, "NOT FOUND DISTRIB");
                           Break;
                        When = %SQLStatus_Duplicate
                           MessageBox(0, "", 0, 0, "DUPLICATE DISTRIB");
                           Break;
                        End-Evaluate;
                        rem SQLExec("Select DISTRIB_LN_STATUS, QTY_PO, CURRENCY_CD, MERCHANDISE_AMT, SALETX_AMT, USETAX_AMT, ACCOUNT, TAG_NUMBER, LOCATION, BUSINESS_UNIT_REQ, REQ_ID, REQ_LINE_NBR, REQ_SCHED_NBR, REQUESTOR_ID, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, POSTAL, STATE, COUNTRY FROM PS_Z_PO_DISTR_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                        rem &SQL_DISTRIB = CreateSQL("Select DISTRIB_LN_STATUS, QTY_PO, CURRENCY_CD, MERCHANDISE_AMT, SALETX_AMT, USETAX_AMT, ACCOUNT, TAG_NUMBER, LOCATION, BUSINESS_UNIT_REQ, REQ_ID, REQ_LINE_NBR, REQ_SCHED_NBR, REQUESTOR_ID, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, POSTAL, STATE, COUNTRY FROM PS_Z_PO_DISTR_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &iDistrib);
                        rem While &SQL_DISTRIB.Fetch(&BU_DISTRIB, &PO_ID_DISTRIB, &LN_NBR_D, &SCHED_NBR_D, &DISTRIB_NUM, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &D_CO_CD);
                        rem While &SQL_DISTRIB.Fetch(&DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                        
                        rem &AddNode_CommentNode_DISTRIB = &AddNode_DISTRIBUTION.AddComment("DISTRIBUTION Block....ENDS");
                        
                        rem End-For; /* Distribution Loop */
                        rem End-While; /* Distribution Level */
                     End-For; /* Distribution Loop */
                  End-If; /* Distribution Loop */
                  rem End-While; /* SCHEDULE LEVEL */
                  rem &SQL_SCHEDULE.Close();
               End-For; /* Schedule Loop */
            End-If; /* Schedule Loop */
            rem End-While; /* LINE LEVEL */
            rem &SQL_LINE.Close();
         End-For; /* Line Loop */
      End-If; /* Line Loop */
      rem End-While; /* Header Level */
      rem &cdataNode = &AddNode0.AddCDataSection("Testing...ENDS");
      /* Generate the Formatted XML */
      InitVariables();
      &STR = &NEWDOC.GenFormattedXmlString();
      rem &LOG_PO.WriteLine(&STR);
      rem &MSGNAME = Message.PURCHASE_ORDER_DISPATCH;
      &MSGNAME = Message.Z_POD_FINAL_MSG;
      &MAXMSGSIZE = %MaxMessageSize;
      MessageBox(0, "", 0, 0, "Max Message Size " | &MAXMSGSIZE);
      /* CHECK NODE */
      
      <*&ErrorInfo = PingNode("PSFT_FILEOUTPUT");
      &Root = &ErrorInfo.DocumentElement;
      &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
      For &M = 1 To &MsgNodeArray.Len
         &MsgNode = &MsgNodeArray [&M];
         &MsgText = &MsgNode.FindNode("status").NodeValue;
         If &MsgText = "Success (117,73)" Then
            /*PUBLISH MESSAGE ON NODE*/
            Evaluate &DISP_METHOD
            When "EDX"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
               &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
               rem &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
               &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
               Break;
            When "B2B"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
               Break;
            When "RMD"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
               Break;
            When "ORB"
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
               Break;
            When-Other
               &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
               Break;
            End-Evaluate;
            rem &RET = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
            rem &LOG_PO.WriteLine("Message Successfully Published " | &ret);
            If (&ret = "TRUE") Then
               &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
               MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
               SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
            End-If;
         Else
            Error ("Web Server not available for web service");
         End-If;
      End-For;
	  *>
      /* &FAT_NODE = GetURL(URL.Z_FAT_NODE);

REM &response = SyncRequestXmlDoc(&Approvalxmldoc, Message.Z_APPROVAL_FAT, &FAT_NODE);

&response = PublishXmlDoc(&Approvalxmldoc, Message.Z_APPROVAL_FAT, &FAT_NODE); */
      Evaluate &DISP_METHOD
      When "EDX"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         rem &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
         Break;
      When "B2B"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         Break;
      When "RMD"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         Break;
      When "ORB"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
         Break;
      When-Other
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         Break;
      End-Evaluate;
      If (&ret = "TRUE") Then
         &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
         MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
         SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Non Retail BU selected for processing");
   End-If; /* RETAIL BU CHECK */
End-Function;

/* Code Added to Cater to new requirement for PO Data PUBLISH */

/*DEFINE ROWSETS*/
rem Local Rowset &Z_PO_HDR = CreateRowset(Record.Z_PO_TEMP_VW);
Local Rowset &Z_PO_HDR = CreateRowset(Record.PO_HDR);
rem Local Rowset &Z_PO_LINE = CreateRowset(Record.Z_PO_LINE_VW1);
rem Local Rowset &Z_PO_SCHED = CreateRowset(Record.Z_PO_SHIP_VW1);
rem Local Rowset &Z_PO_DISTRIB = CreateRowset(Record.Z_PO_DIST_VW1);
/* SAMPLE GETSETID FUNCTION */
rem &BOOK_SETID = GetSetId("BUSINESS_UNIT", ASSET.BUSINESS_UNIT, "DEPR_RT_TBL", "");

/* Declare Global Variables */
&NEW_PO_ID = Z_PO_PUB_AET.PO_ID;
&NEW_BU = Z_PO_PUB_AET.BUSINESS_UNIT;

/* Fill the HDR Rowset for the PO_ID */
rem MessageBox(0, "", 0, 0, "Filling the Rowset for " | &NEW_BU | " and " | &NEW_PO_ID);
&NO_PO_LOADED = &Z_PO_HDR.Fill("Where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
MessageBox(0, "", 0, 0, "No of PO's Loaded " | &NO_PO_LOADED);


/* Initiate Retrieving Values */

If All(&NO_PO_LOADED) Then
   For &PO = 1 To &Z_PO_HDR.ActiveRowCount
      rem SetTracePC(%TracePC_Assigns + %TracePC_ParamsOut + %TracePC_Starts + %TracePC_Functions + %TracePC_ParamsIn);
      rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
      rem &Line = &Z_PO_LINE.Fill("where BUSINESS_UNIT =:1 AND PO_ID = :2", &NEW_BU, &NEW_PO_ID);
      rem MessageBox(0, "", 0, 0, "Lines" | &Line);
      rem For &POL = 1 To &Z_PO_LINE.ActiveRowCount
         &SCHED = &Z_PO_SCHED.Fill("where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 ", &Z_PO_LINE(&POL).Z_PO_LINE_VW1.BUSINESS_UNIT.Value, &Z_PO_LINE(&POL).Z_PO_LINE_VW1.PO_ID.Value, &Z_PO_LINE(&POL).Z_PO_LINE_VW1.LINE_NBR.Value);
      rem MessageBox(0, "", 0, 0, "SCHEDULES" | &SCHED);
      rem For &POLS = 1 To &Z_PO_SCHED.ActiveRowCount
            &DISTRIB = &Z_PO_DISTRIB.Fill("where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", &Z_PO_SCHED(&POLS).Z_PO_SHIP_VW1.BUSINESS_UNIT.Value, &Z_PO_SCHED(&POLS).Z_PO_SHIP_VW1.PO_ID.Value, &Z_PO_SCHED(&POLS).Z_PO_SHIP_VW1.LINE_NBR.Value, &Z_PO_SCHED(&POLS).Z_PO_SHIP_VW1.SCHED_NBR.Value);
      rem For &POLDIS = 1 To &Z_PO_DISTRIB.ActiveRowCount
               rem MessageBox(0, "", 0, 0, "DISTRIB" | &DISTRIB);
      rem If All(&NO_PO_LOADED) Then;
      /* Declare Files */
      rem &FileName_PUB = "C:\temp\NEW PO\PO_PUB" | %Datetime | ".log";
      rem &LOG_PO = GetFile(&FileName_PUB, "W", %FilePath_Absolute);
      rem &LOG_PO.WriteLine("Begin");
      rem &LOG_PO.WriteLine("Start Publishing for PO_ID " | Z_PO_PUB_AET.PO_ID);
      rem EDX_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.Z_PO_TEMP_VW), &Z_PO_LINE, &Z_PO_SCHED, &Z_PO_DISTRIB);
      rem EDX_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.Z_PO_TEMP_VW));
      EDX_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
      /* Also call the ORBIT function seperately */
      rem EDX_PUBLISH(&Z_PO_HDR(&PO).GetRecord(Record.Z_PO_TEMP_VW), &Z_PO_LINE, &Z_PO_SCHED, &Z_PO_DISTRIB);
      /* File Handling */
      rem &LOG_PO.WriteLine("End");
      rem &LOG_PO.Close();
      rem Else
               MessageBox(0, "", 10662, 280, "No Processing", "Purchase Order", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      rem End-If;
      rem End-For; /* DISTRIBUTION FILL */
      rem &Z_PO_DISTRIB.Flush();
      rem End-For; /* SCHEDULE FILL */
      rem &Z_PO_SCHED.Flush();
      rem End-For; /* LINE FILL */
      rem &Z_PO_LINE.Flush();
   End-For; /* HEADER FILL */
   rem &Z_PO_HDR.Flush();
Else
   MessageBox(0, "", 10662, 280, "No Processing", "Purchase Order", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
End-If;
/* This is where it all ENDS !!!! HOPEFULLY !!!!*/


Local File &XSDFILE;
Local string &XSD_PATH;

rem &XSD_PATH = GetEnv("XSD_PATH");
&XSD_PATH = "C:\temp\NEW PO_" | %Datetime | ".xml";
&XSDFILE = GetFile(&XSD_PATH, "W", %FilePath_Absolute);
&a = """sef""";
MessageBox(0, "", 0, 0, &a);
If &XSDFILE.IsOpen Then
   
   /* Begin Creating the XML file */
   &XSDFILE.WriteLine("<?xml version=" | Char(34) | "1.0" | Char(34) | " standalone=" | Char(34) | "yes" | Char(34) | "?>");
   rem &XSDFILE.WriteLine("<!-- Created by PeopleSoft EMF  -->");
   &XSDFILE.WriteLine("<xsd:schema xmlns:xsd=" | """http://www.w3.org/2001/XMLSchema>""");
   &XSDFILE.WriteLine("  <xsd:element name=" | """Z_PO_PUBLISH_MSG""" | " type=" | """Z_PO_PUBLISH_MSGType""" | "/>");
   &XSDFILE.WriteLine("  <xsd:complexType name=" | """Z_PO_PUBLISH_MSGType""" | ">");
   &XSDFILE.WriteLine("    <xsd:sequence>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """MsgData""" | " type=" | """MsgDataType""" | "/>");
   &XSDFILE.WriteLine("    </xsd:sequence>");
   &XSDFILE.WriteLine("  </xsd:complexType>");
   &XSDFILE.WriteLine("  <xsd:complexType name=" | """MsgDataType""" | ">");
   &XSDFILE.WriteLine("    <xsd:sequence maxOccurs=" | """unbounded""" | " minOccurs=" | """0""" | ">");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Transaction""" | " type=" | """TransactionType""" | "/>");
   &XSDFILE.WriteLine("    </xsd:sequence>");
   &XSDFILE.WriteLine("  </xsd:complexType>");
   &XSDFILE.WriteLine("  <xsd:complexType name=" | """TransactionType""" | ">");
   &XSDFILE.WriteLine("    <xsd:sequence>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_HEADER_VW""" | " type=" | """Z_HEADER_VWMsgDataRecordType""" | "/>");
   &XSDFILE.WriteLine("    </xsd:sequence>");
   &XSDFILE.WriteLine("  </xsd:complexType>");
   &XSDFILE.WriteLine("  <xsd:complexType name=" | """Z_DISTRIB_VWMsgDataRecordType""" | ">");
   &XSDFILE.WriteLine("    <xsd:sequence>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """BUSINESS_UNIT""" | " type=" | """BUSINESS_UNITType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """PO_ID""" | " type=" | """PO_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """LINE_NBR""" | " type=" | """LINE_NBRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """SCHED_NBR""" | " type=" | """SCHED_NBRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """DISTRIB_LINE_NUM""" | " type=" | """DISTRIB_LINE_NUMType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """DISTRIB_LN_STATUS""" | " type=" | """DISTRIB_LN_STATUSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """QTY_PO""" | " type=" | """QTY_POType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CURRENCY_CD""" | " type=" | """CURRENCY_CDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """MERCHANDISE_AMT""" | " type=" | """MERCHANDISE_AMTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """SALETX_AMT""" | " type=" | """SALETX_AMTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """USETAX_AMT""" | " type=" | """USETAX_AMTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """BUSINESS_UNIT_REQ""" | " type=" | """BUSINESS_UNIT_REQType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """REQ_ID""" | " type=" | """REQ_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """REQ_LINE_NBR""" | " type=" | """REQ_LINE_NBRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """REQ_SCHED_NBR""" | " type=" | """REQ_SCHED_NBRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """REQ_DISTRIB_NBR""" | " type=" | """REQ_DISTRIB_NBRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """REQUESTOR_ID""" | " type=" | """REQUESTOR_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_FIRST_NAME""" | " type=" | """Z_FIRST_NAMEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """MIDDLE_NAME""" | " type=" | """MIDDLE_NAMEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_LAST_NAME""" | " type=" | """Z_LAST_NAMEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_SMTP_ADDR""" | " type=" | """Z_SMTP_ADDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """OPRID""" | " type=" | """OPRIDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """LOCATION""" | " type=" | """LOCATIONType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS1""" | " type=" | """ADDRESS1Type""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS2""" | " type=" | """ADDRESS2Type""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS3""" | " type=" | """ADDRESS3Type""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS4""" | " type=" | """ADDRESS4Type""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CITY""" | " type=" | """CITYType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """STATE""" | " type=" | """STATEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """POSTAL""" | " type=" | """POSTALType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """COUNTRY""" | " type=" | """COUNTRYType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ACCOUNT""" | " type=" | """ACCOUNTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_COMBD_CD""" | " type=" | """Z_COMBD_CDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_EXTC""" | " type=" | """Z_EXTCType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_JOBNO""" | " type=" | """Z_JOBNOType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_JEO""" | " type=" | """Z_JEOType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_ADRS""" | " type=" | """Z_ADRSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_RCBS""" | " type=" | """Z_RCBSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_CPIM""" | " type=" | """Z_CPIMType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_RCC""" | " type=" | """Z_RCCType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """TAG_NUMBER""" | " type=" | """TAG_NUMBERType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_SERIAL_NO""" | " type=" | """Z_SERIAL_NOType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("    </xsd:sequence>");
   &XSDFILE.WriteLine("    <xsd:attribute use=" | """required""" | " name=" | """class""" | " type=" | """xsd:string""" | " fixed=" | """R""" | "/>");
   &XSDFILE.WriteLine("  </xsd:complexType>");
   &XSDFILE.WriteLine("  <xsd:complexType name=" | """Z_HEADER_VWMsgDataRecordType""" | ">");
   &XSDFILE.WriteLine("    <xsd:sequence>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """BUSINESS_UNIT""" | " type=" | """BUSINESS_UNITType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """DESCR_BU""" | " type=" | """DESCR_BUType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """PO_ID""" | " type=" | """PO_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CHNG_ORD_BATCH""" | " type=" | """CHNG_ORD_BATCHType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CHNG_ORD_SEQ""" | " type=" | """CHNG_ORD_SEQType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CHANGE_STATUS""" | " type=" | """CHANGE_STATUSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_ORD_TYPE""" | " type=" | """Z_ORD_TYPEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_JOB_TYPE""" | " type=" | """Z_JOB_TYPEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ORIGIN""" | " type=" | """ORIGINType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """PO_STATUS""" | " type=" | """PO_STATUSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """RECV_STATUS""" | " type=" | """RECV_STATUSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """DISP_METHOD""" | " type=" | """DISP_METHODType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """PO_DT""" | " type=" | """PO_DTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_BVAPP_NUMBER""" | " type=" | """Z_BVAPP_NUMBERType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """PO_REF""" | " type=" | """PO_REFType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """BILL_LOCATION""" | " type=" | """BILL_LOCATIONType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS1_BILL""" | " type=" | """ADDRESS1_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS2_BILL""" | " type=" | """ADDRESS2_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS3_BILL""" | " type=" | """ADDRESS3_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS4_BILL""" | " type=" | """ADDRESS4_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CITY_BILL""" | " type=" | """CITY_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """STATE_BILL""" | " type=" | """STATE_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """POSTAL_BILL""" | " type=" | """POSTAL_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """COUNTRY_BILL""" | " type=" | """COUNTRY_BILLType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """VENDOR_SETID""" | " type=" | """VENDOR_SETIDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """VENDOR_ID""" | " type=" | """VENDOR_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """VNDR_LOC""" | " type=" | """VNDR_LOCType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS1_VNDR""" | " type=" | """ADDRESS1_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS2_VNDR""" | " type=" | """ADDRESS2_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS3_VNDR""" | " type=" | """ADDRESS3_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """ADDRESS4_VNDR""" | " type=" | """ADDRESS4_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """CITY_VNDR""" | " type=" | """CITY_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """STATE_VNDR""" | " type=" | """STATE_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """POSTAL_VNDR""" | " type=" | """POSTAL_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """COUNTRY_VNDR""" | " type=" | """COUNTRY_VNDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """DSC_TRMS_AVAIL_FLG""" | " type=" | """DSC_TRMS_AVAIL_FLGType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """DSCNT_TRMS_PERCENT""" | " type=" | """DSCNT_TRMS_PERCENTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """TERMS_ADJUST_DAYS""" | " type=" | """TERMS_ADJUST_DAYSType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """TMG_DAY_INCR_VAL""" | " type=" | """TMG_DAY_INCR_VALType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """BUYER_ID""" | " type=" | """BUYER_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_REQUESTOR_ID""" | " type=" | """Z_REQUESTOR_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_FIRST_NAME""" | " type=" | """Z_FIRST_NAMEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """MIDDLE_NAME""" | " type=" | """MIDDLE_NAMEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_LAST_NAME""" | " type=" | """Z_LAST_NAMEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """Z_SMTP_ADDR""" | " type=" | """Z_SMTP_ADDRType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """OPRID_ENTERED_BY""" | " type=" | """OPRID_ENTERED_BYType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """APPROVAL_DT""" | " type=" | """APPROVAL_DTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """OPRID_MODIFIED_BY""" | " type=" | """OPRID_MODIFIED_BYType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """LAST_DTTM_UPDATE""" | " type=" | """LAST_DTTM_UPDATEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """PO_AMOUNT""" | " type=" | """PO_AMOUNTType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """HEADER_COMMENTS""" | " type=" | """HEADER_COMMENTSType""" | " maxOccurs=" | """unbounded""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """STD_COMMENT_TYPE""" | " type=" | """STD_COMMENT_TYPEType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("      <xsd:element name=" | """STD_COMMENT_ID""" | " type=" | """STD_COMMENT_IDType""" | " maxOccurs=" | """1""" | " minOccurs=" | """0""" | "/>");
   &XSDFILE.WriteLine("    </xsd:sequence>");
   &XSDFILE.WriteLine("  </xsd:complexType>");
   &XSDFILE.WriteLine("</xsd:schema>"); /* ROOT TAG */
End-If; /* File Open */
&XSDFILE.Close();


Local string &str, &outStr;
Local File &xsdPO;

&str = MsgGetExplainText(20001, 1, "Msg not found");
/* Write the xsd to file */
&xsdPO = GetFile("C:\temp\NEW PO\PO Publish XSD's\Z_PO_PUBLISH_VERSION_1" | %Datetime | ".xml", "W", %FilePath_Absolute);
&xsdPO.WriteString(&str);
&xsdPO.Close();


Function WhereClause(&where As string) Returns string;
   Local string &retval;
   &retval = &where;
   /* Compulsory Clause */
   rem &retval = " AND PO_ID = '" | Z_RUN_DISP_AET.PO_ID.Value | "'";
   /* PO_ID Where Clause to inlcude multiple PO_ID's */
   If All(Z_RUN_DISP_AET.PO_ID_TO.Value) Then
      &retval = &retval | " AND PO.PO_ID BETWEEN '" | Z_RUN_DISP_AET.PO_ID.Value | "'" | " AND " | "'" | Z_RUN_DISP_AET.PO_ID_TO.Value | "'";
   Else
      &retval = " AND PO.PO_ID = '" | Z_RUN_DISP_AET.PO_ID.Value | "'";
   End-If;
   /* Dispatch Methods Where Clause */
   If All(Z_RUN_DISP_AET.B2B_DISP.Value) Then
      &retval = &retval | " AND B2B_DISP = '" | Z_RUN_DISP_AET.B2B_DISP.Value | "'";
   End-If;
   If All(Z_RUN_DISP_AET.ORB_DISP.Value) Then
      &retval = &retval | " AND ORB_DISP = '" | Z_RUN_DISP_AET.ORB_DISP.Value | "'";
   End-If;
   If All(Z_RUN_DISP_AET.RMD_DISP.Value) Then
      &retval = &retval | " AND RMD_DISP = '" | Z_RUN_DISP_AET.RMD_DISP.Value | "'";
   End-If;
   MessageBox(0, "", 0, 0, "Return Value " | &retval);
   &retval = ExpandSqlBinds(&retval, &pi_sqr);
   Return &retval;
End-Function;

/***  MAIN  ***/
Local string &sqltext;

MessageBox(0, "", 0, 0, "Processing For Business Unit " | Z_RUN_DISP_AET.BUSINESS_UNIT.Value | " and PO_ID " | Z_RUN_DISP_AET.PO_ID.Value);
&sqltext = WhereClause("");
Z_RUN_DISP_AET.WHERE_CLAUSE.Value = &sqltext;


/* Retrieve PO Total Amount */
rem Declare Function get_po_amt PeopleCode FUNCLIB_PM_SQL.MERCHANDISE_AMT FieldFormula;

/************************
 Initialize the variables
*************************/
Function InitVariables()
   
   &BU = "";
   &PO_ID = "";
   &CHNG_ORD_BATCH = "";
   &NAME1 = "";
   &VENADDR1 = "";
   &VENADDR2 = "";
   &VENADDR3 = "";
   &VENADDR4 = "";
   &VENCOUN = "";
   &VENCITY = "";
   &VENSTATE = "";
   &VENPOSTAL = "";
   &ATTN_TO = "";
   &DESCR = "";
   &ADDR1 = "";
   &ADDR2 = "";
   &ADDR3 = "";
   &ADDR4 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &COCD = "";
   &Z_ORDER_TYPE = "";
   &DSC_TRMS_AVAIL_FLG = "";
   &TERMS_ADJUST_DAYS = "";
   &DSCNT_TRMS_PERCENT = "";
   &TMG_DAY_INCR_VAL = "";
   &Z_FIRST_NAME = "";
   &MIDDLE_NAME = "";
   &Z_LAST_NAME = "";
   &Z_SMTP = "";
   &WS_WORK_PHONE = "";
   &OPRID = "";
   &COMMENT_ID = "";
   &RANDOM = "";
   &BU_LINE = "";
   &PO_LINE = "";
   &LINE_NBR = "";
   &INV_ITEM_ID = "";
   &ITM_ID_VNDR = "";
   &UOM = "";
   &MFG_ITM_ID = "";
   &CNTRCT_ID = "";
   &DESCR254 = "";
   &DESCR60 = "";
   &BU_SCHED = "";
   &PO_SCHED = "";
   &LINE_NBR_SCHED = "";
   &SCHED_NBR = "";
   &PRICE_PO = "";
   &SHIPTO_ID = "";
   &QTY_PO = "";
   &SHIP_TYPE_ID = "";
   &SHIP_DATE = "";
   &L_ADDR1 = "";
   &L_ADDR2 = "";
   &L_ADDR3 = "";
   &L_ADDR4 = "";
   &L_CO_CD = "";
   &L_CITY = "";
   &L_STATE = "";
   &L_POSTAL = "";
   &SHIP_DESCR = "";
   &BU_DISTRIB = "";
   &PO_ID_DISTRIB = "";
   &LINE_NBR_DISTRIB = "";
   &SCHED_NBR_DISTRIB = "";
   &DISTRIB_LINE_NUM = "";
   &DLOC = "";
   &BU_REQ = "";
   &REQ_ID = "";
   &REQ_LINE_NBR = "";
   &REQ_SCHED_NBR = "";
   &REQUESTER_ID = "";
   &D_Z_FIRST_NAME = "";
   &D_MIDDLE_NAME = "";
   &D_Z_LAST_NAME = "";
   &D_Z_SMTP = "";
   &D_WS_WORK_PHONE = "";
   &D_ADDR1 = "";
   &D_ADDR2 = "";
   &D_ADDR3 = "";
   &D_ADDR4 = "";
   &D_CO_CD = "";
   &D_CITY = "";
   &D_STATE = "";
   &D_POSTAL = "";
   &AMT = "";
   
End-Function;


/*******************************
 NEW PO FUNCTION FOR EDX PUBLISH
 *******************************/
Function EDX_PUBLISH(&Z_PO_HDR As Record)
   
   SQLExec("Select BUSINESS_UNIT from PS_Z_BU_PM_TBL Where Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", &BU, &NON_BU);
   If All(&NON_BU) Then
      Local XmlDoc &NEWDOC;
      Local string &PPSTR;
      
      InitVariables();
      /* HEADER ROWSET */
      &PO_DT = &Z_PO_HDR.PO_DT.Value;
      &PO_REF = &Z_PO_HDR.PO_REF.Value;
      &PO_STATUS = &Z_PO_HDR.PO_STATUS.Value;
      &RECV_STATUS = &Z_PO_HDR.RECV_STATUS.Value;
      &VENSETID = &Z_PO_HDR.VENDOR_SETID.Value;
      &VENID = &Z_PO_HDR.VENDOR_ID.Value;
      &VNDR_LOC = &Z_PO_HDR.VNDR_LOC.Value;
      &PYMNT_CD = &Z_PO_HDR.PYMNT_TERMS_CD.Value;
      &BUYER_ID = &Z_PO_HDR.BUYER_ID.Value;
      &BILL_LOC = &Z_PO_HDR.BILL_LOCATION.Value;
      &CHNG_ORD_BATCH = &Z_PO_HDR.CHNG_ORD_BATCH.Value;
      &CHNG_ORD_SEQ = &Z_PO_HDR.CHNG_ORD_SEQ.Value;
      &CHNG_STATUS = &Z_PO_HDR.CHANGE_STATUS.Value;
      &ORIGIN = &Z_PO_HDR.ORIGIN.Value;
      &OPRID_ENT = &Z_PO_HDR.OPRID_ENTERED_BY.Value;
      &ENT_DT = &Z_PO_HDR.ENTERED_DT.Value;
      &OPRID_APP = &Z_PO_HDR.OPRID_APPROVED_BY.Value;
      &APP_DT = &Z_PO_HDR.APPROVAL_DT.Value;
      &OPRID_MODIF = &Z_PO_HDR.OPRID_MODIFIED_BY.Value;
      &LAST_DTTM_UPD = &Z_PO_HDR.LAST_DTTM_UPDATE.Value;
      &DISP_METHOD = &Z_PO_HDR.DISP_METHOD.Value;
      /* Retrieve Address Details from Cross Reference Location Table */
      SQLExec("Select DESCR, ATTN_TO, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, PHONE, CITY, STATE, POSTAL, COUNTRY FROM PS_Z_PO_LOC_E_VW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LOCATION = :3", &BU, &PO_ID, &BILL_LOC, &DESCR, &ATTN_TO, &ADDR1, &ADDR2, &ADDR3, &ADDR4, &PHONE, &CITY, &STATE, &POSTAL, &COUNT_HDR);
      /* Retrieve the VENDOR ADDRESS */
      SQLExec("Select NAME1, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, COUNTRY, CITY, STATE, POSTAL From PS_Z_N_PO_VADD_EVW WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", &BU, &PO_ID, &NAME1, &VENADDR1, &VENADDR2, &VENADDR3, &VENADDR4, &VENCOUN, &VENCITY, &VENSTATE, &VENPOSTAL);
      /* Retrieve PAYMENT DETAILS */
      SQLExec("Select DSC_TRMS_AVAIL_FLG, TERMS_ADJUST_DAYS, DSCNT_TRMS_PERCENT, TMG_DAY_INCR_VAL From PS_Z_PO_PYMNT_E_VW Where BUSINESS_UNIT = :1 AND PO_ID = :2", &BU, &PO_ID, &DSC_TRMS_AVAIL_FLG, &TERMS_ADJUST_DAYS, &DSCNT_TRMS_PERCENT, &TMG_DAY_INCR_VAL);
      /* Retrieve BUSINESS_UNIT Details */
      SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2", Record.Z_PO_BU_DET_EVW, &BU, &NEW_BU, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      MessageBox(0, "", 0, 0, "BU " | Z_RUN_DISP_AET.BUSINESS_UNIT);
      MessageBox(0, "", 0, 0, "PO_ID " | Z_RUN_DISP_AET.PO_ID);
      /* PO Total */
      MessageBox(0, "", 0, 0, "Retrieve PO Total Amount");
      rem get_po_amt(&AMT);
      /* Create the Request XML */
      &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><Z_PO_PUBLISH_MSG/>");
      &AddNode0 = &NEWDOC.DocumentElement.AddElement("MsgData");
      /********************** 
       Create the Header Loop 
       **********************/
      &AddNode_TRANSACTION = &AddNode0.AddElement("Transaction");
      &AddNode_HEADER = &AddNode_TRANSACTION.AddElement("Z_HEADER_VW");
      &AddNode_HEADER.AddAttribute("class", "R");
      &AddNode_BU = &AddNode_HEADER.AddElement("BUSINESS_UNIT");
      &AddNode_BU.NodeValue = Z_RUN_DISP_AET.BUSINESS_UNIT;
      &AddNode_DESCR_BU = &AddNode_HEADER.AddElement("DESCR_BU");
      &AddNode_DESCR_BU.NodeValue = &DESCR_BU;
      &AddNode_PO_ID = &AddNode_HEADER.AddElement("PO_ID");
      &AddNode_PO_ID.NodeValue = Z_RUN_DISP_AET.PO_ID;
      &AddNode_CHNG_ORD_BATCH = &AddNode_HEADER.AddElement("CHNG_ORD_BATCH");
      &AddNode_CHNG_ORD_BATCH.NodeValue = &CHNG_ORD_BATCH;
      &AddNode_CHNG_ORD_SEQ = &AddNode_HEADER.AddElement("CHNG_ORD_SEQ");
      &AddNode_CHNG_ORD_SEQ.NodeValue = &CHNG_ORD_SEQ;
      &AddNode_CHNG_STATUS = &AddNode_HEADER.AddElement("CHANGE_STATUS");
      &AddNode_CHNG_STATUS.NodeValue = &CHNG_STATUS;
      &AddNode_Z_ORD = &AddNode_HEADER.AddElement("Z_ORD_TYPE");
      &AddNode_Z_ORD.NodeValue = &Z_ORD_TYPE;
      &AddNode_Z_JOB = &AddNode_HEADER.AddElement("Z_JOB_TYPE");
      &AddNode_Z_JOB.NodeValue = &Z_JOB_TYPE;
      &AddNode_ORIGIN = &AddNode_HEADER.AddElement("ORIGIN");
      &AddNode_ORIGIN.NodeValue = &ORIGIN;
      &AddNode_PO_STATUS = &AddNode_HEADER.AddElement("PO_STATUS");
      &AddNode_PO_STATUS.NodeValue = &PO_STATUS;
      &AddNode_RECV_STATUS = &AddNode_HEADER.AddElement("RECV_STATUS");
      &AddNode_RECV_STATUS.NodeValue = &RECV_STATUS;
      /* ADD DISPATCH METHOD TAG */
      &AddNode_DISP_METHOD = &AddNode_HEADER.AddElement("DISP_METHOD");
      &AddNode_PO_DT = &AddNode_HEADER.AddElement("PO_DT");
      &AddNode_PO_DT.NodeValue = &PO_DT;
      &AddNode_Z_BVAPP = &AddNode_HEADER.AddElement("Z_BVAPP_NUMBER");
      &AddNode_Z_BVAPP.NodeValue = &Z_BVAPP_NUMBER;
      &AddNode_PO_REF = &AddNode_HEADER.AddElement("PO_REF");
      &AddNode_PO_REF.NodeValue = &PO_REF;
      &AddNode_BILL_LOC = &AddNode_HEADER.AddElement("BILL_LOCATION");
      &AddNode_BILL_LOC.NodeValue = &BILL_LOC;
      /* BILL LOCATION ADDRESS */
      &AddNode_ADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_BILL");
      &AddNode_ADDR1.NodeValue = &ADDR1;
      &AddNode_ADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_BILL");
      &AddNode_ADDR2.NodeValue = &ADDR2;
      &AddNode_ADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_BILL");
      &AddNode_ADDR3.NodeValue = &ADDR3;
      &AddNode_ADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_BILL");
      &AddNode_ADDR4.NodeValue = &ADDR4;
      &AddNode_CITY = &AddNode_HEADER.AddElement("CITY_BILL");
      &AddNode_CITY.NodeValue = &CITY;
      &AddNode_STATE = &AddNode_HEADER.AddElement("STATE_BILL");
      &AddNode_STATE.NodeValue = &STATE;
      &AddNode_POSTAL = &AddNode_HEADER.AddElement("POSTAL_BILL");
      &AddNode_POSTAL.NodeValue = &POSTAL;
      &AddNode_COCD = &AddNode_HEADER.AddElement("COUNTRY_BILL"); /* CONFIRM WHETHER ITS THE COUNTRY CODE */
      &AddNode_COCD.NodeValue = &COUNT_HDR;
      rem &AddNode_CommentNode = &AddNode_HEADER.AddComment("Provide Flags at Zero Level to identify the System.");
      
      /* CHECK FOR DISPATCH METHODS */
      Evaluate &DISP_METHOD
      When "B2B"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "EDX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "EML"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "FAX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "LCM"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "ORB"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      When "PHN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "PRN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "Y";
         Break;
      When "RMD"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = "Y";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         Break;
      End-Evaluate;
      /* Vendor Details */
      &AddNode_VENDOR_SETID = &AddNode_HEADER.AddElement("VENDOR_SETID");
      rem &AddNode_VENDOR_SETID.NodeValue = &VENSETID;
      &AddNode_VENDOR_SETID.NodeValue = "USWC"; /* Client Wants USWC */
      &AddNode_VENDOR_ID = &AddNode_HEADER.AddElement("VENDOR_ID");
      &AddNode_VENDOR_ID.NodeValue = &VENID;
      &AddNode_VNDR_LOC = &AddNode_HEADER.AddElement("VNDR_LOC");
      &AddNode_VNDR_LOC.NodeValue = &VNDR_LOC;
      /* Create Vendor Address Block */
      &AddNode_VENADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_VNDR");
      &AddNode_VENADDR1.NodeValue = &VENADDR1;
      &AddNode_VENADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_VNDR");
      &AddNode_VENADDR2.NodeValue = &VENADDR2;
      &AddNode_VENADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_VNDR");
      &AddNode_VENADDR3.NodeValue = &VENADDR3;
      &AddNode_VENADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_VNDR");
      &AddNode_VENADDR4.NodeValue = &VENADDR4;
      &AddNode_VENCITY = &AddNode_HEADER.AddElement("CITY_VNDR");
      &AddNode_VENCITY.NodeValue = &VENCITY;
      &AddNode_VENSTATE = &AddNode_HEADER.AddElement("STATE_VNDR");
      &AddNode_VENSTATE.NodeValue = &VENSTATE;
      &AddNode_VENPOSTAL = &AddNode_HEADER.AddElement("POSTAL_VNDR");
      &AddNode_VENPOSTAL.NodeValue = &VENPOSTAL;
      &AddNode_VENCOUNTRY = &AddNode_HEADER.AddElement("COUNTRY_VNDR");
      &AddNode_VENCOUNTRY.NodeValue = &VENCOUN;
      
      /* PAYMENT TERMS CODE */
      &AddNode_DSC_TRMS_AVAIL_FLG = &AddNode_HEADER.AddElement("DSC_TRMS_AVAIL_FLG");
      &AddNode_DSC_TRMS_AVAIL_FLG.NodeValue = &DSC_TRMS_AVAIL_FLG;
      &AddNode_DSCNT_PER = &AddNode_HEADER.AddElement("DSCNT_TRMS_PERCENT");
      &AddNode_DSCNT_PER.NodeValue = &DSCNT_TRMS_PERCENT;
      &AddNode_TERMS_DAYS = &AddNode_HEADER.AddElement("TERMS_ADJUST_DAYS");
      &AddNode_TERMS_DAYS.NodeValue = &TERMS_ADJUST_DAYS;
      &AddNode_TMG_DAY = &AddNode_HEADER.AddElement("TMG_DAY_INCR_VAL");
      &AddNode_TMG_DAY.NodeValue = &TMG_DAY_INCR_VAL;
      
      &AddNode_BUYER = &AddNode_HEADER.AddElement("BUYER_ID");
      &AddNode_BUYER.NodeValue = &BUYER_ID;
      /* Create the Address Block */
      &AddNode_ATTN_TO = &AddNode_HEADER.AddElement("ATTN_TO");
      &AddNode_ATTN_TO.NodeValue = &ATTN_TO;
      &AddNode_DESCR0 = &AddNode_HEADER.AddElement("DESCR");
      &AddNode_DESCR0.NodeValue = &DESCR;
      &AddNode_Z_REQ = &AddNode_HEADER.AddElement("Z_REQUESTOR_ID");
      &AddNode_Z_REQ.NodeValue = &Z_REQ_ID;
      /* PS_Z_MNET_TBL */
      &AddNode_Z_FIRST_NAME = &AddNode_HEADER.AddElement("Z_FIRST_NAME");
      &AddNode_Z_FIRST_NAME.NodeValue = &Z_FIRST_NAME;
      &AddNode_MIDDLE_NAME = &AddNode_HEADER.AddElement("MIDDLE_NAME");
      &AddNode_MIDDLE_NAME.NodeValue = &MIDDLE_NAME;
      &AddNode_Z_LAST_NAME = &AddNode_HEADER.AddElement("Z_LAST_NAME");
      &AddNode_Z_LAST_NAME.NodeValue = &Z_LAST_NAME;
      &AddNode_Z_SMTP = &AddNode_HEADER.AddElement("Z_SMTP_ADDR");
      &AddNode_Z_SMTP.NodeValue = &Z_SMTP;
      /* PS_PO_HDR AGAIN */
      &AddNode_OPRID_ENT = &AddNode_HEADER.AddElement("OPRID_ENTERED_BY");
      &AddNode_OPRID_ENT.NodeValue = &OPRID_ENT;
      &AddNode_ENT_DT = &AddNode_HEADER.AddElement("ENTERED_DT");
      &AddNode_ENT_DT.NodeValue = &ENT_DT;
      &AddNode_OPRID_APP = &AddNode_HEADER.AddElement("OPRID_APPROVED_BY");
      &AddNode_OPRID_APP.NodeValue = &OPRID_APP;
      &AddNode_APP_DT = &AddNode_HEADER.AddElement("APPROVAL_DT");
      &AddNode_APP_DT.NodeValue = &APP_DT;
      &AddNode_OPRID_MODIF = &AddNode_HEADER.AddElement("OPRID_MODIFIED_BY");
      &AddNode_OPRID_MODIF.NodeValue = &OPRID_MODIF;
      &AddNode_LAST_DTTM_UPD = &AddNode_HEADER.AddElement("LAST_DTTM_UPDATE");
      &AddNode_LAST_DTTM_UPD.NodeValue = &LAST_DTTM_UPD;
      &AddNode_WS_WORK_PHONE = &AddNode_HEADER.AddElement("WS_WORK_PHONE");
      &AddNode_WS_WORK_PHONE.NodeValue = &WS_WORK_PHONE;
      /* PO TOTAL AMOUNT DERIVED */
      &AddNode_PO_AMT_TTL = &AddNode_HEADER.AddElement("PO_AMOUNT");
      rem &AddNode_PO_AMT_TTL.NodeValue = Z_PO_PUB_AET.PO_AMT_TTL;
      /* Create the Comment Block */
      Local SQL &COMMENTS_SQL_HDR = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "HDR", Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, 0);
      While &COMMENTS_SQL_HDR.Fetch(&COM_BU, &COM_PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
         MessageBox(0, "", 0, 0, "ADD HEADER COMMENTS");
         &AddNode_COMMENTS_HDR = &AddNode_HEADER.AddElement("COMMENTS_HDR");
         rem &AddNode_OPRID = &AddNode_COMMENTS_HDR.AddElement("OPRID");
         rem &AddNode_OPRID.NodeValue = &OPRID;
         rem &AddNode_COMMENT_ID = &AddNode_COMMENTS_HDR.AddElement("COMMENT_ID");
         rem &AddNode_COMMENT_ID.NodeValue = &COMMENT_ID;
         rem &AddNode_RANDOM = &AddNode_COMMENTS_HDR.AddElement("RANDOM_CMMT_NBR");
         rem &AddNode_RANDOM.NodeValue = &RANDOM;
         &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_HDR.AddElement("HEADER_COMMENTS");
         &AddNode_COMMENTS_2000.NodeValue = &COMM_2000;
         /* REUSE CURSOR PROPERTY */
         &COMMENTS_SQL_HDR.ReuseCursor = True;
      End-While; /* WHILE End HDR LEVEL */
      /* PURCHASING BU DETAILS */
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_TYPE");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_TYPE;
      &AddNode_BU_STD_COMM_ID = &AddNode_HEADER.AddElement("STD_COMMENT_ID");
      &AddNode_BU_STD_COMM_ID.NodeValue = &STD_COMMENT_ID;
      /* PS_PO_HDR AGAIN */
      SQLExec("Select Count(*) from PS_PO_LINE where BUSINESS_UNIT = :1 AND PO_ID = :2", Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &NO_LINES);
      If All(&NO_LINES) Then
         /**********************
          Generate the Line Loop
          **********************/
         MessageBox(0, "", 0, 0, "No Lines " | &NO_LINES);
         For &Line = 1 To &NO_LINES;
            Local Record &AA_PO_LINE = CreateRecord(Record.Z_PO_LN_E_VW);
            Local string &LINE_STR = "%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4";
            Local SQL &SQL_LINE = CreateSQL(&LINE_STR, &AA_PO_LINE, Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &Line);
            Evaluate &SQL_LINE.Status
            When = %SQLStatus_OK
               MessageBox(0, "", 0, 0, "Correct LINE");
               /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
               While &SQL_LINE.Fetch(&L_BU, &L_PO_ID, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &CAT_ID, &CAT_CD, &CAT_DESCR, &UOM, &PRICE_DT_TYPE, &MFG_ID, &MFG_DESCR, &MFG_ITM_ID, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ)
                  MessageBox(0, "", 0, 0, "Line " | &Line);
                  &SQL_STR = &SQL_LINE.Value;
                  MessageBox(0, "", 0, 0, "SQL STR LINE " | &SQL_STR);
                  &SQL_LINE.TraceName = "Z_PO_PUBLISH.6620.STEP1.PC.LINE." | &Line;
                  /* LINE LEVEL */
                  &AddNode_LINE = &AddNode_HEADER.AddElement("Z_LINE_VW");
                  &AddNode_LINE.AddAttribute("class", "R");
                  rem &AddNode_CommentNode_LINE = &AddNode_LINE.AddComment("LINE Block....STARTS");
                  &AddNode_LINE_BU = &AddNode_LINE.AddElement("BUSINESS_UNIT");
                  &AddNode_LINE_BU.NodeValue = Z_RUN_DISP_AET.BUSINESS_UNIT;
                  &AddNode_LINE_PO_ID = &AddNode_LINE.AddElement("PO_ID");
                  &AddNode_LINE_PO_ID.NodeValue = Z_RUN_DISP_AET.PO_ID;
                  &AddNode_LINE_NBR = &AddNode_LINE.AddElement("LINE_NBR");
                  &AddNode_LINE_NBR.NodeValue = &Line;
                  &AddNode_CN_STS_LINE = &AddNode_LINE.AddElement("CANCEL_STATUS_LINE");
                  &AddNode_CN_STS_LINE.NodeValue = &CANCEL_STATUS_LINE;
                  &AddNode_CHNG_STS = &AddNode_LINE.AddElement("CHANGE_STATUS");
                  &AddNode_CHNG_STS.NodeValue = &CHANGE_STATUS;
                  &AddNode_CHNG_ORD_SEQ_LINE = &AddNode_LINE.AddElement("CHNG_ORD_SEQ_LINE");
                  &AddNode_CHNG_ORD_SEQ_LINE.NodeValue = &CHNG_ORD_SEQ_LINE;
                  /* ITEM DESCRIPTION */
                  &AddNode_ITEM_SETID = &AddNode_LINE.AddElement("ITM_SETID");
                  &AddNode_ITEM_SETID.NodeValue = "USWC"; /* As Per Client Requirement */
                  &AddNode_ITEM_ID = &AddNode_LINE.AddElement("INV_ITEM_ID");
                  &AddNode_ITEM_ID.NodeValue = &INV_ITM_ID;
                  &AddNode_DESCR254_MIXED = &AddNode_LINE.AddElement("ITEM_DESCR");
                  &AddNode_DESCR254_MIXED.NodeValue = &DESCR254_MIXED;
                  &AddNode_ITM_ID_VNDR = &AddNode_LINE.AddElement("ITM_ID_VNDR");
                  &AddNode_ITM_ID_VNDR.NodeValue = &VNDR_ITM_ID;
                  &AddNode_VNDR_CATALOG_ID = &AddNode_LINE.AddElement("VNDR_CATALOG_ID");
                  &AddNode_VNDR_CATALOG_ID.NodeValue = &VNDR_CATALOG_ID;
                  /*CATEGORY CODE */
                  &AddNode_CATEGORY_ID = &AddNode_LINE.AddElement("CATEGORY_ID");
                  &AddNode_CATEGORY_ID.NodeValue = &CAT_ID;
                  &AddNode_CATEGORY_CD = &AddNode_LINE.AddElement("CATEGORY_CD");
                  &AddNode_CATEGORY_CD.NodeValue = &CAT_CD;
                  &AddNode_CATEGORY_DESCR = &AddNode_LINE.AddElement("CATEGORY_DESCR");
                  &AddNode_CATEGORY_DESCR.NodeValue = &CAT_DESCR;
                  /* UNIT OF MEASURE */
                  &AddNode_UOM = &AddNode_LINE.AddElement("UNIT_OF_MEASURE");
                  &AddNode_UOM.NodeValue = &UOM;
                  &AddNode_PRICE_DT_TYPE = &AddNode_LINE.AddElement("PRICE_DT_TYPE");
                  &AddNode_PRICE_DT_TYPE.NodeValue = &PRICE_DT_TYPE;
                  /* MANUFACTURERS DETAILS */
                  &AddNode_MFG_ID = &AddNode_LINE.AddElement("MFG_ID");
                  &AddNode_MFG_ID.NodeValue = &MFG_ID;
                  &AddNode_MFG_DESCR = &AddNode_LINE.AddElement("MFG_DESCR");
                  &AddNode_MFG_DESCR.NodeValue = &MFG_DESCR;
                  &AddNode_MFG_ITM_ID = &AddNode_LINE.AddElement("MFG_ITM_ID");
                  &AddNode_MFG_ITM_ID.NodeValue = &MFG_ITM_ID;
                  /* Add Code for Custom Item Attribute Table - Z_ITEM_ATT_TBL */
                  &AddNode_Z_ICC_CD = &AddNode_LINE.AddElement("Z_ICC_CODE_CD");
                  &AddNode_Z_ICC_CD.NodeValue = &Z_ICC_CD;
                  &AddNode_Z_AIC_CD = &AddNode_LINE.AddElement("Z_AIC_CODE_FLD");
                  &AddNode_Z_AIC_CD.NodeValue = &Z_AIC_FLD;
                  &AddNode_Z_DEVICE_IND = &AddNode_LINE.AddElement("Z_DEVICE_IND");
                  &AddNode_Z_DEVICE_IND.NodeValue = &Z_DEVICE_IND;
                  /* REMEDY REQUEST FLAG */
                  &AddNode_Z_REM_REQ_FLG = &AddNode_LINE.AddElement("Z_REMEDY_RQST_FLG");
                  &AddNode_Z_REM_REQ_FLG.NodeValue = &Z_REM_REQ_FLG;
                  /* CONTRACT DETAILS */
                  &AddNode_CNTRCT_SETID = &AddNode_LINE.AddElement("CNTRCT_SETID");
                  &AddNode_CNTRCT_SETID.NodeValue = &CNTRCT_SETID;
                  &AddNode_CNTRCT_ID = &AddNode_LINE.AddElement("CNTRCT_ID");
                  &AddNode_CNTRCT_ID.NodeValue = &CNTRCT_ID;
                  &AddNode_CNTRCT_LINE_NBR = &AddNode_LINE.AddElement("CNTRCT_LINE_NBR");
                  &AddNode_CNTRCT_LINE_NBR.NodeValue = &CNTRCT_LINE_NBR;
                  &AddNode_RECV_REQ = &AddNode_LINE.AddElement("RECV_REQ");
                  &AddNode_RECV_REQ.NodeValue = &RECV_REQ;
                  /* Create the COMMENTS BLOCK LINE LEVEL */
                  Local SQL &COMMENTS_SQL_LINE = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "LIN", Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &Line);
                  While &COMMENTS_SQL_LINE.Fetch(&COM_BU, &COM_PO_ID, &OPRID_LN, &COMMENT_ID_LN, &RANDOM_LN, &COMM_2000_LN);
                     MessageBox(0, "", 0, 0, "Adding Line Comments");
                     &AddNode_COMMENTS_LINE = &AddNode_LINE.AddElement("COMMENTS_LINE");
                     rem &AddNode_OPRID_LN = &AddNode_COMMENTS_LINE.AddElement("OPRID_LN");
                     rem &AddNode_OPRID_LN.NodeValue = &OPRID_LN;
                     rem &AddNode_COMMENT_ID_LN = &AddNode_COMMENTS_LINE.AddElement("COMMENT_ID_LN");
                     rem &AddNode_COMMENT_ID_LN.NodeValue = &COMMENT_ID_LN;
                     rem &AddNode_RANDOM_LN = &AddNode_COMMENTS_LINE.AddElement("RANDOM_CMMT_NBR_LN");
                     rem &AddNode_RANDOM_LN.NodeValue = &RANDOM_LN;
                     &AddNode_COMMENTS_2000_LN = &AddNode_COMMENTS_LINE.AddElement("LINE_COMMENTS");
                     &AddNode_COMMENTS_2000_LN.NodeValue = &COMM_2000_LN;
                     &COMMENTS_SQL_LINE.ReuseCursor = True;
                  End-While; /* WHILE End LINE LEVEL */
                  &AddNode_Z_QUOTE_NBR = &AddNode_LINE.AddElement("Z_QUOTE_NUMBER");
                  &AddNode_Z_QUOTE_NBR.NodeValue = &Z_QUOTE_NBR;
                  &SQL_LINE.ReuseCursor = True;
               End-While; /* LINE LEVEL */
               &SQL_LINE.Close();
               Break;
            When = %SQLStatus_NotFound
               rem MessageBox(0, "", 0, 0, "NOT FOUND LINE");
               Error ("LINE Not Found");
               Break;
            When = %SQLStatus_Duplicate
               rem MessageBox(0, "", 0, 0, "DUPLICATE LINE");
               Error ("DUPLICATE LINE");
               Break;
            End-Evaluate;
            /* Get Count of No of Schedules */
            SQLExec("Select Count(*) from PS_PO_LINE_SHIP Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &Line, &NO_SCHED);
            
            If All(&NO_SCHED) Then
               
               /**************************
                Generate the Schedule Loop
                **************************/
               MessageBox(0, "", 0, 0, "No of Schedules " | &NO_SCHED);
               For &SCHED = 1 To &NO_SCHED;
                  Local Record &AA_PO_SCHED = CreateRecord(Record.Z_PO_SCHED_EVW);
                  /* Instead Use CreateSQL and While loop */
                  &SQL_STRING_SCHED = "%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5";
                  Local SQL &SQL_SCHEDULE = CreateSQL(&SQL_STRING_SCHED, &AA_PO_SCHED, Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &Line, &SCHED);
                  Evaluate &SQL_SCHEDULE.Status
                  When = %SQLStatus_OK
                     MessageBox(0, "", 0, 0, "Correct SCHEDULE");
                     /* IDEALLY CALL THE WHILE HERE RATHER THAN OUTSIDE */
                     While &SQL_SCHEDULE.Fetch(&S_BU, &S_PO_ID, &S_LINE, &S_SCHED, &CANCEL_STATUS_SCHED, &CHNG_STATUS_SCHED, &CHNG_ORD_SEQ_SCHED, &PRICE_PO, &CURRENCY_CD, &SHIPTO_SETID, &SHIPTO_ID, &QTY_PO, &ZERO_PRICE_IND, &SCHED_MERCHANDISE_AMT, &SUT_APP, &FREIGHT_TERMS, &SHIP_TYPE_ID, &SHIP_DATE, &DUE_DT, &DUE_TIME, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &COUNTRY_SCHED, &SHIP_DESCR)
                        MessageBox(0, "", 0, 0, "Schedule " | &SCHED);
                        &SQL_SCHEDULE.TraceName = "Z_PO_PUBLISH.6620.Step1.PC.SCHEDULE." | &SCHED;
                        MessageBox(0, "", 0, 0, "&CANCEL_STATUS_SCHED " | &CANCEL_STATUS_SCHED);
                        /* PS_PO_LINE */
                        rem &LOG_PO.WriteLine("No of Schedules " | &NO_SCHED);
                        &AddNode_SCHEDULE = &AddNode_LINE.AddElement("Z_SCHEDULE_VW");
                        &AddNode_SCHEDULE.AddAttribute("class", "R");
                        &AddNode_SCHED_BU = &AddNode_SCHEDULE.AddElement("BUSINESS_UNIT");
                        &AddNode_SCHED_BU.NodeValue = Z_RUN_DISP_AET.BUSINESS_UNIT;
                        &AddNode_SCHED_PO_ID = &AddNode_SCHEDULE.AddElement("PO_ID");
                        &AddNode_SCHED_PO_ID.NodeValue = Z_RUN_DISP_AET.PO_ID;
                        &AddNode_SCHED_LINE_NBR = &AddNode_SCHEDULE.AddElement("LINE_NBR");
                        &AddNode_SCHED_LINE_NBR.NodeValue = &Line;
                        &AddNode_SCHED_NBR = &AddNode_SCHEDULE.AddElement("SCHED_NBR");
                        &AddNode_SCHED_NBR.NodeValue = &SCHED;
                        &AddNode_CN_STS_SCHED = &AddNode_SCHEDULE.AddElement("CANCEL_STATUS_SCHED");
                        &AddNode_CN_STS_SCHED.NodeValue = &CANCEL_STATUS_SCHED;
                        &AddNode_CHNG_STATUS_SCHED = &AddNode_SCHEDULE.AddElement("CHANGE_STATUS_SCHED");
                        &AddNode_CHNG_STATUS_SCHED.NodeValue = &CHNG_STATUS_SCHED;
                        &AddNode_CHNG_ORD_SEQ_SCHED = &AddNode_SCHEDULE.AddElement("CHNG_ORD_SEQ_SCHED");
                        &AddNode_CHNG_ORD_SEQ_SCHED.NodeValue = &CHNG_ORD_SEQ_SCHED;
                        &AddNode_PRICE_PO = &AddNode_SCHEDULE.AddElement("PRICE_PO");
                        &AddNode_PRICE_PO.NodeValue = &PRICE_PO;
                        &AddNode_CURRENCY_CD = &AddNode_SCHEDULE.AddElement("CURRENCY_CD");
                        &AddNode_CURRENCY_CD.NodeValue = &CURRENCY_CD;
                        &AddNode_QTY_PO = &AddNode_SCHEDULE.AddElement("QTY_PO");
                        &AddNode_QTY_PO.NodeValue = &QTY_PO;
                        &AddNode_ZERO_PRICE_IND = &AddNode_SCHEDULE.AddElement("ZERO_PRICE_IND");
                        &AddNode_ZERO_PRICE_IND.NodeValue = &ZERO_PRICE_IND;
                        &AddNode_SHIP_DATE = &AddNode_SCHEDULE.AddElement("SHIP_DATE");
                        &AddNode_SHIP_DATE.NodeValue = &SHIP_DATE;
                        &AddNode_DUE_DT = &AddNode_SCHEDULE.AddElement("DUE_DT");
                        &AddNode_DUE_DT.NodeValue = &DUE_DT;
                        &AddNode_DUE_TIME = &AddNode_SCHEDULE.AddElement("DUE_TIME");
                        &AddNode_DUE_TIME.NodeValue = &DUE_TIME;
                        /* SHIP TO LOCATION DETAILS */
                        &AddNode_SHIPTO_SETID = &AddNode_SCHEDULE.AddElement("SHIPTO_SETID");
                        &AddNode_SHIPTO_SETID.NodeValue = &SHIPTO_SETID;
                        &AddNode_SHIPTO_ID = &AddNode_SCHEDULE.AddElement("SHIPTO_ID");
                        &AddNode_SHIPTO_ID.NodeValue = &SHIPTO_ID;
                        /* PS_SHIPTO_TBL */
                        &AddNode_DESCR_SHIP_SCHED = &AddNode_SCHEDULE.AddElement("DESCR_SHIPTO");
                        &AddNode_DESCR_SHIP_SCHED.NodeValue = &DESCR_SHIP_SCHED;
                        /* LOCATION_TBL */
                        &AddNode_L_ADDR1 = &AddNode_SCHEDULE.AddElement("ADDRESS1_SHIPTO");
                        &AddNode_L_ADDR1.NodeValue = &L_ADDR1;
                        &AddNode_L_ADDR2 = &AddNode_SCHEDULE.AddElement("ADDRESS2_SHIPTO");
                        &AddNode_L_ADDR2.NodeValue = &L_ADDR2;
                        &AddNode_L_ADDR3 = &AddNode_SCHEDULE.AddElement("ADDRESS3_SHIPTO");
                        &AddNode_L_ADDR3.NodeValue = &L_ADDR3;
                        &AddNode_L_ADDR4 = &AddNode_SCHEDULE.AddElement("ADDRESS4_SHIPTO");
                        &AddNode_L_ADDR4.NodeValue = &L_ADDR4;
                        &AddNode_L_CITY = &AddNode_SCHEDULE.AddElement("CITY_SHIPTO");
                        &AddNode_L_CITY.NodeValue = &L_CITY;
                        &AddNode_L_STATE = &AddNode_SCHEDULE.AddElement("STATE_SHIPTO");
                        &AddNode_L_STATE.NodeValue = &L_STATE;
                        &AddNode_L_POSTAL = &AddNode_SCHEDULE.AddElement("POSTAL_SHIPTO");
                        &AddNode_L_POSTAL.NodeValue = &L_POSTAL;
                        &AddNode_L_COUNTRY_CD = &AddNode_SCHEDULE.AddElement("COUNTRY_SHIPTO");
                        &AddNode_L_COUNTRY_CD.NodeValue = &COUNTRY_SCHED;
                        &AddNode_MERCHANDISE_AMT_SCHED = &AddNode_SCHEDULE.AddElement("MERCHANDISE_AMT");
                        &AddNode_MERCHANDISE_AMT_SCHED.NodeValue = &SCHED_MERCHANDISE_AMT;
                        &AddNode_SUT_APP = &AddNode_SCHEDULE.AddElement("SUT_APPLICABILITY");
                        &AddNode_SUT_APP.NodeValue = &SUT_APP;
                        &AddNode_FREIGHT_TERMS = &AddNode_SCHEDULE.AddElement("FREIGHT_TERMS");
                        &AddNode_FREIGHT_TERMS.NodeValue = &FREIGHT_TERMS;
                        rem &AddNode_DESCR111.NodeValue = &SHIP_DESCR;
                        &AddNode_SHIP_TYPE_ID = &AddNode_SCHEDULE.AddElement("SHIP_TYPE_ID");
                        &AddNode_SHIP_TYPE_ID.NodeValue = &SHIP_TYPE_ID;
                        &SQL_SCHEDULE.ReuseCursor = True;
                     End-While; /* SCHEDULE LEVEL */
                     &SQL_SCHEDULE.Close();
                     Break;
                  When = %SQLStatus_NotFound
                     MessageBox(0, "", 0, 0, "NOT FOUND SCHEDULE");
                     Break;
                  When = %SQLStatus_Duplicate
                     MessageBox(0, "", 0, 0, "DUPLICATE SCHEDULE");
                     Break;
                  End-Evaluate;
                  /* Cannot be used with Select Statements */
                  rem &SQL_SCHEDULE.BulkMode = True;
                  
                  /* Get Count of No of Distributions */
                  SQLExec("Select Count(*) from PS_PO_LINE_DISTRIB Where BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4", Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &Line, &SCHED, &NO_DISTRIB);
                  
                  If All(&NO_DISTRIB) Then
                     
                     /******************************
                      Generate the Distribution Loop
                      ******************************/
                     
                     For &DISTRIB = 1 To &NO_DISTRIB;
                        Local Record &AA_PO_DIST = CreateRecord(Record.Z_PO_DISTR_E_VW);
                        Local string &SQL_DIST = "%SelectAll(:1) Where BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6";
                        Local SQL &SQL_DISTRIB = CreateSQL(&SQL_DIST, &AA_PO_DIST, Z_RUN_DISP_AET.BUSINESS_UNIT, Z_RUN_DISP_AET.PO_ID, &Line, &SCHED, &DISTRIB);
                        Evaluate &SQL_DISTRIB.Status
                        When = %SQLStatus_OK
                           While &SQL_DISTRIB.Fetch(&D_BU, &D_PO_ID, &D_LINE, &D_SCHED, &D_DIST, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQUESTOR_ID, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_POSTAL, &D_STATE, &COUNTRY_DISTRIB);
                              MessageBox(0, "", 0, 0, "Distribution " | &DISTRIB);
                              &SQL_DISTRIB.TraceName = "Z_PO_PUBLISH.6620.Step1.PC.DISTRIB." | &DISTRIB;
                              /* PS_PO_LINE_DISTRIB */
                              &AddNode_DISTRIBUTION = &AddNode_SCHEDULE.AddElement("Z_DISTRIB_VW");
                              &AddNode_DISTRIBUTION.AddAttribute("class", "R");
                              &AddNode_DISTRIB_BU = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT");
                              &AddNode_DISTRIB_BU.NodeValue = Z_RUN_DISP_AET.BUSINESS_UNIT;
                              &AddNode_DISTRIB_PO_ID = &AddNode_DISTRIBUTION.AddElement("PO_ID");
                              &AddNode_DISTRIB_PO_ID.NodeValue = Z_RUN_DISP_AET.PO_ID;
                              &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("LINE_NBR");
                              &AddNode_DISTRIB_LINE_NBR.NodeValue = &Line;
                              &AddNode_DISTRIB_SCHED_NBR = &AddNode_DISTRIBUTION.AddElement("SCHED_NBR");
                              &AddNode_DISTRIB_SCHED_NBR.NodeValue = &SCHED;
                              &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LINE_NUM");
                              &AddNode_DISTRIB_LINE_NBR.NodeValue = &DISTRIB;
                              &AddNode_DISTRIB_LN_STATUS = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LN_STATUS");
                              &AddNode_DISTRIB_LN_STATUS.NodeValue = &DISTRIB_LN_STATUS;
                              &AddNode_DISTRIB_QTY_PO = &AddNode_DISTRIBUTION.AddElement("QTY_PO");
                              &AddNode_DISTRIB_QTY_PO.NodeValue = &DISTRIB_QTY_PO;
                              &AddNode_CURRENCY_CD_DISTRIB = &AddNode_DISTRIBUTION.AddElement("CURRENCY_CD");
                              &AddNode_CURRENCY_CD_DISTRIB.NodeValue = &CURRENCY_CD_DISTRIB;
                              &AddNode_MERCHANDISE_AMT = &AddNode_DISTRIBUTION.AddElement("MERCHANDISE_AMT");
                              &AddNode_MERCHANDISE_AMT.NodeValue = &MERCHANDISE_AMT;
                              /* TAX DETAILS */
                              &AddNode_SALES_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("SALETX_AMT");
                              &AddNode_SALES_TAX_AMT.NodeValue = &SALES_TAX_AMT;
                              &AddNode_USE_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("USETAX_AMT");
                              &AddNode_USE_TAX_AMT.NodeValue = &USE_TAX_AMT;
                              &AddNode_BU_REQ = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_REQ");
                              &AddNode_BU_REQ.NodeValue = &BU_REQ;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_ID");
                              &AddNode_REQ_ID.NodeValue = &REQ_ID;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_LINE_NBR");
                              &AddNode_REQ_ID.NodeValue = &REQ_LINE_NBR;
                              &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_SCHED_NBR");
                              &AddNode_REQ_ID.NodeValue = &REQ_SCHED_NBR;
                              &AddNode_REQUESTOR_ID = &AddNode_DISTRIBUTION.AddElement("REQUESTOR_ID");
                              &AddNode_REQUESTOR_ID.NodeValue = &REQUESTOR_ID;
                              /* PS_Z_MNET_TBL */
                              &AddNode_Z_FIRST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_FIRST_NAME");
                              &AddNode_Z_FIRST_NAME.NodeValue = &D_Z_FIRST_NAME;
                              &AddNode_MIDDLE_NAME = &AddNode_DISTRIBUTION.AddElement("MIDDLE_NAME");
                              &AddNode_MIDDLE_NAME.NodeValue = &D_MIDDLE_NAME;
                              &AddNode_Z_LAST_NAME = &AddNode_DISTRIBUTION.AddElement("Z_LAST_NAME");
                              &AddNode_Z_LAST_NAME.NodeValue = &D_Z_LAST_NAME;
                              &AddNode_Z_SMTP = &AddNode_DISTRIBUTION.AddElement("Z_SMTP_ADDR");
                              &AddNode_Z_SMTP.NodeValue = &D_Z_SMTP;
                              /* PS_REQ_HDR */
                              &AddNode_OPRID = &AddNode_DISTRIBUTION.AddElement("OPRID");
                              &AddNode_OPRID.NodeValue = &OPRID_DISTRIB;
                              &AddNode_D_LOCATION = &AddNode_DISTRIBUTION.AddElement("LOCATION");
                              &AddNode_D_LOCATION.NodeValue = &DLOC;
                              /* PS_LOCATION_TBL */
                              &AddNode_D_ADDR1 = &AddNode_DISTRIBUTION.AddElement("ADDRESS1");
                              &AddNode_D_ADDR1.NodeValue = &D_ADDR1;
                              &AddNode_D_ADDR2 = &AddNode_DISTRIBUTION.AddElement("ADDRESS2");
                              &AddNode_D_ADDR2.NodeValue = &D_ADDR2;
                              &AddNode_D_ADDR3 = &AddNode_DISTRIBUTION.AddElement("ADDRESS3");
                              &AddNode_D_ADDR3.NodeValue = &D_ADDR3;
                              &AddNode_D_ADDR4 = &AddNode_DISTRIBUTION.AddElement("ADDRESS4");
                              &AddNode_D_ADDR4.NodeValue = &D_ADDR4;
                              &AddNode_D_CITY = &AddNode_DISTRIBUTION.AddElement("CITY");
                              &AddNode_D_CITY.NodeValue = &D_CITY;
                              &AddNode_D_STATE = &AddNode_DISTRIBUTION.AddElement("STATE");
                              &AddNode_D_STATE.NodeValue = &D_STATE;
                              &AddNode_D_POSTAL = &AddNode_DISTRIBUTION.AddElement("POSTAL");
                              &AddNode_D_POSTAL.NodeValue = &D_POSTAL;
                              &AddNode_D_COUNTRY_CD = &AddNode_DISTRIBUTION.AddElement("COUNTRY");
                              &AddNode_D_COUNTRY_CD.NodeValue = &COUNTRY_DISTRIB;
                              &AddNode_ACCOUNT = &AddNode_DISTRIBUTION.AddElement("ACCOUNT");
                              &AddNode_ACCOUNT.NodeValue = &ACCOUNT;
                              /* CUSTOM FIELDS */
                              &AddNode_Z_COMBOD_CD = &AddNode_DISTRIBUTION.AddElement("Z_COMBD_CD");
                              &AddNode_Z_COMBOD_CD.NodeValue = &Z_COMBD_CD;
                              &AddNode_Z_EXTC = &AddNode_DISTRIBUTION.AddElement("Z_EXTC");
                              &AddNode_Z_EXTC.NodeValue = &Z_EXTC;
                              &AddNode_Z_JOBNO = &AddNode_DISTRIBUTION.AddElement("Z_JOBNO");
                              &AddNode_Z_JOBNO.NodeValue = &Z_JOBNO;
                              &AddNode_Z_JEO = &AddNode_DISTRIBUTION.AddElement("Z_JEO");
                              &AddNode_Z_JEO.NodeValue = &Z_JEO;
                              &AddNode_Z_ADRS = &AddNode_DISTRIBUTION.AddElement("Z_ADRS");
                              &AddNode_Z_ADRS.NodeValue = &Z_ADRS;
                              &AddNode_Z_RCBS = &AddNode_DISTRIBUTION.AddElement("Z_RCBS");
                              &AddNode_Z_RCBS.NodeValue = &Z_RCBS;
                              &AddNode_Z_CPIM = &AddNode_DISTRIBUTION.AddElement("Z_CPIM");
                              &AddNode_Z_CPIM.NodeValue = &Z_CPIM;
                              &AddNode_Z_RCC = &AddNode_DISTRIBUTION.AddElement("Z_RCC");
                              &AddNode_Z_RCC.NodeValue = &Z_RCC;
                              &AddNode_TAG_NUMBER = &AddNode_DISTRIBUTION.AddElement("TAG_NUMBER");
                              &AddNode_TAG_NUMBER.NodeValue = &TAG_NUMBER;
                              &AddNode_Z_SERIAL_NO = &AddNode_DISTRIBUTION.AddElement("Z_SERIAL_NO");
                              &AddNode_Z_SERIAL_NO.NodeValue = &Z_SERIAL_NO;
                              &SQL_DISTRIB.ReuseCursor = True;
                           End-While; /* DISTRIB LEVEL */
                           &SQL_DISTRIB.Close();
                           Break;
                        When = %SQLStatus_NotFound
                           MessageBox(0, "", 0, 0, "NOT FOUND DISTRIB");
                           Break;
                        When = %SQLStatus_Duplicate
                           MessageBox(0, "", 0, 0, "DUPLICATE DISTRIB");
                           Break;
                        End-Evaluate;
                     End-For; /* Distribution Loop */
                  End-If; /* Distribution Loop */
               End-For; /* Schedule Loop */
            End-If; /* Schedule Loop */
         End-For; /* Line Loop */
      End-If; /* Line Loop */
      /* Generate the Formatted XML */
      InitVariables();
      &STR = &NEWDOC.GenFormattedXmlString();
      rem &LOG_PO.WriteLine(&STR);
      &MSGNAME = Message.Z_POD_FINAL_MSG;
      /* Publish Based on Dispatch Method Selected */
      Evaluate &DISP_METHOD
      When "EDX"
      When "EML"
      When "FAX"
      When "PHN"
      When "PRN"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         &RET_B2B = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         &RET_RMD = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         &RET_ORB = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_ORBIT);
         Break;
      When "B2B"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_B2B);
         Break;
      When "RMD"
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_REMEDY);
         Break;
         rem When-Other
         &ret = PublishXmlDoc(&NEWDOC, &MSGNAME, Node.PSFT_FILEOUTPUT);
         rem Break;
      End-Evaluate;
      If (&ret = "TRUE") Then
         &yo = ExpandSqlBinds("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P', Z_PUB_FLAG_B2B = 'P', Z_PUB_FLAG_RMD = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_RUN_DISP_AET.PROCESS_INST_STG, &BU, &PO_ID);
         MessageBox(0, "", 0, 0, "Expanded SQL " | &yo);
         SQLExec("UPDATE PS_Z_PO_TEMP SET Z_PUB_FLAG = 'P', Z_PUB_FLAG_B2B = 'P', Z_PUB_FLAG_RMD = 'P' Where PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3", Z_RUN_DISP_AET.PROCESS_INST_STG, &BU, &PO_ID);
         /* Delete rows from the Run Control Record */
         SQLExec("DELETE FROM PS_Z_RUN_DISP_PUR WHERE RUN_CNTL_ID = :1", &RUN_CNTL_ID);
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Non Retail BU selected for processing");
   End-If; /* RETAIL BU CHECK */
End-Function;

/*******MAIN*******/
/* DEFINE ROWSET */
Local Rowset &Z_PO_HDR = CreateRowset(Record.PO_HDR);

/* SAMPLE GETSETID FUNCTION */
rem &BOOK_SETID = GetSetId("BUSINESS_UNIT", ASSET.BUSINESS_UNIT, "DEPR_RT_TBL", "");

/* Retrieve Run Control Paramaters from the State Record */
&BU = Z_RUN_DISP_AET.BUSINESS_UNIT.Value;
&PO_ID = Z_RUN_DISP_AET.PO_ID.Value;
&PO_ID_TO = Z_RUN_DISP_AET.PO_ID_TO.Value;
&B2B_DISP = Z_RUN_DISP_AET.B2B_DISP.Value;
&ORB_DISP = Z_RUN_DISP_AET.ORB_DISP.Value;
&RMD_DISP = Z_RUN_DISP_AET.RMD_DISP.Value;
&RUN_CNTL_ID = Z_RUN_DISP_AET.RUN_CNTL_ID2.Value;

MessageBox(0, "", 0, 0, "Loading for Business Unit " | &BU | " and PO_ID " | &PO_ID);

/* Fill the HDR Rowset for the PO_ID */
&NO_PO_LOADED = &Z_PO_HDR.Fill("Where BUSINESS_UNIT = :1 AND PO_ID = :2", &BU, &PO_ID);
MessageBox(0, "", 0, 0, "No of PO's Loaded = " | &NO_PO_LOADED);


/* Initiate Retrieving Values */

If (&NO_PO_LOADED <> 0) Then
   rem SetTracePC(%TracePC_Assigns + %TracePC_ParamsOut + %TracePC_Starts + %TracePC_Functions + %TracePC_ParamsIn);
   rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
   For &iPo = 1 To &Z_PO_HDR.ActiveRowCount
      MessageBox(0, "", 0, 0, "Initiate Function Call for Business Unit " | &BU | " and PO_ID " | &PO_ID);
      EDX_PUBLISH(&Z_PO_HDR(&iPo).GetRecord(Record.PO_HDR));
   End-For; /* HEADER FILL */
   &Z_PO_HDR.Flush();
   rem SQLExec("DELETE FROM PS_Z_RUN_DISP_PUR WHERE RUN_CNTL_ID = :1", &RUN_CNTL_ID);
Else
   MessageBox(0, "", 10662, 280, "No Processing", "Purchase Order", &BU, &PO_ID);
End-If;
/* This is where it all ENDS !!!! HOPEFULLY !!!!*/


/* Local vars */
Local string &lineFeed = Char(10);
Local array of string &csvLines, &dataLine;
Local XmlDoc &inDoc;
Local Message &theMessage;
Local Rowset &theMessageRS;
Local Record &rqstRec;
Local string &theData;

/* Grab incoming XML */
&inDoc = %TransformData.XmlDoc;

Local string &s = &inDoc.GenXmlString();

/* Remember the incoming data */
&theData = &inDoc.DocumentElement.GetChildNode(1).NodeValue;

/* Split the data by linefeeds */
&csvLines = Split(&theData, &lineFeed);

/* Create the SENDMASTER_RQST message object */
&theMessage = CreateMessage(Message.SENDMASTER_RQST);

/* Get the rowset */
&theMessageRS = &theMessage.GetRowset();

/* Loop through the lines and create the records */
For &i = 1 To &csvLines.Len
   
   /* Insert a row */
   &theMessageRS.InsertRow(&i);
   
   /* Get the Sendmaster request record */
   &rqstRec = &theMessageRS.GetRow(&i).GetRecord(Record.SENDMASTER_RQST);
   
   /* Split the data up by the commas */
   &dataLine = Split(&csvLines [&i], ",");
   
   /* Populate a dummy value in the message, to allow for the full XML to be retrieved */
   &rqstRec.GetField(Field.SENDMASTER_ACCT_ID).Value = &dataLine [1];
   &rqstRec.GetField(Field.SENDMASTER_NAME).Value = &dataLine [2];
   &rqstRec.GetField(Field.SENDMASTER_ADDRESS).Value = &dataLine [3];
End-For;

/* Get the XML Doc */
Local string &theXML = &theMessage.GenXMLString();

/* Load skeleton XML into XMLDoc */
Local boolean &dummy = &inDoc.ParseXmlString(&theXML);


Local Message &MSG;
Local string &str;


&MSG = GetMessage();
&str = &MSG.GenXMLString();
ReturnToServer(%Message_Done);


Local Message &MSG;
Local boolean &yo;
Local string &filename, &filepath;
Global string &NEW_PO_ID;
Local Rowset &RS;


/* Get the respective message */
&MSG = GetMessage();
/* Override Properties */
&yo = &MSG.IBInfo.LoadConnectorPropFromNode("PSFT_FILEOUTPUT");
/* Needs to be mentioned */
&MSG.IBInfo.ConnectorOverride = True;
/* User Defined FileName */
&UPD_DATE = DatePart(%Datetime) | " " | Substitute(Substring(String(TimePart(%Datetime)), 1, 8), ".", ":");
rem &filename = "PP_THE_GREAT_" | &UPD_DATE | ".xml";
rem &NEW_PO_ID = &MSG.GetQueryString("PO_ID");
&filename = "PO_DISP_" | &NEW_PO_ID | "_" | %Datetime | ".xml";
/* User Defined FilePath */
&filepath = "C:\temp\NEW PO";
/* Overrite Selected/All properties */
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FileName", &filename, %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FilePath", &filepath, %Property);
rem &pp = ConnectorRequest(&MSG); /* Not required */
rem ReturnToServer(&MSG); /* Not required */


<*
Local Rowset &RS;
Local Message &MSG;
Local boolean &yo;
Local string &filename, &filepath, &PO_ID1;

/* Get the respective message */
&MSG = GetMessage();
&RS = &MSG.GetRowset();
/*
For &po1 = 1 To &RS.ActiveRowCount
   &PO_ID1 = &RS(&po1).GetRecord(Record.PO_HDR_EVW11).GetField(Field.PO_ID).Value;
   Local File &JUSTIN = GetFile("C:\temp\POPOPOP", "W", %FilePath_Absolute);
   &JUSTIN.WriteLine("PO_ID Being Processed " | &PO_ID1);
   &JUSTIN.Close();
End-For;
*/
rem &PO_ID1 = &MSG.GetQueryString("PO_ID");
/* Override Properties */
&yo = &MSG.IBInfo.LoadConnectorPropFromNode("PSFT_FILEOUTPUT");
/* Needs to be mentioned */
&MSG.IBInfo.ConnectorOverride = True;
/* User Defined FileName */
&UPD_DATE = DatePart(%Datetime) | " " | Substitute(Substring(String(TimePart(%Datetime)), 1, 8), ".", ":");
rem &filename = "PP_THE_GREAT_" | &UPD_DATE | ".xml";
&filename = "NEW_PO_" | &PO_ID1 | "_" | %Datetime | ".xml";
&filepath = "C:\temp\NEW PO";
/* Overrite Selected/All properties */
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FileName", &filename, %Property);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("FilePath", &filepath, %Property);
rem &pp = ConnectorRequest(&MSG); /* Not required */
rem ReturnToServer(&MSG); /* Not required */
*>


/************************** $Qwest$ **********************************
ITR#:     QR3IPO005
NAME:     Prashant Prakash
DATE:     04/06/2006
DESCR:    Custom Subcription PeopleCode to Store Remedy Ticket for the 
	      Business Unit PO_ID combination

/*********************************************************************/

/******* Start QR3IPO005 *******/

Local Message &MSG;
Local Rowset &REMEDY_RS;
Local Row &REM_RESP_ROW;
Local Record &REM_RESP_NO, &REM_RESP_REC;
Local number &REM_NO;
Local XmlDoc &xmlDoc, &xmlDoc1;
Local string &TSR, &NON_BU, &BU, &PO_ID, &REM_TKT_NO;
Local File &theFile, &LOGFILE;

/* Read the message */
&MSG = GetMessage();
/* Get File*/
&LOGFILE = GetFile("C:\temp\ERROR_" | %Datetime | ".out", "W", %FilePath_Absolute);
/*
&xmlDoc = GetMessageXmlDoc();
If (&MSG = Null) Then
   Exit (1);
End-If;

&theFile = GetFile("C:\temp\REMRESP_" | %Datetime | ".xml", "W", %FilePath_Absolute);
&LOGFILE = GetFile("C:\temp\ERROR_" | %Datetime | ".out", "W", %FilePath_Absolute);
&TSR = &xmlDoc.GenXmlString();
Local boolean &bool1 = &xmlDoc.ParseXmlString(&TSR);
&theFile.WriteString(&xmlDoc.GenXmlString());
&theFile.Close();
Local Rowset &rs = CreateRowset(Record.Z_PO_HDR_PPM);
Local Boolean &yo = &xmlDoc.CopyToRowset(&rs, "Z_REMEDY_RESPONSE_MSG", "VERSION_1");
*/

/* Subscription Process starts */

&REMEDY_RS = &MSG.GetRowset();

&REM_RESP_NO = CreateRecord(Record.Z_PO_HDR_PPM);
For &REM_NO = 1 To &REMEDY_RS.ActiveRowCount;
   &REM_RESP_ROW = &REMEDY_RS.GetRow(&REM_NO);
   &REM_RESP_REC = &REM_RESP_ROW.GetRecord(Record.Z_REM_RESP_E_VW);
   &BU = &REMEDY_RS.GetRow(&REM_NO).Z_REM_RESP_E_VW.BUSINESS_UNIT.Value;
   &PO_ID = &REMEDY_RS.GetRow(&REM_NO).Z_REM_RESP_E_VW.PO_ID.Value;
   &REM_TKT_NO = &REMEDY_RS.GetRow(&REM_NO).Z_REM_RESP_E_VW.COMMENTS50.Value;
   If None(&BU) Then
      &LOGFILE.WriteLine("Not a valid Business Unit");
   Else
      SQLExec("Select BUSINESS_UNIT from PS_Z_BU_PM_TBL Where Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", &BU, &NON_BU);
      If All(&NON_BU) Then
         If None(&PO_ID) Then
            &LOGFILE.WriteLine("Not a valid PO_ID");
         Else
            If All(&REM_TKT_NO) Then
               &REM_RESP_REC.CopyFieldsTo(&REM_RESP_NO);
               &LOGFILE.WriteLine("Update PS_Z_PO_HDR_PPM as " | &REM_TKT_NO);
               rem SQLExec("Update PS_Z_PO_HDR_PPM SET COMMENTS50 = :1 Where BUSINESS_UNIT = :2 AND PO_ID = :3", &REM_TKT_NO, &BU, &PO_ID);
               &REM_RESP_NO.Update();
            End-If;
         End-If;
      Else
         &LOGFILE.WriteLine("Retail Business Unit. Exit Processing");
         Break;
      End-If;
   End-If;
   &LOGFILE.WriteLine("Business Unit " | &BU);
   &LOGFILE.WriteLine("Purchase Order ID " | &PO_ID);
   &LOGFILE.WriteLine("Remedy Ticket Number " | &REM_TKT_NO);
End-For;
&LOGFILE.Close();
/******* End QR3IPO005 *******/

%P(1)PROCESS_INSTANCE,%P(1)BUSINESS_UNIT,%P(1)PO_ID,%P(1)LINE_NBR,%P(1)SCHED_NBR,%P(1)CANCEL_STATUS, %P(1)CHANGE_STATUS,%P(1)CHNG_ORD_SEQ ,%P(1)PRICE_PO,%P(1)CURRENCY_CD,%P(1)QTY_PO,%P(1)ZERO_PRICE_IND, %P(1)SHIP_DATE,%P(1)DUE_DT,%P(1)DUE_TIME ,%P(1)SHIPTO_SETID,%P(1)SHIPTO_ID,%P(1)DESCR,%P(1)ADDRESS1_SHIPTO, %P(1)ADDRESS2_SHIPTO,%P(1)ADDRESS3_SHIPTO ,%P(1)ADDRESS4_SHIPTO,%P(1)CITY_SHIPTO,%P(1)STATE_SHIPTO, %P(1)POSTAL_SHIPTO,%P(1)COUNTRY_SHIPTO ,%P(1)MERCHANDISE_AMT,%P(1)SUT_APPLICABILITY,%P(1)FREIGHT_TERMS, %P(1)SHIP_TYPE_ID

%Insert INTO %Table(Z_HEADER_TAO) ( %Sql (Z_PO_HDR_SQL)) 
 SELECT HDR.BUSINESS_UNIT 
 , FS.DESCR 
 , HDR.PO_ID 
 , HDR.CHNG_ORD_BATCH 
 , HDR.CHNG_ORD_SEQ 
 , HDR.CHANGE_STATUS 
 , PPM.ATR_VALUE 
 , PPM.CONV_CALENDAR_ID 
 , HDR.ORIGIN 
 , HDR.PO_STATUS 
 , HDR.RECV_STATUS 
 , HDR.DISP_METHOD 
 , HDR.PO_DT 
 , PPM.CHG_INTEREST 
 , HDR.PO_REF 
 , HDR.BILL_LOCATION 
 , LOC.ADDRESS1_BILL 
 , LOC.ADDRESS2_BILL 
 , LOC.ADDRESS3_BILL 
 , LOC.ADDRESS4_BILL 
 , LOC.CITY_BILL 
 , LOC.STATE_BILL 
 , LOC.POSTAL_BILL 
 , LOC.COUNTRY_BILL 
 , HDR.VENDOR_SETID 
 , HDR.VENDOR_ID 
 , HDR.VNDR_LOC 
 , VEN.NAME1 
 , VNDADD.ADDRESS1_VNDR 
 , VNDADD.ADDRESS2_VNDR 
 , VNDADD.ADDRESS3_VNDR 
 , VNDADD.ADDRESS4_VNDR 
 , VNDADD.CITY_VNDR 
 , VNDADD.STATE_VNDR 
 , VNDADD.POSTAL_VNDR 
 , VNDADD.COUNTRY_VNDR 
 , NET.DSC_TRMS_AVAIL_FLG 
 , DSCNT.DSCNT_TRMS_PERCENT 
 , DSCNT.TERMS_ADJUST_DAYS 
 , TRMS.TMG_DAY_INCR_VAL 
 , HDR.BUYER_ID 
 , PPM.BU_VALUEFIELDNAME 
 , MNET.ARCHIVE_FILENAME 
 , MNET.APPR_ACTIVITYNAME 
 , MNET.CRT_LBL_FILE_NAME 
 , MNET.EOCF_ACTION_NAME 
 , HDR.OPRID_ENTERED_BY 
 , HDR.ENTERED_DT 
 , HDR.OPRID_APPROVED_BY 
 , HDR.APPROVAL_DT 
 , HDR.OPRID_MODIFIED_BY 
 , HDR.LAST_DTTM_UPDATE 
 , A.PO_AMT_TTL 
 , PM.STD_COMMENT_TYPE 
 , PM.STD_COMMENT_ID 
  FROM PS_Z_PO_TEMP A 
  , PS_PO_HDR HDR 
  , PS_BUS_UNIT_TBL_FS FS 
  , PS_BUS_UNIT_TBL_PM PM 
  , PS_Z_PO_HDR_PPM PPM 
  , PS_LOCATION_TBL LOC 
  , PS_VENDOR VEN 
  , PS_VENDOR_ADDR VNDADD 
  , PS_Z_MNET_TBL MNET 
  , PS_PYMT_TRMS_NET NET 
  , PS_PYMT_TRMS_DSCNT DSCNT 
  , PS_PYMT_TRMS_TIME TRMS 
 WHERE A.PROCESS_INSTANCE = %Bind(PROCESS_INSTANCE) 
   AND HDR.BUSINESS_UNIT = %Bind(BUSINESS_UNIT) 
   AND HDR.PO_ID = %Bind(PO_ID) 
   AND HDR.BUSINESS_UNIT = FS.BUSINESS_UNIT 
   AND HDR.BUSINESS_UNIT = PM.BUSINESS_UNIT 
   AND HDR.BUSINESS_UNIT = PPM.BUSINESS_UNIT 
   AND HDR.PO_ID = PPM.PO_ID 
   AND HDR.BILL_LOCATION = LOC.LOCATION 
   AND LOC.SETID IN ( 
 SELECT Z.SETID 
  FROM PS_SET_CNTRL_REC Z 
 WHERE Z.RECNAME = 'LOCATION_TBL' 
   AND Z.SETCNTRLVALUE = HDR.BUSINESS_UNIT) 
   AND HDR.VENDOR_ID = VEN.VENDOR_ID 
   AND VEN.SETID IN ( 
 SELECT Y.SETID 
  FROM PS_SET_CNTRL_REC Y 
 WHERE Y.RECNAME = 'VENDOR' 
   AND Y.SETCNTRLVALUE = HDR.BUSINESS_UNIT) 
   AND VEN.SETID = VNDADD.SETID 
   AND VEN.VENDOR_ID = VNDADD.VENDOR_ID 
   AND HDR.BUYER_ID = MNET.Z_CUID 
   AND HDR.PYMNT_TERMS_CD = NET.PYMNT_TERMS_CD 
   AND NET.SETID IN ( 
 SELECT X.SETID 
  FROM PS_SET_CNTRL_REC X 
 WHERE X.RECNAME = 'PYMT_TRMS_NET' 
   AND X.SETCNTRLVALUE = HDR.BUSINESS_UNIT) 
   AND NET.SETID = DSCNT.SETID 
   AND NET.SETID = TRMS.SETID 
   AND NET.PYMNT_TERMS_CD = DSCNT.PYMNT_TERMS_CD 
   AND NET.NET_TRMS_TIME_ID = TRMS.PAY_TRMS_TIME_ID

   INSERT INTO %Table(Z_HDR_T_TAO) ( %Sql (Z_PO_HDR_T_SQL)) 
 SELECT T.PROCESS_INSTANCE 
 , HDR.BUSINESS_UNIT 
 , FS.DESCR 
 , HDR.PO_ID 
 , HDR.CHNG_ORD_BATCH 
 , HDR.CHNG_ORD_SEQ 
 , HDR.CHANGE_STATUS 
 , PPM.Z_ORD_TYPE 
 , PPM.Z_JOB_TYPE 
 , HDR.ORIGIN 
 , HDR.PO_STATUS 
 , HDR.RECV_STATUS 
 , HDR.DISP_METHOD 
 , %DateOut(HDR.PO_DT) 
 , PPM.Z_BVAPP_NUMBER 
 , HDR.PO_REF 
 , HDR.BILL_LOCATION 
 , HDR.VENDOR_SETID 
 , HDR.VENDOR_ID 
 , HDR.VNDR_LOC 
 , HDR.BUYER_ID 
 , PPM.Z_REQUESTOR_ID 
 , MNET.Z_FIRST_NAME 
 , MNET.MIDDLE_NAME 
 , MNET.Z_LAST_NAME 
 , MNET.Z_SMTP_ADDR 
 , HDR.OPRID_ENTERED_BY 
 , %DateOut(HDR.ENTERED_DT) 
 , HDR.OPRID_APPROVED_BY 
 , %DateOut(HDR.APPROVAL_DT) 
 , HDR.OPRID_MODIFIED_BY 
 , %DateTimeOut(HDR.LAST_DTTM_UPDATE) 
 , A.PO_AMT_TTL 
 , PM.STD_COMMENT_TYPE 
 , PM.STD_COMMENT_ID 
  FROM %Table(Z_HDR_TAO) T 
  , PS_Z_PO_TEMP A 
  , PS_PO_HDR HDR 
  , PS_BUS_UNIT_TBL_FS FS 
  , PS_BUS_UNIT_TBL_PM PM 
  , PS_Z_PO_HDR_PPM PPM 
  , PS_Z_MNET_TBL MNET 
 WHERE A.PROCESS_INSTANCE = T.PROCESS_INSTANCE 
   AND HDR.BUSINESS_UNIT = T.BUSINESS_UNIT 
   AND HDR.PO_ID = T.PO_ID 
   AND FS.DESCR = ( 
 SELECT DESCR 
  FROM PS_BUS_UNIT_TBL_FS 
 WHERE BUSINESS_UNIT = HDR.BUSINESS_UNIT) 
   AND PM.STD_COMMENT_TYPE = ( 
 SELECT STD_COMMENT_TYPE 
  FROM PS_BUS_UNIT_TBL_PM 
 WHERE BUSINESS_UNIT = HDR.BUSINESS_UNIT) 
   AND PM.STD_COMMENT_ID = ( 
 SELECT STD_COMMENT_ID 
  FROM PS_BUS_UNIT_TBL_PM 
 WHERE BUSINESS_UNIT = HDR.BUSINESS_UNIT) 
   AND HDR.BUSINESS_UNIT = PPM.BUSINESS_UNIT 
   AND HDR.PO_ID = PPM.PO_ID 
   AND PPM.Z_REQUESTOR_ID = MNET.Z_CUID


   INSERT INTO %Table(Z_HDR_TT_TAO) ( %Sql (Z_PO_HDR_TT_SQL)) 
 SELECT T.PROCESS_INSTANCE 
 , HDR.BUSINESS_UNIT 
 , HDR.PO_ID 
 , HDR.BILL_LOCATION 
 , LOC.ADDRESS1 
 , LOC.ADDRESS2 
 , LOC.ADDRESS3 
 , LOC.ADDRESS4 
 , LOC.CITY 
 , LOC.STATE 
 , LOC.POSTAL 
 , LOC.COUNTRY 
 , HDR.VENDOR_SETID 
 , HDR.VENDOR_ID 
 , HDR.VNDR_LOC 
 , VEN.NAME1 
 , VNDADD.ADDRESS1 
 , VNDADD.ADDRESS2 
 , VNDADD.ADDRESS3 
 , VNDADD.ADDRESS4 
 , VNDADD.CITY 
 , VNDADD.STATE 
 , VNDADD.POSTAL 
 , VNDADD.COUNTRY 
  FROM %Table(Z_HDR_TAO) T 
  , PS_Z_PO_TEMP A 
  , PS_PO_HDR HDR 
  , PS_LOCATION_TBL LOC 
  , PS_VENDOR VEN 
  , PS_VENDOR_ADDR VNDADD 
 WHERE A.PROCESS_INSTANCE = T.PROCESS_INSTANCE 
   AND HDR.BUSINESS_UNIT = T.BUSINESS_UNIT 
   AND HDR.PO_ID = T.PO_ID 
   AND HDR.BILL_LOCATION = LOC.LOCATION 
   AND LOC.SETID IN ( 
 SELECT Z.SETID 
  FROM PS_SET_CNTRL_REC Z 
 WHERE Z.RECNAME = 'LOCATION_TBL' 
   AND Z.SETCNTRLVALUE = HDR.BUSINESS_UNIT) 
   AND HDR.VENDOR_ID = VEN.VENDOR_ID 
   AND VEN.SETID IN ( 
 SELECT Y.SETID 
  FROM PS_SET_CNTRL_REC Y 
 WHERE Y.RECNAME = 'VENDOR' 
   AND Y.SETCNTRLVALUE = HDR.BUSINESS_UNIT) 
   AND VEN.SETID = VNDADD.SETID 
   AND VEN.VENDOR_ID = VNDADD.VENDOR_ID 
   AND VNDADD.SETID IN ( 
 SELECT YW.SETID 
  FROM PS_SET_CNTRL_REC YW 
 WHERE YW.RECNAME = 'VENDOR_ADDR' 
   AND YW.SETCNTRLVALUE = HDR.BUSINESS_UNIT) 
   AND VNDADD.SETID = VEN.SETID 
   AND VNDADD.VENDOR_ID = VEN.VENDOR_ID 
   AND HDR.ADDRESS_SEQ_NUM = VNDADD.ADDRESS_SEQ_NUM 
   AND VNDADD.EFFDT IN ( 
 SELECT MAX(X.EFFDT) 
  FROM PS_VENDOR_ADDR X 
 WHERE X.SETID = VNDADD.SETID 
   AND X.VENDOR_ID = VNDADD.VENDOR_ID 
   AND X.EFF_STATUS = 'A' 
   AND X.ADDRESS_SEQ_NUM = HDR.ADDRESS_SEQ_NUM 
   AND X.EFFDT <= %CurrentDateIn)


   INSERT INTO %Table (Z_HDR_TAO) (%Sql (Z_PO_SQL)) 
 SELECT TMP.PROCESS_INSTANCE 
 , TMP.BUSINESS_UNIT 
 , TMP.PO_ID 
 , TMP.DISP_METHOD 
 , TMP.PO_AMT_TTL 
 , TMP.Z_PUB_FLAG 
 , TMP.NUM_OF_COPIES 
  FROM PS_Z_PO_TEMP TMP 
 WHERE TMP.Z_PUB_FLAG <> 'P'

 %P(1)PROCESS_INSTANCE,%P(1)BUSINESS_UNIT,%P(1)PO_ID,%P(1)LINE_NBR,%P(1)SCHED_NBR,%P(1)CANCEL_STATUS, %P(1)CHANGE_STATUS,%P(1)CHNG_ORD_SEQ ,%P(1)PRICE_PO,%P(1)CURRENCY_CD,%P(1)QTY_PO,%P(1)ZERO_PRICE_IND, %P(1)SHIP_DATE,%P(1)DUE_DT,%P(1)DUE_TIME ,%P(1)SHIPTO_SETID,%P(1)SHIPTO_ID,%P(1)DESCR,%P(1)ADDRESS1_SHIPTO, %P(1)ADDRESS2_SHIPTO,%P(1)ADDRESS3_SHIPTO ,%P(1)ADDRESS4_SHIPTO,%P(1)CITY_SHIPTO,%P(1)STATE_SHIPTO, %P(1)POSTAL_SHIPTO,%P(1)COUNTRY_SHIPTO ,%P(1)MERCHANDISE_AMT,%P(1)SUT_APPLICABILITY,%P(1)FREIGHT_TERMS, %P(1)SHIP_TYPE_ID

 INSERT INTO %Table(Z_LINE_TAO) ( %Sql (Z_PO_LINE_SQL)) 
 SELECT HDR.PROCESS_INSTANCE 
 , LIN.BUSINESS_UNIT 
 , LIN.PO_ID 
 , LIN.LINE_NBR 
 , LIN.CANCEL_STATUS 
 , LIN.CHANGE_STATUS 
 , LIN.CHNG_ORD_SEQ 
 , LIN.ITM_SETID 
 , LIN.INV_ITEM_ID 
 , LIN.DESCR254_MIXED 
 , LIN.ITM_ID_VNDR 
 , LIN.VNDR_CATALOG_ID 
 , LIN.CATEGORY_ID 
 , CAT.CATEGORY_CD 
 , CAT.DESCR 
 , LIN.UNIT_OF_MEASURE 
 , LIN.PRICE_DT_TYPE 
 , LIN.MFG_ID 
 , LIN.MFG_ITM_ID 
 , IAT.Z_ICC_CODE_CD 
 , IAT.Z_AIC_CODE_FLD 
 , IAT.Z_DEVICE_IND 
 , IAT.Z_REMEDY_RQST_FLG 
 , LIN.CNTRCT_SETID 
 , LIN.CNTRCT_ID 
 , LIN.CNTRCT_LINE_NBR 
 , LIN.RECV_REQ 
 , LPP.Z_QUOTE_NUMBER 
  FROM PS_PO_LINE LIN 
  , %Table (Z_HDR_TAO) HDR 
  , PS_Z_ITEM_ATT_TBL IAT 
  , PS_Z_PO_LINE_PPM LPP 
  , PS_ITM_CAT_TBL CAT 
 WHERE LIN.BUSINESS_UNIT = HDR.BUSINESS_UNIT 
   AND LIN.PO_ID = HDR.PO_ID 
   AND LIN.BUSINESS_UNIT = LPP.BUSINESS_UNIT 
   AND LIN.PO_ID = LPP.PO_ID 
   AND LIN.LINE_NBR = LPP.LINE_NBR 
   AND CAT.SETID IN ( 
 SELECT YY.SETID 
  FROM PS_SET_CNTRL_REC YY 
 WHERE YY.RECNAME = 'ITM_CAT_TBL' 
   AND YY.SETCNTRLVALUE = LIN.BUSINESS_UNIT) 
   AND LIN.CATEGORY_ID = CAT.CATEGORY_ID 
   AND CAT.SETID = IAT.SETID

 %P(1)PROCESS_INSTANCE,%P(1)BUSINESS_UNIT,%P(1)PO_ID,%P(1)LINE_NBR,%P(1)SCHED_NBR,%P(1)CANCEL_STATUS, %P(1)CHANGE_STATUS,%P(1)CHNG_ORD_SEQ ,%P(1)PRICE_PO,%P(1)CURRENCY_CD,%P(1)QTY_PO,%P(1)ZERO_PRICE_IND, %P(1)SHIP_DATE,%P(1)DUE_DT,%P(1)DUE_TIME ,%P(1)SHIPTO_SETID,%P(1)SHIPTO_ID,%P(1)DESCR,%P(1)ADDRESS1_SHIPTO, %P(1)ADDRESS2_SHIPTO,%P(1)ADDRESS3_SHIPTO ,%P(1)ADDRESS4_SHIPTO,%P(1)CITY_SHIPTO,%P(1)STATE_SHIPTO, %P(1)POSTAL_SHIPTO,%P(1)COUNTRY_SHIPTO ,%P(1)MERCHANDISE_AMT,%P(1)SUT_APPLICABILITY,%P(1)FREIGHT_TERMS, %P(1)SHIP_TYPE_ID

   INSERT INTO %Table(Z_SCHED_TAO) ( %Sql (Z_PO_SCHED_SQL)) 
 SELECT HDR.PROCESS_INSTANCE 
 , SHP.BUSINESS_UNIT 
 , SHP.PO_ID 
 , SHP.LINE_NBR 
 , SHP.SCHED_NBR 
 , SHP.CANCEL_STATUS 
 , SHP.CHANGE_STATUS 
 , SHP.CHNG_ORD_SEQ 
 , SHP.PRICE_PO 
 , SHP.CURRENCY_CD 
 , SHP.QTY_PO 
 , SHP.ZERO_PRICE_IND 
 , %DateOut(SHP.SHIP_DATE) 
 , %DateOut(SHP.DUE_DT) 
 , SHP.DUE_TIME 
 , SHP.SHIPTO_SETID 
 , SHP.SHIPTO_ID 
 , STO.DESCR 
 , LOC.ADDRESS1 
 , LOC.ADDRESS2 
 , LOC.ADDRESS3 
 , LOC.ADDRESS4 
 , LOC.CITY 
 , LOC.STATE 
 , LOC.POSTAL 
 , LOC.COUNTRY 
 , SHP.MERCHANDISE_AMT 
 , SHP.SUT_APPLICABILITY 
 , SHP.FREIGHT_TERMS 
 , SHP.SHIP_TYPE_ID 
  FROM PS_PO_LINE_SHIP SHP 
  , %Table (Z_HDR_TAO) HDR 
  , %Table (Z_LINE_TAO) LIN 
  , PS_LOCATION_TBL LOC 
  , PS_SHIPTO_TBL STO 
 WHERE SHP.BUSINESS_UNIT = HDR.BUSINESS_UNIT 
   AND SHP.PO_ID = HDR.PO_ID 
   AND SHP.LINE_NBR = LIN.LINE_NBR 
   AND LIN.PROCESS_INSTANCE = HDR.PROCESS_INSTANCE 
   AND LOC.SETID IN ( 
 SELECT AZ.SETID 
  FROM PS_SET_CNTRL_REC AZ 
 WHERE AZ.RECNAME = 'LOCATION_TBL' 
   AND AZ.SETCNTRLVALUE = SHP.BUSINESS_UNIT) 
   AND STO.SETID IN ( 
 SELECT AY.SETID 
  FROM PS_SET_CNTRL_REC AY 
 WHERE AY.RECNAME = 'SHIPTO_TBL' 
   AND AY.SETCNTRLVALUE = SHP.BUSINESS_UNIT) 
   AND SHP.SHIPTO_ID = STO.SHIPTO_ID 
   AND SHP.SHIPTO_SETID = LOC.SETID 
   AND HDR.PROCESS_INSTANCE NOT IN ( 
 SELECT PROCESS_INSTANCE 
  FROM %Table(Z_SCHED_TAO))


  %SelectInit (PROCESS_INST_STG, PO_ID, DISP_METHOD, PO_AMT_TTL, NUM_OF_COPIES) 
 SELECT PROCESS_INSTANCE 
 , PO_ID 
 , DISP_METHOD 
 , PO_AMT_TTL 
 , NUM_OF_COPIES 
  FROM %Table (Z_HDR_TAO) 
 WHERE BUSINESS_UNIT = %Bind(BUSINESS_UNIT) %Bind(WHERE_CLAUSE, NOQUOTES) 
  ORDER BY PO_ID, PROCESS_INSTANCE


  SELECT HDR.BUSINESS_UNIT 
 , HDR.PO_ID 
 , POL.LINE_NBR 
 , POLSHP.SCHED_NBR 
 , POLSHP.CANCEL_STATUS 
 , POLSHP.CHANGE_STATUS 
 , POLSHP.CHNG_ORD_SEQ 
 , POLSHP.PRICE_PO 
 , POLSHP.CURRENCY_CD 
 , POLSHP.SHIPTO_SETID 
 , POLSHP.SHIPTO_ID 
 , POLSHP.QTY_PO 
 , POLSHP.ZERO_PRICE_IND 
 , POLSHP.MERCHANDISE_AMT 
 , POLSHP.SUT_APPLICABILITY 
 , POLSHP.FREIGHT_TERMS 
 , POLSHP.SHIP_TYPE_ID 
 , POLSHP.SHIP_DATE 
 , POLSHP.DUE_DT 
 , POLSHP.DUE_TIME 
 , LOC.ADDRESS1 
 , LOC.ADDRESS2 
 , LOC.ADDRESS3 
 , LOC.ADDRESS4 
 , LOC.CITY 
 , LOC.STATE 
 , LOC.POSTAL 
 , LOC.COUNTRY 
 , SHPTBL.DESCR 
  FROM PS_PO_LINE_SHIP POLSHP 
  , PS_PO_HDR HDR 
  , PS_PO_LINE POL 
  , PS_LOCATION_TBL LOC 
  , PS_SHIPTO_TBL SHPTBL 
 WHERE HDR.BUSINESS_UNIT = POL.BUSINESS_UNIT 
   AND HDR.PO_ID = POL.PO_ID 
   AND HDR.BUSINESS_UNIT = POLSHP.BUSINESS_UNIT 
   AND HDR.PO_ID = POLSHP.PO_ID 
   AND POL.LINE_NBR = POLSHP.LINE_NBR 
   AND SHPTBL.SETID IN ( 
 SELECT TBL.SETID 
  FROM PS_SET_CNTRL_REC TBL 
 WHERE TBL.RECNAME = 'SHIPTO_TBL' 
   AND TBL.SETCNTRLVALUE = POLSHP.BUSINESS_UNIT) 
   AND LOC.SETID IN ( 
 SELECT LC.SETID 
  FROM PS_SET_CNTRL_REC LC 
 WHERE LC.RECNAME = 'LOCATION_TBL' 
   AND LC.SETCNTRLVALUE = POLSHP.BUSINESS_UNIT) 
   AND POLSHP.SHIPTO_ID = SHPTBL.SHIPTO_ID 
   AND POLSHP.SHIPTO_ID = LOC.LOCATION 
   AND POLSHP.SHIPTO_SETID = SHPTBL.SETID 
   AND LOC.EFFDT = ( 
 SELECT MAX(LT.EFFDT) 
  FROM PS_LOCATION_TBL LT 
 WHERE LT.SETID = LOC.SETID 
   AND LT.LOCATION = LOC.LOCATION ) 
   AND LOC.EFF_STATUS = 'A' 
   AND SHPTBL.EFFDT = ( 
 SELECT MAX(ST.EFFDT) 
  FROM PS_SHIPTO_TBL ST 
 WHERE ST.SETID = SHPTBL.SETID 
   AND ST.SHIPTO_ID = SHPTBL.SHIPTO_ID) 
   AND SHPTBL.EFF_STATUS = 'A'


<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:tns="http://www.oorsprong.org/websamples.countryinfo"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
     <soap:Body
      xmlns:m="http://qwest.com/worklist">
       
	 </soap:Body>
  </soap:Envelope>

  %P(1)PROCESS_INSTANCE,%P(1)BUSINESS_UNIT,%P(1)PO_ID,%P(1)LINE_NBR,%P(1)SCHED_NBR,%P(1)CANCEL_STATUS, %P(1)CHANGE_STATUS,%P(1)CHNG_ORD_SEQ ,%P(1)PRICE_PO,%P(1)CURRENCY_CD,%P(1)QTY_PO,%P(1)ZERO_PRICE_IND, %P(1)SHIP_DATE,%P(1)DUE_DT,%P(1)DUE_TIME ,%P(1)SHIPTO_SETID,%P(1)SHIPTO_ID,%P(1)DESCR,%P(1)ADDRESS1_SHIPTO, %P(1)ADDRESS2_SHIPTO,%P(1)ADDRESS3_SHIPTO ,%P(1)ADDRESS4_SHIPTO,%P(1)CITY_SHIPTO,%P(1)STATE_SHIPTO, %P(1)POSTAL_SHIPTO,%P(1)COUNTRY_SHIPTO ,%P(1)MERCHANDISE_AMT,%P(1)SUT_APPLICABILITY,%P(1)FREIGHT_TERMS, %P(1)SHIP_TYPE_ID



  If (RUN_CNTL_PUR.B2B_DISP.Value = "Y") Then
   RUN_CNTL_PUR.ORB_DISP = "N";
   RUN_CNTL_PUR.RMD_DISP = "N";
   RUN_CNTL_PUR.EDI_DISP = "N";
   RUN_CNTL_PUR.FAX_DISP = "N";
   RUN_CNTL_PUR.PHONE_DISP = "N";
   RUN_CNTL_PUR.PRINT_DISP = "N";
   RUN_CNTL_PUR.EMAIL_DISP = "N";
   Gray(RUN_CNTL_PUR.ORB_DISP);
   Gray(RUN_CNTL_PUR.RMD_DISP);
   Gray(RUN_CNTL_PUR.EDI_DISP);
   Gray(RUN_CNTL_PUR.FAX_DISP);
   Gray(RUN_CNTL_PUR.PHONE_DISP);
   Gray(RUN_CNTL_PUR.PRINT_DISP);
   Gray(RUN_CNTL_PUR.EMAIL_DISP);
Else
   UnGray(RUN_CNTL_PUR.ORB_DISP);
   UnGray(RUN_CNTL_PUR.RMD_DISP);
   UnGray(RUN_CNTL_PUR.EDI_DISP);
   UnGray(RUN_CNTL_PUR.FAX_DISP);
   UnGray(RUN_CNTL_PUR.PHONE_DISP);
   UnGray(RUN_CNTL_PUR.PRINT_DISP);
   UnGray(RUN_CNTL_PUR.EMAIL_DISP);
   RUN_CNTL_PUR.ORB_DISP = "Y";
   RUN_CNTL_PUR.RMD_DISP = "Y";
   RUN_CNTL_PUR.EDI_DISP = "Y";
   RUN_CNTL_PUR.FAX_DISP = "Y";
   RUN_CNTL_PUR.PHONE_DISP = "Y";
   RUN_CNTL_PUR.PRINT_DISP = "Y";
   RUN_CNTL_PUR.EMAIL_DISP = "Y";
End-If;



Local Message &MSG;
Local Message &response;

Component string &probid;
Component string &isSync;
Component string &procinst;
Local integer &nInst;
Local string &url;

Local Rowset &rs;
Local Row &row;
Local Record &rec;

Local string &stName;
Local integer &stVal;

&MSG = CreateMessage(Message.OPT_CALL);
&rs = &MSG.GetRowset();

&row = &rs.GetRow(1);
&rec = &row.GetRecord(Record.PT_OPTPARMS);
&rec.PARMKEY.Value = "OPTCMD";
&rec.VALUE.Value = "CREATE";

&rs.InsertRow(1);
&rec = &rs.GetRow(2).PT_OPTPARMS;
&rec.PARMKEY.Value = "PROBINST";
&rec.VALUE.Value = "FEMALE1";
&probid = "FEMALE1";

&rs.InsertRow(2);
&rec = &rs.GetRow(3).PT_OPTPARMS;
&rec.PARMKEY.Value = "PROCINSTANCE";
&nInst = Record.PT_OPT_AET.PROCESS_INSTANCE.Value;
&rec.VALUE.Value = String(&nInst);
&procinst = String(&nInst); /* Need to set this for following steps? */

&rs.InsertRow(3);
&rec = &rs.GetRow(4).PT_OPTPARMS;
&rec.PARMKEY.Value = "SYNCH";
&rec.VALUE.Value = "N";
&isSync = "N";


/* If you have multiple domains are up, then you need to specify the App Server domain 
you are send to and send the request with the domain url 
Example: 
   &response = &MSG.SyncRequest(Node.QE_LOCAL, "//foo111111:9000");
*/
&response = &MSG.SyncRequest(%LocalNode, "//foo111111:9000");

If &response.ResponseStatus = 0 Then
   &stName = &response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.PARMKEY).Value;
   &stVal = Value(&response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.VALUE).Value);
   If &stName = "STATUS" And
         &stVal = %OptEng_Fail Then
      /* Check detailed msg here */
      throw CreateException(148, 2, "Can not send to OptEngine");
   End-If;
End-If;



Component string &probid;
Component string &procinst;
Local string &url = "";
Local integer &optstatus = %OptEng_Success;

/* A loop of sleeping and SyncRequest until get "OptEngine is idle" back */
While &optstatus <> 23
   &thread = GetJavaClass("java.lang.Thread");
   &thread.sleep(10000); /* 20 sec */
   
   &MSG = CreateMessage(Message.OPT_CALL);
   &rs = &MSG.GetRowset();
   
   &row = &rs.GetRow(1);
   &rec = &row.GetRecord(Record.PT_OPTPARMS);
   &rec.PARMKEY.Value = "OPTCMD";
   &rec.VALUE.Value = "CHECK_STATUS";
   
   &rs.InsertRow(1);
   &rec = &rs.GetRow(2).PT_OPTPARMS;
   &rec.PARMKEY.Value = "PROBINST";
   &rec.VALUE.Value = &probid;
   
   &rs.InsertRow(2);
   &rec = &rs.GetRow(3).PT_OPTPARMS;
   &rec.PARMKEY.Value = "PROCINSTANCE";
   &rec.VALUE.Value = &procinst;
   
   /* SyncRequest will deliver the msg to a designated app server domain based on url */
   /* Extract the URL for the domain which has problem instance loaded */
   SQLExec("select URL from PSOPTSTATUS where PROBINST=:1 AND URL NOT LIKE '%:0'", &probid, &url);
   
   If &url = "" Then
      throw CreateException(148, 2, "Can not send to OptEngine");
   End-If;
   
   /* If you have multiple domains are up, then you need to specify the App Server domain 
      you are send to and send the request with the domain url
      Turn on the the line below and comment out SyncRequest line without url specified: 
      &response = &MSG.SyncRequest(Node.QE_LOCAL, &url);
   */
   &response = &MSG.SyncRequest(%LocalNode, &url);
   
   If &response.ResponseStatus = 0 Then
      &stName = &response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.PARMKEY).Value;
      &optstatus = Value(&response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.VALUE).Value);
      If &stName = "STATUS" And
            &optstatus = %OptEng_Fail Then
         /* Check detailed msg here */
         throw CreateException(148, 2, "Can not send to OptEngine");
      End-If;
   End-If;
   
End-While;




Local Message &MSG;
Local Message &response;

Local Rowset &rs, &respRS;
Local Row &row;
Local Record &rec, &msgRec;

Component string &probid;
Component string &procinst;
Component string &isSync;
Local string &url = "";
Local integer &parmCount, &msgSet, &msgNum;

&MSG = CreateMessage(Message.OPT_CALL);
&rs = &MSG.GetRowset();

&row = &rs.GetRow(1);
&rec = &row.GetRecord(Record.PT_OPTPARMS);
&rec.PARMKEY.Value = "OPTCMD";
&rec.VALUE.Value = "RUN";

&rs.InsertRow(1);
&rec = &rs.GetRow(2).PT_OPTPARMS;
&rec.PARMKEY.Value = "PROBINST";
&rec.VALUE.Value = &probid;

&rs.InsertRow(2);
&rec = &rs.GetRow(3).PT_OPTPARMS;
&rec.PARMKEY.Value = "PROCINSTANCE";
&rec.VALUE.Value = &procinst;

&rs.InsertRow(3);
&rec = &rs.GetRow(4).PT_OPTPARMS;
&rec.PARMKEY.Value = "SYNCH";
&rec.VALUE.Value = &isSync;

&rs.InsertRow(4);
&rec = &rs.GetRow(5).PT_OPTPARMS;
&rec.PARMKEY.Value = "TRANSACTION";
&rec.VALUE.Value = "TEST_LONG_TRANS";

&rs.InsertRow(5);
&rec = &rs.GetRow(6).PT_OPTPARMS;
&rec.PARMKEY.Value = "Delay_in_Secs";
&rec.VALUE.Value = "30";

&rs.InsertRow(6);
&rec = &rs.GetRow(7).PT_OPTPARMS;
&rec.PARMKEY.Value = "Sleep0_Work1";
&rec.VALUE.Value = "0";

/* SyncRequest will carry a url */
SQLExec("select URL from PSOPTSTATUS where PROBINST=:1 AND URL NOT LIKE '%:0'", &probid, &url);
If &url = "" Then
   throw CreateException(148, 2, "Can not send to OptEngine");
End-If;

/* If you have multiple domains are up, then you need to specify the App Server domain 
      you are send to and send the request with the domain url
      Turn on the the line below and comment out SyncRequest line without url specified: 
      &response = &MSG.SyncRequest(Node.QE_LOCAL, &url);
*/
&response = &MSG.SyncRequest(%LocalNode, &url);

If &response.ResponseStatus = 0 Then
   &stName = &response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.PARMKEY).Value;
   &stVal = Value(&response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.VALUE).Value);
   
   If &stName = "STATUS" And
         &stVal = %OptEng_Fail Then
      throw CreateException(148, 2, "Can not send to OptEngine");
   End-If;
   
   /* Check Detailed msg here */
   If &isSync = "Y" And
         &stVal = %OptEng_Success Then
      
      &respRS = &response.GetRowset();
      &rowNum = &respRS.ActiveRowCount;
      For &iloop = 1 To &rowNum
         &msgRec = &respRS.GetRow(&iloop).GetRecord(Record.PT_OPTDETMSGS);
         /* If you have no message parameters */
         If (&msgRec.GetField(Field.MSGSET).Value <> 0) Then
            &msgSet = Value(&msgRec.GetField(Field.MSGSET).Value);
            &msgNum = Value(&msgRec.GetField(Field.MSGNUM).Value);
            &parm1 = &msgRec.GetField(Field.MSGPARM1).Value;
            &parm2 = &msgRec.GetField(Field.MSGPARM2).Value;
            &parm3 = &msgRec.GetField(Field.MSGPARM3).Value;
            &parm4 = &msgRec.GetField(Field.MSGPARM4).Value;
            &parm5 = &msgRec.GetField(Field.MSGPARM5).Value;
            &string = MsgGetText(&msgSet, &msgNum, "Message Not Found", &parm1, &parm2, &parm3, &parm4, &parm5);
            
         End-If;
      End-For;
      
   End-If;
   
End-If;



Component string &probid;
Component string &procinst;
Local string &url = "";
Local integer &optstatus = %OptEng_Success;

/* Change this to a loop of sleeping and SyncRequest if necessary */
While &optstatus <> 23
   
   &thread = GetJavaClass("java.lang.Thread");
   &thread.sleep(100000); /* 100 secs. Extend this if required */
   
   &MSG = CreateMessage(Message.OPT_CALL);
   &rs = &MSG.GetRowset();
   
   &row = &rs.GetRow(1);
   &rec = &row.GetRecord(Record.PT_OPTPARMS);
   &rec.PARMKEY.Value = "OPTCMD";
   &rec.VALUE.Value = "CHECK_STATUS";
   
   &rs.InsertRow(1);
   &rec = &rs.GetRow(2).PT_OPTPARMS;
   &rec.PARMKEY.Value = "PROBINST";
   &rec.VALUE.Value = &probid;
   
   &rs.InsertRow(2);
   &rec = &rs.GetRow(3).PT_OPTPARMS;
   &rec.PARMKEY.Value = "PROCINSTANCE";
   &rec.VALUE.Value = &procinst;
   
   SQLExec("select URL from PSOPTSTATUS where PROBINST=:1 AND URL NOT LIKE '%:0'", &probid, &url);
   If &url = "" Then
      throw CreateException(148, 2, "Can not send to OptEngine");
   End-If;
   
   /* If you have multiple domains are up, then you need to specify the App Server domain 
      you are send to and send the request with the domain url
      Turn on the the line below and comment out SyncRequest line without url specified: 
      &response = &MSG.SyncRequest(Node.QE_LOCAL, &url);
   */
   &response = &MSG.SyncRequest(%LocalNode, &url);
   
   If &response.ResponseStatus = 0 Then
      &stName = &response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.PARMKEY).Value;
      &optstatus = Value(&response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.VALUE).Value);
      If &stName = "STATUS" And
            &optstatus = %OptEng_Fail Then
         /* Check detailed msg here */
         throw CreateException(148, 2, "Can not send to OptEngine");
      End-If;
   End-If;
   
End-While;



/* Run SetTraceLevel(Component, Severity_level, Optional_Return_Status) */

Component string &probid;
Component string &component;
Component string &severity_level;
Local string &url = "";
Local integer &optstatus = %OptEng_Success;

/* A loop of sleeping and SyncRequest until get "OptEngine is idle" back */
While &optstatus <> 23
   &thread = GetJavaClass("java.lang.Thread");
   &thread.sleep(10000); /* 20 sec */
   
   &MSG = CreateMessage(Message.OPT_CALL);
   &rs = &MSG.GetRowset();
   
   &row = &rs.GetRow(1);
   &rec = &row.GetRecord(Record.PT_OPTPARMS);
   &rec.PARMKEY.Value = "OPTCMD";
   &rec.VALUE.Value = "SET_TRACE_LEVEL";
   
   &rs.InsertRow(1);
   &rec = &rs.GetRow(2).PT_OPTPARMS;
   &rec.PARMKEY.Value = "PROBINST";
   &rec.VALUE.Value = &probid;
   
   &rs.InsertRow(2);
   &rec = &rs.GetRow(3).PT_OPTPARMS;
   &rec.PARMKEY.Value = "COMPONENT";
   &rec.VALUE.Value = &component;
   
   &rs.InsertRow(3);
   &rec = &rs.GetRow(4).PT_OPTPARMS;
   &rec.PARMKEY.Value = "SEVERITY_LEVEL";
   &rec.VALUE.Value = &severity_level;
   
   /* SyncRequest will deliver the msg to a designated app server domain based on url */
   /* Extract the URL for the domain which has problem instance loaded */
   SQLExec("select URL from PSOPTSTATUS where PROBINST=:1 AND URL NOT LIKE '%:0'", &probid, &url);
   
   If &url = "" Then
      throw CreateException(148, 2, "Can not send to OptEngine");
   End-If;
   
   /* If you have multiple domains are up, then you need to specify the App Server domain 
      you are send to and send the request with the domain url
      Turn on the the line below and comment out SyncRequest line without url specified: 
      &response = &MSG.SyncRequest(Node.QE_LOCAL, &url);
   */
   &response = &MSG.SyncRequest(%LocalNode, &url);
   
   If &response.ResponseStatus = 0 Then
      &stName = &response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.PARMKEY).Value;
      &optstatus = Value(&response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.VALUE).Value);
      If &stName = "STATUS" And
            &optstatus = %OptEng_Fail Then
         /* Check detailed msg here */
         throw CreateException(148, 2, "Can not send to OptEngine");
      End-If;
   End-If;
   
End-While;


/* Run GetTraceLevel(Component, Optional_Return_Status) */

Component string &probid;
Component string &component;
Component string &severity_level;
Local string &url = "";
Local integer &optstatus = %OptEng_Success;

/* A loop of sleeping and SyncRequest until get "OptEngine is idle" back */
While &optstatus <> 23
   &thread = GetJavaClass("java.lang.Thread");
   &thread.sleep(10000); /* 20 sec */
   
   &MSG = CreateMessage(Message.OPT_CALL);
   &rs = &MSG.GetRowset();
   
   &row = &rs.GetRow(1);
   &rec = &row.GetRecord(Record.PT_OPTPARMS);
   &rec.PARMKEY.Value = "OPTCMD";
   &rec.VALUE.Value = "GET_TRACE_LEVEL";
   
   &rs.InsertRow(1);
   &rec = &rs.GetRow(2).PT_OPTPARMS;
   &rec.PARMKEY.Value = "PROBINST";
   &rec.VALUE.Value = &probid;
   
   &rs.InsertRow(2);
   &rec = &rs.GetRow(3).PT_OPTPARMS;
   &rec.PARMKEY.Value = "COMPONENT";
   &rec.VALUE.Value = &component;
   
   /* SyncRequest will deliver the msg to a designated app server domain based on url */
   /* Extract the URL for the domain which has problem instance loaded */
   SQLExec("select URL from PSOPTSTATUS where PROBINST=:1 AND URL NOT LIKE '%:0'", &probid, &url);
   
   If &url = "" Then
      throw CreateException(148, 2, "Can not send to OptEngine");
   End-If;
   
   /* If you have multiple domains are up, then you need to specify the App Server domain 
      you are send to and send the request with the domain url
      Turn on the the line below and comment out SyncRequest line without url specified: 
      &response = &MSG.SyncRequest(Node.QE_LOCAL, &url);
   */
   &response = &MSG.SyncRequest(%LocalNode, &url);
   
   If &response.ResponseStatus = 0 Then
      &stName = &response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.PARMKEY).Value;
      &optstatus = Value(&response.GetRowset().GetRow(1).GetRecord(Record.PT_OPTPARMS).GetField(Field.VALUE).Value);
      If &stName = "STATUS" And
            &optstatus = %OptEng_Fail Then
         /* Check detailed msg here */
         throw CreateException(148, 2, "Can not send to OptEngine");
      End-If;
   End-If;
   
End-While;


/* CUSTOM RECORD PROCESSING PRASHANT */
<**
Local Message &MSG, &NEWMSG;
Local Rowset &REMEDY_RS;
Local Row &REM_RESP_ROW;
Local Record &REM_RESP_NO, &REM_RESP_REC;
Local number &REM_NO;
Local XmlDoc &xmlDoc, &xmlDoc1;
Local string &TSR, &BU, &PO_ID, &REM_TKT_NO;
Local File &theFile, &LOGFILE;
Local XmlNode &docTypeNode, &rootNode;

&MSG = GetMessage(); /* Read the message */

&xmlDoc = GetMessageXmlDoc();
If (&MSG = Null) Then
   Exit (1);
End-If;

&theFile = GetFile("C:\temp\REMRESP_" | %Datetime | ".xml", "W", %FilePath_Absolute);
&LOGFILE = GetFile("C:\temp\ERROR_" | %Datetime | ".out", "W", %FilePath_Absolute);
&TSR = &xmlDoc.GenXmlString();
Local boolean &bool1 = &xmlDoc.ParseXmlString(&TSR);
&theFile.WriteString(&xmlDoc.GenXmlString());
&theFile.Close();


/* Process start */

&REMEDY_RS = &MSG.GetRowset();

&REM_RESP_NO = CreateRecord(Record.PO_HDR);
For &REM_NO = 1 To &REMEDY_RS.ActiveRowCount;
   &REM_RESP_ROW = &REMEDY_RS.GetRow(&REM_NO);
   &REM_RESP_REC = &REM_RESP_ROW.GetRecord(Record.Z_REM_RESP_E_VW);
   &BU = &REMEDY_RS.GetRow(&REM_NO).Z_REM_RESP_E_VW.BUSINESS_UNIT.Value;
   &PO_ID = &REMEDY_RS.GetRow(&REM_NO).Z_REM_RESP_E_VW.PO_ID.Value;
   &REM_TKT_NO = &REMEDY_RS.GetRow(&REM_NO).Z_REM_RESP_E_VW.PO_REF.Value;
   &LOGFILE.WriteLine("Business Unit " | &BU);
   &LOGFILE.WriteLine("Purchase Order ID " | &PO_ID);
   &LOGFILE.WriteLine("Remedy Ticket Number " | &REM_TKT_NO);
   &REM_RESP_REC.CopyFieldsTo(&REM_RESP_NO);
   &REM_RESP_NO.Update();
End-For;
&LOGFILE.Close();

/* Create Response Message */

&NEWMSG = CreateMessage(Message.Z_REMEDY_MSG);
REM &NEWMSG.GetRowset()(1).PO_HDR_FS.BUSINESS_UNIT.Value = "US001";
Local XmlDoc &RESP = CreateXmlDoc("<?xml version='1.0' encoding='UTF-8' standalone='yes'?><Response/>");
rem Local XmlDoc &RESP = CreateXmlDoc("");
&AddNode0 = &RESP.DocumentElement.AddElement("Status");
&AddNode0.AddAttribute("PP", "AP");
&AddNode0.NodeValue = "00";
rem &docTypeNode = &RESP.CreateDocumentType("Personal", "", "Personal.dtd");
rem &rootNode = &RESP.CreateDocumentElement("root", "", &docTypeNode);
&NEWMSG.SetXmlDoc(&RESP); /* Very Important Step */
ReturnToServer(&NEWMSG);
**>
<*
&Response_Msg = CreateMessage(Message.Z_VNDR_RESP_SYNC);
/* Create the body for the response message */

&Response_Xml = CreateXmlDoc("<?xml version='1.0'?><IBResponse type='" | &Status | "'/>");
&Response_Node = &Response_Xml.DocumentElement.AddElement("DefaultTitle");
&Response_Node.NodeValue = "Integration Broker Response";
&Response_Node = &Response_Xml.DocumentElement.AddElement("StatusCode");
&Response_Node.NodeValue = &Status_Code;
&Response_Node = &Response_Xml.DocumentElement.AddElement("MessageSet");
&Response_Node.NodeValue = &MessageSet;
&Response_Node = &Response_Xml.DocumentElement.AddElement("MessageID");
&Response_Node.NodeValue = &MessageID;
&Response_Node = &Response_Xml.DocumentElement.AddElement("DefaultMessage");
&Response_Node.NodeValue = &ResponseMsg;
&Response_Node = &Response_Xml.DocumentElement.AddElement("MessageParameters");
&Response_Node_value = &Response_Node.AddElement("Parameter");
&Response_Node_value.NodeValue = "VENDOR_SYNC";
&Response_Node_value = &Response_Node.AddElement("Parameter");
&Response_Node_value.NodeValue = "PSFT_EP";
&Response_Msg.SetXmlDoc(&Response_Xml);

ReturnToServer(&Response_Msg);

*>



%SelectInit(PROCESS_INST_STG, ACTIONDTTM) 
 SELECT %ProcessInstance 
 , %CurrentDateTimeOut 
  FROM PS_INSTALLATION

/* get the body of the incoming message */
&xmlDoc = GetMessageXmlDoc();

/* and write it out to a file */
&theFile = GetFile("C:\temp\HttpRequest.txt", "W", %FilePath_Absolute);
&theFile.writestring(&xmlDoc.GenXmlString());
&theFile.Close();
/*
If &theFile.IsOpen = True Then
   MessageBox(0, "", 0, 0, "File Open");
Else
   MessageBox(0, "", 0, 0, "File Closed");
End-If;
*/
/* create the response message */
&msg = CreateMessage(Message.EXAMPLE_RESPONSE_MSG);

/* create the body for the response message */
MessageBox(0, "", 0, 0, "Creating the Body for the Message");
&xmldata = "<?xml version='1.0'?><PPP/>";
&xmlDoc = CreateXmlDoc(&xmldata);
&rootNode = &xmlDoc.documentelement;
MessageBox(0, "", 0, 0, "Root Node " | &rootNode);
&descNode = &rootNode.AddElement("ResponseMessage");
&descNode.NodeValue = "This was generated in the OnRequest event for EXAMPLE_REQUEST_MSG.";
&ppnode = &xmlDoc.documentelement;
&ppdescnode = &ppnode.AddElement("PP");
&ppdescnode.NodeValue = "PRASHANT SRIVASTAVA";
&pp1node = &xmlDoc.documentelement;
&pp1descnode = &ppnode.AddElement("OO");
&pp1descnode.NodeValue = "SRIVASTAVA";

rem MessageBox(0, "", 0, 0, "Nodes in the XML File are " | &rootNode | "," | &ppnode | "," | &pp1node);


/* add the body to the message */
&msg.SetXmlDoc(&xmlDoc);

/* and send the response message */
ReturnToServer(&msg);



Local XmlDoc &request, &response;
Local string &strXml;
Local SOAPDoc &soapReq, &soapRes;

&soapReq = CreateSOAPDoc();
&request = GetMessageXmlDoc();
&soapReq.XmlDoc = &request;
&response = &soapReq.XmlDoc;
ReturnToServer(&response);


<*
/*Create and Send SOAP request document. */
Local SOAPDoc &soapReq = CreateSOAPDoc();
&soapReq.AddHeader();
&soapReq.AddEnvelope(%SOAP_Custom);
&EnvNode = &soapReq.EnvelopeNode;
&AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/");
rem &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:xsi", http://www.w3.org/2001/XMLSchema-instance);
&AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:xsd", "http://www.oorsprong.org/websamples.countryinfo");
rem &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");

&soapReq.AddBody();
&soapReq.AddMethod("ListOfContinentsByName", 1);

Local number &ok = &soapReq.ValidateSOAPDoc();
Local XmlDoc &request = &soapReq.XmlDoc;
WinMessage("output=" | &request.GenXmlString());
Local XmlDoc &response = SyncRequestXmlDoc(&request, Message.W_INBOUND_MSG, Node.THIRDPARTY);

/*Receive and Interpret SOAP response document. */

Local SOAPDoc &newSOAPDoc = CreateSOAPDoc();
&newSOAPDoc.XmlDoc = &response;
Local string &parmName = &newSOAPDoc.GetParmName(1);
Local string &parmValue = &newSOAPDoc.GetParmValue(1);
MessageBox(0, "", 999, 9999, "", &parmValue);
rem Return &parmValue;
*>

/*
Local XmlDoc &request, &response;
Local string &strXml, &str;
Local SOAPDoc &soapReq, &soapRes, &XMLNEW;
Local File &MY_FILE;
Local boolean &bool;

&soapReq = CreateSOAPDoc();
rem &bool = &soapReq.ParseXmlFromURL("C:\temp\inputSOAP.xml");
&str = GetHTMLText(HTML.XML_COUNTRY_HTML, "IND");
&XMLNEW = CreateSOAPDoc("");
MessageBox(0, "", 0, 0, "STR = " | &str);
&bool = &XMLNEW.ParseXmlString(&str);

rem &bool = &soapReq.ParseXmlFromURL("http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL");
rem &request = &XMLNEW.GetXMLDoc();
&request = &XMLNEW.XmlDoc;
&response = SyncRequestXmlDoc(&request, Message.W_INBOUND_MSG, Node.THIRDPARTY);
Local SOAPDoc &newSOAPDoc = CreateSOAPDoc();
&newSOAPDoc.XmlDoc = &response;
&strXml = &response.GenXmlString();

&MY_FILE = GetFile("c:\temp\sync.txt", "w", "a", %FilePath_Absolute);
&MY_FILE.WriteLine(&strXml);
&MY_FILE.Close();

Local string &parmName = &newSOAPDoc.GetParmName(1);
Local string &parmValue = &newSOAPDoc.GetParmValue(1);

MessageBox(0, "", 999, 9999, "", &parmValue);
*/
/*
Local XmlDoc &request, &response;
Local string &strXml;
Local SOAPDoc &soapReq, &soapRes;
Local File &MY_FILE;
Local boolean &bool;

&soapReq = CreateSOAPDoc();
&bool = &soapReq.ParseXmlFromURL("C:\temp\inputSOAP.xml"); rem GetHTMLText();
rem &bool = &soapReq.ParseXmlFromURL("http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL");
&request = &soapReq.XmlDoc;
&response = SyncRequestXmlDoc(&request, Message.W_INBOUND_MSG, Node.THIRDPARTY);
Local SOAPDoc &newSOAPDoc = CreateSOAPDoc();
&newSOAPDoc.XmlDoc = &response;
&strXml = &response.GenXmlString();
*/
/****************************************
 ****** Skipping Integration Engine******
 ****************************************/
Local XmlDoc &Output;

Local Message &MSG, &MSG2;

&MSG = CreateMessage(Message.QE_FLIGHTPLAN_UNSTRUCT);

&MSG.IBInfo.IBConnectorInfo.ConnectorName = "HTTPTARGET";
&MSG.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";

&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "GET", %HttpProperty);
/* DO NOT USE POST - Missing Symbols List */
rem &yo = &MSG.IBinfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
rem &yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", "http://finance.yahoo.com/d/quotes.txt/?symbols=PSFT&format=l1c1d1t1", %HttpProperty);
&yo = &MSG.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", "http://localhost:7001/webservice/TraderService?WSDL", %HttpProperty);
&MSG2 = ConnectorRequest(&MSG);
/* A Xmldoc object is returned. Get the data out of the message */
&Output = &MSG2.GetXmlDoc();
/* Generate formatted XML String */
Local string &outStr = &Output.GenFormattedXmlString();
MessageBox(0, "", 0, 0, "The Generated XML for the Integration Engine is " | &outStr);
<*
Local File &PPFile = GetFile("C:\temp\CData Testing\PP." | %Datetime | ".xml", "W", %FilePath_Absolute);
If &PPFile.IsOpen Then
   /* Write to file to access the XML */
   &PPFile.WriteString(&outStr);
End-If;
/* Close the file */
&PPFile.Close();
*>
/***************************************************************
 ****Checking whether the PSAPPSRV is able to access the JVM****
 ***************************************************************/

Local JavaObject &jo;
Local string &PPstr, &newStr;

&jo = GetJavaClass("java.lang.System");
&PPstr = &jo.getProperty("os.name");
&newStr = &jo.getProperty("os.version");
rem &jo needs to be Nullified. MANDATORY;
&jo = Null;
WinMessage("The OS is " | &PPstr, %MsgStyle_OK);
WinMessage("The Version is " | &newStr, %MsgStyle_OK);


/*************************
 **Testing CDATA Section**
 *************************/
Local XmlDoc &inXMLDoc;
Local boolean &ret;
Local string &inStr;

&inStr = "John Q. Public,1234 West Eastland,925-987-0909" | Char(13) | "Jane Doe,423 Someplace,234-992-9383" | Char(34) | "The Entire XML should be able to feature here";

&inXMLDoc = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><Z_PO_PUBLISH_MSG/>");
&AddNode0 = &inXMLDoc.DocumentElement.AddElement("IBRequest");
&AddNode_MSGNAME = &AddNode0.AddElement("MessageName");
&AddNode_MSGNAME.NodeValue = "Z_PO_PUBLISH_MSG";
&AddNode_FROM = &AddNode0.AddElement("From");
&AddNode_REQUESTING_NODE = &AddNode_FROM.AddElement("RequestingNode");
&AddNode_REQUESTING_NODE.NodeValue = "PSFT_EP";
&AddNode_CONTENT_SECTIONS = &AddNode0.AddElement("ContentSections");
&AddNode_CONTENT_SECTION = &AddNode_CONTENT_SECTIONS.AddElement("ContentSection");
&AddNode_CDATA = &AddNode_CONTENT_SECTION.AddCDataSection("<Transaction>");
&AddNode_CDATA = &AddNode_CONTENT_SECTION.AddCDataSection("More CData Section");
Local string &ooo = "Prashant Srivastava";
rem SQLExec("SELECT EMPLID FROM PSOPRDEFN WHERE OPRID = 'VP1'", &emplId);
rem &AddNode_CDATA = &AddNode0.InsertCDataSection(&emplId, 2);
/***************************/
Local SQL &COMMENTS_SQL_HDR = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "HDR", "US001", "PCP010", 0);
While &COMMENTS_SQL_HDR.Fetch(&COM_BU, &COM_PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
   rem &AddNode_COMMENTS_HDR = &AddNode_HEADER.AddElement("COMMENTS_HDR");
   rem &AddNode_OPRID = &AddNode_COMMENTS_HDR.AddElement("OPRID");
   rem &AddNode_OPRID.NodeValue = &OPRID;
   rem &AddNode_COMMENT_ID = &AddNode_COMMENTS_HDR.AddElement("COMMENT_ID");
   rem &AddNode_COMMENT_ID.NodeValue = &COMMENT_ID;
   rem &AddNode_RANDOM = &AddNode_COMMENTS_HDR.AddElement("RANDOM_CMMT_NBR");
   rem &AddNode_RANDOM.NodeValue = &RANDOM;
   rem &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_HDR.AddElement("HEADER_COMMENTS");
   &AddNode_COMMENTS_2000 = &AddNode0.AddElement("HEADER_COMMENTS");
   &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_2000.AddCDataSection(&COMM_2000);
End-While;
rem &ret = &inXMLDoc.LoadIBContent(&inStr, "Root");
rem &ret = &inXMLDoc.LoadIBContent(&inStr, "Z_PO_PUBLISH_MSG");
Local string &Cdata = &inXMLDoc.GenFormattedXmlString();
/* Transfer from XMLDoc Class to Message Class */
Local Message &New_Msg = CreateMessage(Message.MSG_XML);
MessageBox(0, "", 0, 0, "&CHANNEL " | &New_Msg.ChannelName);
If &New_Msg.IsLocal Then
   MessageBox(0, "", 0, 0, "Message LOCAL");
End-If;
If &New_Msg.IsStructure Then
   MessageBox(0, "", 0, 0, "Message Structured");
Else
   MessageBox(0, "", 0, 0, "Message UnStructured");
End-If;
MessageBox(0, "", 0, 0, "&New_MsgDetail " | &New_Msg.MessageDetail);
try;
   &New_Msg.LoadXMLString(&Cdata);
catch Exception &err
   Local File &fileLog = GetFile("C:\temp\CData Testing\TRY_" | %Datetime | ".out", "W", %FilePath_Absolute);;
   &fileLog.WriteLine(&err.ToString());
end-try;
/* Remove ampersands from the XML string.  The '&' symbol will crash the parser during the transformation. */
/* &XML = Substitute(&XML, "&", "&amp;");*/
If &New_Msg.IsActive Then
   MessageBox(0, "", 0, 0, "Message is Active");
End-If;
Local Message &Resp_Msg = &New_Msg.SyncRequest(Node.PSFT_HTTP);
MessageBox(0, "", 0, 0, "GUID " | &Resp_Msg.GUID);
If (&Resp_Msg.ResponseStatus = 0) Then
   MessageBox(0, "", 0, 0, "Response GOOD");
Else
   MessageBox(0, "", 0, 0, "Response BAD");
End-If;
MessageBox(0, "", 0, 0, "The Generated XML is " | &Cdata);
rem Local File &POPFile = GetFile("C:\temp\CData Testing\EON." | %Datetime | ".xml", "W", %FilePath_Absolute);
rem If &POPFile.IsOpen Then
   /* Write to file to access the XML */
   &POPFile.WriteString(&Cdata);
rem End-If;
/* Close the file */
rem &POPFile.Close();


/******************************
 **** Remove CDATA SECTION ****
 ******************************/
Local XmlDoc &PPwerXMLDoc;
Local array of string &theData;

rem &PPwerXMLDoc = CreateXmlDoc("<?xml version='1.0'?><root/>");
&PPwerXMLDoc = CreateXmlDoc("<?xml version='1.0'?><root xmlns='http://www.peoplesoft.com'/>");
&dataNode = &PPwerXMLDoc.DocumentElement.AddElement("data");
&cdataNode = &dataNode.AddCDataSection("UHOOOOOOOOOOOOOOOOOOOOOO");
&cdata1Node = &PPwerXMLDoc.DocumentElement.AddElement("this");
&cdata2Node = &PPwerXMLDoc.DocumentElement.AddElement("more");
&cdata2Node.NodeValue = "Prashant";
&cdata3Node = &PPwerXMLDoc.DocumentElement.AddElement("still");
&cdata4Node = &cdata3Node.AddElement("New");
&cdata5Node = &cdata4Node.AddElement("this");
&cdata6Node = &cdata4Node.AddElement("more");
&cdata6Node.NodeValue = "Prashant";
&cdata7Node = &cdata4Node.AddElement("still");

/* FIND NODE TYPE */
If (&cdataNode.NodeType = %CDataSectionNode) Then
   MessageBox(0, "", 0, 0, " print the node " | &cdataNode);
Else
   MessageBox(0, "", 0, 0, " DONT print the node " | &cdataNode);
End-If;
&STROLD = &PPwerXMLDoc.GenFormattedXmlString();
/* ORIGINAL XML */
Local File &OLDFILE = GetFile("C:\temp\CData Testing\OLD" | %Datetime | ".xml", "W", %FilePath_Absolute);
&OLDFILE.WriteString(&STROLD);
&OLDFILE.Close();
&cdataNode = &PPwerXMLDoc.DocumentElement.FindNode("more");
&NewcdataNode = &PPwerXMLDoc.DocumentElement.FindNode("still/New/more");
rem &NewcdataNode.NodeValue = "ASSHOLE";
MessageBox(0, "", 0, 0, "&cdataNode " | &cdataNode.NodeValue);
MessageBox(0, "", 0, 0, "&NewcdataNode " | &NewcdataNode.NodeValue);
If Not (&cdataNode.IsNull) And
      Not (&NewcdataNode.IsNull) Then;
   If (&cdataNode.NodeValue = &NewcdataNode.NodeValue) Then
      MessageBox(0, "", 0, 0, "EQUAL");
      MessageBox(0, "", 0, 0, "&cdataNode " | &cdataNode.NodeValue);
      MessageBox(0, "", 0, 0, "&NewcdataNode " | &NewcdataNode.NodeValue);
   Else
      MessageBox(0, "", 0, 0, "NOT EQUAL");
   End-If;
End-If;
rem &removenode = &PPwerXMLDoc.DocumentElement.RemoveChildNode(&cdataNode);
&removenode = &PPwerXMLDoc.DocumentElement.RemoveChildNode(1);
/* AFTER REMOVING THE NODE */
&STRNEW = &PPwerXMLDoc.GenFormattedXmlString();
Local File &NEWFILE = GetFile("C:\temp\CData Testing\NEW" | %Datetime | ".xml", "W", %FilePath_Absolute);
&NEWFILE.WriteString(&STRNEW);
&NEWFILE.Close();
&theData = &dataNode.GetCDataValues();
For &ipp = 1 To &theData.Len
   MessageBox(0, "", 0, 0, "Array Len = " | &theData.Len);
   &FIRST_node = &theData.Get(&ipp);
   MessageBox(0, "", 0, 0, "Print " | &FIRST_node);
End-For;

/*************************************
 ******* READ A CDATA XML FILE *******
 *************************************/
Local XmlDoc &srcDoc;

&srcDoc = CreateXmlDoc("");
&HGF = &srcDoc.ParseXmlFromURL("c:\temp\test.xml");
Local string &STROOO = &srcDoc.GenFormattedXmlString();
MessageBox(0, "", 0, 0, "Formatted XML " | &STROOO);
&cdataNode = &srcDoc.DocumentElement.FindNode("AsyncRequest");
&removenode = &srcDoc.DocumentElement.RemoveChildNode(&cdataNode);
&removenode = &srcDoc.DocumentElement.RemoveChildNode(1);
Local string &STROOONEW = &srcDoc.GenFormattedXmlString();
MessageBox(0, "", 0, 0, "Formatted XML NEW1" | &STROOONEW);
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
rem Transform SOAPDoc object to an XmlDoc object;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
Local XmlDoc &request, &response;
Local string &strXml;
Local SOAPDoc &soapReq, &soapRes;

/* create the SOAP XML Document */
rem &soapReq = CreateSOAPDoc();
/*
 <env:Envelope  xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <env:Body env:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
   <m:buy xmlns:m="http://www.bea.com/examples/Trader">
    <string xsi:type="xsd:string">ASSHOLE</string>
    <intVal xsi:type="xsd:int">100</intVal>
   </m:buy>
  </env:Body>
 </env:Envelope>
 */
<*
&soapReq.AddEnvelope(0);
&soapReq.AddMethod("Buy", 0);
&soapReq.AddParm("Share", "100");
*>
&str = GetHTMLText(HTML.Z_SOAP_HTML, "ACCENTURE", "459");
/* Create the SOAP Doc */
&soapReq = CreateSOAPDoc("");
&bool = &soapReq.ParseXmlString(&str);
/* convert SOAP to XmlDoc */
&request = &soapReq.XmlDoc;
/* Send the Request */
&response = SyncRequestXmlDoc(&request, Message.QE_SOAP_REQ, Node.UNDERDOG);
MessageBox(0, "", 0, 0, "Response Rcvd");
/* Get the SOAP response from the XmlDoc response */
&soapRes = CreateSOAPDoc();
&soapRes.XmlDoc = &response;
rem &OK = &soapRes.ValidateSOAPDoc();
&strXml = &soapRes.GenFormattedXmlString();
/* Write the string to file */
Local File &SOAPFILE = GetFile("C:\temp\CData Testing\SOAPFILE" | %Datetime | ".xml", "W", %FilePath_Absolute);
&SOAPFILE.WriteString(&strXml);
&SOAPFILE.Close();
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
rem ENDS;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
REM - ATTACH THE STRING TO THE XML;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
Local XmlDoc &PPIn;

&PPIn = CreateXmlDoc("");
&ChildNode = &PPIn.DocumentElement.AddElement(&Cdata);

Local string &TSRSTRSTR = &PPIn.GenFormattedXmlString();
Local File &PPFILE = GetFile("C:\temp\PPPOPOPOPO_" | %Datetime | ".out", "W", %FilePath_Absolute);
&PPFILE.WriteString(&TSRSTRSTR);
&PPFILE.Close();



<*
/* create an XML document */
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
&xmlDoc = CreateXmlDoc(&xmldata);

/* and send it out in an async request */
&success = PublishXmlDoc(&xmlDoc, Message.EXAMPLE_PSFT_MSG);

MessageBox(0, "", 0, 0, "Message sent.");
*>
<*
/* create an XML document */
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
&xmlDoc = CreateXmlDoc(&xmldata);

/* add text to it */
&rootNode = &xmlDoc.documentelement;
&descNode = &rootNode.AddElement("PPNode");
&descNode.NodeValue = "This message will be sent to an HTTP server.";

/* send the document out as a sync message */
&xmlResponseDoc = SyncRequestXmlDoc(&xmlDoc, Message.EXAMPLE_REQUEST_MSG);

/* convert the response to an XML string */
&textString = &xmlResponseDoc.GenXmlString();

/* and echo it back to the user */
MessageBox(0, "", 0, 0, &textString);
*>


/*UPLOADING FILES TO THE FTP SERVER*/

/*Create an XML Document*/
<*
&xmldata = "<?xml version='1.0'?><POP/>";
&xmldoc = CreateXmlDoc(&xmldata);

/*Add Text to It*/
&rootnode = &xmldoc.documentelement;
&descnode = &rootnode.AddElement("TestNode");
&descnode.NodeValue = "This message will be uploaded to an FTP Server";

/*Send the Document as an ASync Message*/
&success = PublishXmlDoc(&xmldoc, Message.EXAMPLE_REQUEST_MSG);

MessageBox(0, "", 0, 0, "Message Sent");
*>
<*
/*DOWNLOADING FILES FROM FTP SERVERS*/

/*Create an XML Document*/
&xmlpp = "<?xml version='1.0'?><DWNLD/>";
&ppdoc = CreateXmlDoc(&xmlpp);

/*Send the Document out in a Sync Message*/
&xmlResponseDoc = SyncRequestXmlDoc(&ppdoc, Message.EXAMPLE_REQUEST_MSG);

/*Convert the response message to an XML String*/

&ppString = &xmlResponseDoc.GenXmlString();

/*Echo it to the User*/

MessageBox(0, "", 0, 0, "My String " | &ppString);
*>

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
Declare Function assign_auto_number PeopleCode FUNCLIB_AUTONUM.LAST_AUTO_NBR FieldFormula;

Local File &fileLog;
Local ApiObject &oSession, &oZRmaFormInvCi;
Local ApiObject &oItemProdVwCollection, &oItemProdVw;
Local ApiObject &oInstallationCollection, &oInstallation;
Local ApiObject &oRmaLineCollection, &oRmaLine;
Local ApiObject &oInstallation2Collection, &oInstallation2;
Local ApiObject &oRmaLnNoteVwCollection, &oRmaLnNoteVw;
Local ApiObject &oStdNoteKeyVwCollection, &oStdNoteKeyVw;
Local ApiObject &oRmaLnNoteKyCollection, &oRmaLnNoteKy;
Local ApiObject &oStdNoteDocVwCollection, &oStdNoteDocVw;
Local ApiObject &oOmDoccdRmVwCollection, &oOmDoccdRmVw;
Local ApiObject &oRmaLnNoteDcCollection, &oRmaLnNoteDc;
Local ApiObject &oRmaLineAttVwCollection, &oRmaLineAttVw;
Local ApiObject &oRmaAddrLnVwCollection, &oRmaAddrLnVw;
Local ApiObject &oRmaSerialLotCollection, &oRmaSerialLot;
Local ApiObject &oRmaRefOrdVwCollection, &oRmaRefOrdVw;
Local ApiObject &oRmaRefMsrVwCollection, &oRmaRefMsrVw;
Local ApiObject &oRmaRefInvVwCollection, &oRmaRefInvVw;
Local ApiObject &oRmaReplSoDstCollection, &oRmaReplSoDst;
Local ApiObject &oRmaHdrNoteVwCollection, &oRmaHdrNoteVw;
Local ApiObject &oStdNoteKeyVw2Collection, &oStdNoteKeyVw2;
Local ApiObject &oRmaHdrNoteKyCollection, &oRmaHdrNoteKy;
Local ApiObject &oStdNoteDocVw2Collection, &oStdNoteDocVw2;
Local ApiObject &oOmDoccdRmVw2Collection, &oOmDoccdRmVw2;
Local ApiObject &oRmaHdrNoteDcCollection, &oRmaHdrNoteDc;
Local ApiObject &oRmaHdrAttVwCollection, &oRmaHdrAttVw;
Local ApiObject &oRmaAddrHdrVwCollection, &oRmaAddrHdrVw;
Local ApiObject &oOrdentCustVwCollection, &oOrdentCustVw;
Local ApiObject &oTaxGeocodeTmpCollection, &oTaxGeocodeTmp;
Local ApiObject &oRmaAddsqVwCollection, &oRmaAddsqVw;
Local ApiObject &oRmaCaddrVwCollection, &oRmaCaddrVw;
Local ApiObject &oRmaLocationVwCollection, &oRmaLocationVw;
Local ApiObject &oRmaLnDelkyVwCollection, &oRmaLnDelkyVw;
Local ApiObject &oOrdGroupCollection, &oOrdGroup;
Local ApiObject &oCustShpoptVwCollection, &oCustShpoptVw;
Local ApiObject &oOrdHeaderFsCollection, &oOrdHeaderFs;
Local ApiObject &oOrdLineFsCollection, &oOrdLineFs;
Local ApiObject &oOrdPriceAdjstCollection, &oOrdPriceAdjst;
Local ApiObject &oSconHdrCollection, &oSconHdr;
Local ApiObject &oOrdInvitemsVwCollection, &oOrdInvitemsVw;
Local ApiObject &oBiAdjGrpLineCollection, &oBiAdjGrpLine;
Local ApiObject &oCustGroupTblCollection, &oCustGroupTbl;
Local ApiObject &oDstRlsetOmV2Collection, &oDstRlsetOmV2;
Local ApiObject &oCustTaxgpshVwCollection, &oCustTaxgpshVw;
Local ApiObject &oBuLedCombVwgCollection, &oBuLedCombVwg;
Local ApiObject &oBuLedCombVwCollection, &oBuLedCombVw;
Local ApiObject &oComboCfdefnVwCollection, &oComboCfdefnVw;

Function errorHandler()
   Local ApiObject &oPSMessageCollection, &oPSMessage;
   Local number &i;
   Local string &sErrMsgSetNum, &sErrMsgNum, &sErrMsgText, &sErrType;
   
   &oPSMessageCollection = &oSession.PSMessages;
   For &i = 1 To &oPSMessageCollection.Count
      &oPSMessage = &oPSMessageCollection.Item(&i);
      &sErrMsgSetNum = &oPSMessage.MessageSetNumber;
      &sErrMsgNum = &oPSMessage.MessageNumber;
      &sErrMsgText = &oPSMessage.Text;
      &fileLog.WriteLine(&sErrType | " (" | &sErrMsgSetNum | "," | &sErrMsgNum | ") - " | &sErrMsgText);
   End-For;
   rem ***** Delete the Messages from the collection *****;
   &oPSMessageCollection.DeleteAll();
End-Function;

try
   rem ***** Set the Log File *****;
   &fileLog = GetFile("C:\temp\Z_RMA_FORM_INV_CI_" | %Datetime | ".log", "w", "a", %FilePath_Absolute);
   &fileLog.WriteLine("Begin");
   rem ***** Get current PeopleSoft Session *****;
   &oSession = %Session;
   
   
   &oSession.PSMessagesMode = 3;
   
   rem ***** Get the Component Interface *****;
   &oZRmaFormInvCi = &oSession.GetCompIntfc(CompIntfc.Z_RMA_FORM_INV_CI);
   If &oZRmaFormInvCi = Null Then
      errorHandler();
      throw CreateException(0, 0, "GetCompIntfc failed");
   End-If;
   
   rem ***** Set the Component Interface Mode *****;
   &oZRmaFormInvCi.InteractiveMode = True;
   &oZRmaFormInvCi.GetHistoryItems = True;
   &oZRmaFormInvCi.EditHistoryItems = False;
   
   rem ***** Set Component Interface Get/Create Keys *****;
   MessageBox(0, "", 0, 0, "Set the COMPINTFC Properties");
   &BU = "US008";
   &oZRmaFormInvCi.BUSINESS_UNIT = &BU;
   /* Select NEXT RMA ID */
   rem SQLExec("SELECT  FROM PS_AUTO_NUM_TBL WHERE SETID = 'SHARE'AND NUM_TYPE like '%RMA%'");
   &SET_CTRL_VAL = &oZRmaFormInvCi.BUSINESS_UNIT;
   &SETID = GetSetId(Field.BUSINESS_UNIT, &SET_CTRL_VAL, Record.AUTO_NUM_TBL, "");
   &NUM_TYPE = "RMA";
   &DEFAULT_BEG_SEQ = "Y";
   SQLExec("SELECT BEG_SEQ,MAX_LENGTH FROM PS_AUTO_NUM_TBL WHERE SETID=:1 AND NUM_TYPE=:2 AND DEFAULT_BEG_SEQ=:3", &SETID, &NUM_TYPE, &DEFAULT_BEG_SEQ, &BEG_SEQ, &MAX_LENGTH);
   &LENGTH = &MAX_LENGTH - Len(String(&BEG_SEQ));
   &CHECK = Rept("9", &LENGTH);
   &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(AUTO_NUM_TBL.LAST_AUTO_NBR, Value(&CHECK), 1, "where setid=:1 and num_type=:2 and default_beg_seq=:3", &SETID, &NUM_TYPE, &DEFAULT_BEG_SEQ);
   MessageBox(0, "", 0, 0, "&LAST_AUTO_NBR " | &LAST_AUTO_NBR);
   &ZEROS = "0";
   &ZERO_PAD = "Y";
   If &BEG_SEQ <> "000" Then
      If &ZERO_PAD = "Y" Then
         &NUM_LENGTH = &LENGTH - Len(String(&LAST_AUTO_NBR));
         &ZEROS = Rept("0", &NUM_LENGTH);
         &PP = Rept("(|)", 5);
         MessageBox(0, "", 0, 0, "&PP " | &PP);
         &FINAL_NUM = &BEG_SEQ | &ZEROS | &LAST_AUTO_NBR;
      Else
         &FINAL_NUM = &BEG_SEQ | &LAST_AUTO_NBR;
      End-If;
   Else
      If &ZERO_PAD = "Y" Then
         &NUM_LENGTH = &LENGTH - Len(String(&LAST_AUTO_NBR));
         &ZEROS = Rept("0", &NUM_LENGTH);
         &FINAL_NUM = &BEG_SEQ | &ZEROS | &LAST_AUTO_NBR;
      Else
         &FINAL_NUM = &LAST_AUTO_NBR;
      End-If;
   End-If;
   MessageBox(0, "", 0, 0, "&FINAL_NUM " | &FINAL_NUM);
   &oZRmaFormInvCi.RMA_ID = &FINAL_NUM;
   &oZRmaFormInvCi.RETURN_FROM_OPTION = "I";
   &oZRmaFormInvCi.RETURN_FROM_LOC = "US008";
   &oZRmaFormInvCi.RETURN_FR_CUST_ID = "US008";
   
   rem ***** Execute Get *****;
   rem If Not &oZRmaFormInvCi.Get() Then
		rem ***** No rows exist for the specified keys.*****;
   rem errorHandler();
   rem throw CreateException(0, 0, "Get failed");
   rem End-If;
   
   rem ***** Execute Create ******;
   If Not &oZRmaFormInvCi.Create() Then;
      rem ***** Unable to Create Component Interface for the Add keys provided. *****;
      errorHandler();
      throw CreateException(0, 0, "Create failed");
   End-If;
   
   
   rem ***** Begin: Get/Set Component Interface Properties *****;
   rem ***** Get/Set Level 0 Field Properties *****;
   &fileLog.WriteLine("&oZRmaFormInvCi.RETURN_FROM_LOC = " | &oZRmaFormInvCi.RETURN_FROM_LOC);
   rem &oZRmaFormInvCi.RETURN_FROM_LOC = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.RETURN_FR_CUST_ID = " | &oZRmaFormInvCi.RETURN_FR_CUST_ID);
   rem &oZRmaFormInvCi.RETURN_FR_CUST_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.ADDRESS_SEQ_SHIP = " | &oZRmaFormInvCi.ADDRESS_SEQ_SHIP);
   rem &oZRmaFormInvCi.ADDRESS_SEQ_SHIP = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.DISTRIB_TYPE = " | &oZRmaFormInvCi.DISTRIB_TYPE);
   rem &oZRmaFormInvCi.DISTRIB_TYPE = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.REASON_CD = " | &oZRmaFormInvCi.REASON_CD);
   &oZRmaFormInvCi.REASON_CD = "DAMAGE";
   &fileLog.WriteLine("&oZRmaFormInvCi.RETURN_TO_IBU = " | &oZRmaFormInvCi.RETURN_TO_IBU);
   rem &oZRmaFormInvCi.RETURN_TO_IBU = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.RMA_APPROVED_FLAG = " | &oZRmaFormInvCi.RMA_APPROVED_FLAG);
   &oZRmaFormInvCi.RMA_APPROVED_FLAG = "N";
   &fileLog.WriteLine("&oZRmaFormInvCi.RMA_DATE = " | &oZRmaFormInvCi.RMA_DATE);
   &oZRmaFormInvCi.RMA_DATE = %Date;
   &fileLog.WriteLine("&oZRmaFormInvCi.RMA_STATUS = " | &oZRmaFormInvCi.RMA_STATUS);
   &oZRmaFormInvCi.RMA_STATUS = "O";
   &fileLog.WriteLine("&oZRmaFormInvCi.SPEEDTYPE_KEY = " | &oZRmaFormInvCi.SPEEDTYPE_KEY);
   rem &oZRmaFormInvCi.SPEEDTYPE_KEY = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.EST_RETURN_DT = " | &oZRmaFormInvCi.EST_RETURN_DT);
   &oZRmaFormInvCi.EST_RETURN_DT = %Date;
   &fileLog.WriteLine("&oZRmaFormInvCi.EST_RETURN_TM = " | &oZRmaFormInvCi.EST_RETURN_TM);
   &oZRmaFormInvCi.EST_RETURN_TM = %Time;
   &fileLog.WriteLine("&oZRmaFormInvCi.INV_ITEM_ID = " | &oZRmaFormInvCi.INV_ITEM_ID);
   rem &oZRmaFormInvCi.INV_ITEM_ID = "PS1001";
   &fileLog.WriteLine("&oZRmaFormInvCi.DESCR = " | &oZRmaFormInvCi.DESCR);
   rem &oZRmaFormInvCi.DESCR = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.INV_ITEM_GROUP = " | &oZRmaFormInvCi.INV_ITEM_GROUP);
   rem &oZRmaFormInvCi.INV_ITEM_GROUP = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.INV_PROD_FAM_CD = " | &oZRmaFormInvCi.INV_PROD_FAM_CD);
   rem &oZRmaFormInvCi.INV_PROD_FAM_CD = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.MFG_ID = " | &oZRmaFormInvCi.MFG_ID);
   rem &oZRmaFormInvCi.MFG_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.MFG_ITM_ID = " | &oZRmaFormInvCi.MFG_ITM_ID);
   rem &oZRmaFormInvCi.MFG_ITM_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.CATEGORY_ID = " | &oZRmaFormInvCi.CATEGORY_ID);
   rem &oZRmaFormInvCi.CATEGORY_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.PRODUCT_ID = " | &oZRmaFormInvCi.PRODUCT_ID);
   rem &oZRmaFormInvCi.PRODUCT_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.DESCR1 = " | &oZRmaFormInvCi.DESCR1);
   rem &oZRmaFormInvCi.DESCR1 = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.CATEGORY_CD = " | &oZRmaFormInvCi.CATEGORY_CD);
   rem &oZRmaFormInvCi.CATEGORY_CD = [*];
   
   rem ***** Set/Get ITEM_PROD_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
   &oItemProdVwCollection = &oZRmaFormInvCi.ITEM_PROD_VW;
   Local integer &i194;
   For &i194 = 1 To &oItemProdVwCollection.Count;
      &oItemProdVw = &oItemProdVwCollection.Item(&i194);
      &fileLog.WriteLine("&oItemProdVw.ITEM_SELECTED = " | &oItemProdVw.ITEM_SELECTED);
      rem &oItemProdVw.ITEM_SELECTED = [*];
   End-For;
   
   rem ***** Set/Get INSTALLATION Collection Field Properties -- Parent: PS_ROOT Collection *****;
   &oInstallationCollection = &oZRmaFormInvCi.INSTALLATION;
   MessageBox(0, "", 0, 0, "&oInstallationCollection " | &oInstallationCollection.Count);
   Local integer &i1102;
   For &i1102 = 1 To &oInstallationCollection.Count;
      &oInstallation = &oInstallationCollection.Item(&i1102);
      &fileLog.WriteLine("&oInstallation.ACCOUNT = " | &oInstallation.ACCOUNT);
      rem &oInstallation.ACCOUNT = [*];
      &fileLog.WriteLine("&oInstallation.ALTACCT = " | &oInstallation.ALTACCT);
      rem &oInstallation.ALTACCT = [*];
      &fileLog.WriteLine("&oInstallation.DEPTID = " | &oInstallation.DEPTID);
      rem &oInstallation.DEPTID = [*];
      &fileLog.WriteLine("&oInstallation.OPERATING_UNIT = " | &oInstallation.OPERATING_UNIT);
      rem &oInstallation.OPERATING_UNIT = [*];
      &fileLog.WriteLine("&oInstallation.PRODUCT = " | &oInstallation.PRODUCT);
      rem &oInstallation.PRODUCT = [*];
      &fileLog.WriteLine("&oInstallation.FUND_CODE = " | &oInstallation.FUND_CODE);
      rem &oInstallation.FUND_CODE = [*];
      &fileLog.WriteLine("&oInstallation.CLASS_FLD = " | &oInstallation.CLASS_FLD);
      rem &oInstallation.CLASS_FLD = [*];
      &fileLog.WriteLine("&oInstallation.PROGRAM_CODE = " | &oInstallation.PROGRAM_CODE);
      rem &oInstallation.PROGRAM_CODE = [*];
      &fileLog.WriteLine("&oInstallation.BUDGET_REF = " | &oInstallation.BUDGET_REF);
      rem &oInstallation.BUDGET_REF = [*];
      &fileLog.WriteLine("&oInstallation.AFFILIATE = " | &oInstallation.AFFILIATE);
      rem &oInstallation.AFFILIATE = [*];
      &fileLog.WriteLine("&oInstallation.AFFILIATE_INTRA1 = " | &oInstallation.AFFILIATE_INTRA1);
      rem &oInstallation.AFFILIATE_INTRA1 = [*];
      &fileLog.WriteLine("&oInstallation.AFFILIATE_INTRA2 = " | &oInstallation.AFFILIATE_INTRA2);
      rem &oInstallation.AFFILIATE_INTRA2 = [*];
      &fileLog.WriteLine("&oInstallation.CHARTFIELD1 = " | &oInstallation.CHARTFIELD1);
      rem &oInstallation.CHARTFIELD1 = [*];
      &fileLog.WriteLine("&oInstallation.CHARTFIELD2 = " | &oInstallation.CHARTFIELD2);
      rem &oInstallation.CHARTFIELD2 = [*];
      &fileLog.WriteLine("&oInstallation.CHARTFIELD3 = " | &oInstallation.CHARTFIELD3);
      rem &oInstallation.CHARTFIELD3 = [*];
      &fileLog.WriteLine("&oInstallation.BUSINESS_UNIT_PC = " | &oInstallation.BUSINESS_UNIT_PC);
      rem &oInstallation.BUSINESS_UNIT_PC = [*];
      &fileLog.WriteLine("&oInstallation.PROJECT_ID = " | &oInstallation.PROJECT_ID);
      rem &oInstallation.PROJECT_ID = [*];
      &fileLog.WriteLine("&oInstallation.ACTIVITY_ID = " | &oInstallation.ACTIVITY_ID);
      rem &oInstallation.ACTIVITY_ID = [*];
      &fileLog.WriteLine("&oInstallation.RESOURCE_TYPE = " | &oInstallation.RESOURCE_TYPE);
      rem &oInstallation.RESOURCE_TYPE = [*];
      &fileLog.WriteLine("&oInstallation.RESOURCE_CATEGORY = " | &oInstallation.RESOURCE_CATEGORY);
      rem &oInstallation.RESOURCE_CATEGORY = [*];
      &fileLog.WriteLine("&oInstallation.RESOURCE_SUB_CAT = " | &oInstallation.RESOURCE_SUB_CAT);
      rem &oInstallation.RESOURCE_SUB_CAT = [*];
   End-For;
   
   rem ***** Set/Get RMA_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
   &oRmaLineCollection = &oZRmaFormInvCi.RMA_LINE;
   MessageBox(0, "", 0, 0, "&oRmaLineCollection.Count " | &oRmaLineCollection.Count);
   Local integer &i1126;
   For &i1126 = 1 To &oRmaLineCollection.Count;
      &oRmaLine = &oRmaLineCollection.Item(&i1126);
      &fileLog.WriteLine("&oRmaLine.RMA_LINE_NBR = " | &oRmaLine.RMA_LINE_NBR);
      &oRmaLine.RMA_LINE_NBR = "1";
      &fileLog.WriteLine("&oRmaLine.DISTRIB_TYPE_1 = " | &oRmaLine.DISTRIB_TYPE_1);
      rem &oRmaLine.DISTRIB_TYPE_1 = [*];
      &fileLog.WriteLine("&oRmaLine.INV_ITEM_ID_1 = " | &oRmaLine.INV_ITEM_ID_1);
      &oRmaLine.INV_ITEM_ID_1 = "BR4401";
      &fileLog.WriteLine("&oRmaLine.QTY_RETURNED = " | &oRmaLine.QTY_RETURNED);
      &oRmaLine.QTY_RETURNED = "10";
      &fileLog.WriteLine("&oRmaLine.RETURN_TO_IBU_1 = " | &oRmaLine.RETURN_TO_IBU_1);
      rem &oRmaLine.RETURN_TO_IBU_1 = [*];
      &fileLog.WriteLine("&oRmaLine.RMA_LINE_STATUS = " | &oRmaLine.RMA_LINE_STATUS);
      rem &oRmaLine.RMA_LINE_STATUS = [*];
      &fileLog.WriteLine("&oRmaLine.SPEEDTYPE_KEY_1 = " | &oRmaLine.SPEEDTYPE_KEY_1);
      rem &oRmaLine.SPEEDTYPE_KEY_1 = [*];
      &fileLog.WriteLine("&oRmaLine.UNIT_OF_MEASURE = " | &oRmaLine.UNIT_OF_MEASURE);
      &oRmaLine.UNIT_OF_MEASURE = "EA";
      
      rem ***** Set INSTALLATION2 Collection Field Properties -- Parent: RMA_LINE Collection *****;
      &oInstallation2Collection = &oRmaLine.INSTALLATION2;
      Local integer &i2169;
      For &i2169 = 1 To &oInstallation2Collection.Count;
         &oInstallation2 = &oInstallation2Collection.Item(&i2169);
         &fileLog.WriteLine("&oInstallation2.ACCOUNT_1 = " | &oInstallation2.ACCOUNT_1);
         rem &oInstallation2.ACCOUNT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.ALTACCT_1 = " | &oInstallation2.ALTACCT_1);
         rem &oInstallation2.ALTACCT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.DEPTID_1 = " | &oInstallation2.DEPTID_1);
         rem &oInstallation2.DEPTID_1 = [*];
         &fileLog.WriteLine("&oInstallation2.OPERATING_UNIT_1 = " | &oInstallation2.OPERATING_UNIT_1);
         rem &oInstallation2.OPERATING_UNIT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.PRODUCT_1 = " | &oInstallation2.PRODUCT_1);
         rem &oInstallation2.PRODUCT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.FUND_CODE_1 = " | &oInstallation2.FUND_CODE_1);
         rem &oInstallation2.FUND_CODE_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CLASS_FLD_1 = " | &oInstallation2.CLASS_FLD_1);
         rem &oInstallation2.CLASS_FLD_1 = [*];
         &fileLog.WriteLine("&oInstallation2.PROGRAM_CODE_1 = " | &oInstallation2.PROGRAM_CODE_1);
         rem &oInstallation2.PROGRAM_CODE_1 = [*];
         &fileLog.WriteLine("&oInstallation2.BUDGET_REF_1 = " | &oInstallation2.BUDGET_REF_1);
         rem &oInstallation2.BUDGET_REF_1 = [*];
         &fileLog.WriteLine("&oInstallation2.AFFILIATE_1 = " | &oInstallation2.AFFILIATE_1);
         rem &oInstallation2.AFFILIATE_1 = [*];
         &fileLog.WriteLine("&oInstallation2.AFFILIATE_INTRA1_1 = " | &oInstallation2.AFFILIATE_INTRA1_1);
         rem &oInstallation2.AFFILIATE_INTRA1_1 = [*];
         &fileLog.WriteLine("&oInstallation2.AFFILIATE_INTRA2_1 = " | &oInstallation2.AFFILIATE_INTRA2_1);
         rem &oInstallation2.AFFILIATE_INTRA2_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CHARTFIELD1_1 = " | &oInstallation2.CHARTFIELD1_1);
         rem &oInstallation2.CHARTFIELD1_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CHARTFIELD2_1 = " | &oInstallation2.CHARTFIELD2_1);
         rem &oInstallation2.CHARTFIELD2_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CHARTFIELD3_1 = " | &oInstallation2.CHARTFIELD3_1);
         rem &oInstallation2.CHARTFIELD3_1 = [*];
         &fileLog.WriteLine("&oInstallation2.BUSINESS_UNIT_PC_3 = " | &oInstallation2.BUSINESS_UNIT_PC_3);
         rem &oInstallation2.BUSINESS_UNIT_PC_3 = [*];
         &fileLog.WriteLine("&oInstallation2.PROJECT_ID_3 = " | &oInstallation2.PROJECT_ID_3);
         rem &oInstallation2.PROJECT_ID_3 = [*];
         &fileLog.WriteLine("&oInstallation2.ACTIVITY_ID_3 = " | &oInstallation2.ACTIVITY_ID_3);
         rem &oInstallation2.ACTIVITY_ID_3 = [*];
         &fileLog.WriteLine("&oInstallation2.RESOURCE_TYPE_3 = " | &oInstallation2.RESOURCE_TYPE_3);
         rem &oInstallation2.RESOURCE_TYPE_3 = [*];
         &fileLog.WriteLine("&oInstallation2.RESOURCE_CATEGORY_3 = " | &oInstallation2.RESOURCE_CATEGORY_3);
         rem &oInstallation2.RESOURCE_CATEGORY_3 = [*];
         &fileLog.WriteLine("&oInstallation2.RESOURCE_SUB_CAT_3 = " | &oInstallation2.RESOURCE_SUB_CAT_3);
         rem &oInstallation2.RESOURCE_SUB_CAT_3 = [*];
         
         rem ***** Set RMA_LN_NOTE_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
         &oRmaLnNoteVwCollection = &oRmaLine.RMA_LN_NOTE_VW;
         Local integer &i2191;
         For &i2191 = 1 To &oRmaLnNoteVwCollection.Count;
            &oRmaLnNoteVw = &oRmaLnNoteVwCollection.Item(&i2191);
            
            rem ***** Set STD_NOTE_KEY_VW Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
            &oStdNoteKeyVwCollection = &oRmaLnNoteVw.STD_NOTE_KEY_VW;
            Local integer &i3198;
            For &i3198 = 1 To &oStdNoteKeyVwCollection.Count;
               &oStdNoteKeyVw = &oStdNoteKeyVwCollection.Item(&i3198);
               
               rem ***** Set RMA_LN_NOTE_KY Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
               &oRmaLnNoteKyCollection = &oRmaLnNoteVw.RMA_LN_NOTE_KY;
               Local integer &i3200;
               For &i3200 = 1 To &oRmaLnNoteKyCollection.Count;
                  &oRmaLnNoteKy = &oRmaLnNoteKyCollection.Item(&i3200);
                  
                  rem ***** Set STD_NOTE_DOC_VW Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
                  &oStdNoteDocVwCollection = &oRmaLnNoteVw.STD_NOTE_DOC_VW;
                  Local integer &i3202;
                  For &i3202 = 1 To &oStdNoteDocVwCollection.Count;
                     &oStdNoteDocVw = &oStdNoteDocVwCollection.Item(&i3202);
                     
                     rem ***** Set OM_DOCCD_RM_VW Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
                     &oOmDoccdRmVwCollection = &oRmaLnNoteVw.OM_DOCCD_RM_VW;
                     Local integer &i3204;
                     For &i3204 = 1 To &oOmDoccdRmVwCollection.Count;
                        &oOmDoccdRmVw = &oOmDoccdRmVwCollection.Item(&i3204);
                        
                        rem ***** Set RMA_LN_NOTE_DC Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
                        &oRmaLnNoteDcCollection = &oRmaLnNoteVw.RMA_LN_NOTE_DC;
                        Local integer &i3207;
                        For &i3207 = 1 To &oRmaLnNoteDcCollection.Count;
                           &oRmaLnNoteDc = &oRmaLnNoteDcCollection.Item(&i3207);
                           
                           rem ***** Set RMA_LINE_ATT_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                           &oRmaLineAttVwCollection = &oRmaLine.RMA_LINE_ATT_VW;
                           Local integer &i2209;
                           For &i2209 = 1 To &oRmaLineAttVwCollection.Count;
                              &oRmaLineAttVw = &oRmaLineAttVwCollection.Item(&i2209);
                              
                              rem ***** Set RMA_ADDR_LN_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                              &oRmaAddrLnVwCollection = &oRmaLine.RMA_ADDR_LN_VW;
                              Local integer &i2213;
                              For &i2213 = 1 To &oRmaAddrLnVwCollection.Count;
                                 &oRmaAddrLnVw = &oRmaAddrLnVwCollection.Item(&i2213);
                                 
                                 rem ***** Set RMA_SERIAL_LOT Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                 &oRmaSerialLotCollection = &oRmaLine.RMA_SERIAL_LOT;
                                 Local integer &i2237;
                                 For &i2237 = 1 To &oRmaSerialLotCollection.Count;
                                    &oRmaSerialLot = &oRmaSerialLotCollection.Item(&i2237);
                                    
                                    rem ***** Set RMA_REF_ORD_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                    &oRmaRefOrdVwCollection = &oRmaLine.RMA_REF_ORD_VW;
                                    Local integer &i2242;
                                    For &i2242 = 1 To &oRmaRefOrdVwCollection.Count;
                                       &oRmaRefOrdVw = &oRmaRefOrdVwCollection.Item(&i2242);
                                       
                                       rem ***** Set RMA_REF_MSR_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                       &oRmaRefMsrVwCollection = &oRmaLine.RMA_REF_MSR_VW;
                                       Local integer &i2244;
                                       For &i2244 = 1 To &oRmaRefMsrVwCollection.Count;
                                          &oRmaRefMsrVw = &oRmaRefMsrVwCollection.Item(&i2244);
                                          
                                          rem ***** Set RMA_REF_INV_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                          &oRmaRefInvVwCollection = &oRmaLine.RMA_REF_INV_VW;
                                          Local integer &i2246;
                                          For &i2246 = 1 To &oRmaRefInvVwCollection.Count;
                                             &oRmaRefInvVw = &oRmaRefInvVwCollection.Item(&i2246);
                                             
                                             rem ***** Set RMA_REPL_SO_DST Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                             &oRmaReplSoDstCollection = &oRmaLine.RMA_REPL_SO_DST;
                                             Local integer &i2248;
                                             For &i2248 = 1 To &oRmaReplSoDstCollection.Count;
                                                &oRmaReplSoDst = &oRmaReplSoDstCollection.Item(&i2248);
                                             End-For;
                                          End-For;
                                          
                                          rem ***** Set/Get RMA_HDR_NOTE_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                          &oRmaHdrNoteVwCollection = &oZRmaFormInvCi.RMA_HDR_NOTE_VW;
                                          Local integer &i1250;
                                          For &i1250 = 1 To &oRmaHdrNoteVwCollection.Count;
                                             &oRmaHdrNoteVw = &oRmaHdrNoteVwCollection.Item(&i1250);
                                             
                                             rem ***** Set STD_NOTE_KEY_VW2 Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                             &oStdNoteKeyVw2Collection = &oRmaHdrNoteVw.STD_NOTE_KEY_VW2;
                                             Local integer &i2257;
                                             For &i2257 = 1 To &oStdNoteKeyVw2Collection.Count;
                                                &oStdNoteKeyVw2 = &oStdNoteKeyVw2Collection.Item(&i2257);
                                                
                                                rem ***** Set RMA_HDR_NOTE_KY Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                &oRmaHdrNoteKyCollection = &oRmaHdrNoteVw.RMA_HDR_NOTE_KY;
                                                Local integer &i2259;
                                                For &i2259 = 1 To &oRmaHdrNoteKyCollection.Count;
                                                   &oRmaHdrNoteKy = &oRmaHdrNoteKyCollection.Item(&i2259);
                                                   
                                                   rem ***** Set STD_NOTE_DOC_VW2 Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                   &oStdNoteDocVw2Collection = &oRmaHdrNoteVw.STD_NOTE_DOC_VW2;
                                                   Local integer &i2261;
                                                   For &i2261 = 1 To &oStdNoteDocVw2Collection.Count;
                                                      &oStdNoteDocVw2 = &oStdNoteDocVw2Collection.Item(&i2261);
                                                      
                                                      rem ***** Set OM_DOCCD_RM_VW2 Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                      &oOmDoccdRmVw2Collection = &oRmaHdrNoteVw.OM_DOCCD_RM_VW2;
                                                      Local integer &i2263;
                                                      For &i2263 = 1 To &oOmDoccdRmVw2Collection.Count;
                                                         &oOmDoccdRmVw2 = &oOmDoccdRmVw2Collection.Item(&i2263);
                                                         
                                                         rem ***** Set RMA_HDR_NOTE_DC Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                         &oRmaHdrNoteDcCollection = &oRmaHdrNoteVw.RMA_HDR_NOTE_DC;
                                                         Local integer &i2266;
                                                         For &i2266 = 1 To &oRmaHdrNoteDcCollection.Count;
                                                            &oRmaHdrNoteDc = &oRmaHdrNoteDcCollection.Item(&i2266);
                                                         End-For;
                                                      End-For;
                                                      
                                                      rem ***** Set/Get RMA_HDR_ATT_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                      &oRmaHdrAttVwCollection = &oZRmaFormInvCi.RMA_HDR_ATT_VW;
                                                      Local integer &i1268;
                                                      For &i1268 = 1 To &oRmaHdrAttVwCollection.Count;
                                                         &oRmaHdrAttVw = &oRmaHdrAttVwCollection.Item(&i1268);
                                                      End-For;
                                                      
                                                      rem ***** Set/Get RMA_ADDR_HDR_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                      &oRmaAddrHdrVwCollection = &oZRmaFormInvCi.RMA_ADDR_HDR_VW;
                                                      Local integer &i1272;
                                                      For &i1272 = 1 To &oRmaAddrHdrVwCollection.Count;
                                                         &oRmaAddrHdrVw = &oRmaAddrHdrVwCollection.Item(&i1272);
                                                      End-For;
                                                      
                                                      rem ***** Set/Get ORDENT_CUST_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                      &oOrdentCustVwCollection = &oZRmaFormInvCi.ORDENT_CUST_VW;
                                                      Local integer &i1296;
                                                      For &i1296 = 1 To &oOrdentCustVwCollection.Count;
                                                         &oOrdentCustVw = &oOrdentCustVwCollection.Item(&i1296);
                                                         
                                                         rem ***** Set TAX_GEOCODE_TMP Collection Field Properties -- Parent: ORDENT_CUST_VW Collection *****;
                                                         &oTaxGeocodeTmpCollection = &oOrdentCustVw.TAX_GEOCODE_TMP;
                                                         Local integer &i2298;
                                                         For &i2298 = 1 To &oTaxGeocodeTmpCollection.Count;
                                                            &oTaxGeocodeTmp = &oTaxGeocodeTmpCollection.Item(&i2298);
                                                            
                                                            rem ***** Set RMA_ADDSQ_VW Collection Field Properties -- Parent: ORDENT_CUST_VW Collection *****;
                                                            &oRmaAddsqVwCollection = &oOrdentCustVw.RMA_ADDSQ_VW;
                                                            Local integer &i2305;
                                                            For &i2305 = 1 To &oRmaAddsqVwCollection.Count;
                                                               &oRmaAddsqVw = &oRmaAddsqVwCollection.Item(&i2305);
                                                               
                                                               rem ***** Set RMA_CADDR_VW Collection Field Properties -- Parent: RMA_ADDSQ_VW Collection *****;
                                                               &oRmaCaddrVwCollection = &oRmaAddsqVw.RMA_CADDR_VW;
                                                               Local integer &i3315;
                                                               For &i3315 = 1 To &oRmaCaddrVwCollection.Count;
                                                                  &oRmaCaddrVw = &oRmaCaddrVwCollection.Item(&i3315);
                                                               End-For;
                                                            End-For;
                                                         End-For;
                                                         
                                                         rem ***** Set/Get RMA_LOCATION_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oRmaLocationVwCollection = &oZRmaFormInvCi.RMA_LOCATION_VW;
                                                         Local integer &i1342;
                                                         For &i1342 = 1 To &oRmaLocationVwCollection.Count;
                                                            &oRmaLocationVw = &oRmaLocationVwCollection.Item(&i1342);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get RMA_LN_DELKY_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oRmaLnDelkyVwCollection = &oZRmaFormInvCi.RMA_LN_DELKY_VW;
                                                         Local integer &i1365;
                                                         For &i1365 = 1 To &oRmaLnDelkyVwCollection.Count;
                                                            &oRmaLnDelkyVw = &oRmaLnDelkyVwCollection.Item(&i1365);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_GROUP Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdGroupCollection = &oZRmaFormInvCi.ORD_GROUP;
                                                         Local integer &i1367;
                                                         For &i1367 = 1 To &oOrdGroupCollection.Count;
                                                            &oOrdGroup = &oOrdGroupCollection.Item(&i1367);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get CUST_SHPOPT_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oCustShpoptVwCollection = &oZRmaFormInvCi.CUST_SHPOPT_VW;
                                                         Local integer &i1369;
                                                         For &i1369 = 1 To &oCustShpoptVwCollection.Count;
                                                            &oCustShpoptVw = &oCustShpoptVwCollection.Item(&i1369);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_HEADER_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdHeaderFsCollection = &oZRmaFormInvCi.ORD_HEADER_FS;
                                                         Local integer &i1372;
                                                         For &i1372 = 1 To &oOrdHeaderFsCollection.Count;
                                                            &oOrdHeaderFs = &oOrdHeaderFsCollection.Item(&i1372);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_LINE_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdLineFsCollection = &oZRmaFormInvCi.ORD_LINE_FS;
                                                         Local integer &i1374;
                                                         For &i1374 = 1 To &oOrdLineFsCollection.Count;
                                                            &oOrdLineFs = &oOrdLineFsCollection.Item(&i1374);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_PRICE_ADJST Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdPriceAdjstCollection = &oZRmaFormInvCi.ORD_PRICE_ADJST;
                                                         Local integer &i1376;
                                                         For &i1376 = 1 To &oOrdPriceAdjstCollection.Count;
                                                            &oOrdPriceAdjst = &oOrdPriceAdjstCollection.Item(&i1376);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get SCON_HDR Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oSconHdrCollection = &oZRmaFormInvCi.SCON_HDR;
                                                         Local integer &i1378;
                                                         For &i1378 = 1 To &oSconHdrCollection.Count;
                                                            &oSconHdr = &oSconHdrCollection.Item(&i1378);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_INVITEMS_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdInvitemsVwCollection = &oZRmaFormInvCi.ORD_INVITEMS_VW;
                                                         Local integer &i1380;
                                                         For &i1380 = 1 To &oOrdInvitemsVwCollection.Count;
                                                            &oOrdInvitemsVw = &oOrdInvitemsVwCollection.Item(&i1380);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get BI_ADJ_GRP_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oBiAdjGrpLineCollection = &oZRmaFormInvCi.BI_ADJ_GRP_LINE;
                                                         Local integer &i1382;
                                                         For &i1382 = 1 To &oBiAdjGrpLineCollection.Count;
                                                            &oBiAdjGrpLine = &oBiAdjGrpLineCollection.Item(&i1382);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get CUST_GROUP_TBL Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oCustGroupTblCollection = &oZRmaFormInvCi.CUST_GROUP_TBL;
                                                         Local integer &i1384;
                                                         For &i1384 = 1 To &oCustGroupTblCollection.Count;
                                                            &oCustGroupTbl = &oCustGroupTblCollection.Item(&i1384);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get DST_RLSET_OM_V2 Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oDstRlsetOmV2Collection = &oZRmaFormInvCi.DST_RLSET_OM_V2;
                                                         Local integer &i1386;
                                                         For &i1386 = 1 To &oDstRlsetOmV2Collection.Count;
                                                            &oDstRlsetOmV2 = &oDstRlsetOmV2Collection.Item(&i1386);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get CUST_TAXGPSH_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oCustTaxgpshVwCollection = &oZRmaFormInvCi.CUST_TAXGPSH_VW;
                                                         Local integer &i1388;
                                                         For &i1388 = 1 To &oCustTaxgpshVwCollection.Count;
                                                            &oCustTaxgpshVw = &oCustTaxgpshVwCollection.Item(&i1388);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get BU_LED_COMB_VWG Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oBuLedCombVwgCollection = &oZRmaFormInvCi.BU_LED_COMB_VWG;
                                                         Local integer &i1390;
                                                         For &i1390 = 1 To &oBuLedCombVwgCollection.Count;
                                                            &oBuLedCombVwg = &oBuLedCombVwgCollection.Item(&i1390);
                                                            
                                                            rem ***** Set BU_LED_COMB_VW Collection Field Properties -- Parent: BU_LED_COMB_VWG Collection *****;
                                                            &oBuLedCombVwCollection = &oBuLedCombVwg.BU_LED_COMB_VW;
                                                            Local integer &i2396;
                                                            For &i2396 = 1 To &oBuLedCombVwCollection.Count;
                                                               &oBuLedCombVw = &oBuLedCombVwCollection.Item(&i2396);
                                                               
                                                               rem ***** Set COMBO_CFDEFN_VW Collection Field Properties -- Parent: BU_LED_COMB_VW Collection *****;
                                                               &oComboCfdefnVwCollection = &oBuLedCombVw.COMBO_CFDEFN_VW;
                                                               Local integer &i3398;
                                                               For &i3398 = 1 To &oComboCfdefnVwCollection.Count;
                                                                  &oComboCfdefnVw = &oComboCfdefnVwCollection.Item(&i3398);
                                                               End-For;
                                                            End-For;
                                                         End-For;
                                                         rem ***** End: Get/Set Component Interface Properties *****;
                                                         
                                                         rem ***** Execute Save *****;
                                                         If Not &oZRmaFormInvCi.Save() Then;
                                                            errorHandler();
                                                            throw CreateException(0, 0, "Save failed");
                                                         Else
                                                            /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                                                            REMARK - CALL Z_RECEIVE_RMA_CI;
                                                            /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                                                            CommitWork();
                                                            Local File &fileLog_RMA;
                                                            Local ApiObject &oSession_RMA, &oZReceiveRmaCi;
                                                            Local ApiObject &oInvRecvVwCollection, &oInvRecvVw;
                                                            Local ApiObject &oInvRecvSerVwCollection, &oInvRecvSerVw;
                                                            Local ApiObject &oInPegHdrTmpCollection, &oInPegHdrTmp;
                                                            Local ApiObject &oInPegDetailCollection, &oInPegDetail;
                                                            Local ApiObject &oInvRecvLnCollection, &oInvRecvLn;
                                                            Local ApiObject &oInvRecvCfTmpCollection, &oInvRecvCfTmp;
                                                            Local ApiObject &oInvRecvShpserCollection, &oInvRecvShpser;
                                                            Local ApiObject &oInvRecvSerialCollection, &oInvRecvSerial;
                                                            Local ApiObject &oStagedIrcvVwCollection, &oStagedIrcvVw;
                                                            Local ApiObject &oShipSerrecvVwCollection, &oShipSerrecvVw;
                                                            Local ApiObject &oInvRecvSerVw2Collection, &oInvRecvSerVw2;
                                                            Local ApiObject &oStorLev4VwCollection, &oStorLev4Vw;
                                                            Local ApiObject &oDemandPhysInvCollection, &oDemandPhysInv;
                                                            Local ApiObject &oPtwySetupVwCollection, &oPtwySetupVw;
                                                            Local ApiObject &oTransactionInvCollection, &oTransactionInv;
                                                            Local ApiObject &oStagedReqInvCollection, &oStagedReqInv;
                                                            Local ApiObject &oRmaHeaderCollection, &oRmaHeader;
                                                            Local ApiObject &oRmaLineCollection_RMA, &oRmaLine_RMA;
                                                            Local ApiObject &oRmaLineDstCollection, &oRmaLineDst;
                                                            rem Local ApiObject &oRmaReplSoDstCollection, &oRmaReplSoDst;
                                                            Local ApiObject &oRmaLineOrderCollection, &oRmaLineOrder;
                                                            rem Local ApiObject &oOrdInvitemsVwCollection, &oOrdInvitemsVw;
                                                            Local ApiObject &oRmaReturnTypeCollection, &oRmaReturnType;
                                                            rem Local ApiObject &oOrdHeaderFsCollection, &oOrdHeaderFs;
                                                            rem Local ApiObject &oOrdLineFsCollection, &oOrdLineFs;
                                                            Local ApiObject &oOrdAddrCollection, &oOrdAddr;
                                                            rem Local ApiObject &oBiAdjGrpLineCollection, &oBiAdjGrpLine;
                                                            rem Local ApiObject &oCustGroupTblCollection, &oCustGroupTbl;
                                                            Local ApiObject &oProdkitCompVwCollection, &oProdkitCompVw;
                                                            Local ApiObject &oInPtwyLocVwCollection, &oInPtwyLocVw;
                                                            rem Local ApiObject &oBuLedCombVwgCollection, &oBuLedCombVwg;
                                                            rem Local ApiObject &oBuLedCombVwCollection, &oBuLedCombVw;
                                                            rem Local ApiObject &oComboCfdefnVwCollection, &oComboCfdefnVw;
                                                            Local ApiObject &oQsSessnHdr8Collection, &oQsSessnHdr8;
                                                            Local ApiObject &oQsSubgroupCollection, &oQsSubgroup;
                                                            Local ApiObject &oQsSessnTrace8Collection, &oQsSessnTrace8;
                                                            Local ApiObject &oQsXferStrmVwCollection, &oQsXferStrmVw;
                                                            Local ApiObject &oOrdHoldCollection, &oOrdHold;
                                                            Local ApiObject &oOrdLineDtVwCollection, &oOrdLineDtVw;
                                                            Local ApiObject &oOrdLnPromoVwCollection, &oOrdLnPromoVw;
                                                            Local ApiObject &oOrdHdrCommCollection, &oOrdHdrComm;
                                                            Local ApiObject &oOrdIssueHdVwCollection, &oOrdIssueHdVw;
                                                            Local ApiObject &oShipPriorityCollection, &oShipPriority;
                                                            Local ApiObject &oProdTaxgpVwCollection, &oProdTaxgpVw;
                                                            Local ApiObject &oDemInvVwCollection, &oDemInvVw;
                                                            Local ApiObject &oBuItemsInvVwCollection, &oBuItemsInvVw;
                                                            Local ApiObject &oOrdAddrHdrVwCollection, &oOrdAddrHdrVw;
                                                            Local ApiObject &oOrdAddrLnVwCollection, &oOrdAddrLnVw;
                                                            Local ApiObject &oOrdAddrShpVwCollection, &oOrdAddrShpVw;
                                                            Local ApiObject &oOrdShipInfVwCollection, &oOrdShipInfVw;
                                                            Local ApiObject &oOmCstNsshpVwCollection, &oOmCstNsshpVw;
                                                            Local ApiObject &oRegionCdCollection, &oRegionCd;
                                                            
                                                            
                                                            try
                                                               rem ***** Set the Log File *****;
                                                               &fileLog_RMA = GetFile("C:\temp\Z_RECEIVE_RMA_CI_" | %Datetime | ".log", "w", "a", %FilePath_Absolute);
                                                               &fileLog_RMA.WriteLine("Begin");
                                                               rem ***** Get current PeopleSoft Session *****;
                                                               &oSession_RMA = %Session;
                                                               
                                                               &oSession_RMA.PSMessagesMode = 3;
                                                               
                                                               rem ***** Get the Component Interface *****;
                                                               &oZReceiveRmaCi = &oSession.GetCompIntfc(CompIntfc.Z_RECEIVE_RMA_CI);
                                                               If &oZReceiveRmaCi = Null Then
                                                                  errorHandler();
                                                                  throw CreateException(0, 0, "GetCompIntfc failed");
                                                               End-If;
                                                               
                                                               rem ***** Set the Component Interface Mode *****;
                                                               &oZReceiveRmaCi.InteractiveMode = True;
                                                               &oZReceiveRmaCi.GetHistoryItems = True;
                                                               &oZReceiveRmaCi.EditHistoryItems = False;
                                                               
                                                               rem ***** Set Component Interface Get/Create Keys *****;
                                                               MessageBox(0, "", 0, 0, "&BU " | &BU);
                                                               &oZReceiveRmaCi.BUSINESS_UNIT = &BU;
                                                               rem =================================================================;
                                                               rem = Auto-assign the receiver_id                                    ;
                                                               rem =================================================================;
                                                               &NUMBER_TYPE = "RCID";
                                                               &ZERO_PAD = "Y";
                                                               &BEG_SEQ = "";
                                                               rem assign_auto_number("", INV_RECV_HDR.BUSINESS_UNIT, Record.RCV_AN_INV_VW, INV_RECV_HDR.RECEIVER_ID, &NUMBER_TYPE, &ZERO_PAD, &FINAL_NUM);
                                                               rem MessageBox(0, "", 0, 0, "&FINAL_NUM " | &FINAL_NUM);
                                                               &New_num = "RCV00";
                                                               SQLExec("SELECT LAST_AUTO_NBR FROM PS_AUTO_NUM_TBL WHERE SETID = 'SHARE'AND NUM_TYPE like '%RCID%'", &LAST);
                                                               &NUM = &LAST + 1;
                                                               &FIL_NUM = &New_num | &NUM;
                                                               MessageBox(0, "", 0, 0, "&FIL_NUM " | &FIL_NUM);
                                                               &oZReceiveRmaCi.RECEIVER_ID = &FIL_NUM;
                                                               &receiptType = "RMA";
                                                               &oZReceiveRmaCi.RECEIPT_TYPE = &receiptType;
                                                               
                                                               rem ***** Execute Get *****;
                                                               REM If Not &oZReceiveRmaCi.Get() Then
		rem ***** No rows exist for the specified keys.*****;
                                                               REM errorHandler();
                                                               REM throw CreateException(0, 0, "Get failed");
                                                               REM End-If;
                                                               
                                                               rem ***** Execute Create ******;
                                                               If Not &oZReceiveRmaCi.Create() Then;
                                                                  rem ***** Unable to Create Component Interface for the Add keys provided. *****;
                                                                  errorHandler();
                                                                  throw CreateException(0, 0, "Create failed");
                                                               End-If;
                                                               
                                                               
                                                               rem ***** Begin: Get/Set Component Interface Properties *****;
                                                               rem ***** Get/Set Level 0 Field Properties *****;
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.BILL_OF_LADING = " | &oZReceiveRmaCi.BILL_OF_LADING);
                                                               rem &oZReceiveRmaCi.BILL_OF_LADING = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.INV_RECV_STATUS = " | &oZReceiveRmaCi.INV_RECV_STATUS);
                                                               &oZReceiveRmaCi.INV_RECV_STATUS = "O";
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.PORT_OF_UNLOADING = " | &oZReceiveRmaCi.PORT_OF_UNLOADING);
                                                               rem &oZReceiveRmaCi.PORT_OF_UNLOADING = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.PUTAWAY_ACTION = " | &oZReceiveRmaCi.PUTAWAY_ACTION);
                                                               &oZReceiveRmaCi.PUTAWAY_ACTION = "S";
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.FROM_DATE_DETAIL = " | &oZReceiveRmaCi.FROM_DATE_DETAIL);
                                                               &oZReceiveRmaCi.FROM_DATE_DETAIL = %Date;
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.TO_DATE_DETAIL = " | &oZReceiveRmaCi.TO_DATE_DETAIL);
                                                               &oZReceiveRmaCi.TO_DATE_DETAIL = %Date;
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.FULL_PEG_OTHER_FLG = " | &oZReceiveRmaCi.FULL_PEG_OTHER_FLG);
                                                               rem &oZReceiveRmaCi.FULL_PEG_OTHER_FLG = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STORAGE_AREA_0 = " | &oZReceiveRmaCi.STORAGE_AREA_0);
                                                               rem &oZReceiveRmaCi.STORAGE_AREA_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_1_0 = " | &oZReceiveRmaCi.STOR_LEVEL_1_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_1_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_2_0 = " | &oZReceiveRmaCi.STOR_LEVEL_2_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_2_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_3_0 = " | &oZReceiveRmaCi.STOR_LEVEL_3_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_3_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_4_0 = " | &oZReceiveRmaCi.STOR_LEVEL_4_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_4_0 = [*];
                                                               
                                                               rem ***** Set/Get INV_RECV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                               &oInvRecvVwCollection = &oZReceiveRmaCi.INV_RECV_VW;
                                                               Local integer &i1226;
                                                               For &i1226 = 1 To &oInvRecvVwCollection.Count;
                                                                  &oInvRecvVw = &oInvRecvVwCollection.Item(&i1226);
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.QTY_RECEIPT = " | &oInvRecvVw.QTY_RECEIPT);
                                                                  &oInvRecvVw.QTY_RECEIPT = "10";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.UNIT_MEASURE_SHIP = " | &oInvRecvVw.UNIT_MEASURE_SHIP);
                                                                  rem &oInvRecvVw.UNIT_MEASURE_SHIP = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.UOM_QTY_RETURN = " | &oInvRecvVw.UOM_QTY_RETURN);
                                                                  rem &oInvRecvVw.UOM_QTY_RETURN = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.SELECT_FLAG = " | &oInvRecvVw.SELECT_FLAG);
                                                                  rem &oInvRecvVw.SELECT_FLAG = [*];
                                                                  &oInvRecvVw.BUSINESS_UNIT_RMA = "US008";
                                                                  &oInvRecvVw.RMA_ID = &FINAL_NUM;
                                                                  SQLExec("SELECT INV_ITEM_ID FROM PS_RMA_LINE WHERE BUSINESS_UNIT = :1 AND RMA_ID = :2", "US008", &FINAL_NUM, &ITEM_1);
                                                                  MessageBox(0, "", 0, 0, "Creating receipt ID " | &FIL_NUM | " for RMA ID " | &FINAL_NUM | " having Item ID " | &ITEM_1);
                                                                  &oInvRecvVw.INV_ITEM_ID_1 = &ITEM_1;
                                                                  
                                                                  rem ***** Set INV_RECV_SER_VW Collection Field Properties -- Parent: INV_RECV_VW Collection *****;
                                                                  &oInvRecvSerVwCollection = &oInvRecvVw.INV_RECV_SER_VW;
                                                                  Local integer &i22461;
                                                                  For &i22461 = 1 To &oInvRecvSerVwCollection.Count;
                                                                     &oInvRecvSerVw = &oInvRecvSerVwCollection.Item(&i22461);
                                                                     &fileLog_RMA.WriteLine("&oInvRecvSerVw.SELECT_FLAG_1 = " | &oInvRecvSerVw.SELECT_FLAG_1);
                                                                     rem &oInvRecvSerVw.SELECT_FLAG_1 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvSerVw.QTY = " | &oInvRecvSerVw.QTY);
                                                                     rem &oInvRecvSerVw.QTY = [*];
                                                                  End-For;
                                                               End-For;
                                                               
                                                               rem ***** Set/Get IN_PEG_HDR_TMP Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                               &oInPegHdrTmpCollection = &oZReceiveRmaCi.IN_PEG_HDR_TMP;
                                                               Local integer &i1253;
                                                               For &i1253 = 1 To &oInPegHdrTmpCollection.Count;
                                                                  &oInPegHdrTmp = &oInPegHdrTmpCollection.Item(&i1253);
                                                                  
                                                                  rem ***** Set IN_PEG_DETAIL Collection Field Properties -- Parent: IN_PEG_HDR_TMP Collection *****;
                                                                  &oInPegDetailCollection = &oInPegHdrTmp.IN_PEG_DETAIL;
                                                                  Local integer &i2275;
                                                                  For &i2275 = 1 To &oInPegDetailCollection.Count;
                                                                     &oInPegDetail = &oInPegDetailCollection.Item(&i2275);
                                                                     &fileLog_RMA.WriteLine("&oInPegDetail.NET_QTY_PEGGED = " | &oInPegDetail.NET_QTY_PEGGED);
                                                                     rem &oInPegDetail.NET_QTY_PEGGED = [*];
                                                                  End-For;
                                                               End-For;
                                                               
                                                               rem ***** Set/Get INV_RECV_LN Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                               &oInvRecvLnCollection = &oZReceiveRmaCi.INV_RECV_LN;
                                                               Local integer &i1288;
                                                               For &i1288 = 1 To &oInvRecvLnCollection.Count;
                                                                  &oInvRecvLn = &oInvRecvLnCollection.Item(&i1288);
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.INV_RECVLN_STATUS = " | &oInvRecvLn.INV_RECVLN_STATUS);
                                                                  &oInvRecvLn.INV_RECVLN_STATUS = "O";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.PACKSLIP_NO = " | &oInvRecvLn.PACKSLIP_NO);
                                                                  rem &oInvRecvLn.PACKSLIP_NO = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.QTY_INV_RECV = " | &oInvRecvLn.QTY_INV_RECV);
                                                                  &oInvRecvLn.QTY_INV_RECV = "10";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.UNIT_OF_MEASURE_1 = " | &oInvRecvLn.UNIT_OF_MEASURE_1);
                                                                  rem &oInvRecvLn.UNIT_OF_MEASURE_1 = "EA";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.CONFIG_CODE = " | &oInvRecvLn.CONFIG_CODE);
                                                                  rem &oInvRecvLn.CONFIG_CODE = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.SPEEDTYPE_KEY = " | &oInvRecvLn.SPEEDTYPE_KEY);
                                                                  rem &oInvRecvLn.SPEEDTYPE_KEY = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.PORT_OF_UNLOADING_1 = " | &oInvRecvLn.PORT_OF_UNLOADING_1);
                                                                  rem &oInvRecvLn.PORT_OF_UNLOADING_1 = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.DISTRIB_TYPE = " | &oInvRecvLn.DISTRIB_TYPE);
                                                                  rem &oInvRecvLn.DISTRIB_TYPE = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.REPLACEMENT_FLG = " | &oInvRecvLn.REPLACEMENT_FLG);
                                                                  rem &oInvRecvLn.REPLACEMENT_FLG = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.IST_RETURN_FLG_IUT = " | &oInvRecvLn.IST_RETURN_FLG_IUT);
                                                                  rem &oInvRecvLn.IST_RETURN_FLG_IUT = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.RECEIPT_DT = " | &oInvRecvLn.RECEIPT_DT);
                                                                  &oInvRecvLn.RECEIPT_DT = %Date;
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.RECEIPT_TM = " | &oInvRecvLn.RECEIPT_TM);
                                                                  &oInvRecvLn.RECEIPT_TM = %Time;
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.QUALITY_ITEM_FLG = " | &oInvRecvLn.QUALITY_ITEM_FLG);
                                                                  rem &oInvRecvLn.QUALITY_ITEM_FLG = [*];
                                                                  
                                                                  rem ***** Set INV_RECV_CF_TMP Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                  &oInvRecvCfTmpCollection = &oInvRecvLn.INV_RECV_CF_TMP;
                                                                  Local integer &i2314;
                                                                  For &i2314 = 1 To &oInvRecvCfTmpCollection.Count;
                                                                     &oInvRecvCfTmp = &oInvRecvCfTmpCollection.Item(&i2314);
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.ACCOUNT = " | &oInvRecvCfTmp.ACCOUNT);
                                                                     rem &oInvRecvCfTmp.ACCOUNT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.ALTACCT = " | &oInvRecvCfTmp.ALTACCT);
                                                                     rem &oInvRecvCfTmp.ALTACCT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.DEPTID = " | &oInvRecvCfTmp.DEPTID);
                                                                     rem &oInvRecvCfTmp.DEPTID = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.OPERATING_UNIT = " | &oInvRecvCfTmp.OPERATING_UNIT);
                                                                     rem &oInvRecvCfTmp.OPERATING_UNIT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.PRODUCT = " | &oInvRecvCfTmp.PRODUCT);
                                                                     rem &oInvRecvCfTmp.PRODUCT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.FUND_CODE = " | &oInvRecvCfTmp.FUND_CODE);
                                                                     rem &oInvRecvCfTmp.FUND_CODE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CLASS_FLD = " | &oInvRecvCfTmp.CLASS_FLD);
                                                                     rem &oInvRecvCfTmp.CLASS_FLD = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.PROGRAM_CODE = " | &oInvRecvCfTmp.PROGRAM_CODE);
                                                                     rem &oInvRecvCfTmp.PROGRAM_CODE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.BUDGET_REF = " | &oInvRecvCfTmp.BUDGET_REF);
                                                                     rem &oInvRecvCfTmp.BUDGET_REF = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.AFFILIATE = " | &oInvRecvCfTmp.AFFILIATE);
                                                                     rem &oInvRecvCfTmp.AFFILIATE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.AFFILIATE_INTRA1 = " | &oInvRecvCfTmp.AFFILIATE_INTRA1);
                                                                     rem &oInvRecvCfTmp.AFFILIATE_INTRA1 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.AFFILIATE_INTRA2 = " | &oInvRecvCfTmp.AFFILIATE_INTRA2);
                                                                     rem &oInvRecvCfTmp.AFFILIATE_INTRA2 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CHARTFIELD1 = " | &oInvRecvCfTmp.CHARTFIELD1);
                                                                     rem &oInvRecvCfTmp.CHARTFIELD1 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CHARTFIELD2 = " | &oInvRecvCfTmp.CHARTFIELD2);
                                                                     rem &oInvRecvCfTmp.CHARTFIELD2 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CHARTFIELD3 = " | &oInvRecvCfTmp.CHARTFIELD3);
                                                                     rem &oInvRecvCfTmp.CHARTFIELD3 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.BUSINESS_UNIT_PC = " | &oInvRecvCfTmp.BUSINESS_UNIT_PC);
                                                                     rem &oInvRecvCfTmp.BUSINESS_UNIT_PC = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.PROJECT_ID = " | &oInvRecvCfTmp.PROJECT_ID);
                                                                     rem &oInvRecvCfTmp.PROJECT_ID = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.ACTIVITY_ID = " | &oInvRecvCfTmp.ACTIVITY_ID);
                                                                     rem &oInvRecvCfTmp.ACTIVITY_ID = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.RESOURCE_TYPE = " | &oInvRecvCfTmp.RESOURCE_TYPE);
                                                                     rem &oInvRecvCfTmp.RESOURCE_TYPE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.RESOURCE_CATEGORY = " | &oInvRecvCfTmp.RESOURCE_CATEGORY);
                                                                     rem &oInvRecvCfTmp.RESOURCE_CATEGORY = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.RESOURCE_SUB_CAT = " | &oInvRecvCfTmp.RESOURCE_SUB_CAT);
                                                                     rem &oInvRecvCfTmp.RESOURCE_SUB_CAT = [*];
                                                                     
                                                                     rem ***** Set INV_RECV_SHPSER Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                     &oInvRecvShpserCollection = &oInvRecvLn.INV_RECV_SHPSER;
                                                                     Local integer &i2336;
                                                                     For &i2336 = 1 To &oInvRecvShpserCollection.Count;
                                                                        &oInvRecvShpser = &oInvRecvShpserCollection.Item(&i2336);
                                                                        &fileLog_RMA.WriteLine("&oInvRecvShpser.SELECT_CB = " | &oInvRecvShpser.SELECT_CB);
                                                                        rem &oInvRecvShpser.SELECT_CB = [*];
                                                                        &fileLog_RMA.WriteLine("&oInvRecvShpser.SERIAL_ID_1 = " | &oInvRecvShpser.SERIAL_ID_1);
                                                                        rem &oInvRecvShpser.SERIAL_ID_1 = [*];
                                                                        &fileLog_RMA.WriteLine("&oInvRecvShpser.INV_LOT_ID = " | &oInvRecvShpser.INV_LOT_ID);
                                                                        rem &oInvRecvShpser.INV_LOT_ID = [*];
                                                                        
                                                                        rem ***** Set INV_RECV_SERIAL Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                        &oInvRecvSerialCollection = &oInvRecvLn.INV_RECV_SERIAL;
                                                                        Local integer &i2340;
                                                                        For &i2340 = 1 To &oInvRecvSerialCollection.Count;
                                                                           &oInvRecvSerial = &oInvRecvSerialCollection.Item(&i2340);
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.CONTAINER_ID_1 = " | &oInvRecvSerial.CONTAINER_ID_1);
                                                                           rem &oInvRecvSerial.CONTAINER_ID_1 = [*];
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.QTY_1 = " | &oInvRecvSerial.QTY_1);
                                                                           rem &oInvRecvSerial.QTY_1 = "10";
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.SERIAL_ID_3 = " | &oInvRecvSerial.SERIAL_ID_3);
                                                                           rem &oInvRecvSerial.SERIAL_ID_3 = [*];
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.LOT_ID_1 = " | &oInvRecvSerial.LOT_ID_1);
                                                                           rem &oInvRecvSerial.LOT_ID_1 = [*];
                                                                           
                                                                           rem ***** Set STAGED_IRCV_VW Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                           &oStagedIrcvVwCollection = &oInvRecvLn.STAGED_IRCV_VW;
                                                                           Local integer &i2346;
                                                                           For &i2346 = 1 To &oStagedIrcvVwCollection.Count;
                                                                              &oStagedIrcvVw = &oStagedIrcvVwCollection.Item(&i2346);
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.INV_LOT_ID_1 = " | &oStagedIrcvVw.INV_LOT_ID_1);
                                                                              rem &oStagedIrcvVw.INV_LOT_ID_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.CONTAINER_ID_3 = " | &oStagedIrcvVw.CONTAINER_ID_3);
                                                                              rem &oStagedIrcvVw.CONTAINER_ID_3 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.SERIAL_ID_5 = " | &oStagedIrcvVw.SERIAL_ID_5);
                                                                              rem &oStagedIrcvVw.SERIAL_ID_5 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.QTY_3 = " | &oStagedIrcvVw.QTY_3);
                                                                              rem &oStagedIrcvVw.QTY_3 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.UNIT_OF_MEASURE_5 = " | &oStagedIrcvVw.UNIT_OF_MEASURE_5);
                                                                              rem &oStagedIrcvVw.UNIT_OF_MEASURE_5 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STORAGE_AREA_1 = " | &oStagedIrcvVw.STORAGE_AREA_1);
                                                                              rem &oStagedIrcvVw.STORAGE_AREA_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_1_1 = " | &oStagedIrcvVw.STOR_LEVEL_1_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_1_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_2_1 = " | &oStagedIrcvVw.STOR_LEVEL_2_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_2_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_3_1 = " | &oStagedIrcvVw.STOR_LEVEL_3_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_3_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_4_1 = " | &oStagedIrcvVw.STOR_LEVEL_4_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_4_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.CONFIG_CODE_1 = " | &oStagedIrcvVw.CONFIG_CODE_1);
                                                                              rem &oStagedIrcvVw.CONFIG_CODE_1 = [*];
                                                                              
                                                                              rem ***** Set SHIP_SERRECV_VW Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                              &oShipSerrecvVwCollection = &oInvRecvLn.SHIP_SERRECV_VW;
                                                                              Local integer &i2359;
                                                                              For &i2359 = 1 To &oShipSerrecvVwCollection.Count;
                                                                                 &oShipSerrecvVw = &oShipSerrecvVwCollection.Item(&i2359);
                                                                                 
                                                                                 rem ***** Set INV_RECV_SER_VW2 Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                                 &oInvRecvSerVw2Collection = &oInvRecvLn.INV_RECV_SER_VW2;
                                                                                 Local integer &i2361;
                                                                                 For &i2361 = 1 To &oInvRecvSerVw2Collection.Count;
                                                                                    &oInvRecvSerVw2 = &oInvRecvSerVw2Collection.Item(&i2361);
                                                                                    &fileLog_RMA.WriteLine("&oInvRecvSerVw2.QTY_5 = " | &oInvRecvSerVw2.QTY_5);
                                                                                    rem &oInvRecvSerVw2.QTY_5 = [*];
                                                                                 End-For;
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get STOR_LEV4_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oStorLev4VwCollection = &oZReceiveRmaCi.STOR_LEV4_VW;
                                                                              Local integer &i13671;
                                                                              For &i13671 = 1 To &oStorLev4VwCollection.Count;
                                                                                 &oStorLev4Vw = &oStorLev4VwCollection.Item(&i13671);
                                                                                 &fileLog_RMA.WriteLine("&oStorLev4Vw.SELECT_CB_1 = " | &oStorLev4Vw.SELECT_CB_1);
                                                                                 rem &oStorLev4Vw.SELECT_CB_1 = [*];
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get DEMAND_PHYS_INV Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oDemandPhysInvCollection = &oZReceiveRmaCi.DEMAND_PHYS_INV;
                                                                              Local integer &i13691;
                                                                              For &i13691 = 1 To &oDemandPhysInvCollection.Count;
                                                                                 &oDemandPhysInv = &oDemandPhysInvCollection.Item(&i13691);
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get PTWY_SETUP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oPtwySetupVwCollection = &oZReceiveRmaCi.PTWY_SETUP_VW;
                                                                              Local integer &i13721;
                                                                              For &i13721 = 1 To &oPtwySetupVwCollection.Count;
                                                                                 &oPtwySetupVw = &oPtwySetupVwCollection.Item(&i13721);
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get TRANSACTION_INV Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oTransactionInvCollection = &oZReceiveRmaCi.TRANSACTION_INV;
                                                                              Local integer &i137412;
                                                                              For &i137412 = 1 To &oTransactionInvCollection.Count;
                                                                                 &oTransactionInv = &oTransactionInvCollection.Item(&i137412);
                                                                              End-For;
                                                                              /*
	rem ***** Set/Get STAGED_REQ_INV Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oStagedReqInvCollection = &oZReceiveRmaCi.STAGED_REQ_INV;
	Local integer &i1376;
	For &i1376 = 1 To &oStagedReqInvCollection.Count;
	&oStagedReqInv = &oStagedReqInvCollection.Item(&i1376);
	End-For;
	*/
                                                                              rem ***** Set/Get RMA_HEADER Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oRmaHeaderCollection = &oZReceiveRmaCi.RMA_HEADER;
                                                                              Local integer &i1379;
                                                                              For &i1379 = 1 To &oRmaHeaderCollection.Count;
                                                                                 &oRmaHeader = &oRmaHeaderCollection.Item(&i1379);
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get RMA_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oRmaLineCollection_RMA = &oZReceiveRmaCi.RMA_LINE;
                                                                              Local integer &i1381;
                                                                              For &i1381 = 1 To &oRmaLineCollection_RMA.Count;
                                                                                 &oRmaLine_RMA = &oRmaLineCollection_RMA.Item(&i1381);
                                                                                 
                                                                                 rem ***** Set RMA_LINE_DST Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                                                                 &oRmaLineDstCollection = &oRmaLine_RMA.RMA_LINE_DST;
                                                                                 Local integer &i23873;
                                                                                 For &i23873 = 1 To &oRmaLineDstCollection.Count;
                                                                                    &oRmaLineDst = &oRmaLineDstCollection.Item(&i23873);
                                                                                    /*
	rem ***** Set RMA_REPL_SO_DST Collection Field Properties -- Parent: RMA_LINE Collection *****;
	rem &oRmaReplSoDstCollection = &oRmaLine.RMA_REPL_SO_DST;
	Local integer &i2389;
	For &i2389 = 1 To &oRmaReplSoDstCollection.Count;
	&oRmaReplSoDst = &oRmaReplSoDstCollection.Item(&i2389);
	*/
                                                                                    rem ***** Set RMA_LINE_ORDER Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                                                                    &oRmaLineOrderCollection = &oRmaLine_RMA.RMA_LINE_ORDER;
                                                                                    Local integer &i2391;
                                                                                    For &i2391 = 1 To &oRmaLineOrderCollection.Count;
                                                                                       &oRmaLineOrder = &oRmaLineOrderCollection.Item(&i2391);
                                                                                    End-For;
                                                                                 End-For;
                                                                                 /*
	rem ***** Set/Get ORD_INVITEMS_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdInvitemsVwCollection = &oZReceiveRmaCi.ORD_INVITEMS_VW;
	Local integer &i1393;
	For &i1393 = 1 To &oOrdInvitemsVwCollection.Count;
	&oOrdInvitemsVw = &oOrdInvitemsVwCollection.Item(&i1393);
	End-For;
	*/
                                                                                 rem ***** Set/Get RMA_RETURN_TYPE Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oRmaReturnTypeCollection = &oZReceiveRmaCi.RMA_RETURN_TYPE;
                                                                                 Local integer &i1395;
                                                                                 For &i1395 = 1 To &oRmaReturnTypeCollection.Count;
                                                                                    &oRmaReturnType = &oRmaReturnTypeCollection.Item(&i1395);
                                                                                 End-For;
                                                                                 /*
	rem ***** Set/Get ORD_HEADER_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdHeaderFsCollection = &oZReceiveRmaCi.ORD_HEADER_FS;
	Local integer &i1397;
	For &i1397 = 1 To &oOrdHeaderFsCollection.Count;
	&oOrdHeaderFs = &oOrdHeaderFsCollection.Item(&i1397);
	End-For;
	
	
	rem ***** Set/Get ORD_LINE_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdLineFsCollection = &oZReceiveRmaCi.ORD_LINE_FS;
	Local integer &i1399;
	For &i1399 = 1 To &oOrdLineFsCollection.Count;
	&oOrdLineFs = &oOrdLineFsCollection.Item(&i1399);
	End-For;
	
	rem ***** Set/Get ORD_ADDR Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdAddrCollection = &oZReceiveRmaCi.ORD_ADDR;
	Local integer &i1401;
	For &i1401 = 1 To &oOrdAddrCollection.Count;
	&oOrdAddr = &oOrdAddrCollection.Item(&i1401);
	End-For;

	rem ***** Set/Get BI_ADJ_GRP_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oBiAdjGrpLineCollection = &oZReceiveRmaCi.BI_ADJ_GRP_LINE;
	Local integer &i1403;
	For &i1403 = 1 To &oBiAdjGrpLineCollection.Count;
	&oBiAdjGrpLine = &oBiAdjGrpLineCollection.Item(&i1403);
	End-For;

	rem ***** Set/Get CUST_GROUP_TBL Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oCustGroupTblCollection = &oZReceiveRmaCi.CUST_GROUP_TBL;
	Local integer &i1405;
	For &i1405 = 1 To &oCustGroupTblCollection.Count;
	&oCustGroupTbl = &oCustGroupTblCollection.Item(&i1405);
	End-For;

	rem ***** Set/Get PRODKIT_COMP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oProdkitCompVwCollection = &oZReceiveRmaCi.PRODKIT_COMP_VW;
	Local integer &i1407;
	For &i1407 = 1 To &oProdkitCompVwCollection.Count;
	&oProdkitCompVw = &oProdkitCompVwCollection.Item(&i1407);
	End-For;
	*/
                                                                                 rem ***** Set/Get IN_PTWY_LOC_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oInPtwyLocVwCollection = &oZReceiveRmaCi.IN_PTWY_LOC_VW;
                                                                                 Local integer &i1409;
                                                                                 For &i1409 = 1 To &oInPtwyLocVwCollection.Count;
                                                                                    &oInPtwyLocVw = &oInPtwyLocVwCollection.Item(&i1409);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get BU_LED_COMB_VWG Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oBuLedCombVwgCollection = &oZReceiveRmaCi.BU_LED_COMB_VWG;
                                                                                 Local integer &i1414;
                                                                                 For &i1414 = 1 To &oBuLedCombVwgCollection.Count;
                                                                                    &oBuLedCombVwg = &oBuLedCombVwgCollection.Item(&i1414);
                                                                                    
                                                                                    rem ***** Set BU_LED_COMB_VW Collection Field Properties -- Parent: BU_LED_COMB_VWG Collection *****;
                                                                                    &oBuLedCombVwCollection = &oBuLedCombVwg.BU_LED_COMB_VW;
                                                                                    Local integer &i2420;
                                                                                    For &i2420 = 1 To &oBuLedCombVwCollection.Count;
                                                                                       &oBuLedCombVw = &oBuLedCombVwCollection.Item(&i2420);
                                                                                       
                                                                                       rem ***** Set COMBO_CFDEFN_VW Collection Field Properties -- Parent: BU_LED_COMB_VW Collection *****;
                                                                                       &oComboCfdefnVwCollection = &oBuLedCombVw.COMBO_CFDEFN_VW;
                                                                                       Local integer &i3422;
                                                                                       For &i3422 = 1 To &oComboCfdefnVwCollection.Count;
                                                                                          &oComboCfdefnVw = &oComboCfdefnVwCollection.Item(&i3422);
                                                                                       End-For;
                                                                                    End-For;
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_SESSN_HDR8 Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsSessnHdr8Collection = &oZReceiveRmaCi.QS_SESSN_HDR8;
                                                                                 Local integer &i1428;
                                                                                 For &i1428 = 1 To &oQsSessnHdr8Collection.Count;
                                                                                    &oQsSessnHdr8 = &oQsSessnHdr8Collection.Item(&i1428);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_SUBGROUP Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsSubgroupCollection = &oZReceiveRmaCi.QS_SUBGROUP;
                                                                                 Local integer &i1432;
                                                                                 For &i1432 = 1 To &oQsSubgroupCollection.Count;
                                                                                    &oQsSubgroup = &oQsSubgroupCollection.Item(&i1432);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_SESSN_TRACE8 Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsSessnTrace8Collection = &oZReceiveRmaCi.QS_SESSN_TRACE8;
                                                                                 Local integer &i1443;
                                                                                 For &i1443 = 1 To &oQsSessnTrace8Collection.Count;
                                                                                    &oQsSessnTrace8 = &oQsSessnTrace8Collection.Item(&i1443);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_XFER_STRM_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsXferStrmVwCollection = &oZReceiveRmaCi.QS_XFER_STRM_VW;
                                                                                 Local integer &i1485;
                                                                                 For &i1485 = 1 To &oQsXferStrmVwCollection.Count;
                                                                                    &oQsXferStrmVw = &oQsXferStrmVwCollection.Item(&i1485);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_HOLD Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdHoldCollection = &oZReceiveRmaCi.ORD_HOLD;
                                                                                 Local integer &i1494;
                                                                                 For &i1494 = 1 To &oOrdHoldCollection.Count;
                                                                                    &oOrdHold = &oOrdHoldCollection.Item(&i1494);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_LINE_DT_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdLineDtVwCollection = &oZReceiveRmaCi.ORD_LINE_DT_VW;
                                                                                 Local integer &i1496;
                                                                                 For &i1496 = 1 To &oOrdLineDtVwCollection.Count;
                                                                                    &oOrdLineDtVw = &oOrdLineDtVwCollection.Item(&i1496);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_LN_PROMO_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdLnPromoVwCollection = &oZReceiveRmaCi.ORD_LN_PROMO_VW;
                                                                                 Local integer &i1498;
                                                                                 For &i1498 = 1 To &oOrdLnPromoVwCollection.Count;
                                                                                    &oOrdLnPromoVw = &oOrdLnPromoVwCollection.Item(&i1498);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_HDR_COMM Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdHdrCommCollection = &oZReceiveRmaCi.ORD_HDR_COMM;
                                                                                 Local integer &i1500;
                                                                                 For &i1500 = 1 To &oOrdHdrCommCollection.Count;
                                                                                    &oOrdHdrComm = &oOrdHdrCommCollection.Item(&i1500);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ISSUE_HD_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdIssueHdVwCollection = &oZReceiveRmaCi.ORD_ISSUE_HD_VW;
                                                                                 Local integer &i1502;
                                                                                 For &i1502 = 1 To &oOrdIssueHdVwCollection.Count;
                                                                                    &oOrdIssueHdVw = &oOrdIssueHdVwCollection.Item(&i1502);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get SHIP_PRIORITY Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oShipPriorityCollection = &oZReceiveRmaCi.SHIP_PRIORITY;
                                                                                 Local integer &i1504;
                                                                                 For &i1504 = 1 To &oShipPriorityCollection.Count;
                                                                                    &oShipPriority = &oShipPriorityCollection.Item(&i1504);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get PROD_TAXGP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oProdTaxgpVwCollection = &oZReceiveRmaCi.PROD_TAXGP_VW;
                                                                                 Local integer &i1506;
                                                                                 For &i1506 = 1 To &oProdTaxgpVwCollection.Count;
                                                                                    &oProdTaxgpVw = &oProdTaxgpVwCollection.Item(&i1506);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get DEM_INV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oDemInvVwCollection = &oZReceiveRmaCi.DEM_INV_VW;
                                                                                 Local integer &i1508;
                                                                                 For &i1508 = 1 To &oDemInvVwCollection.Count;
                                                                                    &oDemInvVw = &oDemInvVwCollection.Item(&i1508);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get BU_ITEMS_INV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oBuItemsInvVwCollection = &oZReceiveRmaCi.BU_ITEMS_INV_VW;
                                                                                 Local integer &i1510;
                                                                                 For &i1510 = 1 To &oBuItemsInvVwCollection.Count;
                                                                                    &oBuItemsInvVw = &oBuItemsInvVwCollection.Item(&i1510);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ADDR_HDR_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdAddrHdrVwCollection = &oZReceiveRmaCi.ORD_ADDR_HDR_VW;
                                                                                 Local integer &i1512;
                                                                                 For &i1512 = 1 To &oOrdAddrHdrVwCollection.Count;
                                                                                    &oOrdAddrHdrVw = &oOrdAddrHdrVwCollection.Item(&i1512);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ADDR_LN_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdAddrLnVwCollection = &oZReceiveRmaCi.ORD_ADDR_LN_VW;
                                                                                 Local integer &i1514;
                                                                                 For &i1514 = 1 To &oOrdAddrLnVwCollection.Count;
                                                                                    &oOrdAddrLnVw = &oOrdAddrLnVwCollection.Item(&i1514);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ADDR_SHP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdAddrShpVwCollection = &oZReceiveRmaCi.ORD_ADDR_SHP_VW;
                                                                                 Local integer &i1516;
                                                                                 For &i1516 = 1 To &oOrdAddrShpVwCollection.Count;
                                                                                    &oOrdAddrShpVw = &oOrdAddrShpVwCollection.Item(&i1516);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_SHIP_INF_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdShipInfVwCollection = &oZReceiveRmaCi.ORD_SHIP_INF_VW;
                                                                                 Local integer &i1518;
                                                                                 For &i1518 = 1 To &oOrdShipInfVwCollection.Count;
                                                                                    &oOrdShipInfVw = &oOrdShipInfVwCollection.Item(&i1518);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get OM_CST_NSSHP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOmCstNsshpVwCollection = &oZReceiveRmaCi.OM_CST_NSSHP_VW;
                                                                                 Local integer &i1520;
                                                                                 For &i1520 = 1 To &oOmCstNsshpVwCollection.Count;
                                                                                    &oOmCstNsshpVw = &oOmCstNsshpVwCollection.Item(&i1520);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get REGION_CD Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oRegionCdCollection = &oZReceiveRmaCi.REGION_CD;
                                                                                 Local integer &i1522;
                                                                                 For &i1522 = 1 To &oRegionCdCollection.Count;
                                                                                    &oRegionCd = &oRegionCdCollection.Item(&i1522);
                                                                                 End-For;
                                                                                 rem ***** End: Get/Set Component Interface Properties *****;
                                                                                 
                                                                                 rem ***** Execute Save *****;
                                                                                 If Not &oZReceiveRmaCi.Save() Then;
                                                                                    errorHandler();
                                                                                    throw CreateException(0, 0, "Save failed");
                                                                                 Else
                                                                                    CommitWork();
                                                                                 End-If;
                                                                                 
                                                                                 rem ***** Execute Cancel *****;
                                                                                 rem If Not &oZReceiveRmaCi.Cancel() Then;
                                                                                 rem 	errorHandler();
                                                                                 rem 	throw CreateException(0, 0, "Cancel failed");
                                                                                 rem End-If;
                                                                              End-For;
                                                                           End-For;
                                                                        End-For;
                                                                     End-For;
                                                                  End-For;
                                                               End-For;
                                                            catch Exception &ex
                                                               rem Handle the exception;
                                                               &fileLog.WriteLine(&ex.ToString());
                                                            end-try;
                                                            &fileLog.WriteLine("End");
                                                            &fileLog.Close();
                                                            
                                                            /* ******************************************* */
                                                         End-If;
                                                         
                                                         rem ***** Execute Cancel *****;
                                                         rem If Not &oZRmaFormInvCi.Cancel() Then;
                                                         rem 	errorHandler();
                                                         rem 	throw CreateException(0, 0, "Cancel failed");
                                                         rem End-If;
                                                      End-For;
                                                   End-For;
                                                End-For;
                                             End-For;
                                          End-For;
                                       End-For;
                                    End-For;
                                 End-For;
                              End-For;
                           End-For;
                        End-For;
                     End-For;
                  End-For;
               End-For;
            End-For;
         End-For;
      End-For;
   End-For;
catch Exception &ex1
   rem Handle the exception;
   &fileLog_RMA.WriteLine(&ex1.ToString());
end-try;
&fileLog_RMA.WriteLine("End");
&fileLog_RMA.Close();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



<*
/* Retrieve the XML without the Wrapper */
&str = MsgGetExplainText(20000, 6, "", "PXPRAK3", "Y", "SXCHOU4", &Z_START_DATE_VALUE, &Z_END_DATE_VALUE);

&z_request_xml = CreateXmlDoc("");

&Data = "<?xml version='1.0'?>" | &str;

&r = &z_request_xml.ParseXmlString(&Data);

&outStr = &z_request_xml.GenFormattedXmlString();
Local File &GetFile = GetFile("C:\Temp\GetFile_" | %Datetime | ".out", "W", %FilePath_Absolute);
&GetFile.WriteString(&outStr);
&GetFile.Close();
rem &MSG = CreateMessage(Message.Z_USER_PREF_MSG);
rem &MSG.LoadXMLString(&outStr);
*>
<*
Function MsgEdit(&Msg) Returns boolean
   
   &Msg.ExecuteEdits();
   
   &LOADREC = &Msg.getrowset().getrow(1).getrecord(1);
   
   If &LOADREC.IsEditError Then
      For &I = 1 To &LOADREC.FieldCount
         If &LOADREC.GetField(&I).EditError Then
            &fld = &LOADREC.GetField(&I);
            &MSGNUM = &fld.MessageNumber;
            &MSGSET = &fld.MessageSetNumber;
            &err_excep = True;
            &err_comment = "Execute Edit Error on " | &fld.name | " :" | &fld.value | ". " | MsgGet(&MSGSET, &MSGNUM, "");
            MessageBox(0, "", 0, 0, &err_comment);
         End-If;
      End-For;
   End-If;
   If &Msg.IsEditError Then
      Return True;
   Else
      Return False;
   End-If;
End-Function;

Function PrcsEmail_Msg(&Msg_RS As Rowset) Returns boolean;
   
   Local SQL &UpdateSQL;
   Local Record &Delg_rec_email;
   
   &FILE1 = GetFile("C:\temp\Z_USER" | %Datetime | ".out", "W", %FilePath_Absolute);
   &FILE1.SetFileLayout(FileLayout.Z_USER_PREF_FL);
   &FILE1.WriteRowset(&Msg_RS);
   
   &Delg_rec_email = &Msg_RS.GetRow(1).GetRecord(Record.Z_USERPREF_E_VW);
   &Oprid = &Delg_rec_email.OPRID.Value;
   &email_pref = &Delg_rec_email.EMAIL_USER_SW.Value;
   MessageBox(0, "", 0, 0, "&Oprid " | &Oprid);
   MessageBox(0, "", 0, 0, "&email_pref " | &email_pref);
   &UpdateSQL = CreateSQL("UPDATE PS_ROLEXLATOPR SET EMAIL_USER_SW = :1 WHERE OPRID = :2");
   Evaluate &UpdateSQL.Status
   When = %SQLStatus_OK;
      &status = &UpdateSQL.Execute(&email_pref, &Oprid);
      If &UpdateSQL.RowsAffected = 0 Then;
         MessageBox(0, "", 0, 0, "No Rows Updated");
      Else
         MessageBox(0, "", 0, 0, "Number of Rows Updated " | &UpdateSQL.RowsAffected);
      End-If;
      &UpdateSQL.Close();
      Break;
   End-Evaluate;
   MessageBox(0, "", 0, 0, "&status " | &status);
   If (&status = "Y") Then
      MessageBox(0, "", 0, 0, "q");
   Else
      MessageBox(0, "", 0, 0, "PPPP");
   End-If;
   Return &status
End-Function;

/* MAIN */
&CUID = "PXPRAK3";
&ISEMAIL = "N";
&Z_START_DATE_VALUE = %Date;
&Z_END_DATE_VALUE = %Date;
&str = MsgGetExplainText(20000, 6, "UHOOO", "VP1", "Y", "cipher", &Z_START_DATE_VALUE, &Z_END_DATE_VALUE);

&Data = "<?xml version='1.0'?>" | &str;
&z_request_xml = CreateXmlDoc(&Data);

&outStr = &z_request_xml.GenFormattedXmlString();

Local File &GetFile = GetFile("C:\Temp\GetFile_" | %Datetime | ".out", "W", %FilePath_Absolute);
&GetFile.WriteString(&outStr);
&GetFile.Close();

&MSG = CreateMessage(Message.Z_USER_PREF_MSG);
&MSG.LoadXMLString(&outStr);
rem &MSG.SetXmlDoc(&z_request_xml);
&Msg_RS = &MSG.GetRowset();
&err = MsgEdit(&MSG);
MessageBox(0, "", 0, 0, "&err " | &err);
If Not &err Then;
   &err_email = PrcsEmail_Msg(&Msg_RS);
End-If;
*>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
REM - IMPLEMENTING MULTITHREADING;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
<**
Local Rowset &FLIGHTPLAN, &FLIGHTPLAN_RETURN, &FLIGHT_PROFILE;
Local Message &MSG;

Local array of Message &messages;
Local array of Message &return_mesages;

&messages = CreateArrayRept(&MSG, 0);
&return_mesages = CreateArrayRept(&MSG, 0);

&FLIGHT_PROFILE = CreateRowset(Record.DUMMY_TBL);
&FLIGHT_PROFILE.Fill();
MessageBox(0, "", 0, 0, "Number " | &FLIGHT_PROFILE.ActiveRowCount);
For &t = 1 To &FLIGHT_PROFILE.ActiveRowCount
   MessageBox(0, "", 0, 0, "Value " | &FLIGHT_PROFILE(&t).GetRecord(Record.DUMMY_TBL).GetField(Field.BUSINESS_UNIT).Value);
End-For;

&messages [1] = CreateMessage(Message.QE_FLIGHTPLAN_SYNC);
REM populate the rowset;
&messages [1].CopyRowset(&FLIGHT_PROFILE);

&messages [2] = CreateMessage(Message.QE_FLIGHTPLAN_SYNC);
REM populate the rowset;
&messages [2].CopyRowsetDelta(&FLIGHT_PROFILE);

&return_mesages = %IntBroker.SyncRequest(&messages);
MessageBox(0, "", 0, 0, "Firing");
**>
<*
REM process the return rowset;
&FLIGHTPLAN_RETURN = &return_mesages [1].GetRowset();
&temp = &return_mesages [1].GenXMLString();
MessageBox(0, "", 0, 0, "&temp " | &temp);

REM process the return rowset;
&FLIGHTPLAN_RETURN = &return_mesages [2].GetRowset();
&temp = &return_mesages [2].GenXMLString();
MessageBox(0, "", 0, 0, "&temp " | &temp);
*>
<*
Local boolean &User;

&User = SwitchUser("cipher", "cipher", "", "");
MessageBox(0, "", 0, 0, "&User " | &User);
MessageBox(0, "", 0, 0, "UserDescription " | %UserDescription);
*>
Declare Function Log_PPM_error PeopleCode Z_ERROR_LOG.Z_ERR_CODE FieldFormula;
rem Declare Function assign_auto_number PeopleCode FUNCLIB_AUTONUM.LAST_AUTO_NBR FieldFormula;

Local File &rma_File, &ImportFile;
Local Rowset &INPUT_ROWSET, &TEMP_RS, &File_RS;
Local Record &WRK_DATA_UPDATE, &WORK_DATA_INSERT, &ERR_DATA;
Local Record &STOR_REC;
Local string &BU_BODY, &INV_ITEM_ID;
Local boolean &File_Delete_Flag_Line, &File_Delete_Flag;


/*--------------------------------------------------
/  Execute edits on record and construct error text
/ --------------------------------------------------*/
Function CheckEditError(&REC As Record, &ErrCount As integer);
   Local integer &i;
   
   &REC.ExecuteEdits();
   If &REC.IsEditError Then
      For &i = 1 To &REC.FieldCount
         If &REC.GetField(&i).EditError Then
            If &REC.GetField(&i).IsRequired And
                  None(&REC.GetField(&i).Value) Then
               /* Required field error */
               rem AddErrorText(&REC, MsgGetText(9000, 385, "", GetFieldLabel(&REC.GetField(&i))), &ErrCount);
            Else
               If All(&REC.GetField(&i).Value) Then
                  /* Invalid value */
                  rem AddErrorText(&REC, MsgGetText(9000, 241, "", GetFieldLabel(&REC.GetField(&i)), &REC.GetField(&i).Value), &ErrCount);
               End-If;
            End-If;
         End-If;
      End-For;
   End-If;
End-Function;

Function InsertHdr(&BU_BODY As string, &INV_ITEM_ID As string);
   
   &STOR_REC = CreateRecord(Record.Z_RMA_STOR);
   &STOR_REC.BUSINESS_UNIT.Value = &BU_BODY;
   &STOR_REC.INV_ITEM_ID.Value = &INV_ITEM_ID;
   rem &STOR_REC.PROCESS_INSTANCE.Value = %ProcessInstance;
   &STOR_REC.PROCESS_FLG.Value = "P";
   MessageBox(0, "", 0, 0, "Record Inserted");
   &STOR_REC.Insert();
   
End-Function; /* InsertHdr() */

/* Validate Inventory Business Unit passed in the Flat File */
Function ValidateIBU(&BU As string) Returns boolean
   /* Use Error Code - '03' */
   SQLExec("SELECT 'X' FROM PS_BUS_UNIT_TBL_IN WHERE BUSINESS_UNIT = :1", &BU, &Flag);
   If (&Flag = "X") Then
      &bu_flag = True;
   Else
      &bu_flag = False;
   End-If;
   MessageBox(0, "", 0, 0, "&bu_flag " | &bu_flag);
   Return &bu_flag;
End-Function; /* ValidateIBU() */

/* Validate Inventory Business Unit and Item Id combination */
Function ValidateIBU_ITEM(&BU As string, &ITEM_ID As string) Returns boolean
   /* Use Error Code - '13' */
   SQLExec("SELECT 'X' FROM PS_BU_ITEMS_INV WHERE BUSINESS_UNIT = :1 AND INV_ITEM_ID = :2", &BU, &ITEM_ID, &combo_flag);
   If (&combo_flag = "X") Then
      &valid_IBU_ITEM = True;
   Else
      &valid_IBU_ITEM = False;
   End-If;
   MessageBox(0, "", 0, 0, "IBUITEMFLAG " | &valid_IBU_ITEM);
   Return &valid_IBU_ITEM;
End-Function;

/* Validate the Storage Area from PS_STORAGE_AREA_INV */
Function ValidateStorageArea(&BU As string, &STOR As string) Returns boolean
   /* Use Error Code - '04' */
   SQLExec("SELECT 'X' FROM PS_STOR_AREA_INV WHERE BUSINESS_UNIT = :1 AND STORAGE_AREA = :2", &BU, &STOR, &valid_stor_flg);
   If (&valid_stor_flg = "X") Then
      &valid_storage = True;
   Else
      &valid_storage = False;
   End-If;
   Return &valid_storage;
End-Function; /* ValidateStorageArea() */

Function ValidateReasonCode()
End-Function;


Function ImportData(&INPUT_ROWSET As Rowset, &file_Id)
   
   rem &INPUT_ROWSET = &rma_File.ReadRowset();
   &INPUT_ROWSET = &ImportFile.ReadRowset();
   MessageBox(0, "", 0, 0, "Rowset Count " | &INPUT_ROWSET.ActiveRowCount);
   &File_Delete_Flag = False;
   &no_of_lines = 0;
   While &INPUT_ROWSET <> Null
      /* Process  &INPUT_ROWSET */
      try
         
         If All(&INPUT_ROWSET(1).HEADER.SEQ_NBR.Value) Then
            rem &SEQ_NBR = &INPUT_ROWSET(1).HEADER.SEQ_NBR.Value;
            rem &CREATE_DATE = &INPUT_ROWSET(1).HEADER.CREATE_DATE.Value;
            MessageBox(0, "", 0, 0, "&SEQ_NBR " | &INPUT_ROWSET(1).HEADER.SEQ_NBR.Value);
         End-If;
         &SEQ_NBR = &INPUT_ROWSET(1).HEADER.SEQ_NBR.Value;
         &Body_SeqNum = &INPUT_ROWSET(1).Z_RMA_LOAD.SEQ_NBR.Value;
         &date_Created = &INPUT_ROWSET(1).HEADER.CREATE_DATE.Value;
         &BU_BODY = &INPUT_ROWSET(1).Z_RMA_LOAD.BUSINESS_UNIT.Value;
         MessageBox(0, "", 0, 0, "&date_Created " | &date_Created);
         MessageBox(0, "", 0, 0, "&BU_BODY " | &BU_BODY);
         &Status_flg = ValidateIBU(&BU_BODY);
         &INV_ITEM_ID = &INPUT_ROWSET(1).Z_RMA_LOAD.INV_ITEM_ID.Value;
         /* RMA QTY/Quantity Returned */
         &RMA_QTY = &INPUT_ROWSET(1).Z_RMA_LOAD.INV_ITEM_ID.Value;
         If (&Status_flg = True) Then
            &validflag = ValidateIBU_ITEM(&BU_BODY, &INV_ITEM_ID);
         Else
            
            &error_code = "ERROR";
            &error_message = "Error description...!!!";
            &Pubnode = "3PL";
            &Channel = "3PL";
            rem &PubId = "3PL";
            &Subchannel = "3PL";
            &Message_ID = "3PL";
            &yo = Log_PPM_error("RMA", &BU_BODY, &INV_ITEM_ID, &SEQ_NBR, &file_Id, &KeyName5, &KeyName6, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            MessageBox(0, "", 0, 0, "Invalid IBU - LOGPPMERROR " | &yo);
         End-If;
         
         If All(&BU_BODY) And
               All(&INV_ITEM_ID) Then
            &no_of_lines = &no_of_lines + 1;
            MessageBox(0, "", 0, 0, "&SEQ_NBR " | &Body_SeqNum | " &BU_BODY " | &BU_BODY | " &INV_ITEM_ID " | &INV_ITEM_ID);
         End-If;
         /* Process Trailer */
         If All(&INPUT_ROWSET(1).TRAILER.SEQ_NBR.Value) Then
            MessageBox(0, "", 0, 0, "&TRAILER_SEQNBR " | &TRAILER_SEQNBR);
            /* Check whether the HEADER SEQ_NBR matches the TRAILER SEQ_NBR - Should be a one time check ONLY */
            If (&TRAILER_SEQNBR = &INPUT_ROWSET(1).HEADER.SEQ_NBR.Value) Then
               MessageBox(0, "", 0, 0, "File Well Formed");
            Else
               MessageBox(0, "", 0, 0, "File MalFormed");
            End-If;
         End-If;
         &LINE_COUNT = &INPUT_ROWSET(1).TRAILER.LINE_COUNT.Value;
         If All(&LINE_COUNT) Then
            MessageBox(0, "", 0, 0, "&LINE_COUNT " | &LINE_COUNT);
            If (&LINE_COUNT = &no_of_lines) Then
               &File_Delete_Flag_Line = True;
            Else
               &File_Delete_Flag_Line = False;
               MessageBox(0, "", 0, 0, "Incorrect File Formation.");
            End-If;
         End-If;
         If ((&Status_flg = True) Or
               (&validflag = True)) Then
            InsertHdr(&BU_BODY, &INV_ITEM_ID);
         Else
            MessageBox(0, "", 0, 0, "Errored Row...continue processing next row");
         End-If;
         /*
         If All(&BU_BODY) Then
            &STOR_REC = CreateRecord(Record.Z_RMA_STOR);
            &STOR_REC.BUSINESS_UNIT.Value = &BU_BODY;
            &STOR_REC.INV_ITEM_ID.Value = &INV_ITEM_ID;
            rem &STOR_REC.PROCESS_INSTANCE.Value = %ProcessInstance;
            &STOR_REC.PROCESS_FLG.Value = "P";
            MessageBox(0, "", 0, 0, "Record Inserted");
            &STOR_REC.Insert();
         End-If;
		 */
         <*
   &LOADRS = CreateRowset(Record.PO_HDR);
   &CREATE_DATE = &LOADRS(1).HEADER.CREATE_DATE.Value;
   &SEQ_NBR = &LOADRS(1).HEADER.SEQ_NBR.Value;
   
   If (&SEQ_NBR = &MAX_SEQ + 1) Then;
      /*SEQ_NBR of file should be one more than of the last file processed*/
      &Counter = 0;
      While &LOADRS <> Null
         &LOADRS(1).PO_HDR.CopyFieldsTo(&LOADREC);
         &BU = &LOADREC.GetField(Field.BUSINESS_UNIT).Value;
         &PO_ID = &LOADREC.GetField(Field.PO_ID).Value;
         If All(&BU) And
               All(&PO_ID) Then
            &Counter = &Counter + 1; /*Increment the counter for each row read from the file.*/
            If (&Counter = 1) Then
               &PO_RS(1).VCHR_PO_VW1.PO_ID.Value = &PO_ID;
               &PO_RS(1).VCHR_PO_VW1.BUSINESS_UNIT_PO.Value = &BU;
            Else
               &PO_RS.InsertRow(&Counter - 1);
               &PO_RS(&Counter).VCHR_PO_VW1.PO_ID.Value = &PO_ID;
               &PO_RS(&Counter).VCHR_PO_VW1.BUSINESS_UNIT_PO.Value = &BU;
            End-If;
         End-If;
         /*SQL to validate if the BUSINESS_UNIT and PO_ID received in the file are valid values 
          in PeopleSoft system.****************************************************************/
         SQLExec("SELECT 'X' FROM PS_PO_HDR WHERE BUSINESS_UNIT = :1 and PO_ID = :2", &BU, &PO_ID, &Valid);
         If (All(&BU, &PO_ID) And
               None(&Valid)) Then
            &Invalid_data = 1;
            /*************************Start - Neerav*****************************/
            &error_message = "BUSINESS_UNIT  " | &BU | " and  PO_ID " | &PO_ID | "are not a valid value in PeopleSoft";
            &done = Log_PPM_error("OPAY", &BU, &PO_ID, "", "", "", "", "", "", "", "", "", "", &error_message);
            /*************************End - Neerav*****************************/
            &flag_notify_err = 1; /*Error Notification if the data in File is invalid.*/
         End-If;
         If (All(&LOADRS(1).HEADER.CREATE_DATE.Value) And
               &Counter > 1) Then
            /*Validate if more than one Header lines found in the File.*/
            &Header_Error = 1;
            /*************************Start - Neerav*****************************/
            &error_message = "More than one Header Line found in File.  ";
            &done = Log_PPM_error("OPAY", "", "", "", "", "", "", "", "", "", "", "", "", &error_message);
            /*************************End - Neerav*****************************/
            &flag_notify_err = 1; /*Error Notification*/
            /*Changes While Peer Review*/
         End-If;
         If All(&LOADRS(1).TRAILER.CREATE_DATE.Value) Then
            /*Validation to check if the SEQ_NBR in Header and Trailer are same or not.*/
            If Not (&SEQ_NBR = &LOADRS(1).TRAILER.SEQ_NBR.Value) Then
               &SEQ_Error = 1; /*SEQ_NBR of Header is not same as Trailer*/
               /*************************Start - Neerav*****************************/
               &error_message = "SEQ NBR in Header is not same as SEQ NBR in Trailer  ";
               &done = Log_PPM_error("OPAY", &SEQ_NBR, "", "", "", "", "", "", "", "", "", "", "", &error_message);
               /*************************End - Neerav*****************************/
               &flag_notify_err = 1; /*Error Notification*/
            End-If;
            &Trailer_Count = &Trailer_Count + 1; /*Increment the Trailer Counter*/
            &CREATE_DATE_T = &LOADRS(1).TRAILER.CREATE_DATE.Value;
            &SEQ_NBR_T = &LOADRS(1).TRAILER.SEQ_NBR.Value;
            &RECORD_COUNT_T = &LOADRS(1).TRAILER.RECORD_COUNT.Value;
         End-If;
         If &Trailer_Count > 1 Then
            /*If more than one Trailer lines found in the File*/
            &Trailer_Error = 1;
            /*************************Start - Neerav*****************************/
            &error_message = "More than one Trailer Line found in File  ";
            &done = Log_PPM_error("OPAY", "", "", "", "", "", "", "", "", "", "", "", "", &error_message);
            /*************************End - Neerav*****************************/
            &flag_notify_err = 1; /*Error Notification*/
         End-If;
         &SEQ_REC.SEQ_NBR.Value = &SEQ_NBR;
         &SEQ_REC.BUSINESS_UNIT.Value = &BU;
         &SEQ_REC.PO_ID.Value = &PO_ID;
         &SEQ_REC.CREATE_DATE.Value = %Date;
         If (All(&BU, &PO_ID) And
               &Trailer_Count <= 1) Then
            &SEQ_REC.Insert(); /*Insert the SEQ_NBR of the file processed in Z_PAY_CNF_SEQNO*/
         End-If;
         &LOADRS = &LOAD.ReadRowset();
      End-While; /*End of while loop to parse the Rowset*/
      /*If more than one Trailer lines found in the File than delete the rows from Z_PAY_CNF_SEQNO
      for the data inserted till the point &Trailer_Error occured.*******************************/
      If (&flag_notify_err = 1) Then
         SQLExec("DELETE FROM PS_Z_PAY_CNF_SEQNO WHERE SEQ_NBR = :1", &SEQ_NBR);
      End-If;
   Else;
      &Invalid_Seq_Error = 1; /*SEQ_NBR of the file is not one more than of the last file processed.*/
      /*************************Start - Neerav*****************************/
      &error_message = "SEQ NBR " | &SEQ_NBR | " of the the File is not one more than that of last file processed.  ";
      &done = Log_PPM_error("OPAY", &SEQ_NBR, "", "", "", "", "", "", "", "", "", "", "", &error_message);
      /*************************End - Neerav*****************************/
      &flag_notify_err = 1; /*Error Notification*/
   End-If;
   /*If &flag_notify_err = 1 Then
   NotifyError();
End-If; */
Else
   &File_error = 1;
   /*************************Start - Neerav*****************************/
   &error_message = "File " | &filename | " not found in the specified path.";
   &done = Log_PPM_error("OPAY", &filename, "", "", "", "", "", "", "", "", "", "", "", &error_message);
   /*************************End - Neerav*****************************/
   &flag_notify_err = 1; /*Error Notification.*/
   /*Changes While Peer Review*/
   REM Exit (0);
End-If;
If &flag_notify_err = 0 Then
   &SQL = CreateSQL("UPDATE %Table(:1) SET Z_PAY_CON_STATUS =:2 WHERE BUSINESS_UNIT = :3 and PO_ID = :4");
   &LENGTH = &PO_RS.ActiveRowCount;
   For &I = 1 To &LENGTH
      MessageBox(0, "", 0, 0, &PO_RS(&I).VCHR_PO_VW1.BUSINESS_UNIT_PO.Value | &PO_RS(&I).VCHR_PO_VW1.PO_ID.Value);
      &SQL.Execute(&LOADREC, &Flg, &PO_RS(&I).VCHR_PO_VW1.BUSINESS_UNIT_PO.Value, &PO_RS(&I).VCHR_PO_VW1.PO_ID.Value);
   End-For;
   &SQL.Close();
   &LOAD.Close(); /*Close the File*/
Else
   NotifyError();
End-If;
*>
      catch Exception &c1
         &Error_desc = "Error encountered during processing the row:  " | &c1.ToString();
         rem &done = Log_PPM_error("CRTS", "RCBS", &setid, &z_rcbs, DateTimeToLocalizedString(&effdate, "MM/dd/yyyy"), "", "", "", "", "", "", "", "", &Error_desc);
      end-try;
      rem CommitWork();
      rem &INPUT_ROWSET = &rma_File.ReadRowset();
      &INPUT_ROWSET = &ImportFile.ReadRowset();
      rem End-For;
   End-While;
   If (&File_Delete_Flag_Line) Then
      &File_Delete_Flag = True;
   Else
      &File_Delete_Flag = False;
   End-If;
   If (&File_Delete_Flag = True) Then
      MessageBox(0, "", 0, 0, "&File_Delete_Flag " | &File_Delete_Flag);
      rem If &rma_File.IsOpen Then;
      If &ImportFile.IsOpen Then
         MessageBox(0, "", 0, 0, "In Delete");
         rem &rma_File.Delete();
      End-If;
   End-If;
End-Function;

Function InsertControl(&PROCESS_INSTANCE, &file_Id);
   
   rem &INSERTCNTRL = GetSQL(SQL.Z_RMA_LOAD_SQL);
   &INSERTCNTRL = CreateRecord(Record.X_EIP_TBL);
   rem For &I = 1 To &RMA_ARR_File.Len
      &PARM1 = &RMA_ARR_File [&I];
   rem &INSERTCNTRL.Execute(&file_Id, &PROCESS_INSTANCE);
   rem End-For;
   &INSERTCNTRL.FILE_ID.Value = &file_Id;
   &INSERTCNTRL.PROCESS_INST_STG.Value = &PROCESS_INSTANCE;
   &INSERTCNTRL.Insert();
   
End-Function;

/****************************************************************/
/* Build EIP_CTL_ID from the method and a value passed */

Function Build_EIP_CTL_ID(&METHOD, &PARM2) Returns string;
   MessageBox(0, "", 0, 0, "&METHOD " | &METHOD | " &PARM2 " | &PARM2);
   MessageBox(0, "", 0, 0, " &Right1 " | Right("000000000000000" | String(&PARM2), 15));
   MessageBox(0, "", 0, 0, "&Right2 " | Right(String(&METHOD), 1));
   &EIP_CTL_ID = Right(String(&METHOD), 1) | Right("000000000000000" | String(&PARM2), 15) | "000000001";
   Return &EIP_CTL_ID;
   
End-Function;

/****************************************************************/
/* Increment Sequence Portion of EIP_CTL_ID by 2 */

Function Increment_EIP_CTL_ID(&EIP_CTL_ID) Returns string;
   MessageBox(0, "", 0, 0, "&String " | String(Value(Right(&EIP_CTL_ID, 9)) + 2));
   MessageBox(0, "", 0, 0, "&Right " | Right("000000000" | String(Value(Right(&EIP_CTL_ID, 9)) + 2), 9));
   MessageBox(0, "", 0, 0, "&Left " | Left(&EIP_CTL_ID, 16));
   &NEXT_EIP_CTL_ID = Left(&EIP_CTL_ID, 16) | Right("000000000" | String(Value(Right(&EIP_CTL_ID, 9)) + 2), 9);
   Return &NEXT_EIP_CTL_ID;
   
End-Function;

Function GenerateFileID(&METHOD, &PARM2) Returns string
   
   /****************************************************************/
   /* Generate EIP_CTL_ID based on the method and parm passed */
   
   rem Function Generate_EIP_CTL_ID(&METHOD, &PARM2) Returns string;
   
   If (&METHOD = "R") Then
      &VALUE2 = Truncate((Rand() * 10**15), 0);
      rem &VALUE2 = Truncate((Rand() * 10 * 15), 0);
      MessageBox(0, "", 0, 0, "&VALUE2 " | &VALUE2);
   Else
      Error MsgGet(18022, 114, "Method must be 1(random), 2(Process Instance), 3(Next Trans)or 4(SubscriptionProcessID).");
   End-If;
   /* Call Build EIP */
   SQLExec("SELECT COUNT(*) FROM PS_X_EIP_TBL", &count);
   If (&count = 0) Then
      &EIP_CTL_ID = Build_EIP_CTL_ID(&METHOD, &VALUE2);
   Else
      SQLExec("SELECT Max(FILE_ID) FROM PS_X_EIP_TBL", &eip);
      &EIP_CTL_ID = Increment_EIP_CTL_ID(&eip);
   End-If;
   <*
/* Main */
&startTime = %PerfTime;
&DBTime = %Time;
MessageBox(0, "", 0, 0, "&startTime " | &startTime | " &DBTime" | &DBTime);
&EIP_CTL_ID = Generate_EIP_CTL_ID("R", "Random");
MessageBox(0, "", 0, 0, "&EIP_CTL_ID " | &EIP_CTL_ID);
&REC = CreateRecord(Record.X_EIP_TBL);
&REC.EIP_CTL_ID.Value = &EIP_CTL_ID;
&proper = "hIiIiI pRaShAnT.";
&new_proper = Proper(&proper);
&REC.PP_PURCHASE_SUPPLY.Value = &new_proper;
If Not (&REC.Insert()) Then
   &STATUS = "ERROR";
   MessageBox(0, "", 0, 0, "&STATUS " | &STATUS);
End-If;
&End = %PerfTime;
rem &timeTaken = %PerfTime - &startTime;
&TimeDiff = NumberToString("%6.3", Value(&End - &DBTime));
&NEW_TIME = NumberToString("%6.3", Value(&End - &startTime));
rem &TimeDiff = %PerfTime - &DBTime;
MessageBox(0, "", 0, 0, "&TimeDiff B/W App Server and DB Server" | &TimeDiff);
MessageBox(0, "", 0, 0, "&TimeDiff B/W Start and End of execution" | &NEW_TIME);
rem LogObjectUse(&new_proper);
*>
   Return &EIP_CTL_ID;
End-Function;

Function File_RMA(&fileinformation As string, &file_Id);
   
   Local array of string &IU_BusUnit = CreateArrayRept("", 0); /* Empty array of strings */
   SQLExec("SELECT UNICODE_ENABLED FROM PSSTATUS", &RtnCode);
   If &RtnCode = 1 Then
      &DBcharset = "U"; /* UNICODE */
   Else
      &DBcharset = "ANSI"; /* ANSI */
   End-If;
   /* Generate File ID and Call function to Insert */
   rem &file_Id = GenerateFileID("R", "Random");
   rem &PI = "O";
   rem InsertControl(&PI, &file_Id);
   /*
   &LogFileName = "INVRECON_RMA" | String(Z_RMA_LOAD_AET.PROCESS_INSTANCE) | ".LOG";
   &LogFile = GetFile(&LogFileName, "W", &DBcharset, %FilePath_Relative);
   
   &LogFile.WriteLine(MsgGetText(20000, 105, "RMA File Import"));
   &LogFile.WriteLine(" ");
   &LogFile.WriteLine(%Date | "   " | %Time);
   &LogFile.WriteLine(Rept("-", 40));
   */
   MessageBox(0, "", 0, 0, "&DBcharset " | &DBcharset);
   &ImportFile = GetFile(&fileinformation, "R", &DBcharset, %FilePath_Absolute);
   
   If &ImportFile.IsOpen Then
      If &ImportFile.SetFileLayout(FileLayout.Z_RMA_XML_FL) Then
         rem &LogFile.WriteLine(" ");
         rem &LogFile.WriteLine(MsgGetText(20000, 104, "Processing file...", &fileinformation));
         MessageBox(0, "", 20000, 104, "Message Not Found", &fileinformation);
         MessageBox(0, "", 0, 0, "&fileinformation " | &fileinformation);
         &File_RS = &ImportFile.CreateRowset();
         ImportData(&File_RS, &file_Id);
         &ImportFile.Close();
      Else
         MessageBox(0, "", 20000, 110, "Message Not Found", &fileinformation);
      End-If;
   Else
      /* Cannot open file */
      rem &LogFile.WriteLine(MsgGetText(20000, 112, "GetFile error", &fileinformation));
      &TotalError = &TotalError + 1;
   End-If;
   <*
   If &TotalError <> 0 Then
      /* Rollback all transactions */
      MessageBox(0, "", 20000, 111, "Errors found - Rollback");
      Exit (1);
   End-If;
   *>
End-Function;

Global array of string &RMA_ARR_File;

/* Flag Declerations */
&flag_notify_err = 0;
/* RMA */
&Flg = "Y";
/* Counter for parsing each line in the received file. */
&Counter = 0;
/* Error flag if more than one Header line found in the file. */
&Header_Error = 0;
/* Error flag if more than one Trailer line found in the file. */
&Trailer_Error = 0;
/* Retreive File name from State record */
rem &filename = Z_RMA_LOAD_AET.FILENAME;
&dir = Lower(%DbName);


/* Retrieve the Files to be processed */
rem &RMA_ARR_File = FindFiles("C:\temp\TEST\*.txt", %FilePath_Absolute);
&RMA_ARR_File = FindFiles("C:\temp\TEST\*.xml", %FilePath_Absolute);
/* Use GetURL for the path. %FilePath_Absolute */
MessageBox(0, "", 0, 0, "Files to be processed " | &RMA_ARR_File.Len);
/* Check whether CONTROL - M has copied files from SDG to be processed */
If (&RMA_ARR_File.Len > 0) Then
   For &eRMA = 1 To &RMA_ARR_File.Len
      MessageBox(0, "", 0, 0, "File Names to be processed " | &RMA_ARR_File [&eRMA]);
      &file_Id = GenerateFileID("R", "Random");
      &PI = "2";
      MessageBox(0, "", 0, 0, "&file_Id " | &file_Id);
      InsertControl(&PI, &file_Id);
      File_RMA(&RMA_ARR_File [&eRMA], &file_Id);
   End-For;
Else
   rem &error = MsgGetExplainText(20000, 7, "Message Not Found", &dir);
   MessageBox(0, "", 20000, 7, "Message Not Found", &dir);
End-If;



<*
/*
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.EXAMPLE_TBL);

&LVL0REC.LONGJOBNAME2.Value = "";
&LVL0REC.LONGOBJNAME.Value = "";
&LVL0REC.AA_ID.Value = "";
&LVL0REC.CATEGORY_DESCR.Value = "";
*/

MessageBox(0, "", 0, 0, "Portal " | %Portal);
MessageBox(0, "", 0, 0, "HomePage " | %HPTabName);
MessageBox(0, "", 0, 0, "Employee ID" | %EmployeeId);
MessageBox(0, "", 0, 0, "DbServerName " | %DbServerName);
MessageBox(0, "", 0, 0, "DeviceType " | %DeviceType);
MessageBox(0, "", 0, 0, "IntBroker " | %IntBroker);
MessageBox(0, "", 0, 0, "LocalNode " | %LocalNode);
MessageBox(0, "", 0, 0, "MaxMessageSize " | %MaxMessageSize);
MessageBox(0, "", 0, 0, "MaxInterlinkSize " | %MaxInterlinkSize);
MessageBox(0, "", 0, 0, "Node " | %Node);
MessageBox(0, "", 0, 0, "OperatorClass " | %OperatorClass);
/*
MessageBox(0, "", 0, 0, "OutDestFormat " | %OutDestFormat); CAN BE USED IN AE PEOPLECODE ONLY
MessageBox(0, "", 0, 0, "OutDestType " | %OutDestType);
*/
MessageBox(0, "", 0, 0, "PerfTime " | %PerfTime);
MessageBox(0, "", 0, 0, "PID " | %PID);
MessageBox(0, "", 0, 0, "RunningInPortal " | %RunningInPortal);
MessageBox(0, "", 0, 0, "ServerTimeZone " | %ServerTimeZone);
MessageBox(0, "", 0, 0, "SMTPSender " | %SMTPSender);
MessageBox(0, "", 0, 0, "UserDescription " | %UserDescription);
MessageBox(0, "", 0, 0, "ApplicationLogFence" | %ApplicationLogFence);
MessageBox(0, "", 0, 0, "AsOfDate " | %AsOfDate);
MessageBox(0, "", 0, 0, "AuthenticationToken " | %AuthenticationToken);
MessageBox(0, "", 0, 0, "ClientDate " | %ClientDate);
MessageBox(0, "", 0, 0, "ContentID " | %ContentID);
MessageBox(0, "", 0, 0, "ContentType " | %ContentType);
MessageBox(0, "", 0, 0, "Copyright " | %Copyright);
rem &return_mesages.IBInfo.SyncServiceTimeout(360000);
rem &return_mesages = %IntBroker.SyncRequest(&messages);
/* Check Message Schema */
Local boolean &yo;
If (&yo = True) Then
   rem Local String &Str = GetMessageSchema(Z_PO_PUBLISH_MSG, VERSION_1);
Else
   MessageBox(0, "", 0, 0, "No Schema");
End-If;

*>
<*
/* Set Delay */
Local JavaObject &Pause;
Local number &Seconds;

try
   &Seconds = 5;
   &Pause = GetJavaClass("java.lang.Thread");
   Local JavaObject &obj, &TGT, &exc, &timer;
   &obj = CreateJavaObject("java.lang.Thread");
   &exc = CreateJavaObject("java.lang.InterruptedException");
   &timer = CreateJavaObject("java.util.Timer");
   rem &thr = CreateJavaObject("java.lang.Throwable");
   &i = &obj.getPriority();
   &j = &obj.getName();
   MessageBox(0, "", 0, 0, "&obj " | &obj.dumpStack());
   &act = &obj.activeCount();
   &cu = (&obj.currentThread()).getName();
   &tg = (&obj.getThreadGroup()).getName();
   &bool = (&obj.currentThread()).isAlive();
   &NewBool = (&obj.getThreadGroup()).isDestroyed();
   MessageBox(0, "", 0, 0, " Thread Group Destroyed " | &NewBool);
   &PP = ((&obj.getThreadGroup()).getParent()).getName();
   &Ipp = (&obj.getThreadGroup()).activeCount();
   &yoPP = (&obj.getThreadGroup()).activeGroupCount();
   Local string &PPPP = (&obj.getThreadGroup()).toString();
   try
      rem (&obj.setName("PP")).start();
      rem (&obj.currentThread()).stop();
      rem catch InterruptedException ex;
   catch Exception &ex
      Local File &NEWFileeeee = GetFile("C:\temp\THREADNEWWWW" | %Datetime | ".out", "W", %FilePath_Absolute);
      &NEWFileeeee.WriteString(&ex.ToString());
   end-try;
   try
      rem (&obj.getThreadGroup()).destroy();
   catch Exception &ex11
      Local File &NEWFileeeee111 = GetFile("C:\temp\THREADNEWWWWOOOOO" | %Datetime | ".out", "W", %FilePath_Absolute);
      &NEWFileeeee111.WriteString(&ex11.ToString());
   end-try;
   MessageBox(0, "", 0, 0, "&PPPP " | &PPPP);
   MessageBox(0, "", 0, 0, "Current Thread " | &cu | " Parent Thread " | &PP | " Count " | &Ipp | " Group Count " | &yoPP);
   &yo = (&obj.currentThread()).isDaemon();
   MessageBox(0, "", 0, 0, "yield " | (&obj.currentThread()).yield());
   MessageBox(0, "", 0, 0, "&bool " | &bool | " &yo " | &yo);
   rem &obj.destroy();
   WinMessage(&i | "   " | &j | "    " | &act, 0);
   rem &obj.sleep(60000);
   WinMessage(&cu | "    " | &tg, 0);
   rem &obj.currentThread.stop(&thr);
   &trr = &Pause.currentThread();
   MessageBox(0, "", 0, 0, "&trr " | &trr);
   &SetThread = &Pause.activeCount();
   MessageBox(0, "", 0, 0, "&trr " | &SetThread);
   &Pause = Null;
   &TGT = Null;
   &obj = Null;
catch Exception &NoProblem
   Local File &Fileeeee = GetFile("C:\temp\THREAD" | %Datetime | ".out", "W", %FilePath_Absolute);
   &Fileeeee.WriteString(&NoProblem.ToString());
   MessageBox(0, "", 0, 0, "&NoProblem " | &NoProblem.ToString());
   &Pause = Null;
end-try;

<tns:CountryName>
  <tns:sCountryISOCode>%BIND(:1)</tns:sCountryISOCode>
</tns:CountryName>

&str = GetHTMLText(HTML.PP_XML_COUNTRY_HTML);
&XMLNEW = CreateXmlDoc("");
rem &XMLNEW = CreateXmlDoc(&str);
&bool = &XMLNEW.ParseXmlString(&str);
MessageBox(0, "", 0, 0, "&bool " | &bool);
&Node_Add = &XMLNEW.DocumentElement.FindNode("soap:Body");
&Node_Add_1 = &Node_Add.AddElement("PP");
&Node_Add_1.NodeValue = "PP";
Local string &STRY = &XMLNEW.GenFormattedXMlString();
Local File &FILE111 = GetFile("C:\Temp\POPOP" | %Datetime | ".xml", "W", %FilePath_Absolute);
&FILE111.WriteString(&STRY);
&FILE111.Close();
Local Message &MSG = CreateMessage(Message.W_INBOUND_MSG);
&MSG.SetXmlDoc(&XMLNEW);
rem &MSG.LoadXMLString(&XMLNEW);

&MyErrors = %IntBroker.GetMessageErrors(%IntBroker_BRK, 37, "PSFT_EP", "IB_CHNL");
&MyPP = %IntBroker.GetMessageErrors(%IntBroker_PUB, 1271, "PSFT_EP", "PSRF_REPORTING_FOLDERS", "PT_LOCAL", 1);

For &i = 1 To &MyErrors.Len
   MessageBox(0, "", 0, 0, "&MyErrors " | &MyErrors.get(&i));
End-For;

For &ppoy = 1 To &MyPP.len
   MessageBox(0, "", 0, 0, "&PPOY " | &MyPP.get(&ppoy));
End-For;
*>
<*
Local string &PP = "27_3453_4563_3453_C";
&Num = Len(&PP);
MessageBox(0, "", 0, 0, "&Num " | &Num);

&count = 0;
While (&PIP <> 0)
   &count = &count + 1;
   &PIP = Find("_", &PP, &PIP + 1);
   MessageBox(0, "", 0, 0, "&PIP " | &PIP);
End-While;
&total_Count = &count - 1;
MessageBox(0, "", 0, 0, "&count " | &total_Count);

Local array of string &ARR = Split(&PP, "_");
For &a = 1 To &ARR.Len
   MessageBox(0, "", 0, 0, "&ARR " | &ARR [&a]);
End-For;
&PP = Substitute(&PP, "_", "");
MessageBox(0, "", 0, 0, "&PP " | &PP);

Local string &GP = MsgGetExplainText(20000, 2, "Msg not found");
Local string &Wrapper = "<?xml version='1.0'?>";
&RT = &Wrapper | &GP | "</Header>";
Local XmlDoc &NEWPP = CreateXmlDoc(&RT);
&UIO = MsgGetExplainText(20000, 3, "Msg not found");
&SCHED = MsgGetExplainText(20000, 4, "Msg not found");
&DISTRIB = MsgGetExplainText(20000, 5, "Msg not found");
&YU = &GP | &UIO;
rem &TR = &Wrapper | "<Header>" | &GP | "<Line>" | &GP | "<Schedule>" | &GP | "<Distribution>" | &YU | "</Distribution>" | "</Schedule>" | "</Line>" | "</Header>";
&TR = &Wrapper | &GP | &UIO | &SCHED | &DISTRIB | &DISTRIB | "</Distribution>" | "</Distribution>" | "</Schedule>" | "</Line>" | "</Header>";
Local XmlDoc &NEWPP1 = CreateXmlDoc(&TR);
&YT = &NEWPP1.GenFormattedXmlString();

rem Local XmlNode &MOTO = &NEWPP.DocumentElement.FindNode("Exception");
rem Local array of XmlNode &MOTO = &NEWPP1.GetElementsByTagName("Exception");
/*
If (&MOTO.Len <> 0) Then
   MessageBox(0, "", 0, 0, "NOT NULL " | &MOTO [1].NodeValue);
Else
   MessageBox(0, "", 0, 0, "NULL");
End-If;
*/
/*
If (&MOTO.IsNull) Then
   MessageBox(0, "", 0, 0, "TRUE");
Else
   MessageBox(0, "", 0, 0, "FALSE");
End-If;
*/
/*
Local File &F1 = GetFile("C:\Temp\Exception_" | %Datetime | ".xml", "W", %FilePath_Absolute);
&F1.WriteString(&YT);
&F1.Close();
*/
&current_time = %Datetime;
&delay_time = AddToDateTime(&current_time, 0, 0, 0, 0, 0, 3);
MessageBox(0, "", 0, 0, "&current_time " | &current_time);
MessageBox(0, "", 0, 0, "&delay_time " | &delay_time);
While True
   If %Datetime > &delay_time Then
      Break;
   End-If;
End-While;
*>
/*
&VERSION = UpdateSysVersion();
MessageBox(0, "", 0, 0, "&VERSION " | &VERSION);
*/
<*
Local object &WORKAPP;
&WORKAPP = CreateObject("COM", "Excel.Application");
&WORKBOOKS = ObjectGetProperty(&WORKAPP, "Workbooks");
ObjectDoMethod(&WORKBOOKS, "Add", "C:\TEMP\INVOICE.XLT"); /* This associates the INVOICE template w/the workbook */
ObjectDoMethod(&WORKAPP, "Save", "C:\TEMP\TEST1.XLS");
ObjectSetProperty(&WORKAPP, "Visible", True);
*>
<*
import PT_NAV:*;

Declare Function SetDocDomainToAuthTokenDomain PeopleCode FUNCLIB_PORTAL.TEMPLATE_FUNC FieldFormula;

/* Change TESTING to return True to generate code to workaround ROBOT bug */
Function TESTING() Returns boolean
   Return True;
End-Function;

Function IScript_PT_NAV_PAGELET()
   
   Local PT_NAV:NavPagelet &navPagelet = create PT_NAV:NavPagelet("IScript_PT_NAV_PAGELET");
   &navPagelet.GeneratePageletHTML();
   
End-Function;

Function IScript_PT_NAV_INFRAME()
   
   Local PT_NAV:NavPagelet &navPagelet = create PT_NAV:NavPagelet("IScript_PT_NAV_INFRAME");
   &navPagelet.GenerateInFrameHTML();
   
End-Function;

Function IScript_UniHeader_Frame()
   
   Local PT_NAV:NavPagelet &navPagelet = create PT_NAV:NavPagelet("IScript_UniHeader_Frame");
   &navPagelet.GenerateHeaderHTML();
   
End-Function;

Function IScript_PT_NAV_TPL_FRAME
   
   Local string &encryptedUserId = EncodeURLForQueryString(Encrypt("", %UserId | %Language));
   &navPortal = create PT_NAV:NavPortal("IScript_UniHeader_Frame");
   &navTheme = create PT_NAV:NavTheme(&navPortal);
   
   If (%Request.BrowserType = "IE" Or
         &navTheme.isNS7x()) Then
      MessageBox(0, "", 0, 0, "Browser Type is IE");
      %Response.Write(GetHTMLText(HTML.PT_NAV_TPL_FRAME_EXPAND, &encryptedUserId));
   Else
      MessageBox(0, "", 0, 0, "Browser Type is MOZILLA");
      Local string &HideNav = %Request.GetParameter("h");
      If (&HideNav = "") Then
         &HideNav = GetUserOption("PPTL", "AUTOMENU");
      End-If;
      If (&HideNav = "Y") Then
         %Response.Write(GetHTMLText(HTML.PT_NAV_TPL_FRAME_COLLAPSE, &encryptedUserId));
      Else
         %Response.Write(GetHTMLText(HTML.PT_NAV_TPL_FRAME_EXPAND, &encryptedUserId));
      End-If;
   End-If;
End-Function;

Function IScript_EmptyFile()
   
   Local string &authdomain = SetDocDomainToAuthTokenDomain();
   
   Local number &nMetaXp = Value(GetUserOption("PPTL", "METAXP"));
   Local string &sGMT = DateTimeToHTTP(AddToDateTime(%Datetime, 0, 0, 0, 0, &nMetaXp, 0));
   If (&sGMT <> "") Then
      %Response.SetHeader("expires", &sGMT);
      %Response.SetHeader("last-modified", &sGMT);
   End-If;
   
   %Response.Write("<HTML dir='" | %Direction | "'><HEAD>" | &authdomain | "</HEAD></HTML>");
   
End-Function;


Declare Function SetDocDomainForPortal PeopleCode FUNCLIB_PORTAL.TEMPLATE_FUNC FieldFormula;

Function IScript_TimeOutDrillDown()
   %Response.Write(GetHTMLText(HTML.PT_NAV_INFRAME_TIMEOUT, %Request.ExpireMeta, %Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT)));
End-Function;

Function IScript_PT_NAV_INFRAME_TITLE()
   
   Local PT_NAV:NavPagelet &navPagelet = create PT_NAV:NavPagelet("IScript_PT_NAV_INFRAME_TITLE");
   &navPagelet.SetNavTitle();
   &navPagelet.GenerateInFrameHTML();
   
End-Function;
*>
<*
&POP = "PRASHANT SRIVASTAVA";
&PP = Hash(&POP);
If IsAlphaNumeric(&POP) Then
   MessageBox(0, "", 0, 0, "&PP " | &PP);
Else
   MessageBox(0, "", 0, 0, "UHOOO ");
End-If;

Local File &MyFile;

&FNAMES = FindFiles("c:\temp\*.txt", %FilePath_Absolute);
&FNAMES_TEST = FindFiles("C:\temp\TEST\*.txt", %FilePath_Absolute);
rem &FNAMES_TEST = FindFiles("C:\PT8.46\appserv\EPSYS\*.*", %FilePath_Absolute);
rem MessageBox(0, "", 0, 0, "Length " | &FNAMES.len);
rem For &e = 1 To &FNAMES.len
   MessageBox(0, "", 0, 0, "File Names " | &FNAMES [&e]);
rem End-For;
MessageBox(0, "", 0, 0, "Length " | &FNAMES_TEST.len);
For &e = 1 To &FNAMES_TEST.len
   MessageBox(0, "", 0, 0, "File Names " | &FNAMES_TEST [&e]);
End-For;
&MyFile = GetFile("c:\temp\TT.txt", "N", %FilePath_Absolute);
&MyFile.Open("c:\temp\TT.txt", "E", "A", %FilePath_Absolute);
/*
  Can abbreviate Unicode UTF-16 to "U" and the host operating system's 
  default non-Unicode (sometimes referred to as the ANSI character set) 
  to ԁԮ All other character sets must be spelled out in full, 
  for example, ASCII, THAI, or UTF8
*/
&fileName = "c:\temp\TT.txt";
If FileExists(&fileName, %FilePath_Absolute) Then
   If &MyFile.IsOpen Then
      &MyFile.Delete();
      MessageBox(0, "", 0, 0, "IF ");
   Else
      MessageBox(0, "", 0, 0, "Else ");
   End-If;
End-If;

&MyFile1 = GetFile("c:\temp\TT.txt", "N", %FilePath_Absolute);
&MyFile1.WriteLine("PP");
&MyFile1.Close();

&effdtm = %Datetime;
&date_file = DateTimeToLocalizedString(&effdtm, "yyyy-mm-dd-hh-mm");
MessageBox(0, "", 0, 0, "&date_file " | &date_file);
&original_file_name = "DEMAND_EXTRACT_A1_DTTM.TXT";
&replaced_file_name = Substitute(&original_file_name, "DTTM", &date_file);
rem &replaced_file_name = Substitute(&original_file_name, "dttm", &date_file);


WinMessage(&original_file_name | " &replaced_file_name  " | &replaced_file_name, 0);


&ORIGINAL_FILENAME = "DEMAND_EXTRACT_A1_DTTM.TXT";
*>
Declare Function PostReportRequest PeopleCode FUNCLIB_PSM.CONTENTID FieldFormula;

Local File &RQST_FILE;
Local Rowset &INPUT_ROWSET;
Local integer &RPTINSTANCE;
Local string &FileName;

/* Looks for XML files that will need to be processed*/
rem &FileNameArray = FindFiles("reports\*.xml", %FilePath_Relative);
&FileNameArray = FindFiles("C:\PT8.46\appserv\prcs\EPSYS\files\*.xml", %FilePath_Absolute);
MessageBox(0, "", 0, 0, "Hi111 " | &FileNameArray.Len);
While &FileNameArray.Len > 0
   
   /*Retrieve the first file in the file array*/
   &FileName = &FileNameArray.Shift();
   MessageBox(0, "", 63, 118, "Processing XML file: %1", &FileName);
   
   &RQST_FILE = GetFile(&FileName, "R", %FilePath_Absolute); /* Open each file */
   
   &RQST_FILE.SetFileLayout(FileLayout.POST_REPORT_XML);
   
   &INPUT_ROWSET = &RQST_FILE.ReadRowset();
   
   /*For each rowset, process the request to post this entry*/
   While &INPUT_ROWSET <> Null
      &RPTINSTANCE = PostReportRequest(&INPUT_ROWSET);
      &INPUT_ROWSET = &RQST_FILE.ReadRowset();
   End-While;
   
   &RQST_FILE.Close();
   <*
   /*To make sure this file is not processed again, override the content with the test "DONE"*/
   &RQST_FILE = GetFile(&FileName, "W", %FilePath_Absolute); /* Open each file */
   &RQST_FILE.WriteLine("Done");
   &RQST_FILE.Close();
   *>
   
   
End-While;



Function notifyAgentStageChange(&url As string, &agents As array of string, &system As string) Returns boolean;
   
   Local Message &req, &res;
   Local SOAPDoc &soap;
   Local XmlDoc &xml;
   Local boolean &b;
   Local integer &i;
   Local XmlNode &node;
   Local array of XmlNode &nodes;
   
   &req = CreateMessage(Message.PM_MESSAGE);
   
   &soap = CreateSOAPDoc();
   &soap.AddEnvelope(0);
   &soap.AddHeader();
   &soap.AddBody();
   &soap.AddMethod("notifyAgentStateChange", 1);
   
   For &i = 1 To &agents.Len
      &soap.AddParm("agentID", &agents [&i]);
   End-For;
   
   &soap.AddParm("systemID", &system);
   
   &node = &soap.HeaderNode;
   &node = &node.AddElement("omiHeader");
   &node = &node.AddElement("version");
   &node = &node.AddText("1.0");
   
   &xml = &soap.XmlDoc;
   
   &req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
   
   &req.SetXmlDoc(&xml);
   
   &res = ConnectorRequest(&req);
   &xml = &res.GetXmlDoc();
   &nodes = &xml.DocumentElement.GetElementsByTagName("message");
   If (&nodes.Len <> 0) Then
      MessageBox(0, MsgGetText(209, 571, "Error"), - 1, - 1, &nodes [1].NodeValue);
      Return False;
   End-If;
   Return True;
End-Function;

/* Main */

Local array of string &File;

&File = FindFiles("C:\temp\TEST\HIDE\8.txt", %FilePath_Absolute);
For &t = 1 To &File.Len
   rem notifyAgentStageChange("http://ws.xwebservices.com/XWebBlog/V2/XWebBlog.wsdl ",&File [&t],"PP");
End-For;



import PP_STRINGBUFFER:*;

MessageBox(0, "", 0, 0, "HI!!!!");
Local PP_STRINGBUFFER:StringBuffer &S = create PP_STRINGBUFFER:StringBuffer("PRASHANT");
&PP = &S.Append("|");
&PP = &S.Append("SRIVASTAVA");
&PP = &S.Append("|");
&PP = &S.Append("SRIVASTAVA");
&PP = &S.Append("|");
&PP = &S.Append("SRIVASTAVA");
&PP = &S.Append("|");
&PP = &S.Append("SRIVASTAVA");
MessageBox(0, "", 0, 0, "&PP " | &PP.Value);



<*
/* create an XML document */
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
&xmlDoc = CreateXmlDoc(&xmldata);

/* and send it out in an async request */
&success = PublishXmlDoc(&xmlDoc, Message.EXAMPLE_PSFT_MSG);

MessageBox(0, "", 0, 0, "Message sent.");
*>
<*
/* create an XML document */
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
&xmlDoc = CreateXmlDoc(&xmldata);

/* add text to it */
&rootNode = &xmlDoc.documentelement;
&descNode = &rootNode.AddElement("PPNode");
&descNode.NodeValue = "This message will be sent to an HTTP server.";

/* send the document out as a sync message */
&xmlResponseDoc = SyncRequestXmlDoc(&xmlDoc, Message.EXAMPLE_REQUEST_MSG);

/* convert the response to an XML string */
&textString = &xmlResponseDoc.GenXmlString();

/* and echo it back to the user */
MessageBox(0, "", 0, 0, &textString);
*>


/*UPLOADING FILES TO THE FTP SERVER*/

/*Create an XML Document*/
<*
&xmldata = "<?xml version='1.0'?><POP/>";
&xmldoc = CreateXmlDoc(&xmldata);

/*Add Text to It*/
&rootnode = &xmldoc.documentelement;
&descnode = &rootnode.AddElement("TestNode");
&descnode.NodeValue = "This message will be uploaded to an FTP Server";

/*Send the Document as an ASync Message*/
&success = PublishXmlDoc(&xmldoc, Message.EXAMPLE_REQUEST_MSG);

MessageBox(0, "", 0, 0, "Message Sent");
*>
<*
/*DOWNLOADING FILES FROM FTP SERVERS*/

/*Create an XML Document*/
&xmlpp = "<?xml version='1.0'?><DWNLD/>";
&ppdoc = CreateXmlDoc(&xmlpp);

/*Send the Document out in a Sync Message*/
&xmlResponseDoc = SyncRequestXmlDoc(&ppdoc, Message.EXAMPLE_REQUEST_MSG);

/*Convert the response message to an XML String*/

&ppString = &xmlResponseDoc.GenXmlString();

/*Echo it to the User*/

MessageBox(0, "", 0, 0, "My String " | &ppString);
*>

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
Declare Function assign_auto_number PeopleCode FUNCLIB_AUTONUM.LAST_AUTO_NBR FieldFormula;

Local File &fileLog;
Local ApiObject &oSession, &oZRmaFormInvCi;
Local ApiObject &oItemProdVwCollection, &oItemProdVw;
Local ApiObject &oInstallationCollection, &oInstallation;
Local ApiObject &oRmaLineCollection, &oRmaLine;
Local ApiObject &oInstallation2Collection, &oInstallation2;
Local ApiObject &oRmaLnNoteVwCollection, &oRmaLnNoteVw;
Local ApiObject &oStdNoteKeyVwCollection, &oStdNoteKeyVw;
Local ApiObject &oRmaLnNoteKyCollection, &oRmaLnNoteKy;
Local ApiObject &oStdNoteDocVwCollection, &oStdNoteDocVw;
Local ApiObject &oOmDoccdRmVwCollection, &oOmDoccdRmVw;
Local ApiObject &oRmaLnNoteDcCollection, &oRmaLnNoteDc;
Local ApiObject &oRmaLineAttVwCollection, &oRmaLineAttVw;
Local ApiObject &oRmaAddrLnVwCollection, &oRmaAddrLnVw;
Local ApiObject &oRmaSerialLotCollection, &oRmaSerialLot;
Local ApiObject &oRmaRefOrdVwCollection, &oRmaRefOrdVw;
Local ApiObject &oRmaRefMsrVwCollection, &oRmaRefMsrVw;
Local ApiObject &oRmaRefInvVwCollection, &oRmaRefInvVw;
Local ApiObject &oRmaReplSoDstCollection, &oRmaReplSoDst;
Local ApiObject &oRmaHdrNoteVwCollection, &oRmaHdrNoteVw;
Local ApiObject &oStdNoteKeyVw2Collection, &oStdNoteKeyVw2;
Local ApiObject &oRmaHdrNoteKyCollection, &oRmaHdrNoteKy;
Local ApiObject &oStdNoteDocVw2Collection, &oStdNoteDocVw2;
Local ApiObject &oOmDoccdRmVw2Collection, &oOmDoccdRmVw2;
Local ApiObject &oRmaHdrNoteDcCollection, &oRmaHdrNoteDc;
Local ApiObject &oRmaHdrAttVwCollection, &oRmaHdrAttVw;
Local ApiObject &oRmaAddrHdrVwCollection, &oRmaAddrHdrVw;
Local ApiObject &oOrdentCustVwCollection, &oOrdentCustVw;
Local ApiObject &oTaxGeocodeTmpCollection, &oTaxGeocodeTmp;
Local ApiObject &oRmaAddsqVwCollection, &oRmaAddsqVw;
Local ApiObject &oRmaCaddrVwCollection, &oRmaCaddrVw;
Local ApiObject &oRmaLocationVwCollection, &oRmaLocationVw;
Local ApiObject &oRmaLnDelkyVwCollection, &oRmaLnDelkyVw;
Local ApiObject &oOrdGroupCollection, &oOrdGroup;
Local ApiObject &oCustShpoptVwCollection, &oCustShpoptVw;
Local ApiObject &oOrdHeaderFsCollection, &oOrdHeaderFs;
Local ApiObject &oOrdLineFsCollection, &oOrdLineFs;
Local ApiObject &oOrdPriceAdjstCollection, &oOrdPriceAdjst;
Local ApiObject &oSconHdrCollection, &oSconHdr;
Local ApiObject &oOrdInvitemsVwCollection, &oOrdInvitemsVw;
Local ApiObject &oBiAdjGrpLineCollection, &oBiAdjGrpLine;
Local ApiObject &oCustGroupTblCollection, &oCustGroupTbl;
Local ApiObject &oDstRlsetOmV2Collection, &oDstRlsetOmV2;
Local ApiObject &oCustTaxgpshVwCollection, &oCustTaxgpshVw;
Local ApiObject &oBuLedCombVwgCollection, &oBuLedCombVwg;
Local ApiObject &oBuLedCombVwCollection, &oBuLedCombVw;
Local ApiObject &oComboCfdefnVwCollection, &oComboCfdefnVw;

Function errorHandler()
   Local ApiObject &oPSMessageCollection, &oPSMessage;
   Local number &i;
   Local string &sErrMsgSetNum, &sErrMsgNum, &sErrMsgText, &sErrType;
   
   &oPSMessageCollection = &oSession.PSMessages;
   For &i = 1 To &oPSMessageCollection.Count
      &oPSMessage = &oPSMessageCollection.Item(&i);
      &sErrMsgSetNum = &oPSMessage.MessageSetNumber;
      &sErrMsgNum = &oPSMessage.MessageNumber;
      &sErrMsgText = &oPSMessage.Text;
      &fileLog.WriteLine(&sErrType | " (" | &sErrMsgSetNum | "," | &sErrMsgNum | ") - " | &sErrMsgText);
   End-For;
   rem ***** Delete the Messages from the collection *****;
   &oPSMessageCollection.DeleteAll();
End-Function;

try
   rem ***** Set the Log File *****;
   &fileLog = GetFile("C:\temp\Z_RMA_FORM_INV_CI_" | %Datetime | ".log", "w", "a", %FilePath_Absolute);
   &fileLog.WriteLine("Begin");
   rem ***** Get current PeopleSoft Session *****;
   &oSession = %Session;
   
   
   &oSession.PSMessagesMode = 3;
   
   rem ***** Get the Component Interface *****;
   &oZRmaFormInvCi = &oSession.GetCompIntfc(CompIntfc.Z_RMA_FORM_INV_CI);
   If &oZRmaFormInvCi = Null Then
      errorHandler();
      throw CreateException(0, 0, "GetCompIntfc failed");
   End-If;
   
   rem ***** Set the Component Interface Mode *****;
   &oZRmaFormInvCi.InteractiveMode = True;
   &oZRmaFormInvCi.GetHistoryItems = True;
   &oZRmaFormInvCi.EditHistoryItems = False;
   
   rem ***** Set Component Interface Get/Create Keys *****;
   MessageBox(0, "", 0, 0, "Set the COMPINTFC Properties");
   &BU = "US008";
   &oZRmaFormInvCi.BUSINESS_UNIT = &BU;
   /* Select NEXT RMA ID */
   rem SQLExec("SELECT  FROM PS_AUTO_NUM_TBL WHERE SETID = 'SHARE'AND NUM_TYPE like '%RMA%'");
   &SET_CTRL_VAL = &oZRmaFormInvCi.BUSINESS_UNIT;
   &SETID = GetSetId(Field.BUSINESS_UNIT, &SET_CTRL_VAL, Record.AUTO_NUM_TBL, "");
   &NUM_TYPE = "RMA";
   &DEFAULT_BEG_SEQ = "Y";
   SQLExec("SELECT BEG_SEQ,MAX_LENGTH FROM PS_AUTO_NUM_TBL WHERE SETID=:1 AND NUM_TYPE=:2 AND DEFAULT_BEG_SEQ=:3", &SETID, &NUM_TYPE, &DEFAULT_BEG_SEQ, &BEG_SEQ, &MAX_LENGTH);
   &LENGTH = &MAX_LENGTH - Len(String(&BEG_SEQ));
   &CHECK = Rept("9", &LENGTH);
   &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(AUTO_NUM_TBL.LAST_AUTO_NBR, Value(&CHECK), 1, "where setid=:1 and num_type=:2 and default_beg_seq=:3", &SETID, &NUM_TYPE, &DEFAULT_BEG_SEQ);
   MessageBox(0, "", 0, 0, "&LAST_AUTO_NBR " | &LAST_AUTO_NBR);
   &ZEROS = "0";
   &ZERO_PAD = "Y";
   If &BEG_SEQ <> "000" Then
      If &ZERO_PAD = "Y" Then
         &NUM_LENGTH = &LENGTH - Len(String(&LAST_AUTO_NBR));
         &ZEROS = Rept("0", &NUM_LENGTH);
         &PP = Rept("(|)", 5);
         MessageBox(0, "", 0, 0, "&PP " | &PP);
         &FINAL_NUM = &BEG_SEQ | &ZEROS | &LAST_AUTO_NBR;
      Else
         &FINAL_NUM = &BEG_SEQ | &LAST_AUTO_NBR;
      End-If;
   Else
      If &ZERO_PAD = "Y" Then
         &NUM_LENGTH = &LENGTH - Len(String(&LAST_AUTO_NBR));
         &ZEROS = Rept("0", &NUM_LENGTH);
         &FINAL_NUM = &BEG_SEQ | &ZEROS | &LAST_AUTO_NBR;
      Else
         &FINAL_NUM = &LAST_AUTO_NBR;
      End-If;
   End-If;
   MessageBox(0, "", 0, 0, "&FINAL_NUM " | &FINAL_NUM);
   &oZRmaFormInvCi.RMA_ID = &FINAL_NUM;
   &oZRmaFormInvCi.RETURN_FROM_OPTION = "I";
   &oZRmaFormInvCi.RETURN_FROM_LOC = "US008";
   &oZRmaFormInvCi.RETURN_FR_CUST_ID = "US008";
   
   rem ***** Execute Get *****;
   rem If Not &oZRmaFormInvCi.Get() Then
		rem ***** No rows exist for the specified keys.*****;
   rem errorHandler();
   rem throw CreateException(0, 0, "Get failed");
   rem End-If;
   
   rem ***** Execute Create ******;
   If Not &oZRmaFormInvCi.Create() Then;
      rem ***** Unable to Create Component Interface for the Add keys provided. *****;
      errorHandler();
      throw CreateException(0, 0, "Create failed");
   End-If;
   
   
   rem ***** Begin: Get/Set Component Interface Properties *****;
   rem ***** Get/Set Level 0 Field Properties *****;
   &fileLog.WriteLine("&oZRmaFormInvCi.RETURN_FROM_LOC = " | &oZRmaFormInvCi.RETURN_FROM_LOC);
   rem &oZRmaFormInvCi.RETURN_FROM_LOC = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.RETURN_FR_CUST_ID = " | &oZRmaFormInvCi.RETURN_FR_CUST_ID);
   rem &oZRmaFormInvCi.RETURN_FR_CUST_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.ADDRESS_SEQ_SHIP = " | &oZRmaFormInvCi.ADDRESS_SEQ_SHIP);
   rem &oZRmaFormInvCi.ADDRESS_SEQ_SHIP = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.DISTRIB_TYPE = " | &oZRmaFormInvCi.DISTRIB_TYPE);
   rem &oZRmaFormInvCi.DISTRIB_TYPE = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.REASON_CD = " | &oZRmaFormInvCi.REASON_CD);
   &oZRmaFormInvCi.REASON_CD = "DAMAGE";
   &fileLog.WriteLine("&oZRmaFormInvCi.RETURN_TO_IBU = " | &oZRmaFormInvCi.RETURN_TO_IBU);
   rem &oZRmaFormInvCi.RETURN_TO_IBU = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.RMA_APPROVED_FLAG = " | &oZRmaFormInvCi.RMA_APPROVED_FLAG);
   &oZRmaFormInvCi.RMA_APPROVED_FLAG = "N";
   &fileLog.WriteLine("&oZRmaFormInvCi.RMA_DATE = " | &oZRmaFormInvCi.RMA_DATE);
   &oZRmaFormInvCi.RMA_DATE = %Date;
   &fileLog.WriteLine("&oZRmaFormInvCi.RMA_STATUS = " | &oZRmaFormInvCi.RMA_STATUS);
   &oZRmaFormInvCi.RMA_STATUS = "O";
   &fileLog.WriteLine("&oZRmaFormInvCi.SPEEDTYPE_KEY = " | &oZRmaFormInvCi.SPEEDTYPE_KEY);
   rem &oZRmaFormInvCi.SPEEDTYPE_KEY = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.EST_RETURN_DT = " | &oZRmaFormInvCi.EST_RETURN_DT);
   &oZRmaFormInvCi.EST_RETURN_DT = %Date;
   &fileLog.WriteLine("&oZRmaFormInvCi.EST_RETURN_TM = " | &oZRmaFormInvCi.EST_RETURN_TM);
   &oZRmaFormInvCi.EST_RETURN_TM = %Time;
   &fileLog.WriteLine("&oZRmaFormInvCi.INV_ITEM_ID = " | &oZRmaFormInvCi.INV_ITEM_ID);
   rem &oZRmaFormInvCi.INV_ITEM_ID = "PS1001";
   &fileLog.WriteLine("&oZRmaFormInvCi.DESCR = " | &oZRmaFormInvCi.DESCR);
   rem &oZRmaFormInvCi.DESCR = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.INV_ITEM_GROUP = " | &oZRmaFormInvCi.INV_ITEM_GROUP);
   rem &oZRmaFormInvCi.INV_ITEM_GROUP = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.INV_PROD_FAM_CD = " | &oZRmaFormInvCi.INV_PROD_FAM_CD);
   rem &oZRmaFormInvCi.INV_PROD_FAM_CD = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.MFG_ID = " | &oZRmaFormInvCi.MFG_ID);
   rem &oZRmaFormInvCi.MFG_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.MFG_ITM_ID = " | &oZRmaFormInvCi.MFG_ITM_ID);
   rem &oZRmaFormInvCi.MFG_ITM_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.CATEGORY_ID = " | &oZRmaFormInvCi.CATEGORY_ID);
   rem &oZRmaFormInvCi.CATEGORY_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.PRODUCT_ID = " | &oZRmaFormInvCi.PRODUCT_ID);
   rem &oZRmaFormInvCi.PRODUCT_ID = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.DESCR1 = " | &oZRmaFormInvCi.DESCR1);
   rem &oZRmaFormInvCi.DESCR1 = [*];
   &fileLog.WriteLine("&oZRmaFormInvCi.CATEGORY_CD = " | &oZRmaFormInvCi.CATEGORY_CD);
   rem &oZRmaFormInvCi.CATEGORY_CD = [*];
   
   rem ***** Set/Get ITEM_PROD_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
   &oItemProdVwCollection = &oZRmaFormInvCi.ITEM_PROD_VW;
   Local integer &i194;
   For &i194 = 1 To &oItemProdVwCollection.Count;
      &oItemProdVw = &oItemProdVwCollection.Item(&i194);
      &fileLog.WriteLine("&oItemProdVw.ITEM_SELECTED = " | &oItemProdVw.ITEM_SELECTED);
      rem &oItemProdVw.ITEM_SELECTED = [*];
   End-For;
   
   rem ***** Set/Get INSTALLATION Collection Field Properties -- Parent: PS_ROOT Collection *****;
   &oInstallationCollection = &oZRmaFormInvCi.INSTALLATION;
   MessageBox(0, "", 0, 0, "&oInstallationCollection " | &oInstallationCollection.Count);
   Local integer &i1102;
   For &i1102 = 1 To &oInstallationCollection.Count;
      &oInstallation = &oInstallationCollection.Item(&i1102);
      &fileLog.WriteLine("&oInstallation.ACCOUNT = " | &oInstallation.ACCOUNT);
      rem &oInstallation.ACCOUNT = [*];
      &fileLog.WriteLine("&oInstallation.ALTACCT = " | &oInstallation.ALTACCT);
      rem &oInstallation.ALTACCT = [*];
      &fileLog.WriteLine("&oInstallation.DEPTID = " | &oInstallation.DEPTID);
      rem &oInstallation.DEPTID = [*];
      &fileLog.WriteLine("&oInstallation.OPERATING_UNIT = " | &oInstallation.OPERATING_UNIT);
      rem &oInstallation.OPERATING_UNIT = [*];
      &fileLog.WriteLine("&oInstallation.PRODUCT = " | &oInstallation.PRODUCT);
      rem &oInstallation.PRODUCT = [*];
      &fileLog.WriteLine("&oInstallation.FUND_CODE = " | &oInstallation.FUND_CODE);
      rem &oInstallation.FUND_CODE = [*];
      &fileLog.WriteLine("&oInstallation.CLASS_FLD = " | &oInstallation.CLASS_FLD);
      rem &oInstallation.CLASS_FLD = [*];
      &fileLog.WriteLine("&oInstallation.PROGRAM_CODE = " | &oInstallation.PROGRAM_CODE);
      rem &oInstallation.PROGRAM_CODE = [*];
      &fileLog.WriteLine("&oInstallation.BUDGET_REF = " | &oInstallation.BUDGET_REF);
      rem &oInstallation.BUDGET_REF = [*];
      &fileLog.WriteLine("&oInstallation.AFFILIATE = " | &oInstallation.AFFILIATE);
      rem &oInstallation.AFFILIATE = [*];
      &fileLog.WriteLine("&oInstallation.AFFILIATE_INTRA1 = " | &oInstallation.AFFILIATE_INTRA1);
      rem &oInstallation.AFFILIATE_INTRA1 = [*];
      &fileLog.WriteLine("&oInstallation.AFFILIATE_INTRA2 = " | &oInstallation.AFFILIATE_INTRA2);
      rem &oInstallation.AFFILIATE_INTRA2 = [*];
      &fileLog.WriteLine("&oInstallation.CHARTFIELD1 = " | &oInstallation.CHARTFIELD1);
      rem &oInstallation.CHARTFIELD1 = [*];
      &fileLog.WriteLine("&oInstallation.CHARTFIELD2 = " | &oInstallation.CHARTFIELD2);
      rem &oInstallation.CHARTFIELD2 = [*];
      &fileLog.WriteLine("&oInstallation.CHARTFIELD3 = " | &oInstallation.CHARTFIELD3);
      rem &oInstallation.CHARTFIELD3 = [*];
      &fileLog.WriteLine("&oInstallation.BUSINESS_UNIT_PC = " | &oInstallation.BUSINESS_UNIT_PC);
      rem &oInstallation.BUSINESS_UNIT_PC = [*];
      &fileLog.WriteLine("&oInstallation.PROJECT_ID = " | &oInstallation.PROJECT_ID);
      rem &oInstallation.PROJECT_ID = [*];
      &fileLog.WriteLine("&oInstallation.ACTIVITY_ID = " | &oInstallation.ACTIVITY_ID);
      rem &oInstallation.ACTIVITY_ID = [*];
      &fileLog.WriteLine("&oInstallation.RESOURCE_TYPE = " | &oInstallation.RESOURCE_TYPE);
      rem &oInstallation.RESOURCE_TYPE = [*];
      &fileLog.WriteLine("&oInstallation.RESOURCE_CATEGORY = " | &oInstallation.RESOURCE_CATEGORY);
      rem &oInstallation.RESOURCE_CATEGORY = [*];
      &fileLog.WriteLine("&oInstallation.RESOURCE_SUB_CAT = " | &oInstallation.RESOURCE_SUB_CAT);
      rem &oInstallation.RESOURCE_SUB_CAT = [*];
   End-For;
   
   rem ***** Set/Get RMA_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
   &oRmaLineCollection = &oZRmaFormInvCi.RMA_LINE;
   MessageBox(0, "", 0, 0, "&oRmaLineCollection.Count " | &oRmaLineCollection.Count);
   Local integer &i1126;
   For &i1126 = 1 To &oRmaLineCollection.Count;
      &oRmaLine = &oRmaLineCollection.Item(&i1126);
      &fileLog.WriteLine("&oRmaLine.RMA_LINE_NBR = " | &oRmaLine.RMA_LINE_NBR);
      &oRmaLine.RMA_LINE_NBR = "1";
      &fileLog.WriteLine("&oRmaLine.DISTRIB_TYPE_1 = " | &oRmaLine.DISTRIB_TYPE_1);
      rem &oRmaLine.DISTRIB_TYPE_1 = [*];
      &fileLog.WriteLine("&oRmaLine.INV_ITEM_ID_1 = " | &oRmaLine.INV_ITEM_ID_1);
      &oRmaLine.INV_ITEM_ID_1 = "BR4401";
      &fileLog.WriteLine("&oRmaLine.QTY_RETURNED = " | &oRmaLine.QTY_RETURNED);
      &oRmaLine.QTY_RETURNED = "10";
      &fileLog.WriteLine("&oRmaLine.RETURN_TO_IBU_1 = " | &oRmaLine.RETURN_TO_IBU_1);
      rem &oRmaLine.RETURN_TO_IBU_1 = [*];
      &fileLog.WriteLine("&oRmaLine.RMA_LINE_STATUS = " | &oRmaLine.RMA_LINE_STATUS);
      rem &oRmaLine.RMA_LINE_STATUS = [*];
      &fileLog.WriteLine("&oRmaLine.SPEEDTYPE_KEY_1 = " | &oRmaLine.SPEEDTYPE_KEY_1);
      rem &oRmaLine.SPEEDTYPE_KEY_1 = [*];
      &fileLog.WriteLine("&oRmaLine.UNIT_OF_MEASURE = " | &oRmaLine.UNIT_OF_MEASURE);
      &oRmaLine.UNIT_OF_MEASURE = "EA";
      
      rem ***** Set INSTALLATION2 Collection Field Properties -- Parent: RMA_LINE Collection *****;
      &oInstallation2Collection = &oRmaLine.INSTALLATION2;
      Local integer &i2169;
      For &i2169 = 1 To &oInstallation2Collection.Count;
         &oInstallation2 = &oInstallation2Collection.Item(&i2169);
         &fileLog.WriteLine("&oInstallation2.ACCOUNT_1 = " | &oInstallation2.ACCOUNT_1);
         rem &oInstallation2.ACCOUNT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.ALTACCT_1 = " | &oInstallation2.ALTACCT_1);
         rem &oInstallation2.ALTACCT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.DEPTID_1 = " | &oInstallation2.DEPTID_1);
         rem &oInstallation2.DEPTID_1 = [*];
         &fileLog.WriteLine("&oInstallation2.OPERATING_UNIT_1 = " | &oInstallation2.OPERATING_UNIT_1);
         rem &oInstallation2.OPERATING_UNIT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.PRODUCT_1 = " | &oInstallation2.PRODUCT_1);
         rem &oInstallation2.PRODUCT_1 = [*];
         &fileLog.WriteLine("&oInstallation2.FUND_CODE_1 = " | &oInstallation2.FUND_CODE_1);
         rem &oInstallation2.FUND_CODE_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CLASS_FLD_1 = " | &oInstallation2.CLASS_FLD_1);
         rem &oInstallation2.CLASS_FLD_1 = [*];
         &fileLog.WriteLine("&oInstallation2.PROGRAM_CODE_1 = " | &oInstallation2.PROGRAM_CODE_1);
         rem &oInstallation2.PROGRAM_CODE_1 = [*];
         &fileLog.WriteLine("&oInstallation2.BUDGET_REF_1 = " | &oInstallation2.BUDGET_REF_1);
         rem &oInstallation2.BUDGET_REF_1 = [*];
         &fileLog.WriteLine("&oInstallation2.AFFILIATE_1 = " | &oInstallation2.AFFILIATE_1);
         rem &oInstallation2.AFFILIATE_1 = [*];
         &fileLog.WriteLine("&oInstallation2.AFFILIATE_INTRA1_1 = " | &oInstallation2.AFFILIATE_INTRA1_1);
         rem &oInstallation2.AFFILIATE_INTRA1_1 = [*];
         &fileLog.WriteLine("&oInstallation2.AFFILIATE_INTRA2_1 = " | &oInstallation2.AFFILIATE_INTRA2_1);
         rem &oInstallation2.AFFILIATE_INTRA2_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CHARTFIELD1_1 = " | &oInstallation2.CHARTFIELD1_1);
         rem &oInstallation2.CHARTFIELD1_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CHARTFIELD2_1 = " | &oInstallation2.CHARTFIELD2_1);
         rem &oInstallation2.CHARTFIELD2_1 = [*];
         &fileLog.WriteLine("&oInstallation2.CHARTFIELD3_1 = " | &oInstallation2.CHARTFIELD3_1);
         rem &oInstallation2.CHARTFIELD3_1 = [*];
         &fileLog.WriteLine("&oInstallation2.BUSINESS_UNIT_PC_3 = " | &oInstallation2.BUSINESS_UNIT_PC_3);
         rem &oInstallation2.BUSINESS_UNIT_PC_3 = [*];
         &fileLog.WriteLine("&oInstallation2.PROJECT_ID_3 = " | &oInstallation2.PROJECT_ID_3);
         rem &oInstallation2.PROJECT_ID_3 = [*];
         &fileLog.WriteLine("&oInstallation2.ACTIVITY_ID_3 = " | &oInstallation2.ACTIVITY_ID_3);
         rem &oInstallation2.ACTIVITY_ID_3 = [*];
         &fileLog.WriteLine("&oInstallation2.RESOURCE_TYPE_3 = " | &oInstallation2.RESOURCE_TYPE_3);
         rem &oInstallation2.RESOURCE_TYPE_3 = [*];
         &fileLog.WriteLine("&oInstallation2.RESOURCE_CATEGORY_3 = " | &oInstallation2.RESOURCE_CATEGORY_3);
         rem &oInstallation2.RESOURCE_CATEGORY_3 = [*];
         &fileLog.WriteLine("&oInstallation2.RESOURCE_SUB_CAT_3 = " | &oInstallation2.RESOURCE_SUB_CAT_3);
         rem &oInstallation2.RESOURCE_SUB_CAT_3 = [*];
         
         rem ***** Set RMA_LN_NOTE_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
         &oRmaLnNoteVwCollection = &oRmaLine.RMA_LN_NOTE_VW;
         Local integer &i2191;
         For &i2191 = 1 To &oRmaLnNoteVwCollection.Count;
            &oRmaLnNoteVw = &oRmaLnNoteVwCollection.Item(&i2191);
            
            rem ***** Set STD_NOTE_KEY_VW Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
            &oStdNoteKeyVwCollection = &oRmaLnNoteVw.STD_NOTE_KEY_VW;
            Local integer &i3198;
            For &i3198 = 1 To &oStdNoteKeyVwCollection.Count;
               &oStdNoteKeyVw = &oStdNoteKeyVwCollection.Item(&i3198);
               
               rem ***** Set RMA_LN_NOTE_KY Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
               &oRmaLnNoteKyCollection = &oRmaLnNoteVw.RMA_LN_NOTE_KY;
               Local integer &i3200;
               For &i3200 = 1 To &oRmaLnNoteKyCollection.Count;
                  &oRmaLnNoteKy = &oRmaLnNoteKyCollection.Item(&i3200);
                  
                  rem ***** Set STD_NOTE_DOC_VW Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
                  &oStdNoteDocVwCollection = &oRmaLnNoteVw.STD_NOTE_DOC_VW;
                  Local integer &i3202;
                  For &i3202 = 1 To &oStdNoteDocVwCollection.Count;
                     &oStdNoteDocVw = &oStdNoteDocVwCollection.Item(&i3202);
                     
                     rem ***** Set OM_DOCCD_RM_VW Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
                     &oOmDoccdRmVwCollection = &oRmaLnNoteVw.OM_DOCCD_RM_VW;
                     Local integer &i3204;
                     For &i3204 = 1 To &oOmDoccdRmVwCollection.Count;
                        &oOmDoccdRmVw = &oOmDoccdRmVwCollection.Item(&i3204);
                        
                        rem ***** Set RMA_LN_NOTE_DC Collection Field Properties -- Parent: RMA_LN_NOTE_VW Collection *****;
                        &oRmaLnNoteDcCollection = &oRmaLnNoteVw.RMA_LN_NOTE_DC;
                        Local integer &i3207;
                        For &i3207 = 1 To &oRmaLnNoteDcCollection.Count;
                           &oRmaLnNoteDc = &oRmaLnNoteDcCollection.Item(&i3207);
                           
                           rem ***** Set RMA_LINE_ATT_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                           &oRmaLineAttVwCollection = &oRmaLine.RMA_LINE_ATT_VW;
                           Local integer &i2209;
                           For &i2209 = 1 To &oRmaLineAttVwCollection.Count;
                              &oRmaLineAttVw = &oRmaLineAttVwCollection.Item(&i2209);
                              
                              rem ***** Set RMA_ADDR_LN_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                              &oRmaAddrLnVwCollection = &oRmaLine.RMA_ADDR_LN_VW;
                              Local integer &i2213;
                              For &i2213 = 1 To &oRmaAddrLnVwCollection.Count;
                                 &oRmaAddrLnVw = &oRmaAddrLnVwCollection.Item(&i2213);
                                 
                                 rem ***** Set RMA_SERIAL_LOT Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                 &oRmaSerialLotCollection = &oRmaLine.RMA_SERIAL_LOT;
                                 Local integer &i2237;
                                 For &i2237 = 1 To &oRmaSerialLotCollection.Count;
                                    &oRmaSerialLot = &oRmaSerialLotCollection.Item(&i2237);
                                    
                                    rem ***** Set RMA_REF_ORD_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                    &oRmaRefOrdVwCollection = &oRmaLine.RMA_REF_ORD_VW;
                                    Local integer &i2242;
                                    For &i2242 = 1 To &oRmaRefOrdVwCollection.Count;
                                       &oRmaRefOrdVw = &oRmaRefOrdVwCollection.Item(&i2242);
                                       
                                       rem ***** Set RMA_REF_MSR_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                       &oRmaRefMsrVwCollection = &oRmaLine.RMA_REF_MSR_VW;
                                       Local integer &i2244;
                                       For &i2244 = 1 To &oRmaRefMsrVwCollection.Count;
                                          &oRmaRefMsrVw = &oRmaRefMsrVwCollection.Item(&i2244);
                                          
                                          rem ***** Set RMA_REF_INV_VW Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                          &oRmaRefInvVwCollection = &oRmaLine.RMA_REF_INV_VW;
                                          Local integer &i2246;
                                          For &i2246 = 1 To &oRmaRefInvVwCollection.Count;
                                             &oRmaRefInvVw = &oRmaRefInvVwCollection.Item(&i2246);
                                             
                                             rem ***** Set RMA_REPL_SO_DST Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                             &oRmaReplSoDstCollection = &oRmaLine.RMA_REPL_SO_DST;
                                             Local integer &i2248;
                                             For &i2248 = 1 To &oRmaReplSoDstCollection.Count;
                                                &oRmaReplSoDst = &oRmaReplSoDstCollection.Item(&i2248);
                                             End-For;
                                          End-For;
                                          
                                          rem ***** Set/Get RMA_HDR_NOTE_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                          &oRmaHdrNoteVwCollection = &oZRmaFormInvCi.RMA_HDR_NOTE_VW;
                                          Local integer &i1250;
                                          For &i1250 = 1 To &oRmaHdrNoteVwCollection.Count;
                                             &oRmaHdrNoteVw = &oRmaHdrNoteVwCollection.Item(&i1250);
                                             
                                             rem ***** Set STD_NOTE_KEY_VW2 Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                             &oStdNoteKeyVw2Collection = &oRmaHdrNoteVw.STD_NOTE_KEY_VW2;
                                             Local integer &i2257;
                                             For &i2257 = 1 To &oStdNoteKeyVw2Collection.Count;
                                                &oStdNoteKeyVw2 = &oStdNoteKeyVw2Collection.Item(&i2257);
                                                
                                                rem ***** Set RMA_HDR_NOTE_KY Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                &oRmaHdrNoteKyCollection = &oRmaHdrNoteVw.RMA_HDR_NOTE_KY;
                                                Local integer &i2259;
                                                For &i2259 = 1 To &oRmaHdrNoteKyCollection.Count;
                                                   &oRmaHdrNoteKy = &oRmaHdrNoteKyCollection.Item(&i2259);
                                                   
                                                   rem ***** Set STD_NOTE_DOC_VW2 Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                   &oStdNoteDocVw2Collection = &oRmaHdrNoteVw.STD_NOTE_DOC_VW2;
                                                   Local integer &i2261;
                                                   For &i2261 = 1 To &oStdNoteDocVw2Collection.Count;
                                                      &oStdNoteDocVw2 = &oStdNoteDocVw2Collection.Item(&i2261);
                                                      
                                                      rem ***** Set OM_DOCCD_RM_VW2 Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                      &oOmDoccdRmVw2Collection = &oRmaHdrNoteVw.OM_DOCCD_RM_VW2;
                                                      Local integer &i2263;
                                                      For &i2263 = 1 To &oOmDoccdRmVw2Collection.Count;
                                                         &oOmDoccdRmVw2 = &oOmDoccdRmVw2Collection.Item(&i2263);
                                                         
                                                         rem ***** Set RMA_HDR_NOTE_DC Collection Field Properties -- Parent: RMA_HDR_NOTE_VW Collection *****;
                                                         &oRmaHdrNoteDcCollection = &oRmaHdrNoteVw.RMA_HDR_NOTE_DC;
                                                         Local integer &i2266;
                                                         For &i2266 = 1 To &oRmaHdrNoteDcCollection.Count;
                                                            &oRmaHdrNoteDc = &oRmaHdrNoteDcCollection.Item(&i2266);
                                                         End-For;
                                                      End-For;
                                                      
                                                      rem ***** Set/Get RMA_HDR_ATT_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                      &oRmaHdrAttVwCollection = &oZRmaFormInvCi.RMA_HDR_ATT_VW;
                                                      Local integer &i1268;
                                                      For &i1268 = 1 To &oRmaHdrAttVwCollection.Count;
                                                         &oRmaHdrAttVw = &oRmaHdrAttVwCollection.Item(&i1268);
                                                      End-For;
                                                      
                                                      rem ***** Set/Get RMA_ADDR_HDR_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                      &oRmaAddrHdrVwCollection = &oZRmaFormInvCi.RMA_ADDR_HDR_VW;
                                                      Local integer &i1272;
                                                      For &i1272 = 1 To &oRmaAddrHdrVwCollection.Count;
                                                         &oRmaAddrHdrVw = &oRmaAddrHdrVwCollection.Item(&i1272);
                                                      End-For;
                                                      
                                                      rem ***** Set/Get ORDENT_CUST_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                      &oOrdentCustVwCollection = &oZRmaFormInvCi.ORDENT_CUST_VW;
                                                      Local integer &i1296;
                                                      For &i1296 = 1 To &oOrdentCustVwCollection.Count;
                                                         &oOrdentCustVw = &oOrdentCustVwCollection.Item(&i1296);
                                                         
                                                         rem ***** Set TAX_GEOCODE_TMP Collection Field Properties -- Parent: ORDENT_CUST_VW Collection *****;
                                                         &oTaxGeocodeTmpCollection = &oOrdentCustVw.TAX_GEOCODE_TMP;
                                                         Local integer &i2298;
                                                         For &i2298 = 1 To &oTaxGeocodeTmpCollection.Count;
                                                            &oTaxGeocodeTmp = &oTaxGeocodeTmpCollection.Item(&i2298);
                                                            
                                                            rem ***** Set RMA_ADDSQ_VW Collection Field Properties -- Parent: ORDENT_CUST_VW Collection *****;
                                                            &oRmaAddsqVwCollection = &oOrdentCustVw.RMA_ADDSQ_VW;
                                                            Local integer &i2305;
                                                            For &i2305 = 1 To &oRmaAddsqVwCollection.Count;
                                                               &oRmaAddsqVw = &oRmaAddsqVwCollection.Item(&i2305);
                                                               
                                                               rem ***** Set RMA_CADDR_VW Collection Field Properties -- Parent: RMA_ADDSQ_VW Collection *****;
                                                               &oRmaCaddrVwCollection = &oRmaAddsqVw.RMA_CADDR_VW;
                                                               Local integer &i3315;
                                                               For &i3315 = 1 To &oRmaCaddrVwCollection.Count;
                                                                  &oRmaCaddrVw = &oRmaCaddrVwCollection.Item(&i3315);
                                                               End-For;
                                                            End-For;
                                                         End-For;
                                                         
                                                         rem ***** Set/Get RMA_LOCATION_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oRmaLocationVwCollection = &oZRmaFormInvCi.RMA_LOCATION_VW;
                                                         Local integer &i1342;
                                                         For &i1342 = 1 To &oRmaLocationVwCollection.Count;
                                                            &oRmaLocationVw = &oRmaLocationVwCollection.Item(&i1342);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get RMA_LN_DELKY_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oRmaLnDelkyVwCollection = &oZRmaFormInvCi.RMA_LN_DELKY_VW;
                                                         Local integer &i1365;
                                                         For &i1365 = 1 To &oRmaLnDelkyVwCollection.Count;
                                                            &oRmaLnDelkyVw = &oRmaLnDelkyVwCollection.Item(&i1365);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_GROUP Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdGroupCollection = &oZRmaFormInvCi.ORD_GROUP;
                                                         Local integer &i1367;
                                                         For &i1367 = 1 To &oOrdGroupCollection.Count;
                                                            &oOrdGroup = &oOrdGroupCollection.Item(&i1367);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get CUST_SHPOPT_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oCustShpoptVwCollection = &oZRmaFormInvCi.CUST_SHPOPT_VW;
                                                         Local integer &i1369;
                                                         For &i1369 = 1 To &oCustShpoptVwCollection.Count;
                                                            &oCustShpoptVw = &oCustShpoptVwCollection.Item(&i1369);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_HEADER_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdHeaderFsCollection = &oZRmaFormInvCi.ORD_HEADER_FS;
                                                         Local integer &i1372;
                                                         For &i1372 = 1 To &oOrdHeaderFsCollection.Count;
                                                            &oOrdHeaderFs = &oOrdHeaderFsCollection.Item(&i1372);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_LINE_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdLineFsCollection = &oZRmaFormInvCi.ORD_LINE_FS;
                                                         Local integer &i1374;
                                                         For &i1374 = 1 To &oOrdLineFsCollection.Count;
                                                            &oOrdLineFs = &oOrdLineFsCollection.Item(&i1374);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_PRICE_ADJST Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdPriceAdjstCollection = &oZRmaFormInvCi.ORD_PRICE_ADJST;
                                                         Local integer &i1376;
                                                         For &i1376 = 1 To &oOrdPriceAdjstCollection.Count;
                                                            &oOrdPriceAdjst = &oOrdPriceAdjstCollection.Item(&i1376);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get SCON_HDR Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oSconHdrCollection = &oZRmaFormInvCi.SCON_HDR;
                                                         Local integer &i1378;
                                                         For &i1378 = 1 To &oSconHdrCollection.Count;
                                                            &oSconHdr = &oSconHdrCollection.Item(&i1378);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get ORD_INVITEMS_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oOrdInvitemsVwCollection = &oZRmaFormInvCi.ORD_INVITEMS_VW;
                                                         Local integer &i1380;
                                                         For &i1380 = 1 To &oOrdInvitemsVwCollection.Count;
                                                            &oOrdInvitemsVw = &oOrdInvitemsVwCollection.Item(&i1380);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get BI_ADJ_GRP_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oBiAdjGrpLineCollection = &oZRmaFormInvCi.BI_ADJ_GRP_LINE;
                                                         Local integer &i1382;
                                                         For &i1382 = 1 To &oBiAdjGrpLineCollection.Count;
                                                            &oBiAdjGrpLine = &oBiAdjGrpLineCollection.Item(&i1382);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get CUST_GROUP_TBL Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oCustGroupTblCollection = &oZRmaFormInvCi.CUST_GROUP_TBL;
                                                         Local integer &i1384;
                                                         For &i1384 = 1 To &oCustGroupTblCollection.Count;
                                                            &oCustGroupTbl = &oCustGroupTblCollection.Item(&i1384);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get DST_RLSET_OM_V2 Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oDstRlsetOmV2Collection = &oZRmaFormInvCi.DST_RLSET_OM_V2;
                                                         Local integer &i1386;
                                                         For &i1386 = 1 To &oDstRlsetOmV2Collection.Count;
                                                            &oDstRlsetOmV2 = &oDstRlsetOmV2Collection.Item(&i1386);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get CUST_TAXGPSH_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oCustTaxgpshVwCollection = &oZRmaFormInvCi.CUST_TAXGPSH_VW;
                                                         Local integer &i1388;
                                                         For &i1388 = 1 To &oCustTaxgpshVwCollection.Count;
                                                            &oCustTaxgpshVw = &oCustTaxgpshVwCollection.Item(&i1388);
                                                         End-For;
                                                         
                                                         rem ***** Set/Get BU_LED_COMB_VWG Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                         &oBuLedCombVwgCollection = &oZRmaFormInvCi.BU_LED_COMB_VWG;
                                                         Local integer &i1390;
                                                         For &i1390 = 1 To &oBuLedCombVwgCollection.Count;
                                                            &oBuLedCombVwg = &oBuLedCombVwgCollection.Item(&i1390);
                                                            
                                                            rem ***** Set BU_LED_COMB_VW Collection Field Properties -- Parent: BU_LED_COMB_VWG Collection *****;
                                                            &oBuLedCombVwCollection = &oBuLedCombVwg.BU_LED_COMB_VW;
                                                            Local integer &i2396;
                                                            For &i2396 = 1 To &oBuLedCombVwCollection.Count;
                                                               &oBuLedCombVw = &oBuLedCombVwCollection.Item(&i2396);
                                                               
                                                               rem ***** Set COMBO_CFDEFN_VW Collection Field Properties -- Parent: BU_LED_COMB_VW Collection *****;
                                                               &oComboCfdefnVwCollection = &oBuLedCombVw.COMBO_CFDEFN_VW;
                                                               Local integer &i3398;
                                                               For &i3398 = 1 To &oComboCfdefnVwCollection.Count;
                                                                  &oComboCfdefnVw = &oComboCfdefnVwCollection.Item(&i3398);
                                                               End-For;
                                                            End-For;
                                                         End-For;
                                                         rem ***** End: Get/Set Component Interface Properties *****;
                                                         
                                                         rem ***** Execute Save *****;
                                                         If Not &oZRmaFormInvCi.Save() Then;
                                                            errorHandler();
                                                            throw CreateException(0, 0, "Save failed");
                                                         Else
                                                            /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                                                            REMARK - CALL Z_RECEIVE_RMA_CI;
                                                            /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
                                                            CommitWork();
                                                            Local File &fileLog_RMA;
                                                            Local ApiObject &oSession_RMA, &oZReceiveRmaCi;
                                                            Local ApiObject &oInvRecvVwCollection, &oInvRecvVw;
                                                            Local ApiObject &oInvRecvSerVwCollection, &oInvRecvSerVw;
                                                            Local ApiObject &oInPegHdrTmpCollection, &oInPegHdrTmp;
                                                            Local ApiObject &oInPegDetailCollection, &oInPegDetail;
                                                            Local ApiObject &oInvRecvLnCollection, &oInvRecvLn;
                                                            Local ApiObject &oInvRecvCfTmpCollection, &oInvRecvCfTmp;
                                                            Local ApiObject &oInvRecvShpserCollection, &oInvRecvShpser;
                                                            Local ApiObject &oInvRecvSerialCollection, &oInvRecvSerial;
                                                            Local ApiObject &oStagedIrcvVwCollection, &oStagedIrcvVw;
                                                            Local ApiObject &oShipSerrecvVwCollection, &oShipSerrecvVw;
                                                            Local ApiObject &oInvRecvSerVw2Collection, &oInvRecvSerVw2;
                                                            Local ApiObject &oStorLev4VwCollection, &oStorLev4Vw;
                                                            Local ApiObject &oDemandPhysInvCollection, &oDemandPhysInv;
                                                            Local ApiObject &oPtwySetupVwCollection, &oPtwySetupVw;
                                                            Local ApiObject &oTransactionInvCollection, &oTransactionInv;
                                                            Local ApiObject &oStagedReqInvCollection, &oStagedReqInv;
                                                            Local ApiObject &oRmaHeaderCollection, &oRmaHeader;
                                                            Local ApiObject &oRmaLineCollection_RMA, &oRmaLine_RMA;
                                                            Local ApiObject &oRmaLineDstCollection, &oRmaLineDst;
                                                            rem Local ApiObject &oRmaReplSoDstCollection, &oRmaReplSoDst;
                                                            Local ApiObject &oRmaLineOrderCollection, &oRmaLineOrder;
                                                            rem Local ApiObject &oOrdInvitemsVwCollection, &oOrdInvitemsVw;
                                                            Local ApiObject &oRmaReturnTypeCollection, &oRmaReturnType;
                                                            rem Local ApiObject &oOrdHeaderFsCollection, &oOrdHeaderFs;
                                                            rem Local ApiObject &oOrdLineFsCollection, &oOrdLineFs;
                                                            Local ApiObject &oOrdAddrCollection, &oOrdAddr;
                                                            rem Local ApiObject &oBiAdjGrpLineCollection, &oBiAdjGrpLine;
                                                            rem Local ApiObject &oCustGroupTblCollection, &oCustGroupTbl;
                                                            Local ApiObject &oProdkitCompVwCollection, &oProdkitCompVw;
                                                            Local ApiObject &oInPtwyLocVwCollection, &oInPtwyLocVw;
                                                            rem Local ApiObject &oBuLedCombVwgCollection, &oBuLedCombVwg;
                                                            rem Local ApiObject &oBuLedCombVwCollection, &oBuLedCombVw;
                                                            rem Local ApiObject &oComboCfdefnVwCollection, &oComboCfdefnVw;
                                                            Local ApiObject &oQsSessnHdr8Collection, &oQsSessnHdr8;
                                                            Local ApiObject &oQsSubgroupCollection, &oQsSubgroup;
                                                            Local ApiObject &oQsSessnTrace8Collection, &oQsSessnTrace8;
                                                            Local ApiObject &oQsXferStrmVwCollection, &oQsXferStrmVw;
                                                            Local ApiObject &oOrdHoldCollection, &oOrdHold;
                                                            Local ApiObject &oOrdLineDtVwCollection, &oOrdLineDtVw;
                                                            Local ApiObject &oOrdLnPromoVwCollection, &oOrdLnPromoVw;
                                                            Local ApiObject &oOrdHdrCommCollection, &oOrdHdrComm;
                                                            Local ApiObject &oOrdIssueHdVwCollection, &oOrdIssueHdVw;
                                                            Local ApiObject &oShipPriorityCollection, &oShipPriority;
                                                            Local ApiObject &oProdTaxgpVwCollection, &oProdTaxgpVw;
                                                            Local ApiObject &oDemInvVwCollection, &oDemInvVw;
                                                            Local ApiObject &oBuItemsInvVwCollection, &oBuItemsInvVw;
                                                            Local ApiObject &oOrdAddrHdrVwCollection, &oOrdAddrHdrVw;
                                                            Local ApiObject &oOrdAddrLnVwCollection, &oOrdAddrLnVw;
                                                            Local ApiObject &oOrdAddrShpVwCollection, &oOrdAddrShpVw;
                                                            Local ApiObject &oOrdShipInfVwCollection, &oOrdShipInfVw;
                                                            Local ApiObject &oOmCstNsshpVwCollection, &oOmCstNsshpVw;
                                                            Local ApiObject &oRegionCdCollection, &oRegionCd;
                                                            
                                                            
                                                            try
                                                               rem ***** Set the Log File *****;
                                                               &fileLog_RMA = GetFile("C:\temp\Z_RECEIVE_RMA_CI_" | %Datetime | ".log", "w", "a", %FilePath_Absolute);
                                                               &fileLog_RMA.WriteLine("Begin");
                                                               rem ***** Get current PeopleSoft Session *****;
                                                               &oSession_RMA = %Session;
                                                               
                                                               &oSession_RMA.PSMessagesMode = 3;
                                                               
                                                               rem ***** Get the Component Interface *****;
                                                               &oZReceiveRmaCi = &oSession.GetCompIntfc(CompIntfc.Z_RECEIVE_RMA_CI);
                                                               If &oZReceiveRmaCi = Null Then
                                                                  errorHandler();
                                                                  throw CreateException(0, 0, "GetCompIntfc failed");
                                                               End-If;
                                                               
                                                               rem ***** Set the Component Interface Mode *****;
                                                               &oZReceiveRmaCi.InteractiveMode = True;
                                                               &oZReceiveRmaCi.GetHistoryItems = True;
                                                               &oZReceiveRmaCi.EditHistoryItems = False;
                                                               
                                                               rem ***** Set Component Interface Get/Create Keys *****;
                                                               MessageBox(0, "", 0, 0, "&BU " | &BU);
                                                               &oZReceiveRmaCi.BUSINESS_UNIT = &BU;
                                                               rem =================================================================;
                                                               rem = Auto-assign the receiver_id                                    ;
                                                               rem =================================================================;
                                                               &NUMBER_TYPE = "RCID";
                                                               &ZERO_PAD = "Y";
                                                               &BEG_SEQ = "";
                                                               rem assign_auto_number("", INV_RECV_HDR.BUSINESS_UNIT, Record.RCV_AN_INV_VW, INV_RECV_HDR.RECEIVER_ID, &NUMBER_TYPE, &ZERO_PAD, &FINAL_NUM);
                                                               rem MessageBox(0, "", 0, 0, "&FINAL_NUM " | &FINAL_NUM);
                                                               &New_num = "RCV00";
                                                               SQLExec("SELECT LAST_AUTO_NBR FROM PS_AUTO_NUM_TBL WHERE SETID = 'SHARE'AND NUM_TYPE like '%RCID%'", &LAST);
                                                               &NUM = &LAST + 1;
                                                               &FIL_NUM = &New_num | &NUM;
                                                               MessageBox(0, "", 0, 0, "&FIL_NUM " | &FIL_NUM);
                                                               &oZReceiveRmaCi.RECEIVER_ID = &FIL_NUM;
                                                               &receiptType = "RMA";
                                                               &oZReceiveRmaCi.RECEIPT_TYPE = &receiptType;
                                                               
                                                               rem ***** Execute Get *****;
                                                               REM If Not &oZReceiveRmaCi.Get() Then
		rem ***** No rows exist for the specified keys.*****;
                                                               REM errorHandler();
                                                               REM throw CreateException(0, 0, "Get failed");
                                                               REM End-If;
                                                               
                                                               rem ***** Execute Create ******;
                                                               If Not &oZReceiveRmaCi.Create() Then;
                                                                  rem ***** Unable to Create Component Interface for the Add keys provided. *****;
                                                                  errorHandler();
                                                                  throw CreateException(0, 0, "Create failed");
                                                               End-If;
                                                               
                                                               
                                                               rem ***** Begin: Get/Set Component Interface Properties *****;
                                                               rem ***** Get/Set Level 0 Field Properties *****;
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.BILL_OF_LADING = " | &oZReceiveRmaCi.BILL_OF_LADING);
                                                               rem &oZReceiveRmaCi.BILL_OF_LADING = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.INV_RECV_STATUS = " | &oZReceiveRmaCi.INV_RECV_STATUS);
                                                               &oZReceiveRmaCi.INV_RECV_STATUS = "O";
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.PORT_OF_UNLOADING = " | &oZReceiveRmaCi.PORT_OF_UNLOADING);
                                                               rem &oZReceiveRmaCi.PORT_OF_UNLOADING = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.PUTAWAY_ACTION = " | &oZReceiveRmaCi.PUTAWAY_ACTION);
                                                               &oZReceiveRmaCi.PUTAWAY_ACTION = "S";
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.FROM_DATE_DETAIL = " | &oZReceiveRmaCi.FROM_DATE_DETAIL);
                                                               &oZReceiveRmaCi.FROM_DATE_DETAIL = %Date;
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.TO_DATE_DETAIL = " | &oZReceiveRmaCi.TO_DATE_DETAIL);
                                                               &oZReceiveRmaCi.TO_DATE_DETAIL = %Date;
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.FULL_PEG_OTHER_FLG = " | &oZReceiveRmaCi.FULL_PEG_OTHER_FLG);
                                                               rem &oZReceiveRmaCi.FULL_PEG_OTHER_FLG = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STORAGE_AREA_0 = " | &oZReceiveRmaCi.STORAGE_AREA_0);
                                                               rem &oZReceiveRmaCi.STORAGE_AREA_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_1_0 = " | &oZReceiveRmaCi.STOR_LEVEL_1_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_1_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_2_0 = " | &oZReceiveRmaCi.STOR_LEVEL_2_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_2_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_3_0 = " | &oZReceiveRmaCi.STOR_LEVEL_3_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_3_0 = [*];
                                                               &fileLog_RMA.WriteLine("&oZReceiveRmaCi.STOR_LEVEL_4_0 = " | &oZReceiveRmaCi.STOR_LEVEL_4_0);
                                                               rem &oZReceiveRmaCi.STOR_LEVEL_4_0 = [*];
                                                               
                                                               rem ***** Set/Get INV_RECV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                               &oInvRecvVwCollection = &oZReceiveRmaCi.INV_RECV_VW;
                                                               Local integer &i1226;
                                                               For &i1226 = 1 To &oInvRecvVwCollection.Count;
                                                                  &oInvRecvVw = &oInvRecvVwCollection.Item(&i1226);
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.QTY_RECEIPT = " | &oInvRecvVw.QTY_RECEIPT);
                                                                  &oInvRecvVw.QTY_RECEIPT = "10";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.UNIT_MEASURE_SHIP = " | &oInvRecvVw.UNIT_MEASURE_SHIP);
                                                                  rem &oInvRecvVw.UNIT_MEASURE_SHIP = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.UOM_QTY_RETURN = " | &oInvRecvVw.UOM_QTY_RETURN);
                                                                  rem &oInvRecvVw.UOM_QTY_RETURN = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvVw.SELECT_FLAG = " | &oInvRecvVw.SELECT_FLAG);
                                                                  rem &oInvRecvVw.SELECT_FLAG = [*];
                                                                  &oInvRecvVw.BUSINESS_UNIT_RMA = "US008";
                                                                  &oInvRecvVw.RMA_ID = &FINAL_NUM;
                                                                  SQLExec("SELECT INV_ITEM_ID FROM PS_RMA_LINE WHERE BUSINESS_UNIT = :1 AND RMA_ID = :2", "US008", &FINAL_NUM, &ITEM_1);
                                                                  MessageBox(0, "", 0, 0, "Creating receipt ID " | &FIL_NUM | " for RMA ID " | &FINAL_NUM | " having Item ID " | &ITEM_1);
                                                                  &oInvRecvVw.INV_ITEM_ID_1 = &ITEM_1;
                                                                  
                                                                  rem ***** Set INV_RECV_SER_VW Collection Field Properties -- Parent: INV_RECV_VW Collection *****;
                                                                  &oInvRecvSerVwCollection = &oInvRecvVw.INV_RECV_SER_VW;
                                                                  Local integer &i22461;
                                                                  For &i22461 = 1 To &oInvRecvSerVwCollection.Count;
                                                                     &oInvRecvSerVw = &oInvRecvSerVwCollection.Item(&i22461);
                                                                     &fileLog_RMA.WriteLine("&oInvRecvSerVw.SELECT_FLAG_1 = " | &oInvRecvSerVw.SELECT_FLAG_1);
                                                                     rem &oInvRecvSerVw.SELECT_FLAG_1 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvSerVw.QTY = " | &oInvRecvSerVw.QTY);
                                                                     rem &oInvRecvSerVw.QTY = [*];
                                                                  End-For;
                                                               End-For;
                                                               
                                                               rem ***** Set/Get IN_PEG_HDR_TMP Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                               &oInPegHdrTmpCollection = &oZReceiveRmaCi.IN_PEG_HDR_TMP;
                                                               Local integer &i1253;
                                                               For &i1253 = 1 To &oInPegHdrTmpCollection.Count;
                                                                  &oInPegHdrTmp = &oInPegHdrTmpCollection.Item(&i1253);
                                                                  
                                                                  rem ***** Set IN_PEG_DETAIL Collection Field Properties -- Parent: IN_PEG_HDR_TMP Collection *****;
                                                                  &oInPegDetailCollection = &oInPegHdrTmp.IN_PEG_DETAIL;
                                                                  Local integer &i2275;
                                                                  For &i2275 = 1 To &oInPegDetailCollection.Count;
                                                                     &oInPegDetail = &oInPegDetailCollection.Item(&i2275);
                                                                     &fileLog_RMA.WriteLine("&oInPegDetail.NET_QTY_PEGGED = " | &oInPegDetail.NET_QTY_PEGGED);
                                                                     rem &oInPegDetail.NET_QTY_PEGGED = [*];
                                                                  End-For;
                                                               End-For;
                                                               
                                                               rem ***** Set/Get INV_RECV_LN Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                               &oInvRecvLnCollection = &oZReceiveRmaCi.INV_RECV_LN;
                                                               Local integer &i1288;
                                                               For &i1288 = 1 To &oInvRecvLnCollection.Count;
                                                                  &oInvRecvLn = &oInvRecvLnCollection.Item(&i1288);
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.INV_RECVLN_STATUS = " | &oInvRecvLn.INV_RECVLN_STATUS);
                                                                  &oInvRecvLn.INV_RECVLN_STATUS = "O";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.PACKSLIP_NO = " | &oInvRecvLn.PACKSLIP_NO);
                                                                  rem &oInvRecvLn.PACKSLIP_NO = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.QTY_INV_RECV = " | &oInvRecvLn.QTY_INV_RECV);
                                                                  &oInvRecvLn.QTY_INV_RECV = "10";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.UNIT_OF_MEASURE_1 = " | &oInvRecvLn.UNIT_OF_MEASURE_1);
                                                                  rem &oInvRecvLn.UNIT_OF_MEASURE_1 = "EA";
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.CONFIG_CODE = " | &oInvRecvLn.CONFIG_CODE);
                                                                  rem &oInvRecvLn.CONFIG_CODE = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.SPEEDTYPE_KEY = " | &oInvRecvLn.SPEEDTYPE_KEY);
                                                                  rem &oInvRecvLn.SPEEDTYPE_KEY = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.PORT_OF_UNLOADING_1 = " | &oInvRecvLn.PORT_OF_UNLOADING_1);
                                                                  rem &oInvRecvLn.PORT_OF_UNLOADING_1 = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.DISTRIB_TYPE = " | &oInvRecvLn.DISTRIB_TYPE);
                                                                  rem &oInvRecvLn.DISTRIB_TYPE = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.REPLACEMENT_FLG = " | &oInvRecvLn.REPLACEMENT_FLG);
                                                                  rem &oInvRecvLn.REPLACEMENT_FLG = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.IST_RETURN_FLG_IUT = " | &oInvRecvLn.IST_RETURN_FLG_IUT);
                                                                  rem &oInvRecvLn.IST_RETURN_FLG_IUT = [*];
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.RECEIPT_DT = " | &oInvRecvLn.RECEIPT_DT);
                                                                  &oInvRecvLn.RECEIPT_DT = %Date;
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.RECEIPT_TM = " | &oInvRecvLn.RECEIPT_TM);
                                                                  &oInvRecvLn.RECEIPT_TM = %Time;
                                                                  &fileLog_RMA.WriteLine("&oInvRecvLn.QUALITY_ITEM_FLG = " | &oInvRecvLn.QUALITY_ITEM_FLG);
                                                                  rem &oInvRecvLn.QUALITY_ITEM_FLG = [*];
                                                                  
                                                                  rem ***** Set INV_RECV_CF_TMP Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                  &oInvRecvCfTmpCollection = &oInvRecvLn.INV_RECV_CF_TMP;
                                                                  Local integer &i2314;
                                                                  For &i2314 = 1 To &oInvRecvCfTmpCollection.Count;
                                                                     &oInvRecvCfTmp = &oInvRecvCfTmpCollection.Item(&i2314);
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.ACCOUNT = " | &oInvRecvCfTmp.ACCOUNT);
                                                                     rem &oInvRecvCfTmp.ACCOUNT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.ALTACCT = " | &oInvRecvCfTmp.ALTACCT);
                                                                     rem &oInvRecvCfTmp.ALTACCT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.DEPTID = " | &oInvRecvCfTmp.DEPTID);
                                                                     rem &oInvRecvCfTmp.DEPTID = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.OPERATING_UNIT = " | &oInvRecvCfTmp.OPERATING_UNIT);
                                                                     rem &oInvRecvCfTmp.OPERATING_UNIT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.PRODUCT = " | &oInvRecvCfTmp.PRODUCT);
                                                                     rem &oInvRecvCfTmp.PRODUCT = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.FUND_CODE = " | &oInvRecvCfTmp.FUND_CODE);
                                                                     rem &oInvRecvCfTmp.FUND_CODE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CLASS_FLD = " | &oInvRecvCfTmp.CLASS_FLD);
                                                                     rem &oInvRecvCfTmp.CLASS_FLD = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.PROGRAM_CODE = " | &oInvRecvCfTmp.PROGRAM_CODE);
                                                                     rem &oInvRecvCfTmp.PROGRAM_CODE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.BUDGET_REF = " | &oInvRecvCfTmp.BUDGET_REF);
                                                                     rem &oInvRecvCfTmp.BUDGET_REF = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.AFFILIATE = " | &oInvRecvCfTmp.AFFILIATE);
                                                                     rem &oInvRecvCfTmp.AFFILIATE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.AFFILIATE_INTRA1 = " | &oInvRecvCfTmp.AFFILIATE_INTRA1);
                                                                     rem &oInvRecvCfTmp.AFFILIATE_INTRA1 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.AFFILIATE_INTRA2 = " | &oInvRecvCfTmp.AFFILIATE_INTRA2);
                                                                     rem &oInvRecvCfTmp.AFFILIATE_INTRA2 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CHARTFIELD1 = " | &oInvRecvCfTmp.CHARTFIELD1);
                                                                     rem &oInvRecvCfTmp.CHARTFIELD1 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CHARTFIELD2 = " | &oInvRecvCfTmp.CHARTFIELD2);
                                                                     rem &oInvRecvCfTmp.CHARTFIELD2 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.CHARTFIELD3 = " | &oInvRecvCfTmp.CHARTFIELD3);
                                                                     rem &oInvRecvCfTmp.CHARTFIELD3 = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.BUSINESS_UNIT_PC = " | &oInvRecvCfTmp.BUSINESS_UNIT_PC);
                                                                     rem &oInvRecvCfTmp.BUSINESS_UNIT_PC = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.PROJECT_ID = " | &oInvRecvCfTmp.PROJECT_ID);
                                                                     rem &oInvRecvCfTmp.PROJECT_ID = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.ACTIVITY_ID = " | &oInvRecvCfTmp.ACTIVITY_ID);
                                                                     rem &oInvRecvCfTmp.ACTIVITY_ID = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.RESOURCE_TYPE = " | &oInvRecvCfTmp.RESOURCE_TYPE);
                                                                     rem &oInvRecvCfTmp.RESOURCE_TYPE = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.RESOURCE_CATEGORY = " | &oInvRecvCfTmp.RESOURCE_CATEGORY);
                                                                     rem &oInvRecvCfTmp.RESOURCE_CATEGORY = [*];
                                                                     &fileLog_RMA.WriteLine("&oInvRecvCfTmp.RESOURCE_SUB_CAT = " | &oInvRecvCfTmp.RESOURCE_SUB_CAT);
                                                                     rem &oInvRecvCfTmp.RESOURCE_SUB_CAT = [*];
                                                                     
                                                                     rem ***** Set INV_RECV_SHPSER Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                     &oInvRecvShpserCollection = &oInvRecvLn.INV_RECV_SHPSER;
                                                                     Local integer &i2336;
                                                                     For &i2336 = 1 To &oInvRecvShpserCollection.Count;
                                                                        &oInvRecvShpser = &oInvRecvShpserCollection.Item(&i2336);
                                                                        &fileLog_RMA.WriteLine("&oInvRecvShpser.SELECT_CB = " | &oInvRecvShpser.SELECT_CB);
                                                                        rem &oInvRecvShpser.SELECT_CB = [*];
                                                                        &fileLog_RMA.WriteLine("&oInvRecvShpser.SERIAL_ID_1 = " | &oInvRecvShpser.SERIAL_ID_1);
                                                                        rem &oInvRecvShpser.SERIAL_ID_1 = [*];
                                                                        &fileLog_RMA.WriteLine("&oInvRecvShpser.INV_LOT_ID = " | &oInvRecvShpser.INV_LOT_ID);
                                                                        rem &oInvRecvShpser.INV_LOT_ID = [*];
                                                                        
                                                                        rem ***** Set INV_RECV_SERIAL Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                        &oInvRecvSerialCollection = &oInvRecvLn.INV_RECV_SERIAL;
                                                                        Local integer &i2340;
                                                                        For &i2340 = 1 To &oInvRecvSerialCollection.Count;
                                                                           &oInvRecvSerial = &oInvRecvSerialCollection.Item(&i2340);
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.CONTAINER_ID_1 = " | &oInvRecvSerial.CONTAINER_ID_1);
                                                                           rem &oInvRecvSerial.CONTAINER_ID_1 = [*];
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.QTY_1 = " | &oInvRecvSerial.QTY_1);
                                                                           rem &oInvRecvSerial.QTY_1 = "10";
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.SERIAL_ID_3 = " | &oInvRecvSerial.SERIAL_ID_3);
                                                                           rem &oInvRecvSerial.SERIAL_ID_3 = [*];
                                                                           &fileLog_RMA.WriteLine("&oInvRecvSerial.LOT_ID_1 = " | &oInvRecvSerial.LOT_ID_1);
                                                                           rem &oInvRecvSerial.LOT_ID_1 = [*];
                                                                           
                                                                           rem ***** Set STAGED_IRCV_VW Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                           &oStagedIrcvVwCollection = &oInvRecvLn.STAGED_IRCV_VW;
                                                                           Local integer &i2346;
                                                                           For &i2346 = 1 To &oStagedIrcvVwCollection.Count;
                                                                              &oStagedIrcvVw = &oStagedIrcvVwCollection.Item(&i2346);
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.INV_LOT_ID_1 = " | &oStagedIrcvVw.INV_LOT_ID_1);
                                                                              rem &oStagedIrcvVw.INV_LOT_ID_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.CONTAINER_ID_3 = " | &oStagedIrcvVw.CONTAINER_ID_3);
                                                                              rem &oStagedIrcvVw.CONTAINER_ID_3 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.SERIAL_ID_5 = " | &oStagedIrcvVw.SERIAL_ID_5);
                                                                              rem &oStagedIrcvVw.SERIAL_ID_5 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.QTY_3 = " | &oStagedIrcvVw.QTY_3);
                                                                              rem &oStagedIrcvVw.QTY_3 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.UNIT_OF_MEASURE_5 = " | &oStagedIrcvVw.UNIT_OF_MEASURE_5);
                                                                              rem &oStagedIrcvVw.UNIT_OF_MEASURE_5 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STORAGE_AREA_1 = " | &oStagedIrcvVw.STORAGE_AREA_1);
                                                                              rem &oStagedIrcvVw.STORAGE_AREA_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_1_1 = " | &oStagedIrcvVw.STOR_LEVEL_1_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_1_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_2_1 = " | &oStagedIrcvVw.STOR_LEVEL_2_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_2_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_3_1 = " | &oStagedIrcvVw.STOR_LEVEL_3_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_3_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.STOR_LEVEL_4_1 = " | &oStagedIrcvVw.STOR_LEVEL_4_1);
                                                                              rem &oStagedIrcvVw.STOR_LEVEL_4_1 = [*];
                                                                              &fileLog_RMA.WriteLine("&oStagedIrcvVw.CONFIG_CODE_1 = " | &oStagedIrcvVw.CONFIG_CODE_1);
                                                                              rem &oStagedIrcvVw.CONFIG_CODE_1 = [*];
                                                                              
                                                                              rem ***** Set SHIP_SERRECV_VW Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                              &oShipSerrecvVwCollection = &oInvRecvLn.SHIP_SERRECV_VW;
                                                                              Local integer &i2359;
                                                                              For &i2359 = 1 To &oShipSerrecvVwCollection.Count;
                                                                                 &oShipSerrecvVw = &oShipSerrecvVwCollection.Item(&i2359);
                                                                                 
                                                                                 rem ***** Set INV_RECV_SER_VW2 Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
                                                                                 &oInvRecvSerVw2Collection = &oInvRecvLn.INV_RECV_SER_VW2;
                                                                                 Local integer &i2361;
                                                                                 For &i2361 = 1 To &oInvRecvSerVw2Collection.Count;
                                                                                    &oInvRecvSerVw2 = &oInvRecvSerVw2Collection.Item(&i2361);
                                                                                    &fileLog_RMA.WriteLine("&oInvRecvSerVw2.QTY_5 = " | &oInvRecvSerVw2.QTY_5);
                                                                                    rem &oInvRecvSerVw2.QTY_5 = [*];
                                                                                 End-For;
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get STOR_LEV4_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oStorLev4VwCollection = &oZReceiveRmaCi.STOR_LEV4_VW;
                                                                              Local integer &i13671;
                                                                              For &i13671 = 1 To &oStorLev4VwCollection.Count;
                                                                                 &oStorLev4Vw = &oStorLev4VwCollection.Item(&i13671);
                                                                                 &fileLog_RMA.WriteLine("&oStorLev4Vw.SELECT_CB_1 = " | &oStorLev4Vw.SELECT_CB_1);
                                                                                 rem &oStorLev4Vw.SELECT_CB_1 = [*];
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get DEMAND_PHYS_INV Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oDemandPhysInvCollection = &oZReceiveRmaCi.DEMAND_PHYS_INV;
                                                                              Local integer &i13691;
                                                                              For &i13691 = 1 To &oDemandPhysInvCollection.Count;
                                                                                 &oDemandPhysInv = &oDemandPhysInvCollection.Item(&i13691);
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get PTWY_SETUP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oPtwySetupVwCollection = &oZReceiveRmaCi.PTWY_SETUP_VW;
                                                                              Local integer &i13721;
                                                                              For &i13721 = 1 To &oPtwySetupVwCollection.Count;
                                                                                 &oPtwySetupVw = &oPtwySetupVwCollection.Item(&i13721);
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get TRANSACTION_INV Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oTransactionInvCollection = &oZReceiveRmaCi.TRANSACTION_INV;
                                                                              Local integer &i137412;
                                                                              For &i137412 = 1 To &oTransactionInvCollection.Count;
                                                                                 &oTransactionInv = &oTransactionInvCollection.Item(&i137412);
                                                                              End-For;
                                                                              /*
	rem ***** Set/Get STAGED_REQ_INV Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oStagedReqInvCollection = &oZReceiveRmaCi.STAGED_REQ_INV;
	Local integer &i1376;
	For &i1376 = 1 To &oStagedReqInvCollection.Count;
	&oStagedReqInv = &oStagedReqInvCollection.Item(&i1376);
	End-For;
	*/
                                                                              rem ***** Set/Get RMA_HEADER Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oRmaHeaderCollection = &oZReceiveRmaCi.RMA_HEADER;
                                                                              Local integer &i1379;
                                                                              For &i1379 = 1 To &oRmaHeaderCollection.Count;
                                                                                 &oRmaHeader = &oRmaHeaderCollection.Item(&i1379);
                                                                              End-For;
                                                                              
                                                                              rem ***** Set/Get RMA_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                              &oRmaLineCollection_RMA = &oZReceiveRmaCi.RMA_LINE;
                                                                              Local integer &i1381;
                                                                              For &i1381 = 1 To &oRmaLineCollection_RMA.Count;
                                                                                 &oRmaLine_RMA = &oRmaLineCollection_RMA.Item(&i1381);
                                                                                 
                                                                                 rem ***** Set RMA_LINE_DST Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                                                                 &oRmaLineDstCollection = &oRmaLine_RMA.RMA_LINE_DST;
                                                                                 Local integer &i23873;
                                                                                 For &i23873 = 1 To &oRmaLineDstCollection.Count;
                                                                                    &oRmaLineDst = &oRmaLineDstCollection.Item(&i23873);
                                                                                    /*
	rem ***** Set RMA_REPL_SO_DST Collection Field Properties -- Parent: RMA_LINE Collection *****;
	rem &oRmaReplSoDstCollection = &oRmaLine.RMA_REPL_SO_DST;
	Local integer &i2389;
	For &i2389 = 1 To &oRmaReplSoDstCollection.Count;
	&oRmaReplSoDst = &oRmaReplSoDstCollection.Item(&i2389);
	*/
                                                                                    rem ***** Set RMA_LINE_ORDER Collection Field Properties -- Parent: RMA_LINE Collection *****;
                                                                                    &oRmaLineOrderCollection = &oRmaLine_RMA.RMA_LINE_ORDER;
                                                                                    Local integer &i2391;
                                                                                    For &i2391 = 1 To &oRmaLineOrderCollection.Count;
                                                                                       &oRmaLineOrder = &oRmaLineOrderCollection.Item(&i2391);
                                                                                    End-For;
                                                                                 End-For;
                                                                                 /*
	rem ***** Set/Get ORD_INVITEMS_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdInvitemsVwCollection = &oZReceiveRmaCi.ORD_INVITEMS_VW;
	Local integer &i1393;
	For &i1393 = 1 To &oOrdInvitemsVwCollection.Count;
	&oOrdInvitemsVw = &oOrdInvitemsVwCollection.Item(&i1393);
	End-For;
	*/
                                                                                 rem ***** Set/Get RMA_RETURN_TYPE Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oRmaReturnTypeCollection = &oZReceiveRmaCi.RMA_RETURN_TYPE;
                                                                                 Local integer &i1395;
                                                                                 For &i1395 = 1 To &oRmaReturnTypeCollection.Count;
                                                                                    &oRmaReturnType = &oRmaReturnTypeCollection.Item(&i1395);
                                                                                 End-For;
                                                                                 /*
	rem ***** Set/Get ORD_HEADER_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdHeaderFsCollection = &oZReceiveRmaCi.ORD_HEADER_FS;
	Local integer &i1397;
	For &i1397 = 1 To &oOrdHeaderFsCollection.Count;
	&oOrdHeaderFs = &oOrdHeaderFsCollection.Item(&i1397);
	End-For;
	
	
	rem ***** Set/Get ORD_LINE_FS Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdLineFsCollection = &oZReceiveRmaCi.ORD_LINE_FS;
	Local integer &i1399;
	For &i1399 = 1 To &oOrdLineFsCollection.Count;
	&oOrdLineFs = &oOrdLineFsCollection.Item(&i1399);
	End-For;
	
	rem ***** Set/Get ORD_ADDR Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oOrdAddrCollection = &oZReceiveRmaCi.ORD_ADDR;
	Local integer &i1401;
	For &i1401 = 1 To &oOrdAddrCollection.Count;
	&oOrdAddr = &oOrdAddrCollection.Item(&i1401);
	End-For;

	rem ***** Set/Get BI_ADJ_GRP_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oBiAdjGrpLineCollection = &oZReceiveRmaCi.BI_ADJ_GRP_LINE;
	Local integer &i1403;
	For &i1403 = 1 To &oBiAdjGrpLineCollection.Count;
	&oBiAdjGrpLine = &oBiAdjGrpLineCollection.Item(&i1403);
	End-For;

	rem ***** Set/Get CUST_GROUP_TBL Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oCustGroupTblCollection = &oZReceiveRmaCi.CUST_GROUP_TBL;
	Local integer &i1405;
	For &i1405 = 1 To &oCustGroupTblCollection.Count;
	&oCustGroupTbl = &oCustGroupTblCollection.Item(&i1405);
	End-For;

	rem ***** Set/Get PRODKIT_COMP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
	&oProdkitCompVwCollection = &oZReceiveRmaCi.PRODKIT_COMP_VW;
	Local integer &i1407;
	For &i1407 = 1 To &oProdkitCompVwCollection.Count;
	&oProdkitCompVw = &oProdkitCompVwCollection.Item(&i1407);
	End-For;
	*/
                                                                                 rem ***** Set/Get IN_PTWY_LOC_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oInPtwyLocVwCollection = &oZReceiveRmaCi.IN_PTWY_LOC_VW;
                                                                                 Local integer &i1409;
                                                                                 For &i1409 = 1 To &oInPtwyLocVwCollection.Count;
                                                                                    &oInPtwyLocVw = &oInPtwyLocVwCollection.Item(&i1409);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get BU_LED_COMB_VWG Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oBuLedCombVwgCollection = &oZReceiveRmaCi.BU_LED_COMB_VWG;
                                                                                 Local integer &i1414;
                                                                                 For &i1414 = 1 To &oBuLedCombVwgCollection.Count;
                                                                                    &oBuLedCombVwg = &oBuLedCombVwgCollection.Item(&i1414);
                                                                                    
                                                                                    rem ***** Set BU_LED_COMB_VW Collection Field Properties -- Parent: BU_LED_COMB_VWG Collection *****;
                                                                                    &oBuLedCombVwCollection = &oBuLedCombVwg.BU_LED_COMB_VW;
                                                                                    Local integer &i2420;
                                                                                    For &i2420 = 1 To &oBuLedCombVwCollection.Count;
                                                                                       &oBuLedCombVw = &oBuLedCombVwCollection.Item(&i2420);
                                                                                       
                                                                                       rem ***** Set COMBO_CFDEFN_VW Collection Field Properties -- Parent: BU_LED_COMB_VW Collection *****;
                                                                                       &oComboCfdefnVwCollection = &oBuLedCombVw.COMBO_CFDEFN_VW;
                                                                                       Local integer &i3422;
                                                                                       For &i3422 = 1 To &oComboCfdefnVwCollection.Count;
                                                                                          &oComboCfdefnVw = &oComboCfdefnVwCollection.Item(&i3422);
                                                                                       End-For;
                                                                                    End-For;
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_SESSN_HDR8 Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsSessnHdr8Collection = &oZReceiveRmaCi.QS_SESSN_HDR8;
                                                                                 Local integer &i1428;
                                                                                 For &i1428 = 1 To &oQsSessnHdr8Collection.Count;
                                                                                    &oQsSessnHdr8 = &oQsSessnHdr8Collection.Item(&i1428);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_SUBGROUP Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsSubgroupCollection = &oZReceiveRmaCi.QS_SUBGROUP;
                                                                                 Local integer &i1432;
                                                                                 For &i1432 = 1 To &oQsSubgroupCollection.Count;
                                                                                    &oQsSubgroup = &oQsSubgroupCollection.Item(&i1432);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_SESSN_TRACE8 Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsSessnTrace8Collection = &oZReceiveRmaCi.QS_SESSN_TRACE8;
                                                                                 Local integer &i1443;
                                                                                 For &i1443 = 1 To &oQsSessnTrace8Collection.Count;
                                                                                    &oQsSessnTrace8 = &oQsSessnTrace8Collection.Item(&i1443);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get QS_XFER_STRM_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oQsXferStrmVwCollection = &oZReceiveRmaCi.QS_XFER_STRM_VW;
                                                                                 Local integer &i1485;
                                                                                 For &i1485 = 1 To &oQsXferStrmVwCollection.Count;
                                                                                    &oQsXferStrmVw = &oQsXferStrmVwCollection.Item(&i1485);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_HOLD Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdHoldCollection = &oZReceiveRmaCi.ORD_HOLD;
                                                                                 Local integer &i1494;
                                                                                 For &i1494 = 1 To &oOrdHoldCollection.Count;
                                                                                    &oOrdHold = &oOrdHoldCollection.Item(&i1494);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_LINE_DT_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdLineDtVwCollection = &oZReceiveRmaCi.ORD_LINE_DT_VW;
                                                                                 Local integer &i1496;
                                                                                 For &i1496 = 1 To &oOrdLineDtVwCollection.Count;
                                                                                    &oOrdLineDtVw = &oOrdLineDtVwCollection.Item(&i1496);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_LN_PROMO_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdLnPromoVwCollection = &oZReceiveRmaCi.ORD_LN_PROMO_VW;
                                                                                 Local integer &i1498;
                                                                                 For &i1498 = 1 To &oOrdLnPromoVwCollection.Count;
                                                                                    &oOrdLnPromoVw = &oOrdLnPromoVwCollection.Item(&i1498);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_HDR_COMM Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdHdrCommCollection = &oZReceiveRmaCi.ORD_HDR_COMM;
                                                                                 Local integer &i1500;
                                                                                 For &i1500 = 1 To &oOrdHdrCommCollection.Count;
                                                                                    &oOrdHdrComm = &oOrdHdrCommCollection.Item(&i1500);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ISSUE_HD_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdIssueHdVwCollection = &oZReceiveRmaCi.ORD_ISSUE_HD_VW;
                                                                                 Local integer &i1502;
                                                                                 For &i1502 = 1 To &oOrdIssueHdVwCollection.Count;
                                                                                    &oOrdIssueHdVw = &oOrdIssueHdVwCollection.Item(&i1502);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get SHIP_PRIORITY Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oShipPriorityCollection = &oZReceiveRmaCi.SHIP_PRIORITY;
                                                                                 Local integer &i1504;
                                                                                 For &i1504 = 1 To &oShipPriorityCollection.Count;
                                                                                    &oShipPriority = &oShipPriorityCollection.Item(&i1504);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get PROD_TAXGP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oProdTaxgpVwCollection = &oZReceiveRmaCi.PROD_TAXGP_VW;
                                                                                 Local integer &i1506;
                                                                                 For &i1506 = 1 To &oProdTaxgpVwCollection.Count;
                                                                                    &oProdTaxgpVw = &oProdTaxgpVwCollection.Item(&i1506);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get DEM_INV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oDemInvVwCollection = &oZReceiveRmaCi.DEM_INV_VW;
                                                                                 Local integer &i1508;
                                                                                 For &i1508 = 1 To &oDemInvVwCollection.Count;
                                                                                    &oDemInvVw = &oDemInvVwCollection.Item(&i1508);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get BU_ITEMS_INV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oBuItemsInvVwCollection = &oZReceiveRmaCi.BU_ITEMS_INV_VW;
                                                                                 Local integer &i1510;
                                                                                 For &i1510 = 1 To &oBuItemsInvVwCollection.Count;
                                                                                    &oBuItemsInvVw = &oBuItemsInvVwCollection.Item(&i1510);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ADDR_HDR_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdAddrHdrVwCollection = &oZReceiveRmaCi.ORD_ADDR_HDR_VW;
                                                                                 Local integer &i1512;
                                                                                 For &i1512 = 1 To &oOrdAddrHdrVwCollection.Count;
                                                                                    &oOrdAddrHdrVw = &oOrdAddrHdrVwCollection.Item(&i1512);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ADDR_LN_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdAddrLnVwCollection = &oZReceiveRmaCi.ORD_ADDR_LN_VW;
                                                                                 Local integer &i1514;
                                                                                 For &i1514 = 1 To &oOrdAddrLnVwCollection.Count;
                                                                                    &oOrdAddrLnVw = &oOrdAddrLnVwCollection.Item(&i1514);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_ADDR_SHP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdAddrShpVwCollection = &oZReceiveRmaCi.ORD_ADDR_SHP_VW;
                                                                                 Local integer &i1516;
                                                                                 For &i1516 = 1 To &oOrdAddrShpVwCollection.Count;
                                                                                    &oOrdAddrShpVw = &oOrdAddrShpVwCollection.Item(&i1516);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get ORD_SHIP_INF_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOrdShipInfVwCollection = &oZReceiveRmaCi.ORD_SHIP_INF_VW;
                                                                                 Local integer &i1518;
                                                                                 For &i1518 = 1 To &oOrdShipInfVwCollection.Count;
                                                                                    &oOrdShipInfVw = &oOrdShipInfVwCollection.Item(&i1518);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get OM_CST_NSSHP_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oOmCstNsshpVwCollection = &oZReceiveRmaCi.OM_CST_NSSHP_VW;
                                                                                 Local integer &i1520;
                                                                                 For &i1520 = 1 To &oOmCstNsshpVwCollection.Count;
                                                                                    &oOmCstNsshpVw = &oOmCstNsshpVwCollection.Item(&i1520);
                                                                                 End-For;
                                                                                 
                                                                                 rem ***** Set/Get REGION_CD Collection Field Properties -- Parent: PS_ROOT Collection *****;
                                                                                 &oRegionCdCollection = &oZReceiveRmaCi.REGION_CD;
                                                                                 Local integer &i1522;
                                                                                 For &i1522 = 1 To &oRegionCdCollection.Count;
                                                                                    &oRegionCd = &oRegionCdCollection.Item(&i1522);
                                                                                 End-For;
                                                                                 rem ***** End: Get/Set Component Interface Properties *****;
                                                                                 
                                                                                 rem ***** Execute Save *****;
                                                                                 If Not &oZReceiveRmaCi.Save() Then;
                                                                                    errorHandler();
                                                                                    throw CreateException(0, 0, "Save failed");
                                                                                 Else
                                                                                    CommitWork();
                                                                                 End-If;
                                                                                 
                                                                                 rem ***** Execute Cancel *****;
                                                                                 rem If Not &oZReceiveRmaCi.Cancel() Then;
                                                                                 rem 	errorHandler();
                                                                                 rem 	throw CreateException(0, 0, "Cancel failed");
                                                                                 rem End-If;
                                                                              End-For;
                                                                           End-For;
                                                                        End-For;
                                                                     End-For;
                                                                  End-For;
                                                               End-For;
                                                            catch Exception &ex
                                                               rem Handle the exception;
                                                               &fileLog.WriteLine(&ex.ToString());
                                                            end-try;
                                                            &fileLog.WriteLine("End");
                                                            &fileLog.Close();
                                                            
                                                            /* ******************************************* */
                                                         End-If;
                                                         
                                                         rem ***** Execute Cancel *****;
                                                         rem If Not &oZRmaFormInvCi.Cancel() Then;
                                                         rem 	errorHandler();
                                                         rem 	throw CreateException(0, 0, "Cancel failed");
                                                         rem End-If;
                                                      End-For;
                                                   End-For;
                                                End-For;
                                             End-For;
                                          End-For;
                                       End-For;
                                    End-For;
                                 End-For;
                              End-For;
                           End-For;
                        End-For;
                     End-For;
                  End-For;
               End-For;
            End-For;
         End-For;
      End-For;
   End-For;
catch Exception &ex1
   rem Handle the exception;
   &fileLog_RMA.WriteLine(&ex1.ToString());
end-try;
&fileLog_RMA.WriteLine("End");
&fileLog_RMA.Close();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



<*
/* Use different Methods to create EIP_CTL_ID, only Key to the Record EO_EIP_CTL. */

/* On many occassions, subscription processes in Application Messaging, simply copies the Message */
/* data into some staging tables, for subsequent validation through batch process(s). In those */
/* scenarios, if "Centralized Error Handling is chosen for Error Handling, EO_EIP_CTL Record */
/* can be used as the parent record. Record EO_EIP_CTL is keyed by EIP_CTL_ID. In Order to to */
/*Generate Unique Key Values the following functions can be used.*/

/* Structure of EIP_CTL_ID (25 Char)                            */
/*    1     - Method used to get unique number                  */
/*    2-16  - Process Instance, Random, Next Trans, etc.        */
/*    17-25 - Sequence Number                                   */



/****************************************************************/
/* Build EIP_CTL_ID from the method and a value passed */

Function Build_EIP_CTL_ID(&METHOD, &PARM2) Returns string;
   MessageBox(0, "", 0, 0, "&METHOD " | &METHOD | " &PARM2 " | &PARM2);
   MessageBox(0, "", 0, 0, " &Right1 " | Right("000000000000000" | String(&PARM2), 15));
   MessageBox(0, "", 0, 0, "&Right2 " | Right(String(&METHOD), 1));
   &EIP_CTL_ID = Right(String(&METHOD), 1) | Right("000000000000000" | String(&PARM2), 15) | "000000001";
   Return &EIP_CTL_ID;
   
End-Function;

/****************************************************************/
/* Increment Sequence Portion of EIP_CTL_ID by 2 */

Function Increment_EIP_CTL_ID(&EIP_CTL_ID) Returns string;
   MessageBox(0, "", 0, 0, "&String " | String(Value(Right(&EIP_CTL_ID, 9)) + 2));
   MessageBox(0, "", 0, 0, "&Right " | Right("000000000" | String(Value(Right(&EIP_CTL_ID, 9)) + 2), 9));
   MessageBox(0, "", 0, 0, "&Left " | Left(&EIP_CTL_ID, 16));
   &NEXT_EIP_CTL_ID = Left(&EIP_CTL_ID, 16) | Right("000000000" | String(Value(Right(&EIP_CTL_ID, 9)) + 2), 9);
   Return &NEXT_EIP_CTL_ID;
   
End-Function;


/****************************************************************/
/* Generate EIP_CTL_ID based on the method and parm passed */

Function Generate_EIP_CTL_ID(&METHOD, &PARM2) Returns string;
   
   If (&METHOD = "R") Then
      &VALUE2 = Truncate((Rand() * 10**15), 0);
      rem &VALUE2 = Truncate((Rand() * 10 * 15), 0);
      MessageBox(0, "", 0, 0, "&VALUE2 " | &VALUE2);
   Else
      Error MsgGet(18022, 114, "Method must be 1(random), 2(Process Instance), 3(Next Trans)or 4(SubscriptionProcessID).");
   End-If;
   /* Call Build EIP */
   SQLExec("SELECT COUNT(*) FROM PS_X_EIP_TBL", &count);
   If (&count = 0) Then
      &EIP_CTL_ID = Build_EIP_CTL_ID(&METHOD, &VALUE2);
   Else
      SQLExec("SELECT Max(EIP_CTL_ID) FROM PS_X_EIP_TBL", &eip);
      &EIP_CTL_ID = Increment_EIP_CTL_ID(&eip);
   End-If;
   
   Return &EIP_CTL_ID;
End-Function;

/* Main */
&startTime = %PerfTime;
&DBTime = %Time;
MessageBox(0, "", 0, 0, "&startTime " | &startTime | " &DBTime" | &DBTime);
&EIP_CTL_ID = Generate_EIP_CTL_ID("R", "Random");
MessageBox(0, "", 0, 0, "&EIP_CTL_ID " | &EIP_CTL_ID);
&REC = CreateRecord(Record.X_EIP_TBL);
&REC.EIP_CTL_ID.Value = &EIP_CTL_ID;
&proper = "hIiIiI pRaShAnT.";
&new_proper = Proper(&proper);
&REC.PP_PURCHASE_SUPPLY.Value = &new_proper;
If Not (&REC.Insert()) Then
   &STATUS = "ERROR";
   MessageBox(0, "", 0, 0, "&STATUS " | &STATUS);
End-If;
&End = %PerfTime;
rem &timeTaken = %PerfTime - &startTime;
&TimeDiff = NumberToString("%6.3", Value(&End - &DBTime));
&NEW_TIME = NumberToString("%6.3", Value(&End - &startTime));
rem &TimeDiff = %PerfTime - &DBTime;
MessageBox(0, "", 0, 0, "&TimeDiff B/W App Server and DB Server" | &TimeDiff);
MessageBox(0, "", 0, 0, "&TimeDiff B/W Start and End of execution" | &NEW_TIME);
rem LogObjectUse(&new_proper);
*>
<*
Local File &LOGFILE;

Function EditRecord(&REC As Record) Returns boolean;
   Local integer &E;
   REM   &REC.ExecuteEdits(%Edit_Required + %Edit_DateRange + %Edit_YesNo + %Edit_TranslateTable + %Edit_PromptTable + %Edit_OneZero);
   &REC.ExecuteEdits(%Edit_Required + %Edit_DateRange + %Edit_YesNo + %Edit_OneZero);
   If &REC.IsEditError Then
      For &E = 1 To &REC.FieldCount
         &MYFIELD = &REC.GetField(&E);
         If &MYFIELD.EditError Then
            &MSGNUM = &MYFIELD.MessageNumber;
            &MSGSET = &MYFIELD.MessageSetNumber;
            &LOGFILE.WriteLine("****Record:" | &REC.Name | ", Field:" | &MYFIELD.Name);
            &LOGFILE.WriteLine("****" | MsgGet(&MSGSET, &MSGNUM, ""));
         End-If;
      End-For;
      Return False;
   Else
      Return True;
   End-If;
End-Function;

rem &LOGFILE = GetFile("C:\Temp\GetNext.out", "W", %FilePath_Absolute);
SQLExec("SELECT COUNT(*) FROM PS_X_EIP_TBL", &count);
If (&count = 0) Then
   rem &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(X_EIP_TBL.EIP_CTL_ID, 2147483647, 1);
   &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(X_EIP_TBL.EIP_CTL_ID, 999999999999999, 1);
   &strReceiptNbr = String(&LAST_AUTO_NBR);
Else
   SQLExec("SELECT Max(EIP_CTL_ID) FROM PS_X_EIP_TBL", &eip);
   MessageBox(0, "", 0, 0, "&eip " | &eip);
   &Unique = False;
   &Exists = " ";
   
   rem    While Not &Unique
      rem &ReceiptNbr = GetNextNumberWithGapsCommit(BUS_UNIT_TBL_AR.LAST_RECEIPT_NBR, 999999999999999, 1, "where business_unit = :1", &BusUnitAR);
   rem &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(X_EIP_TBL.EIP_CTL_ID, Value(&eip), 1);
   &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(X_EIP_TBL.EIP_CTL_ID, 999999999999999, 1);
   &strReceiptNbr = String(&LAST_AUTO_NBR);
   SQLExec("SELECT 'X' FROM PS_X_EIP_TBL WHERE EIP_CTL_ID = :1", &strReceiptNbr, &Exists);
   If None(&Exists) Then
      &Unique = True;
   End-If;
   rem End-While;
End-If;

rem &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(X_EIP_TBL.EIP_CTL_ID, 2147483647, 1);
rem &LAST_AUTO_NBR = GetNextNumberWithGapsCommit(AUTO_NUM_TBL.LAST_AUTO_NBR, Value(&CHECK), 1, "where setid=:1 and num_type=:2 and default_beg_seq=:3", &SETID, &NUM_TYPE, &DEFAULT_BEG_SEQ);
MessageBox(0, "", 0, 0, "&LAST_AUTO_NBR " | &LAST_AUTO_NBR);
&REC = CreateRecord(Record.X_EIP_TBL);
&REC.EIP_CTL_ID.Value = &strReceiptNbr;
&proper = "hIiIiI pRaShAnT.";
&new_proper = Proper(&proper);
&REC.PP_PURCHASE_SUPPLY.Value = &new_proper;
rem Local boolean &yo = EditRecord(&REC);
rem &REC.Delete();
If Not (&REC.Insert()) Then
   &STATUS = "ERROR";
   MessageBox(0, "", 0, 0, "&STATUS " | &STATUS);
End-If;
*>
<*
/****************************************************************
* PeopleCode to Export XML Data                                 *
****************************************************************/
Local File &FILE;
Local Record &RECORD;
Local SQL &SQL;


&FILE = GetFile("C:\temp\272.xml", "W", %FilePath_Absolute);
If &FILE.IsOpen Then
   If &FILE.SetFileLayout(FileLayout.GM_272_XML) Then
      &RECORD = CreateRecord(Record.GM_EC_AWD2);
      &SQL = CreateSQL("%SELECTALL(:1)", &RECORD);
      While &SQL.Fetch(&RECORD)
         &FILE.WriteRecord(&RECORD);
      End-While;
      &RECORD = CreateRecord(Record.GM_CLOSE_FIELDS);
      &FILE.WriteRecord(&RECORD);
      &RECORD = CreateRecord(Record.GM_FORM_TAG);
      &FILE.WriteRecord(&RECORD);
   End-If;
End-If;

&FILE.Close();
*>
<*
Function ImportPP(&INPUT_ROWSET As Rowset)
   
   &RPT_REC_HDR = &INPUT_ROWSET(1).HEADER;
   &RPT_REC_RMA = &INPUT_ROWSET(1).Z_RMA_LOAD;
   &RPT_REC_TRL = &INPUT_ROWSET(1).TRAILER;
   &SEQ_NBR = &RPT_REC_HDR.SEQ_NBR.Value;
   &CREATE_DATE = &RPT_REC_RMA.BUSINESS_UNIT.Value;
   &LINE_COUNT = &RPT_REC_TRL.LINE_COUNT.Value;
   MessageBox(0, "", 0, 0, "&LINE_COUNT " | &LINE_COUNT);
   MessageBox(0, "", 0, 0, "&SEQ_NBR " | &SEQ_NBR | " CREATE_DATE " | &CREATE_DATE);
End-Function;

rem Declare Function PostReportRequest PeopleCode FUNCLIB_PSM.CONTENTID FieldFormula;

Local File &RQST_FILE;
Local Rowset &INPUT_ROWSET;
Local integer &RPTINSTANCE, &RtnCode;
Local string &FileName, &DBcharset;
Local array of string &FileNameArray;

/* Looks for XML files that will need to be processed*/
&FileNameArray = FindFiles("C:\temp\TEST\*.xml", %FilePath_Absolute);
MessageBox(0, "", 0, 0, "&FileNameArray.Len " | &FileNameArray.Len);

While &FileNameArray.Len > 0
   /*Retrieve the first file in the file array*/
   &FileName = &FileNameArray.Shift();
   MessageBox(0, "", 63, 118, "Processing XML file: %1", &FileName);
   SQLExec("SELECT UNICODE_ENABLED FROM PSSTATUS", &RtnCode);
   If &RtnCode = 1 Then
      &DBcharset = "U"; /* UNICODE */
   Else
      &DBcharset = "ANSI"; /* ANSI */
   End-If;
   /* Open each file */
   
   &RQST_FILE = GetFile(&FileName, "R", &DBcharset, %FilePath_Absolute);
   rem &RQST_FILE = GetFile("C:\Temp\TEST\RMA.xml", "R", %FilePath_Absolute);
   &RQST_FILE.SetFileLayout(FileLayout.Z_RMA_FL1);
   
   &INPUT_ROWSET = &RQST_FILE.ReadRowset();
   
   rem Local File &Rowset = GetFile("C:\temp\TEST\HIDE\Rowset_" | %Datetime | ".xml", "W", %FilePath_Absolute);
   rem &Rowset.SetFileLayout(FileLayout.Z_RMA_FL1);
   
   
   /*For each rowset, process the request to post this entry*/
   While &INPUT_ROWSET <> Null
      /* Call function to read the XML Flat File */
      MessageBox(0, "", 0, 0, "Row Count " | &INPUT_ROWSET.ActiveRowCount);
      rem &Rowset.WriteRowset(&INPUT_ROWSET);
      rem &Rowset.WriteLine("</RMA>");
      &str1 = &INPUT_ROWSET(1).Z_RMA_LOAD.REFERENCE.Value;
      MessageBox(0, "", 0, 0, "Z_RMA_LOAD -> REFERENCE = " | &str1);
      &str2 = &INPUT_ROWSET(1).Z_RMA_LOAD.SEQ_NUM.Value;
      MessageBox(0, "", 0, 0, "HEADER -> SEQ_NUM = " | &str2);
      &str3 = &INPUT_ROWSET(1).Z_RMA_LOAD.BUSINESS_UNIT.Value;
      MessageBox(0, "", 0, 0, "Z_RMA_LOAD -> BUSINESS_UNIT = " | &str3);
      &str4 = &INPUT_ROWSET(1).Z_RMA_LOAD.INV_ITEM_ID.Value;
      MessageBox(0, "", 0, 0, "Z_RMA_LOAD -> INV_ITEM_ID = " | &str4);
      &str5 = &INPUT_ROWSET(1).Z_RMA_LOAD.STORAGE_AREA.Value;
      MessageBox(0, "", 0, 0, "Z_RMA_LOAD -> STORAGE_AREA = " | &str5);
      &str6 = &INPUT_ROWSET(1).Z_RMA_LOAD.STORAGE_LEVEL_1.Value;
      MessageBox(0, "", 0, 0, "Z_RMA_LOAD -> STORAGE_LEVEL_1 = " | &str6);
      &str7 = &INPUT_ROWSET(1).Z_RMA_LOAD.DESCR.Value;
      MessageBox(0, "", 0, 0, "Z_RMA_LOAD -> DESCR = " | &str7);
      
      rem ImportPP(&INPUT_ROWSET);
      &INPUT_ROWSET = &RQST_FILE.ReadRowset();
   End-While;
   &RQST_FILE.Close();

   /* To make sure this file is not processed again, override the content with the test "DONE" */
   &RQST_FILE = GetFile(&FileName, "W", %FilePath_Absolute); /* Open each file */
   &RQST_FILE.WriteLine("Done");
   &RQST_FILE.Close();

End-While;
*>
<*
&FileNameArray = FindFiles("C:\temp\TEST\HIDE\*.txt", %FilePath_Absolute);
MessageBox(0, "", 0, 0, "&FileNameArray.Len " | &FileNameArray.Len);
For &t = 1 To &FileNameArray.Len
   MessageBox(0, "", 0, 0, "&FileNameArray[&t] " | &FileNameArray [&t]);
End-For;
*>
<*
Local RowsetCache &Cache;
Local Rowset &RS;

&RS = CreateRowset(Record.PSLANGUAGES);
&NUM_READ = &RS.Fill();
MessageBox(0, "", 0, 0, "&NUM_READ " | &NUM_READ);
&Cache = CreateRowsetCache(&RS, "AAROWSET1", "ROWSET_AAROWSET1");
MessageBox(0, "", 0, 0, "&Cache " | &Cache.Content);


&Cache2 = GetRowsetCache("CACHE1");
If (&Cache2 <> Null) Then
   &RSLT = &Cache2.Delete();
   MessageBox(0, "", 0, 0, "UHOOO " | &RSLT);
End-If;
If &Cache2.Get() <> Null Then
   MessageBox(0, "", 0, 0, "Cache found");
Else
   &RS = CreateRowset(Record.PSLANGUAGES);
   &NUM_READ = &RS.Fill();
   &Cache2.Content = &RS;
   &Cache2.Description = "test " | %Language_Data;
   &RSLT = &Cache2.Save();
End-If;
*>
<*
Local ProcessRequest &JobRQST;
Local File &LOGFILE;
Local string &sHTML;
Local string &sPRINT_JOBTREE;
Local string &sPRINT_DISTLIST;
Local string &sPRINT_SYSMESSAGE;
Local string &sPRINT_APPLMESSAGE;
Local string &sPRINT_PARAMLIST;

&sPRINT_JOBTREE = "0";
&sPRINT_DISTLIST = "1";
&sPRINT_SYSMESSAGE = "1";
&sPRINT_APPLMESSAGE = "1";
&sPRINT_PARAMLIST = "1";
&JobRQST = CreateProcessRequest();
&sHTML = &JobRQST.PrintJobRqstRpt(PMN_PRCSLIST.PRCSINSTANCE, 0, &sPRINT_JOBTREE, &sPRINT_DISTLIST, &sPRINT_SYSMESSAGE, &sPRINT_APPLMESSAGE, &sPRINT_PARAMLIST);
MessageBox(0, "", 0, 0, "&sHTML " | String(&sHTML));
&LOGFILE = GetFile("C:\Temp\GetHTML.htm", "W", %FilePath_Absolute);
&LOGFILE.WriteString(String(&sHTML));


&JobRQST1 = CreateProcessRequest("PSJob", "SQRXRF");
&sHTML1 = &JobRQST1.PrintJobHTMLRpt();
&LOGFILE1 = GetFile("C:\Temp\GetHTML11.htm", "W", %FilePath_Absolute);
&LOGFILE1.WriteString(&sHTML1);
*>
/*
&sPRINT_JOBTREE1 = "1";
&sPRINT_DISTLIST1 = "0";
&sPRINT_NOTIFYLIST1 = "0";
&sPRINT_MESSAGELIST1 = "0";
&sPRINT_PARAMLIST1 = "0";
&JobRQST12 = SetupScheduleDefnItem("Sample", "ALLTYPES");
&sHTML12 = &JobRQST12.PrintSchdlHTMLRpt(&sPRINT_JOBTREE1, &sPRINT_DISTLIST1, &sPRINT_NOTIFYLIST1, &sPRINT_MESSAGELIST1, &sPRINT_PARAMLIST1);
&JobRQST12.RunJobSetNow();
&instanceList = &JobRQST12.ProcessInstance;
MessageBox(0, "", 0, 0, "&instanceList " | &instanceList);
&LOGFILE11 = GetFile("C:\Temp\GetHTML1111.htm", "W", %FilePath_Absolute);
&LOGFILE11.WriteString(&sHTML12);
*/

/*
import PT_PRCS:Schedule:*;

Local number &PrcsInstance;
Local PT_PRCS:Schedule:SubmitRequest &schedule = create PT_PRCS:Schedule:SubmitRequest();
PRCSPURGE_AET.PRCSINSTANCE = &schedule.SubmitPrcsRqst("PRCSSRVCLN", "Application Engine", PRCSPURGE_AET.RUN_CNTL_ID, "WEB", "TXT", PRCSPURGE_AET.SERVERNAME);
*/
Local JavaObject &jHttp = CreateJavaObject("org.apache.commons.httpclient.HttpClient");
REM Set http client specific info, such as timeout parameters, username/password, etc. ;
&jHttp.getHttpConnectionManager().getParams().setConnectionTimeout(5000);

Local string &sURL = "http://blog.greysparling.com/atom.xml";
Local JavaObject &jGet = CreateJavaObject("org.apache.commons.httpclient.methods.GetMethod", &sURL);
REM Set any method specific info, such as headers/cookies, following re-directs, etc. ;
&jGet.setFollowRedirects( True);

REM Should wrap this in try/catch;
&jHttp.executeMethod(&jGet);

REM Pull the output into a XMLDoc object;
Local XmlDoc &feed = CreateXmlDoc(&jGet.getResponseBodyAsString());

REM Dump out some data from the XML feed;
MessageBox(0, "", 0, 0, "There are " | &feed.DocumentElement.ChildNodeCount | " blog postings in this feed.");



/* get the incoming message */
&msg = GetMessage();
&msgXML = &msg.GenXMLString();

/* and write it to a file */
&file = GetFile("C:\temp\PSFTmsg.txt", "w", %FilePath_Absolute);
&file.writeString(&msgXML);
&file.close();


&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.EXAMPLE_TBL);

&LVL0REC.LONGJOBNAME2.Value = "";
&LVL0REC.LONGOBJNAME.Value = "";
&LVL0REC.AA_ID.Value = "";
&LVL0REC.CATEGORY_DESCR.Value = "";



Local XmlDoc &request, &response;
Local string &strXml, &str, &ISCCODE;
Local SOAPDoc &soapReq, &soapRes, &XMLNEW;
Local File &MY_FILE;
Local boolean &bool;
Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local array of XmlNode &field1List;
Local XmlNode &root;
Local number &Count;

Global string &GU;
Local string &POPOPO;

Function Hex2Dec(&sHexIn As string) Returns number
   
   &nDecOut = 0;
   &nPower = Len(&sHexIn) - 1;
   
   For &nHexLength = 1 To Len(&sHexIn);
      &sChar = Upper(Substring(&sHexIn, &nHexLength, 1));
      Evaluate &sChar
      When = "0"
      When = "1"
      When = "2"
      When = "3"
      When = "4"
      When = "5"
      When = "6"
      When = "7"
      When = "8"
      When = "9"
         &nDigit = Value(&sChar);
         Break;
      When = "A"
         &nDigit = 10;
         Break;
      When = "B"
         &nDigit = 11;
         Break;
      When = "C"
         &nDigit = 12;
         Break;
      When = "D"
         &nDigit = 13;
         Break;
      When = "E"
         &nDigit = 14;
         Break;
      When = "F"
         &nDigit = 15;
         Break;
      End-Evaluate;
      
      &nDigitDec = &nDigit * (16**&nPower);
      &nDecOut = &nDecOut + &nDigitDec;
      
      &nPower = &nPower - 1;
   End-For;
   
   Return (&nDecOut);
End-Function;

rem SetTracePC(%TracePC_List + %TracePC_Assigns + %TracePC_Starts + %TracePC_ParamsIn + %TracePC_ParamsOut);
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.EXAMPLE_TBL);
&ISCCODE = &LVL0REC.AA_ID.Value;
&soapReq = CreateSOAPDoc();
rem &bool = &soapReq.ParseXmlFromURL("C:\temp\inputSOAP.xml");
rem &str = GetHTMLText(HTML.XML_COUNTRY_HTML, "IND");
&str = GetHTMLText(HTML.XML_COUNTRY_HTML, &ISCCODE);
&XMLNEW = CreateSOAPDoc("");
rem MessageBox(0, "", 0, 0, "STR = " | &str);
&bool = &XMLNEW.ParseXmlString(&str);
&ParmCount = &XMLNEW.ParmCount;
rem MessageBox(0, "", 0, 0, "&ParmCount " | &ParmCount);
&LVL0REC.LONGJOBNAME2.Value = &str;

rem &bool = &soapReq.ParseXmlFromURL("http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL");
rem &request = &XMLNEW.GetXMLDoc();
&request = &XMLNEW.XmlDoc;
&root = &request.DocumentElement;
&Count = &root.ChildNodeCount;
rem MessageBox(0, "", 0, 0, "&Count " | &Count);
rem For &i = 1 To 30;
&response = SyncRequestXmlDoc(&request, Message.W_INBOUND_MSG, Node.THIRDPARTY);
rem End-For;
Local SOAPDoc &newSOAPDoc = CreateSOAPDoc();
&newSOAPDoc.XmlDoc = &response;
rem MessageBox(0, "", 0, 0, "Parm Count " | &newSOAPDoc.ParmCount);
For &iSoap = 1 To &newSOAPDoc.ParmCount
   Local string &parmName = &newSOAPDoc.GetParmName(&iSoap);
   rem MessageBox(0, "", 0, 0, "&parmName " | &parmName);
   Local string &parmValue = &newSOAPDoc.GetParmValue(&iSoap);
   rem MessageBox(0, "", 0, 0, "&parmValue " | &parmValue);
End-For;
&strXml = &response.GenFormattedXmlString();
&LVL0REC.LONGOBJNAME.Value = &strXml;

rem &root = &XMLNEW.DocumentElement;

rem &fieldList = &response.DocumentElement.GetElementsByTagName("m:CountryNameResult");
/* Check whether the FindNode is able to retrieve the Node after Namespaces. Classic example of FindNode fialing */
Local XmlNode &FindNode = &response.DocumentElement.FindNode("m:CountryNameResult");
/* If Response is Null then Node.IsNull will be set to TRUE */
MessageBox(0, "", 0, 0, "&FindNode " | &FindNode.IsNull);
&fieldList = &response.GetElementsByTagName("m:CountryNameResult");
For &ipp = 1 To &fieldList.len
   rem MessageBox(0, "", 0, 0, "Array Len = " | &fieldList.len);
   rem MessageBox(0, "", 0, 0, "Field Value " | &fieldList [&ipp].NodeValue);
   &country_node = &fieldList.Get(&ipp);
End-For;
&country_node_value = &country_node.NodeValue;
&LVL0REC.CATEGORY_DESCR.Value = &country_node_value;

/* Retrieve the GUID */
&msg_name = "W_INBOUND_MSG";
SQLExec("SELECT A.PUBNODE, A.CHNLNAME, A.GUID,A.MSGNAME FROM PSIBLOGHDR A WHERE A.MSGNAME = 'W_INBOUND_MSG' AND A.PUBNODE = 'PSFT_EP' AND A.CHNLNAME = 'IB_CHNL' AND A.LASTUPDDTTM = (SELECT MAX(B.LASTUPDDTTM) FROM PSIBLOGHDR B WHERE B.PUBNODE = A.PUBNODE AND B.CHNLNAME = A.CHNLNAME AND B.MSGNAME=A.MSGNAME)", &Pubnode, &Channel, &Message_ID, &PubId);
MessageBox(0, "", 0, 0, "&Message_ID " | &Message_ID);
rem &PP = UuidGen();
Local string &PP = UuidGen();
Local string &UID = Substring(&GUID, 1, 8) | Substring(&GUID, 10, 4) | Substring(&GUID, 15, 4) | Substring(&GUID, 20, 4);
Local number &nDecimalUID = Hex2Dec(&UID);
Local number &Return = (&nDecimalUID * 1000000) + ((%PID * 10) + Int(Rand() * 10));
/*
MessageBox(0, "", 0, 0, "&PP " | &PP);
MessageBox(0, "", 0, 0, "&UID " | &UID);
MessageBox(0, "", 0, 0, "&nDecimalUID " | &nDecimalUID);
MessageBox(0, "", 0, 0, "&Return " | &Return);
*/
rem &descrlong = GetSyncLogData(&Message_ID, &Pubnode, &Channel, &msg_name, &log_type);
rem MessageBox(0, "", 0, 0, "&descrlong " | &descrlong);
rem SQLExec("SELECT GUID FROM PSIBPROFILESYNC WHERE MSGNAME = 'W_INBOUND_MSG' AND PUBNODE = 'PSFT_EP' ORDER BY IBPROFILETIMESTAMP DESC", &GUID);
rem MessageBox(0, "", 0, 0, "Portal " | %Portal);
rem MessageBox(0, "", 0, 0, "PID " | %PID);
&CWD = GetCwd();
rem MessageBox(0, "", 0, 0, "&CWD " | &CWD);
rem &POPOPO = &GU;
MessageBox(0, "", 0, 0, "&POPOPO " | &POPOPO);
rem &descrlong = GetSyncLogData(&POPOPO, "PSFT_EP", "IB_CHNL", "W_INBOUND_MSG", &log_type);
rem MessageBox(0, "", 0, 0, "&descrlong " | &descrlong);
/*
&MY_FILE = GetFile("c:\temp\sync_" | %Datetime | ".xml", "w", "a", %FilePath_Absolute);
&MY_FILE.WriteLine(&strXml);
&MY_FILE.Close();
*/
rem CallAppEngine("COUNTRYWSDL");

/* Use Transformation */
&inXML = GetHTMLText(HTML.PP_XML);
&inXSLT = GetHTMLText(HTML.PP_XSLT);
try
   &outStr = TransformEx(&inXML, &inXSLT);
   MessageBox(0, "", 0, 0, "&outStr " | &outStr);
   /*
   &MY_FILE_XSLT = GetFile("c:\temp\XSLT_" | %Datetime | ".xml", "w", "a", %FilePath_Absolute);
   &MY_FILE_XSLT.WriteLine(&outStr);
   &MY_FILE_XSLT.Close();
   */
catch Exception &E
   MessageBox(0, "", 0, 0, "Caught exception: " | &E.ToString());
end-try;



Local XmlDoc &request, &response, &XMLNEW;
Local string &strXml, &str, &ISCCODE;
Local SOAPDoc &soapReq, &soapRes;
Local File &MY_FILE, &MY_FILE1;
Local boolean &bool;
Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local array of XmlNode &field1List;
Local XmlNode &root;
Local Message &NEWMSG;


rem &MSG = GetMessage();
&XMLNEW = GetMessageXmlDoc();
&str = &XMLNEW.GenFormattedXmlString();
Local SOAPDoc &So = CreateSOAPDoc();
&b1 = &So.ParseXmlString(&str);
&MY_FILE = GetFile("C:\temp\TEST_" | %Datetime | ".out", "W", %FilePath_Absolute);
&MY_FILE1 = GetFile("C:\temp\TESTRESPONSE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&MY_FILE.WriteString(&str);


&fieldList = &XMLNEW.GetElementsByTagName("m:GG");
For &ipp = 1 To &fieldList.len
   &country_node = &fieldList.Get(&ipp);
End-For;
&country_node_value = &country_node.NodeValue;

/* Response Message */

&NEWMSG = CreateMessage(Message.Z_TEST_MSG1);
Local XmlDoc &RESP = CreateXmlDoc("<?xml version='1.0' encoding='UTF-8' standalone='yes'?><Response/>");

&AddNode0 = &RESP.DocumentElement.AddElement("Status");
&AddNode0.AddAttribute("PP", "AP");
&AddNode0.NodeValue = &country_node_value;
Local SOAPDoc &NewSoap = CreateSOAPDoc("");
&NewSoap.XmlDoc = &RESP;
&strXml = &NewSoap.XmlDoc.GenFormattedXmlString();
&MY_FILE1.WriteString(&strXml);

&NEWMSG.SetXmlDoc(&NewSoap.XmlDoc); /* Very Important Step */
ReturnToServer(&NEWMSG);

rem &bool = &XMLNEW.ParseXmlString(&str);
rem &request = &XMLNEW.XmlDoc;
REM &bool = PublishXmlDoc(&XMLNEW, &NEWMSG, Node.PSFT_HTTP);
REM ReturnToServer(Message.Z_TEST_MSG1);



Local XmlDoc &request, &response;
Local string &strXml, &str, &ISCCODE;
Local SOAPDoc &soapReq, &soapRes, &XMLNEW;
Local File &MY_FILE;
Local boolean &bool;
Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local array of XmlNode &field1List;
Local XmlNode &root;

rem &LVL0RS = GetLevel0();
rem &LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.EXAMPLE_TBL);
rem &ISCCODE = &LVL0REC.AA_ID.Value;
try
   SQLExec("SELECT AA_ID FROM PS_EXAMPLE_TBL", &ISCCODE);
   rem &str = GetHTMLText(HTML.XML_COUNTRY_HTML, &ISCCODE);
   /*
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:tns="http://www.oorsprong.org/websamples.countryinfo"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
     <soap:Body>
       <tns:CountryName>
         <tns:sCountryISOCode>%BIND(:1)</tns:sCountryISOCode>
       </tns:CountryName>
	 </soap:Body>
  </soap:Envelope>
 */
   &XMLNEW = CreateSOAPDoc();
   &XMLNEW.AddEnvelope(%SOAP_Custom);
   &EnvNode = &XMLNEW.EnvelopeNode;
   &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
   &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:tns", "http://www.oorsprong.org/websamples.countryinfo");
   &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
   &XMLNEW.AddBody();
   &bodynode = &XMLNEW.BodyNode;
   &method = &bodynode.addelement("CountryName");
   &AddNode_method = &method.AddElement("sCountryISOCode");
   &AddNode_method.NodeValue = "IND";
   rem &yo = &XMLNEW.ValidateSOAPDoc();
   rem Local File &yoPP = GetFile("C:\temp\YO_" | %Datetime | ".out", "W", %FilePath_Absolute);
   rem &yoPP.WriteLine(&yo);
   rem &bool = &XMLNEW.ParseXmlString(&str);
   &ParmCount = &XMLNEW.ParmCount;
   &request = &XMLNEW.XmlDoc;
   &StrRequest = &request.GenFormattedXmlString();
   Local File &request_file = GetFile("C:\temp\REQUEST_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &request_file.WriteLine(&StrRequest);
   &root = &request.DocumentElement;
   rem &Count = &root.ChildNodeCount;
   For &i = 1 To 10;
      &response = SyncRequestXmlDoc(&request, Message.W_INBOUND_MSG, Node.THIRDPARTY);
   End-For;
   &strXml = &response.GenFormattedXmlString();
   Local File &response_file = GetFile("C:\temp\RESPONSE_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &response_file.WriteLine(&strXml);
   /*
   Local SOAPDoc &newSOAPDoc = CreateSOAPDoc();
   &newSOAPDoc.XmlDoc = &response;
   For &iSoap = 1 To &newSOAPDoc.ParmCount
      Local string &parmName = &newSOAPDoc.GetParmName(&iSoap);
      Local string &parmValue = &newSOAPDoc.GetParmValue(&iSoap);
   End-For;
   &strXml = &response.GenFormattedXmlString();
   rem &LVL0REC.LONGOBJNAME.Value = &strXml;
   */
   &fieldList = &response.GetElementsByTagName("m:CountryNameResult");
   For &ipp = 1 To &fieldList.len
      &country_node = &fieldList.Get(&ipp);
   End-For;
   &country_node_value = &country_node.NodeValue;
   MessageBox(0, "", 0, 0, "&country_node_value " | &country_node_value);
   rem &LVL0REC.CATEGORY_DESCR.Value = &country_node_value;
catch Exception &pp
   Local File &Country = GetFile("C:\temp\PP_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &Country.WriteString(&pp.ToString());
end-try;


/* Local vars */
Local string &lineFeed = Char(10);
Local array of string &csvLines, &dataLine;
Local XmlDoc &inDoc;
Local Message &theMessage;
Local Rowset &theMessageRS;
Local Record &rqstRec;
Local string &theData;

/* Grab incoming XML */
&inDoc = %TransformData.XmlDoc;

Local string &s = &inDoc.GenXmlString();

/* Remember the incoming data */
&theData = &inDoc.DocumentElement.GetChildNode(1).NodeValue;

/* Split the data by linefeeds */
&csvLines = Split(&theData, &lineFeed);

/* Create the SENDMASTER_RQST message object */
&theMessage = CreateMessage(Message.SENDMASTER_RQST);

/* Get the rowset */
&theMessageRS = &theMessage.GetRowset();

/* Loop through the lines and create the records */
For &i = 1 To &csvLines.Len
   
   /* Insert a row */
   &theMessageRS.InsertRow(&i);
   
   /* Get the Sendmaster request record */
   &rqstRec = &theMessageRS.GetRow(&i).GetRecord(Record.SENDMASTER_RQST);
   
   /* Split the data up by the commas */
   &dataLine = Split(&csvLines [&i], ",");
   
   /* Populate a dummy value in the message, to allow for the full XML to be retrieved */
   &rqstRec.GetField(Field.SENDMASTER_ACCT_ID).Value = &dataLine [1];
   &rqstRec.GetField(Field.SENDMASTER_NAME).Value = &dataLine [2];
   &rqstRec.GetField(Field.SENDMASTER_ADDRESS).Value = &dataLine [3];
End-For;

/* Get the XML Doc */
Local string &theXML = &theMessage.GenXMLString();

/* Load skeleton XML into XMLDoc */
Local boolean &dummy = &inDoc.ParseXmlString(&theXML);



Declare Function Sleep Library "kernel32"
      (long Value As number);

Function IEPrompt(&sTitle As string, &sLabel As string, &arrPromptValues As array of string, &nSelected As number) Returns number
   Local object &IE = CreateObject("InternetExplorer.Application");
   &IE.Visible = True;
   
   &IE.Top = 200;
   &IE.Left = 200;
   &IE.Width = 400;
   &IE.Height = 200;
   
   &IE.Navigate("About:Blank");
   &IE.menubar = 0;
   &IE.toolbar = 0;
   &IE.statusBar = 0;
   
   Local string &sSelected = "";
   Local object &Doc = &IE.document;
   &Doc.Open();
   &Doc.WriteLn("<html><head><title>" | &sTitle | "</title></head><body onload='javascript:document.promptform.promptname.focus();'>");
   &Doc.WriteLn(&sLabel | "<form name='promptform'>");
   &Doc.WriteLn("<input name='watchme' type='hidden' value='here'>");
   &Doc.WriteLn("<select name='promptname'>");
   
   &Doc.Write("<option value='0'");
   If &nSelected = 0 Then
      &Doc.Write(" selected");
   End-If;
   &Doc.WriteLn("> </option>");
   
   For &i = 1 To &arrPromptValues.Len
      &Doc.Write("<option value='" | &i | "'");
      If &nSelected = &i Then
         &Doc.Write(" selected");
      End-If;
      &Doc.WriteLn(">" | &arrPromptValues [&i] | "</option>");
   End-For;
   &Doc.WriteLn("</select>");
   
   &Doc.WriteLn("<input type='submit' value='Select' onclick='javascript:document.promptform.watchme.value=0; return false;'></form>");
   &Doc.WriteLn("</body></html>");
   &Doc.Close();
   
   Local number &nActualSelected = 0;
   Local boolean &bDone = False;
   While ( Not &bDone)
      Sleep(50);
      
      REM First should check if IE is still there;
      If &Doc.promptform.watchme.value <> "here" Then
         &nActualSelected = &Doc.promptform.promptname.value;
         Break;
      End-If;
      
   End-While;
   
   &IE.Quit();
   
   Return &nActualSelected;
End-Function;

Function GetProjectsList() Returns array of string
   
   Local array of string &arrProjects = CreateArrayRept("", 0);
   Local string &sProject;
   Local SQL &projectsSQL = CreateSQL("SELECT PROJECTNAME FROM PSPROJECTDEFN ORDER BY PROJECTNAME");
   While &projectsSQL.Fetch(&sProject)
      &arrProjects.Push(&sProject);
   End-While;
   &projectsSQL.Close();
   Return &arrProjects;
   
End-Function;

Function GetProjectName() Returns string
   Local string &sTitle = "Grey Sparling Version Control Project Splitter";
   Local string &sLabel = "Select the project that you want to split";
   
   Local array of string &arrProjects = GetProjectsList();
   
   Local number &nProjectNumber = IEPrompt(&sTitle, &sLabel, &arrProjects, 0);
   If &nProjectNumber > 0 Then
      Return &arrProjects [&nProjectNumber];
   Else
      Return "";
   End-If;
End-Function;

Declare Function GetCommandLineA Library "kernel32" Returns long As number;
Declare Function lstrcpyA Library "kernel32"
      (string As string, long Value As number) Returns long As number;


REM This is ported from http://www.thecodeproject.com/csharp/command_line.asp ;
REM ;
REM Valid parameters forms:
REM {-,/,--}param{ ,=,:}((",')value(",'))
REM Examples: 
REM -param1 value1 --param2 /param3:"Test-:-work" 
REM /param4=happy -param5 '--=nice=--';

REM It currently doesn't get things like -I7892 correct, the lack of spaces are the problem ;
Function ParseCommandLineArgs(&arrArgs As array of string) Returns JavaObject;
   
   Local JavaObject &jPattern = GetJavaClass("java.util.regex.Pattern");
   Local JavaObject &jRA = GetJavaClass("java.lang.reflect.Array");
   
   Local JavaObject &jParms = CreateJavaObject("java.util.HashMap");
   
   Local string &sSplitPattern = "^-{1,2}|^/|=|:";
   Local JavaObject &jSplitter = &jPattern.compile(&sSplitPattern, &jPattern.CASE_INSENSITIVE);
   Local string &sRemoverPattern = "^['""]?(.*?)['""]?$";
   Local JavaObject &jRemover = &jPattern.compile(&sRemoverPattern, &jPattern.CASE_INSENSITIVE);
   
   Local string &sParameter = "";
   rem Local integer &I;
   For &i = 1 To &arrArgs.Len
      
      REM Look for new parameters (-,/ or --) and a possible enclosed value (=,:)   ;
      
      REM *** Ugh, PeopleTools screws up the method lookup here, so we have to repeatedly compile the regex *** ;
      REM Local JavaObject &jParts = &jSplitter.split(&arrArgs [&I], 3);
      Local JavaObject &jParts = CreateJavaObject("java.lang.String", &arrArgs [&i]).split(&sSplitPattern, 3);
      Evaluate &jRA.getLength(&jParts)
         REM Found a value (for the last parameter found (space separator));
      When = 1
         If &sParameter <> "" Then
            If Not &jParms.containsKey(&sParameter) Then
               Local string &sParts0 = &jRA.get(&jParts, 0).toString();
               &sParts0 = &jRemover.matcher(CreateJavaObject("java.lang.String", &sParts0)).replaceAll("$1");
               &jParms.put(&sParameter, &sParts0);
            End-If;
            &sParameter = "";
         End-If;
         Break;
         
         REM Found just a parameter;
      When = 2
         REM  The last parameter is still waiting. With no value, set it to true. ;
         If &sParameter <> "" Then
            If Not &jParms.containsKey(&sParameter) Then
               &jParms.put(&sParameter, True);
            End-If;
         End-If;
         &sParameter = &jRA.get(&jParts, 1).toString();
         Break;
         
         REM Parameter with enclosed value ;
      When = 3
         REM The last parameter is still waiting. With no value, set it to true. ;
         If &sParameter <> "" Then
            If Not &jParms.containsKey(&sParameter) Then
               &jParms.put(&sParameter, True);
            End-If;
         End-If;
         
         &sParameter = &jRA.get(&jParts, 1).toString();
         
         REM Remove possible enclosing characters (",'") ;
         If Not &jParms.containsKey(&sParameter) Then
            Local string &sParts2 = &jRA.get(&jParts, 2).toString();
            &jParms.put(&sParameter, &jRemover.matcher(CreateJavaObject("java.lang.String", &sParts2)).replaceAll("$1"));
         End-If;
         &sParameter = "";
         Break;
      End-Evaluate;
      
   End-For;
   
   REM In case a parameter is still waiting ;
   If &sParameter <> "" Then
      If Not &jParms.containsKey(&sParameter) Then
         &jParms.put(&sParameter, True);
      End-If;
   End-If;
   
   Return &jParms;
   
End-Function;

REM Note that this currently does not deal with strings with embedded spaces in them ;
Function ParseCommandLine(&sCMDLine As string) Returns JavaObject;
   Local array of string &arrArgs = Split(&sCMDLine, " ");
   REM The first parmeter is always the .exe itself (on Windows, but what about other platforms?) ;
   &arrArgs.Shift();
   Return ParseCommandLineArgs(&arrArgs);
End-Function;

Function ParseWindowsCommandLine() Returns JavaObject
   
   Local string &sOSName = GetJavaClass("java.lang.System").getProperty("os.name");
   If Find("Windows", &sOSName) = 0 Then
      Error ("This function can only be called on Windows. This machine is currently running " | &sOSName);
   End-If;
   
   Local string &sCMDLine = Rept(" ", 1024);
   Local number &nResults = lstrcpyA(&sCMDLine, GetCommandLineA());
   
   Return ParseCommandLine(&sCMDLine);
   
End-Function;

Local string &sProject;
Local JavaObject &jParms = ParseWindowsCommandLine();
Local JavaObject &jProject = &jParms.get("project");
If &jProject <> Null Then
   &sProject = &jProject.toString();
Else
   MessageBox(0, "", 0, 0, "Hi!!!");
   &Str = GetProjectName();
   rem Here's where you would prompt for the project name;
End-If;


/****************************************************************
* PeopleCode to Export XML Data                                 *
****************************************************************/
Local File &FILE;
Local Record &RECORD;
Local SQL &SQL;


&FILE = GetFile("C:\temp\272.xml", "W", %FilePath_Absolute);
If &FILE.IsOpen Then
   If &FILE.SetFileLayout(FileLayout.GM_272_XML) Then
      &RECORD = CreateRecord(Record.GM_EC_AWD2);
      &SQL = CreateSQL("%SELECTALL(:1)", &RECORD);
      While &SQL.Fetch(&RECORD)
         &FILE.WriteRecord(&RECORD);
      End-While;
      &RECORD = CreateRecord(Record.GM_CLOSE_FIELDS);
      &FILE.WriteRecord(&RECORD);
      &RECORD = CreateRecord(Record.GM_FORM_TAG);
      &FILE.WriteRecord(&RECORD);
   End-If;
End-If;

&FILE.Close();


Declare Function PostReportRequest PeopleCode FUNCLIB_PSM.CONTENTID FieldFormula;

Local File &RQST_FILE;
Local Rowset &INPUT_ROWSET;
Local integer &RPTINSTANCE;
Local string &FileName;

/* Looks for XML files that will need to be processed*/
&FileNameArray = FindFiles("reports\*.xml", %FilePath_Relative);

While &FileNameArray.Len > 0
   
   /*Retrieve the first file in the file array*/
   &FileName = &FileNameArray.Shift();
   MessageBox(0, "", 63, 118, "Processing XML file: %1", &FileName);
   
   &RQST_FILE = GetFile(&FileName, "R", %FilePath_Relative); /* Open each file */
   
   &RQST_FILE.SetFileLayout(FileLayout.POST_REPORT_XML);
   
   &INPUT_ROWSET = &RQST_FILE.ReadRowset();
   
   /*For each rowset, process the request to post this entry*/
   While &INPUT_ROWSET <> Null
      &RPTINSTANCE = PostReportRequest(&INPUT_ROWSET);
      &INPUT_ROWSET = &RQST_FILE.ReadRowset();
   End-While;
   
   &RQST_FILE.Close();
   
   /*To make sure this file is not processed again, override the content with the test "DONE"*/
   &RQST_FILE = GetFile(&FileName, "W", %FilePath_Relative); /* Open each file */
   &RQST_FILE.WriteLine("Done");
   &RQST_FILE.Close();
   
   
   
End-While;


Declare Function CurDateTime PeopleCode SDK_FILEUTL_AET.PROCESS_INSTANCE FieldFormula;

Local File &FileSDK, &FileLog;
Local Rowset &rsSdkBusExp, &rsSdkBusExpPer, &rsSdkBusExpDtl;
Local Record &rSdkBusExp, &rSdkBusExpPer, &rSdkBusExpDtl;
Local SQL &SQL1, &SQL2, &SQL3;

&rSdkBusExp = CreateRecord(Record.SDK_PERS_DATA);
&rSdkBusExpPer = CreateRecord(Record.SDK_BUS_EXP_PER);
&rSdkBusExpDtl = CreateRecord(Record.SDK_BUS_EXP_DTL);

/* Create the Rowset that consists of SDK_PERS_DATA, SDK_BUS_EXP_PER and SDK_BUS_EXP_DTL */
&rsSdkBusExp = CreateRowset(Record.SDK_PERS_DATA, CreateRowset(Record.SDK_BUS_EXP_PER, CreateRowset(Record.SDK_BUS_EXP_DTL)));
&rsSdkBusExpPer = &rsSdkBusExp.GetRow(1).GetRowset(1);

/* Create the Log File */
&FileLog = GetFile("SDK_FILEUTL_AET_" | SDK_FILEUTL_AET.PROCESS_INSTANCE | ".log", "W", %FilePath_Relative);

/* Is the File Path Absolute or Relative */
If SDK_FILEUTL_AET.SDK_FILEPATHTYPE = "R" Then
   &FileSDK = GetFile(SDK_FILEUTL_AET.SDK_FILENAME, "W", %FilePath_Relative);
Else
   &FileSDK = GetFile(SDK_FILEUTL_AET.SDK_FILENAME, "W", %FilePath_Absolute);
End-If;

/* Assign a File Layout to the File Object */
&FileSDK.SetFileLayout(FileLayout.SDK_BUS_EXP);

/* Get the Employee Id */
&SDK_EMPLID = SDK_FILEUTL_AET.SDK_EMPLID;

/* Prepare SQL statements to fetch data from SDK_PERS_DATA and SDK_BUS_EXP_PER */
&SQL1 = CreateSQL("%selectall(:1) where SDK_EMPLID = :2", &rSdkBusExp, &SDK_EMPLID);
&SQL2 = CreateSQL("%selectall(:1) where SDK_EMPLID = :2", &rSdkBusExpPer, &SDK_EMPLID);

/* Write to Log File */
&FileLog.WriteLine(CurDateTime() | ": Begin: SDK File Object Sample");
&FileLog.WriteLine(CurDateTime() | ": Extracting Business Expenses for Employee ID: " | &SDK_EMPLID);

/* Fetch data from SDK_PERS_DATA */
While &SQL1.Fetch(&rSdkBusExp)
   /* Copy record to the rowset */
   &rSdkBusExp.CopyFieldsTo(&rsSdkBusExp.GetRow(1).SDK_PERS_DATA);
   &I = 1;
   /* Fetch data from SDK_BUS_EXP_PER */
   While &SQL2.Fetch(&rSdkBusExpPer)
      /* Copy record to the rowset */
      &rSdkBusExpPer.CopyFieldsTo(&rsSdkBusExpPer(&I).SDK_BUS_EXP_PER);
      &J = 1;
      /* Prepare SQL statement to fetch data from SDK_BUS_EXP_DTL */
      &SQL3 = CreateSQL("%selectall(:1) where SDK_EMPLID = :2 and SDK_EXP_PER_DT = :3", &rSdkBusExpDtl, &SDK_EMPLID, &rsSdkBusExpPer(&I).SDK_BUS_EXP_PER.SDK_EXP_PER_DT.Value);
      &rsSdkBusExpDtl = &rsSdkBusExpPer.GetRow(&I).GetRowset(1);
      /* Fetch data from SDK_BUS_EXP_DTL */
      While &SQL3.Fetch(&rSdkBusExpDtl)
         /* Copy record to the rowset */
         &rSdkBusExpDtl.CopyFieldsTo(&rsSdkBusExpDtl(&J).SDK_BUS_EXP_DTL);
         &rsSdkBusExpDtl.InsertRow(&J);
         &J = &J + 1;
      End-While;
      
      &rsSdkBusExpPer.InsertRow(&I);
      &I = &I + 1;
   End-While;
   /* Write Rowset to a File */
   &FileSDK.WriteRowset(&rsSdkBusExp);
End-While;

/* Write to Log File */
&FileLog.WriteLine(CurDateTime() | ": End: SDK File Object Sample");

&FileSDK.Close();
&FileLog.Close();


Declare Function CurDateTime PeopleCode SDK_FILEUTL_AET.PROCESS_INSTANCE FieldFormula;

Local File &FileSDK, &FileLog;
Local Rowset &rsSdkBusExp, &rsSdkBusExpPer, &rsSdkBusExpDtl;
Local Record &rSdkBusExp, &rSdkBusExpPer, &rSdkBusExpDtl;
Local SQL &SQL1;

&rSdkBusExp = CreateRecord(Record.SDK_PERS_DATA);
&rSdkBusExpPer = CreateRecord(Record.SDK_BUS_EXP_PER);
&rSdkBusExpDtl = CreateRecord(Record.SDK_BUS_EXP_DTL);

/* Create the Rowset that consists of SDK_PERS_DATA, SDK_BUS_EXP_PER and SDK_BUS_EXP_DTL */
&rsSdkBusExp = CreateRowset(Record.SDK_PERS_DATA, CreateRowset(Record.SDK_BUS_EXP_PER, CreateRowset(Record.SDK_BUS_EXP_DTL)));

/* Create the Log File */
&FileLog = GetFile("SDK_FILEUTL_AET_" | SDK_FILEUTL_AET.PROCESS_INSTANCE | ".log", "W", %FilePath_Relative);

/* Is the File Path Absolute or Relative */
If SDK_FILEUTL_AET.SDK_FILEPATHTYPE = "R" Then
   &FileSDK = GetFile(SDK_FILEUTL_AET.SDK_FILENAME, "W", %FilePath_Relative);
Else
   &FileSDK = GetFile(SDK_FILEUTL_AET.SDK_FILENAME, "W", %FilePath_Absolute);
End-If;

/* Assign a File Layout to the File Object */
&FileSDK.SetFileLayout(FileLayout.SDK_BUS_EXP);

/* Prepare SQL statements to insert data from SDK_PERS_DATA and SDK_BUS_EXP_PER */
&SQL1 = CreateSQL("%Insert(:1)");

/* Write to Log File */
&FileLog.WriteLine(CurDateTime() | ": Begin: SDK File Object Sample");

/* Read the Rowset from File */
&rsSdkBusExp = &FileSDK.ReadRowset();
While &rsSdkBusExp <> Null;
   /* Extract the record from the rowset */
   &rsSdkBusExp.GetRow(1).SDK_PERS_DATA.CopyFieldsTo(&rSdkBusExp);
   &rsSdkBusExpPer = &rsSdkBusExp.GetRow(1).GetRowset(1);
   For &I = 1 To &rsSdkBusExpPer.ActiveRowCount
      &rsSdkBusExpPer(&I).SDK_BUS_EXP_PER.CopyFieldsTo(&rSdkBusExpPer);
      &rSdkBusExpPer.ExecuteEdits(%Edit_Required);
      /* Check whether there are Edit Errors */
      If &rSdkBusExpPer.IsEditError Then
         For &K = 1 To &rSdkBusExpPer.FieldCount
            &MYFIELD = &rSdkBusExpPer.GetField(&K);
            If &MYFIELD.EditError Then
               &MSGNUM = &MYFIELD.MessageNumber;
               &MSGSET = &MYFIELD.MessageSetNumber;
               &FileLog.WriteLine(CurDateTime() | ": Error - Message Number: " | &MSGNUM);
               &FileLog.WriteLine(CurDateTime() | ": Error - Message Set: " | &MSGSET);
            End-If;
         End-For;
      Else
         /* No Errors; Ok to Insert row in database */
         &SQL1.Execute(&rSdkBusExpPer);
         &rsSdkBusExpDtl = &rsSdkBusExpPer.GetRow(&I).GetRowset(1);
         For &J = 1 To &rsSdkBusExpDtl.ActiveRowCount
            &rsSdkBusExpDtl(&J).SDK_BUS_EXP_DTL.CopyFieldsTo(&rSdkBusExpDtl);
            &rSdkBusExpDtl.ExecuteEdits(%Edit_Required);
            If &rSdkBusExpDtl.IsEditError Then
               For &K = 1 To &rSdkBusExpDtl.FieldCount
                  &MYFIELD = &rSdkBusExpDtl.GetField(&K);
                  If &MYFIELD.EditError Then
                     &MSGNUM = &MYFIELD.MessageNumber;
                     &MSGSET = &MYFIELD.MessageSetNumber;
                     &FileLog.WriteLine(CurDateTime() | ": Error - Message Number: " | &MSGNUM);
                     &FileLog.WriteLine(CurDateTime() | ": Error - Message Set: " | &MSGSET);
                  End-If;
               End-For;
            Else
               /* No Errors; Ok to Insert row in database */
               &SQL1.Execute(&rSdkBusExpDtl);
            End-If;
         End-For;
      End-If;
   End-For;
   &rsSdkBusExp = &FileSDK.ReadRowset();
End-While;

/* Write to Log File */
&FileLog.WriteLine(CurDateTime() | ": End: SDK File Object Sample");

&FileSDK.Close();
&FileLog.Close();


Function EditRecord(&REC As Record) Returns boolean;
   Local integer &E;
   REM   &REC.ExecuteEdits(%Edit_Required + %Edit_DateRange + %Edit_YesNo + %Edit_TranslateTable + %Edit_PromptTable + %Edit_OneZero);
   &REC.ExecuteEdits(%Edit_Required + %Edit_DateRange + %Edit_YesNo + %Edit_OneZero);
   If &REC.IsEditError Then
      For &E = 1 To &REC.FieldCount
         &MYFIELD = &REC.GetField(&E);
         If &MYFIELD.EditError Then
            &MSGNUM = &MYFIELD.MessageNumber;
            &MSGSET = &MYFIELD.MessageSetNumber;
            &LOGFILE.WriteLine("****Record:" | &REC.Name | ", Field:" | &MYFIELD.Name);
            &LOGFILE.WriteLine("****" | MsgGet(&MSGSET, &MSGNUM, ""));
         End-If;
      End-For;
      Return False;
   Else
      Return True;
   End-If;
End-Function;

Function ImportSegment(&RS2 As Rowset, &RSParent As Rowset)
   Local Rowset &RS1, &RSP;
   Local string &RecordName;
   Local Record &REC2, &RECP;
   Local SQL &SQL1;
   Local integer &I, &L;
   &SQL1 = CreateSQL("%Insert(:1)");
   &RecordName = "RECORD." | &RS2.DBRecordName;
   &REC2 = CreateRecord(@(&RecordName));
   &RECP = &RSParent(1).GetRecord(@(&RecordName));
   For &I = 1 To &RS2.ActiveRowCount
      &RS2(&I).GetRecord(1).CopyFieldsTo(&REC2);
      If (EditRecord(&REC2)) Then
         &SQL1.Execute(&REC2);
         &RS2(&I).GetRecord(1).CopyFieldsTo(&RECP);
         For &L = 1 To &RS2.GetRow(&I).ChildCount
            &RS1 = &RS2.GetRow(&I).GetRowset(&L);
            If (&RS1 <> Null) Then
               &RSP = &RSParent.GetRow(1).GetRowset(&L);
               ImportSegment(&RS1, &RSP);
            End-If;
         End-For;
         If &RSParent.ActiveRowCount > 0 Then
            &RSParent.DeleteRow(1);
         End-If;
      Else
         &LOGFILE.WriteRowset(&RS);
         &LOGFILE.WriteLine("****Correct error in this record and delete all error messages");
         &LOGFILE.WriteRecord(&REC2);
         For &L = 1 To &RS2.GetRow(&I).ChildCount
            &RS1 = &RS2.GetRow(&I).GetRowset(&L);
            If (&RS1 <> Null) Then
               &LOGFILE.WriteRowset(&RS1);
            End-If;
         End-For;
      End-If;
   End-For;
End-Function;

rem *****************************************************************;
rem * PeopleCode to Import Data                                     *;
rem *****************************************************************;
Local File &FILE1;
Local Record &REC1;
Local SQL &SQL1;
Local Rowset &RS1, &RS2;
Local integer &M;

&FILE1 = GetFile("C:\Documents and Settings\prashant.prakash\Desktop\Costing Pics\TEST_RMA_1.txt", "r", "a", %FilePath_Absolute);
&LOGFILE = GetFile("C:\Documents and Settings\prashant.prakash\Desktop\Costing Pics\TEST_RMA_1.txt.err", "W", %FilePath_Absolute);
&FILE1.SetFileLayout(FileLayout.Z_RMA_LOAD_FL);
&LOGFILE.SetFileLayout(FileLayout.Z_RMA_LOAD_FL);
&RS1 = &FILE1.CreateRowset();
&RS = CreateRowset(CreateRowset(Record.HEADER), CreateRowset(Record.Z_RMA_LOAD), CreateRowset(Record.TRAILER));
&SQL1 = CreateSQL("%Insert(:1)");
&RS1 = &FILE1.ReadRowset();
While &RS1 <> Null;
   ImportSegment(&RS1, &RS);
   &RS1 = &FILE1.ReadRowset();
End-While;

&FILE1.Close();
&LOGFILE.Close();


Function EditRecord(&REC As Record) Returns boolean;
   Local integer &E;
   REM   &REC.ExecuteEdits(%Edit_Required + %Edit_DateRange + %Edit_YesNo + %Edit_TranslateTable + %Edit_PromptTable + %Edit_OneZero);
   &REC.ExecuteEdits(%Edit_Required + %Edit_DateRange + %Edit_YesNo + %Edit_OneZero);
   If &REC.IsEditError Then
      For &E = 1 To &REC.FieldCount
         &MYFIELD = &REC.GetField(&E);
         If &MYFIELD.EditError Then
            &MSGNUM = &MYFIELD.MessageNumber;
            &MSGSET = &MYFIELD.MessageSetNumber;
            &LOGFILE.WriteLine("****Record:" | &REC.Name | ", Field:" | &MYFIELD.Name);
            &LOGFILE.WriteLine("****" | MsgGet(&MSGSET, &MSGNUM, ""));
         End-If;
      End-For;
      Return False;
   Else
      Return True;
   End-If;
End-Function;

Function ImportSegment(&RS2 As Rowset, &RSParent As Rowset)
   Local Rowset &RS1, &RSP;
   Local string &RecordName;
   Local Record &REC2, &RECP;
   Local SQL &SQL1;
   Local integer &I, &L;
   &SQL1 = CreateSQL("%Insert(:1)");
   &RecordName = "RECORD." | &RS2.DBRecordName;
   &REC2 = CreateRecord(@(&RecordName));
   &RECP = &RSParent(1).GetRecord(@(&RecordName));
   For &I = 1 To &RS2.ActiveRowCount
      &RS2(&I).GetRecord(1).CopyFieldsTo(&REC2);
      If (EditRecord(&REC2)) Then
         &SQL1.Execute(&REC2);
         &RS2(&I).GetRecord(1).CopyFieldsTo(&RECP);
         For &L = 1 To &RS2.GetRow(&I).ChildCount
            &RS1 = &RS2.GetRow(&I).GetRowset(&L);
            If (&RS1 <> Null) Then
               &RSP = &RSParent.GetRow(1).GetRowset(&L);
               ImportSegment(&RS1, &RSP);
            End-If;
         End-For;
         If &RSParent.ActiveRowCount > 0 Then
            &RSParent.DeleteRow(1);
         End-If;
      Else
         &LOGFILE.WriteRowset(&RS);
         &LOGFILE.WriteLine("****Correct error in this record and delete all error messages");
         &LOGFILE.WriteRecord(&REC2);
         For &L = 1 To &RS2.GetRow(&I).ChildCount
            &RS1 = &RS2.GetRow(&I).GetRowset(&L);
            If (&RS1 <> Null) Then
               &LOGFILE.WriteRowset(&RS1);
            End-If;
         End-For;
      End-If;
   End-For;
End-Function;

rem *****************************************************************;
rem * PeopleCode to Import Data                                     *;
rem *****************************************************************;
Local File &FILE1;
Local Record &REC1;
Local SQL &SQL1;
Local Rowset &RS1, &RS2;
Local integer &M;

&FILE1 = GetFile("C:\Documents and Settings\prashant.prakash\Desktop\Z_USER.out", "r", "a", %FilePath_Absolute);
&LOGFILE = GetFile("C:\Documents and Settings\prashant.prakash\Desktop\Z_USER.out.err", "W", %FilePath_Absolute);
&FILE1.SetFileLayout(FileLayout.Z_USER_PREF_FL);
&LOGFILE.SetFileLayout(FileLayout.Z_USER_PREF_FL);
&RS1 = &FILE1.CreateRowset();
&RS = CreateRowset(Record.Z_USERPREF_E_VW);
&SQL1 = CreateSQL("%Insert(:1)");
&RS1 = &FILE1.ReadRowset();
While &RS1 <> Null;
   ImportSegment(&RS1, &RS);
   &RS1 = &FILE1.ReadRowset();
End-While;

&FILE1.Close();
&LOGFILE.Close();


class StringBuffer
   method StringBuffer(&InitialValue As string);
   method Append(&New As string) Returns PP_STRINGBUFFER:StringBuffer;
   rem  allows &X.Append("this").Append("that").Append("and this");
   method Reset();
   property string Value get set;
   property integer Length readonly;
   property integer MaxLength;
private
   instance array of string &Pieces;
end-class;

method StringBuffer
   /+ &InitialValue as String +/
   
   &Pieces = CreateArray(&InitialValue);
   &MaxLength = 2147483647;
   rem &MaxLength = 3;
   rem  default maximum size;
   &Length = Len(&InitialValue);
end-method;

method Reset
   &Pieces.Len = 0;
   &Length = 0;
end-method;

method Append
   /+ &New as String +/
   /+ Returns PP_STRINGBUFFER:StringBuffer +/
   Local integer &TempLength = &Length + Len(&New);
   If &Length > &MaxLength Then
      throw CreateException(0, 0, "Maximum size of StringBuffer exceeded(" | &MaxLength | ")");
   End-If;
   &Length = &TempLength;
   &Pieces.Push(&New);
   Return %This;
end-method;

get Value
   /+ Returns String +/
   Local string &Temp = &Pieces.Join("", "", "", &Length);
   /* collapse array now */
   &Pieces.Len = 1;
   &Pieces [1] = &Temp; /* start out with this combo string */
   Return &Temp;
end-get;

set Value
   /+ &NewValue as String +/
   /* Ditch our current value */
   &Pieces.Len = 1;
   &Pieces [1] = &NewValue; /* start out with this string */
   &Length = Len(&NewValue);
end-set;



import PO:ProcessScheduler:*;

class PO_Dispatch_WB extends PO:ProcessScheduler:ProcessSchedulerRequest
   method PO_Dispatch_WB();
   method Schedule();
   
   property Rowset DOCList;
   property string RecordName;
private
end-class;

method PO_Dispatch_WB
   %This.RecordName = " ";
   %Super = create PO:ProcessScheduler:ProcessSchedulerRequest();
end-method;

method Schedule
   /+ Extends/implements PO:ProcessScheduler:ProcessSchedulerRequest.Schedule +/;
   Local string &runstatus;
   Local Record &recMultiDoc, &recDocList;
   Local number &i;
   Local string &recname;
   
   %Super.Source = "PO";
   %Super.Init();
   
   &recname = "Record." | %This.RecordName;
   &recMultiDoc = CreateRecord(Record.RUN_CNTL_PUR_PO);
   For &i = 1 To &DOCList.ActiveRowCount
      &recDocList = &DOCList(&i).GetRecord(@(&recname));
      &recMultiDoc.OPRID.Value = %Super.OprID;
      &recMultiDoc.RUN_CNTL_ID.Value = %Super.Run_Cntl_ID;
      &recMultiDoc.BUSINESS_UNIT.Value = &recDocList.BUSINESS_UNIT.Value;
      &recMultiDoc.PO_ID.Value = &recDocList.PO_ID.Value;
      &recMultiDoc.Insert();
   End-For;
   
   %Super.RunControl.PRT_ONLY.Value = "N";
   %Super.RunControl.PRT_HELD.Value = "B";
   %Super.RunControl.PRT_CHNG_ORDERS.Value = "B";
   %Super.RunControl.PRINT_IND.Value = PO_PRINT_WRK.PRINT_IND;
   %Super.RunControl.PRT_DUP.Value = PO_RC_WB_WRK.PRT_DUP;
   %Super.RunControl.PRT_CHGS_ONLY.Value = PO_PRINT_WRK.PRT_CHGS_ONLY;
   %Super.RunControl.RPT_DEST.Value = PO_PRINT_WRK.RPT_DEST;
   %Super.RunControl.COVER_FILE_NAME.Value = PO_PRINT_WRK.COVER_FILE_NAME;
   %Super.RunControl.PRINT_TERMS.Value = PO_RC_WB_WRK.PRINT_TERMS;
   If None(PO_PRINT_WRK.TEST_IND) Then
      %Super.RunControl.TEST_IND.Value = "N";
   Else
      %Super.RunControl.TEST_IND.Value = PO_PRINT_WRK.TEST_IND;
   End-If;
   
   %Super.RunRequest.ProcessType = "PSJob";
   %Super.RunRequest.JobName = "PODISP";
   If All(PO_RC_WB_WRK.SERVERNAME) Then
      %Super.RunRequest.RunLocation = PO_RC_WB_WRK.SERVERNAME;
   End-If;
   If All(PO_PRINT_WRK.OUTDESTTYPE_PO) Then
      %Super.RunRequest.OutDestType = PO_PRINT_WRK.OUTDESTTYPE_PO;
   End-If;
   If All(PO_PRINT_WRK.OUTDESTFORMAT_PO) Then
      %Super.RunRequest.OutDestFormat = PO_PRINT_WRK.OUTDESTFORMAT_PO;
   End-If;
   If All(PO_PRINT_WRK.RPT_DEST) Then
      %Super.RunRequest.OutDest = PO_PRINT_WRK.RPT_DEST;
   End-If;
   
   %Super.Schedule();
   %This.Process_Instance = %Super.Process_Instance;
end-method;

DoSave();
EXAMPLE_TBL.AA_ID = "USA";
rem DoCancel();
/* Navigate user to the PO Search page */
Local Record &Z_PO = CreateRecord(Record.PO_HDR);
&Z_PO.BUSINESS_UNIT.Value = "US001";
&Z_PO.PO_ID.Value = "WC2006_35";
rem Transfer( True, MenuName.MANAGE_PURCHASE_ORDERS, BarName.USE, ItemName.PURCHASE_ORDER, Page.PO_LINE, "U", &Z_PO);


/* Navigate user to the PO Search page.The FieldEdit PeopleCode program is terminated. 
   The FieldChange program for that field still runs. Then TransferPage is processed 
 */
Local Record &A_REC = CreateRecord(Record.PO_HDR);
&A_REC.BUSINESS_UNIT.Value = "US001";
&A_REC.PO_ID.Value = "DELL";
&SUCCESS = TriggerBusinessEvent(BusProcess.PP_BUS_PROC, BusActivity.PP_APPROVAL, BusEvent.PP_TEST_EVENT);
MessageBox(0, "", 0, 0, "&SUCCESS " | &SUCCESS);
/*
Local string &STR = "http://isccbcl:8200/psp/FIN89DMO/EMPLOYEE/ERP/c/EXAMPLE_MENU.EXAMPLE_COMP.GBL?FolderPath=PORTAL_ROOT_OBJECT.EPCO_CUSTOMERS.MESSAGING.EXAMPLE_COMP_GBL&IsFolder=false&IgnoreParamTempl=FolderPath%2cIsFolder";
&MENU = Unencode(&STR);
MessageBox(0, "", 0, 0, "&MENU " | &MENU);
*/
rem Transfer( True, MenuName.MANAGE_PURCHASE_ORDERS, BarName.USE, ItemName.PURCHASE_ORDER, Page.PO_LINE, "A", &A_REC);
DoSave();
MessageBox(0, "", 0, 0, "On Field Edit");
rem DoCancel();


<*
Function LIJO()
   Local XmlDoc &request, &response;
   Local string &strXml, &str, &ISCCODE;
   Local SOAPDoc &soapReq, &soapRes, &XMLNEW;
   Local File &MY_FILE;
   Local boolean &bool;
   Local Rowset &LVL0RS;
   Local Record &LVL0REC;
   Local array of XmlNode &field1List;
   Local XmlNode &root;
   
   rem &LVL0RS = GetLevel0();
   rem &LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.EXAMPLE_TBL);
   rem &ISCCODE = &LVL0REC.AA_ID.Value;
   try
      SQLExec("SELECT AA_ID FROM PS_EXAMPLE_TBL", &ISCCODE);
      rem &str = GetHTMLText(HTML.XML_COUNTRY_HTML, &ISCCODE);
      /*
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:tns="http://www.oorsprong.org/websamples.countryinfo"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
     <soap:Body>
       <tns:CountryName>
         <tns:sCountryISOCode>%BIND(:1)</tns:sCountryISOCode>
       </tns:CountryName>
	 </soap:Body>
  </soap:Envelope>
 */
      &XMLNEW = CreateSOAPDoc();
      &XMLNEW.AddEnvelope(%SOAP_Custom);
      &EnvNode = &XMLNEW.EnvelopeNode;
      &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
      &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:tns", "http://www.oorsprong.org/websamples.countryinfo");
      &AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
      &XMLNEW.AddBody();
      &bodynode = &XMLNEW.BodyNode;
      &method = &bodynode.addelement("CountryName");
      /* &AddNode_method = &method.AddElement("sCountryISOCode");
      &AddNode_method.NodeValue = "IND";*/
      &StrRequest = &XMLNEW.XmlDoc;
      Local File &request_file = GetFile("C:\temp\REQUEST_" | %Datetime | ".out", "W", %FilePath_Absolute);
      &request_file.WriteLine(&StrRequest);
      &yo = &XMLNEW.ValidateSOAPDoc();
      Local File &yoPP = GetFile("C:\temp\YO_" | %Datetime | ".out", "W", %FilePath_Absolute);
      &yoPP.WriteLine(&yo);
      rem &bool = &XMLNEW.ParseXmlString(&str);
      &ParmCount = &XMLNEW.ParmCount;
      &request = &XMLNEW.XmlDoc;
      
      &root = &request.DocumentElement;
      rem &Count = &root.ChildNodeCount;
      For &i = 1 To 10;
         &response = SyncRequestXmlDoc(&request, Message.W_INBOUND_MSG, Node.THIRDPARTY);
      End-For;
      &strXml = &response.GenFormattedXmlString();
      Local File &response_file = GetFile("C:\temp\RESPONSE_" | %Datetime | ".out", "W", %FilePath_Absolute);
      &response_file.WriteLine(&strXml);
      /*
   Local SOAPDoc &newSOAPDoc = CreateSOAPDoc();
   &newSOAPDoc.XmlDoc = &response;
   For &iSoap = 1 To &newSOAPDoc.ParmCount
      Local string &parmName = &newSOAPDoc.GetParmName(&iSoap);
      Local string &parmValue = &newSOAPDoc.GetParmValue(&iSoap);
   End-For;
   &strXml = &response.GenFormattedXmlString();
   rem &LVL0REC.LONGOBJNAME.Value = &strXml;
   */
      &fieldList = &response.GetElementsByTagName("m:CountryNameResult");
      For &ipp = 1 To &fieldList.len
         &country_node = &fieldList.Get(&ipp);
      End-For;
      &country_node_value = &country_node.NodeValue;
      MessageBox(0, "", 0, 0, "&country_node_value " | &country_node_value);
      rem &LVL0REC.CATEGORY_DESCR.Value = &country_node_value;
   catch Exception &pp
      Local File &Country = GetFile("C:\temp\PP_" | %Datetime | ".out", "W", %FilePath_Absolute);
      &Country.WriteString(&pp.ToString());
   end-try;
End-Function;
*>


/* Victor Ramirez Nov 4, 2005 Ice #1365294002/641317 "Unable to invoice a change order" */
/**********************************************************************************************/
/* This contains lot of small functions; Section wise description is given below               */
/* SECTION - 1 -- Functions used for XML DOC Processing and get Node/Message Names            */
/* SECTION - 2 -- Functions used for Credential node population                               */
/* SECTION - 3 -- Functions used for change order check and finding change type               */
/* SECTION - 4 -- Functions used for update and delete of dtaging tables                      */
/* SECTION - 5 -- Functions used for Order Status update                                      */
/* SECTION - 6 -- Functions used for data collection to populate the staging tables           */
/**********************************************************************************************/
import SCM_PO_CC:CCCommon;

/* Functions from FUNCLIB_PVINTFC.PV_MS_INTEGRATION  */
Declare Function ConvertCountry PeopleCode FUNCLIB_PVINTFC.PV_MS_INTEGRATION FieldFormula;
Declare Function GetMpDate PeopleCode FUNCLIB_PVINTFC.PV_MS_INTEGRATION FieldFormula;
Local date &DueDatex;
Local string &DLMT; /* Deleimiter to for Other and Coded value */

/* define delimiter constant */

Function SetDeLimiter() Returns string
   &DLMT = "*#@*"; /* Constant */
   Return &DLMT;
End-Function;

Function setBadCountry(&COUNTRY_CD) Returns boolean
   
   If &COUNTRY_CD = "NA" Then
      Return True;
   Else
      Return False;
   End-If;
   
End-Function;

Function CheckRegionCode(&RegionCode) Returns boolean
   
   Evaluate &RegionCode
      /* Australia */
   When = "AUACT"
   When = "AUNSW"
   When = "AUNT"
   When = "AUQLD"
   When = "AUSA"
   When = "AUTAS"
   When = "AUVIC"
   When = "AUWA"
      /* Brazil */
   When = "BRAC"
   When = "BRAL"
   When = "BRAM"
   When = "BRAP"
   When = "BRBA"
   When = "BRCE"
   When = "BRDF"
   When = "BRES"
   When = "BRGO"
   When = "BRMA"
   When = "BRMG"
   When = "BRMS"
   When = "BRMT"
   When = "BRPA"
   When = "BRPB"
   When = "BRPE"
   When = "BRPI"
   When = "BRPR"
   When = "BRRJ"
   When = "BRRN"
   When = "BRRO"
   When = "BRRR"
   When = "BRRS"
   When = "BRSC"
   When = "BRSE"
   When = "BRSP"
   When = "BRTO"
      /* Canada   */
   When = "CAAB"
   When = "CABC"
   When = "CAMB"
   When = "CANB"
   When = "CANF"
   When = "CANS"
   When = "CANT"
   When = "CAON"
   When = "CAPE"
   When = "CAQC"
   When = "CASK"
   When = "CAYT"
      /* Great Britain */
   When = "GBAM"
   When = "GBAR"
   When = "GBAT"
   When = "GBBA"
   When = "GBBB"
   When = "GBBE"
   When = "GBBF"
   When = "GBBH"
   When = "GBBK"
   When = "GBBL"
   When = "GBBM"
   When = "GBBN"
   When = "GBBO"
   When = "GBBP"
   When = "GBBR"
   When = "GBBS"
   When = "GBBU"
   When = "GBBY"
   When = "GBCA"
   When = "GBCE"
   When = "GBCG"
   When = "GBCH"
   When = "GBCI"
   When = "GBCK"
   When = "GBCL"
   When = "GBCO"
   When = "GBCR"
   When = "GBCS"
   When = "GBCU"
   When = "GBCV"
   When = "GBDB"
   When = "GBDF"
   When = "GBDG"
   When = "GBDL"
   When = "GBDN"
   When = "GBDO"
   When = "GBDU"
   When = "GBDV"
   When = "GBDY"
   When = "GBER"
   When = "GBES"
   When = "GBFI"
   When = "GBFM"
   When = "GBGL"
   When = "GBGM"
   When = "GBGR"
   When = "GBGS"
   When = "GBGW"
   When = "GBGY"
   When = "GBHA"
   When = "GBHI"
   When = "GBHL"
   When = "GBHR"
   When = "GBHT"
   When = "GBHW"
   When = "GBIW"
   When = "GBKE"
   When = "GBKH"
   When = "GBLA"
   When = "GBLC"
   When = "GBLD"
   When = "GBLE"
   When = "GBLI"
   When = "GBLM"
   When = "GBLO"
   When = "GBLR"
   When = "GBLS"
   When = "GBLT"
   When = "GBLU"
   When = "GBMA"
   When = "GBMG"
   When = "GBMI"
   When = "GBMK"
   When = "GBMO"
   When = "GBMY"
   When = "GBNA"
   When = "GBNB"
   When = "GBNC"
   When = "GBND"
   When = "GBNE"
   When = "GBNH"
   When = "GBNK"
   When = "GBNL"
   When = "GBNM"
   When = "GBNS"
   When = "GBNT"
   When = "GBNU"
   When = "GBOM"
   When = "GBOR"
   When = "GBOX"
   When = "GBPB"
   When = "GBPL"
   When = "GBPM"
   When = "GBPO"
   When = "GBPY"
   When = "GBRD"
   When = "GBRE"
   When = "GBRM"
   When = "GBRU"
   When = "GBSC"
   When = "GBSD"
   When = "GBSE"
   When = "GBSG"
   When = "GBSH"
   When = "GBSK"
   When = "GBSL"
   When = "GBSN"
   When = "GBSO"
   When = "GBSP"
   When = "GBSR"
   When = "GBST"
   When = "GBSU"
   When = "GBSW"
   When = "GBSY"
   When = "GBTA"
   When = "GBTD"
   When = "GBTH"
   When = "GBTO"
   When = "GBTW"
   When = "GBWA"
   When = "GBWD"
   When = "GBWG"
   When = "GBWI"
   When = "GBWL"
   When = "GBWM"
   When = "GBWO"
   When = "GBWR"
   When = "GBWT"
   When = "GBYK"
   When = "GBYN"
   When = "GBYS"
   When = "GBYW"
      /* Ialy */
   When = "ITAG"
   When = "ITAL"
   When = "ITAN"
   When = "ITAO"
   When = "ITAP"
   When = "ITAQ"
   When = "ITAR"
   When = "ITAT"
   When = "ITAV"
   When = "ITBA"
   When = "ITBG"
   When = "ITBI"
   When = "ITBL"
   When = "ITBN"
   When = "ITBO"
   When = "ITBR"
   When = "ITBS"
   When = "ITBZ"
   When = "ITCA"
   When = "ITCB"
   When = "ITCE"
   When = "ITCH"
   When = "ITCL"
   When = "ITCN"
   When = "ITCO"
   When = "ITCR"
   When = "ITCS"
   When = "ITCT"
   When = "ITCZ"
   When = "ITEN"
   When = "ITFE"
   When = "ITFG"
   When = "ITFI"
   When = "ITFO"
   When = "ITFR"
   When = "ITGE"
   When = "ITGO"
   When = "ITGR"
   When = "ITIM"
   When = "ITIS"
   When = "ITKR"
   When = "ITLC"
   When = "ITLE"
   When = "ITLI"
   When = "ITLO"
   When = "ITLT"
   When = "ITLU"
   When = "ITMC"
   When = "ITME"
   When = "ITMI"
   When = "ITMN"
   When = "ITMO"
   When = "ITMS"
   When = "ITMT"
   When = "ITNA"
   When = "ITNO"
   When = "ITNU"
   When = "ITOR"
   When = "ITPA"
   When = "ITPC"
   When = "ITPD"
   When = "ITPE"
   When = "ITPG"
   When = "ITPI"
   When = "ITPN"
   When = "ITPO"
   When = "ITPR"
   When = "ITPS"
   When = "ITPT"
   When = "ITPV"
   When = "ITPZ"
   When = "ITRA"
   When = "ITRC"
   When = "ITRE"
   When = "ITRG"
   When = "ITRI"
   When = "ITRM"
   When = "ITRN"
   When = "ITRO"
   When = "ITRV"
   When = "ITSA"
   When = "ITSI"
   When = "ITSO"
   When = "ITSP"
   When = "ITSR"
   When = "ITSS"
   When = "ITSV"
   When = "ITTA"
   When = "ITTE"
   When = "ITTN"
   When = "ITTO"
   When = "ITTP"
   When = "ITTR"
   When = "ITTS"
   When = "ITTV"
   When = "ITUD"
   When = "ITVA"
   When = "ITVC"
   When = "ITVE"
   When = "ITVI"
   When = "ITVR"
   When = "ITVT"
   When = "ITVV"
      /* USA */
   When = "USAK"
   When = "USAL"
   When = "USAR"
   When = "USAS"
   When = "USAZ"
   When = "USCA"
   When = "USCO"
   When = "USCT"
   When = "USDC"
   When = "USDE"
   When = "USFL"
   When = "USGA"
   When = "USGU"
   When = "USHI"
   When = "USIA"
   When = "USID"
   When = "USIL"
   When = "USIN"
   When = "USKS"
   When = "USKY"
   When = "USLA"
   When = "USMA"
   When = "USMD"
   When = "USME"
   When = "USMI"
   When = "USMN"
   When = "USMO"
   When = "USMP"
   When = "USMS"
   When = "USMT"
   When = "USNC"
   When = "USND"
   When = "USNE"
   When = "USNH"
   When = "USNJ"
   When = "USNM"
   When = "USNV"
   When = "USNY"
   When = "USOH"
   When = "USOK"
   When = "USOR"
   When = "USPA"
   When = "USPR"
   When = "USRI"
   When = "USSC"
   When = "USSD"
   When = "USTN"
   When = "USTX"
   When = "USUT"
   When = "USVA"
   When = "USVI"
   When = "USVT"
   When = "USWA"
   When = "USWI"
   When = "USWV"
   When = "USWY"
      Return True;
   When-Other
      Return False;
   End-Evaluate;
End-Function;


<* SECTION-1 *>
/********************************************************************************/
/* XML DOC Processing Function */
/* Build Party Node generic function for XCBL Docs                              */
/********************************************************************************/

Function AddValueToElement(&inXMLDoc, &NodePath, &ElemValue)
   
   &xnUserID = &inXMLDoc.DocumentElement.FindNode(&NodePath);
   &xnUserID.NodeValue = &ElemValue;
   
End-Function; /* AddValueToElement */

Function BuildPartyNode(&PARTY_ID, &PARTY_NAME1, &ADDRESS1, &ADDRESS2, &ADDRESS3, &POSTAL, &CITY, &STATE, &COUNTRY) Returns XmlDoc
   Local XmlDoc &OrderStsPartyDoc;
   
   &OrderStsPartyDoc = CreateXmlDoc("<?xml version='1.0'?><OrderStsParty><Party><PartyID><Identifier><Agency><AgencyCoded>Other</AgencyCoded><AgencyCodedOther/></Agency><Ident/></Identifier></PartyID><NameAddress><ExternalAddressID/><Name1/><Name2/><Name3/><Street/><StreetSupplement1/><StreetSupplement2/><PostalCode/><City/><Region><RegionCoded/></Region><Country><CountryCoded/></Country></NameAddress></Party></OrderStsParty>");
   &xnIdent = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//PartyID//Identifier/Ident");
   &xnIdent.NodeValue = &PARTY_ID;
   &xnName1 = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress/Name1");
   &xnName1.NodeValue = &PARTY_NAME1;
   &xnStreet = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress/Street");
   &xnStreet.NodeValue = &ADDRESS1;
   &xnStreetSupplement1 = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress/StreetSupplement1");
   &xnStreetSupplement1.NodeValue = &ADDRESS2;
   &xnStreetSupplement2 = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress/StreetSupplement2");
   &xnStreetSupplement2.NodeValue = &ADDRESS3;
   &xnPostalCode = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress/PostalCode");
   &xnPostalCode.NodeValue = &POSTAL;
   &xnCity = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress/City");
   &xnCity.NodeValue = &CITY;
   
   /* Find the region node may need to add "Other" node */
   
   &bBadCountry = setBadCountry(&COUNTRY);
   
   &xnRegionCoded = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress//Region/RegionCoded");
   If &bBadCountry = True Then
      &xnRegion = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party/NameAddress/Region");
      &xnRegionCodedOther = &xnRegion.AddElement("RegionCodedOther");
      &xnRegionCoded.NodeValue = "Other";
      &xnRegionCodedOther.NodeValue = &COUNTRY | &STATE;
   Else
      &xnRegionCoded.NodeValue = &COUNTRY | &STATE;
   End-If;
   
   /* Find the Country node may need to add "Other" node */
   
   &xnCountryCoded = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress//Country/CountryCoded");
   
   If &bBadCountry = True Then
      &xnCountry = &OrderStsPartyDoc.DocumentElement.FindNode("//OrderStsParty//Party//NameAddress//Country");
      &xnCountryCodedOther = &xnCountry.AddElement("CountryCodedOther");
      &xnCountryCoded.NodeValue = "Other";
      &xnCountryCodedOther.NodeValue = &COUNTRY;
   Else
      &xnCountryCoded.NodeValue = &COUNTRY;
   End-If;
   Return &OrderStsPartyDoc;
End-Function; /* BuildPartyNode */

Function GetStrPartJoinedByDot(&inPutStr, &StrFront, &StrEnd)
   
   /* Parse out String joined by Dot */
   &POS = Find(".", &inPutStr);
   &LEN = Len(&inPutStr);
   
   &StrFront = Substring(&inPutStr, 1, &POS - 1);
   &StrEnd = Substring(&inPutStr, &POS + 1, &LEN + 1);
   
End-Function; /* GetStrPartJoinedByDot */

/***********************************************************/
/* Get Message Name and Node Name                          */
/* Need real Implementation                                */
/***********************************************************/

Function GetNodeNameAndDispMethod(&VendorId, &VendorSetId, &VendorLoc, &PVDispMethod, &DispNodeName, &IBClassName)
   
   SQLExec(SQL.PV_PO_NODE_VENDOR_INFO, &VendorSetId, &VendorId, &VendorLoc, &DispNodeName, &PVDispMethod, &PackageRoot, &ClassPath);
   
   &IBClassName = &PackageRoot | ":" | &ClassPath;
   If None(&DispNodeName) Then
      &DispNodeName = "PV_MPC_NODE"; /* This default for Market Site  */
   End-If;
   
   
End-Function;

Function GetMsgName() Returns string
   &MsgName = "PV_ORDER"; /* This is Default */
   Return &MsgName;
End-Function; /* GetMsgName */

/* End SECTION-1 */

<* SECTION-2 *>
/*******************************************************************************/
/* Function to get Credential Data Populating Nodes                            */
/*******************************************************************************/

/* Get Credential and Other data */
REM Function GetCredentialData(&Business_Unit, &PO_ID, &Vendor_Setid, &Vendor_Id, &Vndr_loc, &PV_MS_SUP_MPID, &PV_MS_MPID, &PV_MS_BUYER_ID, &PV_MS_BUYER_PW, &ACCT_CD, &GATEWAY_URL, &TIMEZONE);
Function GetCredentialData(&Business_Unit, &PO_ID, &Vendor_Setid, &Vendor_Id, &Vndr_loc, &PV_MS_SUP_MPID, &PV_MS_MPID, &PV_MS_BUYER_ID, &PV_MS_BUYER_PW, &ACCT_CD, &GATEWAY_URL)
   
   If All(&PO_ID) Then
      SQLExec(SQL.PV_PO_HDR_SEL_VNDR_INFO, &Business_Unit, &PO_ID, &Vendor_Setid, &Vendor_Id, &Vndr_loc);
   End-If;
   
   rem  Get vendor account code;
   &SETID = GetSetId("BUSINESS_UNIT", &Business_Unit, Record.PV_MS_BUYER, "");
   
   rem  Get Buyer and Supplier MarketSite Information;
   
   REM SQLExec(SQL.PV_MS_BUYER_SEL1, &SETID, &PV_MS_MPID, &PV_MS_BUYER_ID, &PV_MS_BUYER_PW, &GATEWAY_URL, &TIMEZONE);
   SQLExec(SQL.PV_MS_BUYER_SEL1, &SETID, &PV_MS_MPID, &PV_MS_BUYER_ID, &PV_MS_BUYER_PW, &GATEWAY_URL);
   
   SQLExec(SQL.PV_MS_SUPPLIER_SEL1, &Vendor_Setid, &Vendor_Id, &Vndr_loc, &PV_MS_SUP_MPID, &ACCT_CD);
   
End-Function; /* GetCredentialData */

/* End Credential Data Populating  */

/* End SECTION-2 */

<* SECTION-3 *>
/* Table Handlers for Staging Tables *?
/******************************************************************************************/
/* InsertOrderHeader(&ORD_STG_HDR_REC) -- Inserts into PV_PODIS_HD_TMP                    */
/******************************************************************************************/

Function InsertOrderHeader(&ORD_STG_HDR_REC)
   
   &ORD_STG_HDR_REC.Insert();
   
End-Function; /* InsertOrderHeader */

/******************************************************************************************/
/* InsertOrderLine(&ORD_STG_LINE_REC) -- Inserts into PV_PODIS_LN_TMP                    */
/******************************************************************************************/

Function InsertOrderLine(&ORD_STG_LINE_REC)
   
   &ORD_STG_LINE_REC.Insert();
   
End-Function; /* InsertOrderLine */

/******************************************************************************************/
/* InsertLineSchdule(&ORD_SCHD_STG_REC) -- Inserts into PV_PODIS_SC_TMP                    */
/******************************************************************************************/
Function InsertLineSchdule(&ORD_SCHD_STG_REC)
   
   &ORD_SCHD_STG_REC.Insert();
   
End-Function; /* InsertLineSchdule            */

/******************************************************************************************/
/* InsertOrderSummary(&ORD_SUM_STG_REC) -- Inserts into PV_ORD_SUM_STG                    */
/******************************************************************************************/
Function InsertOrderSummary(&ORD_SUM_STG_REC)
   
   &ORD_SUM_STG_REC.Insert();
   
End-Function; /* InsertOrderSummary  */

/* Insert Order Attachments */
Function InsertOrderAttachments(&ORD_ATCH_REC)
   &ORD_ATCH_REC.Insert();
   
End-Function;

/*************************************************************************************************/
/*                   Change Order related function                                               */
/*************************************************************************************************/
Function CheckChangeOrder(&Business_Unit, &PO_ID, &CHNG_ORD_BATCH, &CHNG_ORD_SEQ) Returns boolean
   &bOrderChanged = False;
   SQLExec(SQL.PV_PO_HDR_CHNG_ORD_INFO, &Business_Unit, &PO_ID, &CHNG_ORD_SEQ, &CHNG_ORD_BATCH);
   If &CHNG_ORD_BATCH > 0 Then
      &bOrderChanged = True;
   End-If;
   Return &bOrderChanged;
End-Function;

/* This Fuction works with Release 8.4 */

Function CheckChangeOrderDtl_PV84(&Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch, &ORD_DTL_CHNG_CD)
   &DLMT = SetDeLimiter();
   SQLExec(SQL.PV_PO_LINE_CHNG_ORD_INFO, &Business_Unit, &PO_ID, &Change_Ord_Batch, &LineNbr, &L_INSERT_STATUS, &L_CANCEL_STATUS);
   
   If &L_INSERT_STATUS = "I" And
         &L_CANCEL_STATUS <> "X" Then
      /* NEW RECORD  set change code &ORD_DTL_CHNG_CD = <Value from list of Code> */
      &ORD_DTL_CHNG_CD = "New";
   End-If;
   
   If All(&L_CANCEL_STATUS) Then
      
      Evaluate &CANCEL_STATUS
      When "A" /*active*/
         &ORD_DTL_CHNG_CD = "Cancelled";
         Break;
      When "C" /*closed*/
         &ORD_DTL_CHNG_CD = "Closed";
         Break;
      When "X" /*canceled*/
         &ORD_DTL_CHNG_CD = "Cancelled";
      When "H" /*hold*/
         &ORD_DTL_CHNG_CD = "Other" | &DLMT | "Hold";
         Break;
      When-Other
         &ORD_DTL_CHNG_CD = "ChangesToLineItems";
      End-Evaluate;
      
   End-If;
   
   If None(&ORD_DTL_CHNG_CD) Then
      
      /* Schedule Changes would overwrite  */
      /***
      -- Below are fields whose changes are recorded
      POCS.QTY_PO 
      POCS.PRICE_PO
      POCS.FREIGHT_TERMS
      POCS.SHIP_TYPE_ID
      POCS.DUE_DT
      POCS.SHIPTO_ID
      Want to track changes add code later 
     ***/
      /* This can return multiple row .. check for the changed ones */
      &PO_SHIP_CHNG_SQL = GetSQL(SQL.PV_PO_SHIP_CHNG_ORD_INFO, &Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch);
      
      While &PO_SHIP_CHNG_SQL.Fetch(&S_QTY_PO, &S_PRICE_PO, &S_DUE_DT, &S_INSERT_STATUS, &S_CANCEL_STATUS);
         
         
         If &S_INSERT_STATUS = "I" And
               &S_CANCEL_STATUS <> "X" Then
            /*  New Schedule */
            &ORD_DTL_CHNG_CD = "Other" | &DLMT | "NewSchedule";
         End-If;
         
         If &S_CANCEL_STATUS = "X" Then
            /*  Schedule cancelled */
            &ORD_DTL_CHNG_CD = "Other" | &DLMT | "SchduleCancelled";
         End-If;
         
         If All(&S_QTY_PO) Then
            &ORD_DTL_CHNG_CD = "Other" | &DLMT | "QuantityChanged"
         End-If;
         
         If All(&S_DUE_DT) Then
            &ORD_DTL_CHNG_CD = "ChangeOfDates"
         End-If;
         
         If All(&S_PRICE_PO) Then
            &ORD_DTL_CHNG_CD = "PriceChanged"
         End-If;
         
         If All(&S_CANCEL_STATUS) Then
            &ORD_DTL_CHNG_CD = "Schedule"
         End-If;
         
         If All(&ORD_DTL_CHNG_CD) Then
            Break;
         End-If;
      End-While;
      
   End-If;
   
End-Function; /* CheckChangeOrderDtl_PV84 */

/* This Function Works with release 8.8 */

Function CheckChangeOrderDtl_PV88(&Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch, &ORD_DTL_CHNG_CD)
   
   &LINE_CHNG_INFO_SQL = GetSQL(SQL.PV_PO_LINE_CHNG_ORD_INFO_88, &Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch);
   
   While &LINE_CHNG_INFO_SQL.Fetch(&FIELDNAME, &CHNG_CHAR_VALUE, &CHNG_NBR_VALUE, &CHNG_DATE_VALUE, &CHNG_DTTM_VALUE)
      
      If &FIELDNAME = "CHNG_TYPE" Then
         If &CHNG_CHAR_VALUE = "I" Then
            /* NEW RECORD  set change code &ORD_DTL_CHNG_CD = <Value from list of Code> */
            &ORD_DTL_CHNG_CD = "New";
         End-If;
      End-If;
      
      If None(&ORD_DTL_CHNG_CD) Then
         If &FIELDNAME = "CANCEL_STATUS" Then
            
            Evaluate &CHNG_CHAR_VALUE
            When "A" /*active*/
               &ORD_DTL_CHNG_CD = "Cancelled";
               Break;
            When "C" /*closed*/
               &ORD_DTL_CHNG_CD = "Closed";
               Break;
            When "X" /*canceled*/
               &ORD_DTL_CHNG_CD = "Cancelled";
            When "H" /*hold*/
               &ORD_DTL_CHNG_CD = "Other" | &DLMT | "Hold";
               Break;
            End-Evaluate;
            
         End-If;
      End-If;
      
      /* This one must be last one Any other change tracking add above this */
      
      If None(&ORD_DTL_CHNG_CD) Then
         If ((&FIELDNAME = "CANCEL_STATUS") And
               (&FIELDNAME = "INSERT_STATUS")) Then
            &ORD_DTL_CHNG_CD = "ChangesToLineItems";
         End-If;
      End-If;
   End-While;
   
   If None(&ORD_DTL_CHNG_CD) Then
      
      /* No change in Line level check Schedule Changes would overwrite Item changes if Any */
      /* This select multple rows for schedule but we need only one which has changed       */
      &SHIP_CHNG_INFO_SQL = GetSQL(SQL.PV_PO_SHIP_CHNG_ORD_INFO_88, &Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch);
      
      While &SHIP_CHNG_INFO_SQL.FETCH(&FIELDNAME, &CHNG_CHAR_VALUE, &CHNG_NBR_VALUE, &CHNG_DATE_VALUE, &CHNG_DTTM_VALUE)
         
         If &FIELDNAME = "CHNG_TYPE" Then
            If &CHNG_CHAR_VALUE = "I" Then
               /*  New Schedule */
               &ORD_DTL_CHNG_CD = "Other" | &DLMT | "NewSchedule";
            End-If;
         End-If;
         
         If None(&ORD_DTL_CHNG_CD) Then
            If &FIELDNAME = "CANCEL_STATUS" Then
               If &CHNG_CHAR_VALUE = "X" Then
                  /*  Schedule cancelled */
                  &ORD_DTL_CHNG_CD = "Other" | &DLMT | "SchduleCancelled";
               End-If;
            End-If;
         End-If;
         
         If None(&ORD_DTL_CHNG_CD) Then
            If &FIELDNAME = "QTY_PO" Then
               &ORD_DTL_CHNG_CD = "Other" | &DLMT | "QuantityChanged"
            End-If;
         End-If;
         
         
         If None(&ORD_DTL_CHNG_CD) Then
            If &FIELDNAME = "DUE_DT" Then
               &ORD_DTL_CHNG_CD = "ChangeOfDates"
            End-If;
         End-If;
         
         If None(&ORD_DTL_CHNG_CD) Then
            If &FIELDNAME = "PRICE_PO" Then
               &ORD_DTL_CHNG_CD = "PriceChanged"
            End-If;
         End-If;
         
         /* Starts Ice #1365294002/641317 */
         /* This one must be last one Any other change tracking add above this 
If None(&ORD_DTL_CHNG_CD) Then
            &ORD_DTL_CHNG_CD = "Schedule"
         End-If;
         Ends Ice #1365294002/641317 */
         
         If All(&ORD_DTL_CHNG_CD) Then
            Break;
         End-If;
         
      End-While;
      
      /* Starts Ice #1365294002 */
      If None(&ORD_DTL_CHNG_CD) Then
         &ORD_DTL_CHNG_CD = "Other" | &DLMT | "NoAction";
      End-If;
      /* Ends Ice #1365294002 */
      
   End-If; /* SHIP Change If Ends */
End-Function; /* CheckChangeOrderDtl_PV88 */


Function CheckChangeOrderDtl(&Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch, &ORD_DTL_CHNG_CD)
   
   /* Set The release version here */
   rem &PV_REL_VER = "8.4";
   &PV_REL_VER = "8.8";
   
   If &PV_REL_VER = "8.8" Then
      CheckChangeOrderDtl_PV88(&Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch, &ORD_DTL_CHNG_CD);
   End-If;
   
   If &PV_REL_VER = "8.4" Then
      CheckChangeOrderDtl_PV84(&Business_Unit, &PO_ID, &LineNbr, &Change_Ord_Batch, &ORD_DTL_CHNG_CD);
   End-If;
   
End-Function;


/* End SECTION-3 */

<* SECTION-4 *>

/*************************************************************************/
/* Update Delete Staging Tables                                          */
/*************************************************************************/

Function DeleteStagingTable(&Business_Unit, &PO_ID)
   
   /* Delete From Staging Header */
   SQLExec(SQL.PV_STG_HDR_DEL, &Business_Unit, &PO_ID);
   
   /* Delete From Staging Summary */
   SQLExec(SQL.PV_STG_SUM_DEL, &Business_Unit, &PO_ID);
   
   /* Delete From Staging Line  */
   SQLExec(SQL.PV_STG_LINE_DEL, &Business_Unit, &PO_ID);
   
   /* Delete from Staging Schedule */
   SQLExec(SQL.PV_STG_SCHD_DEL, &Business_Unit, &PO_ID);
   
   /* Delete from Staging Schedule */
   SQLExec(SQL.PV_STG_ATCH_DEL, &Business_Unit, &PO_ID);
   
End-Function; /* DeleteStagingTable */

Function UpdateStagingTable(&Business_Unit, &PO_ID)
   
   /* Update  From Staging Header */
   
   SQLExec(SQL.PV_STG_HDR_UPD, &Business_Unit, &PO_ID);
   
   /* Update From Staging Summary */
   SQLExec(SQL.PV_STG_SUM_UPD, &Business_Unit, &PO_ID);
   
   /* Update From Staging Line  */
   SQLExec(SQL.PV_STG_LINE_UPD, &Business_Unit, &PO_ID);
   
   /* Update from Staging Schedule */
   SQLExec(SQL.PV_STG_SCHD_UPD, &Business_Unit, &PO_ID);
   
   /* Update From Staging Attachments  */
   SQLExec(SQL.PV_STG_ATCH_UPD, &Business_Unit, &PO_ID);
   
End-Function; /* UpdateStagingTable */

/* END SECTION-4 */

<* SECTION-5 *>

/********************************************************************************************/
/* Update status on Error or Success                                                        */
/********************************************************************************************/

Function UpdOrdStatusOnError(&Business_Unit, &PO_ID, &EIP_CTL_ID, &PV_MS_PO_STS, &PV_PO_STS, &Msg)
   /* There was a problem sending the order... */
   
   SQLExec(SQL.PV_MS_PO_STS_HD_UPD, &PV_MS_PO_STS, &PV_PO_STS, &Business_Unit, &PO_ID);
   /* We don't need this ... Its done later by Disp code Message_nbr = 448 */
   /*
   &SQL_INS_ERR = GetSQL(SQL.PV_PO_DIS_ERR_INS);
   &SQL_INS_ERR.Execute(&EIP_CTL_ID, &Business_Unit, &PO_ID, &PV_PO_STS, &PO_STATUS, 0, 0, &Msg);
   */
   
End-Function; /* End UpdOrdStatusOnError */

Function UpdOrdStatusOnSuccess(&Business_Unit, &PO_ID, &PV_MS_PO_STS, &PV_PO_STS, &PO_STATUS, &Msg)
   
   SQLExec(SQL.PV_MS_PO_STS_HD_UPD, &PV_MS_PO_STS, &PV_PO_STS, &Business_Unit, &PO_ID);
   
   /* We don't need this ... Its done later by Disp code Message_nbr = 448 */
   /*
   &SQL_INS_ERR_1 = GetSQL(SQL.PV_PO_DIS_ERR_INS);
   &SQL_INS_ERR_1.Execute(&EIP_CTL_ID, &Business_Unit, &PO_ID, "1", &PO_STATUS, 0, 0, &Msg);
   */
   
End-Function; /* End UpdOrdStatusOnSuccess */

/* End SECTION-5 */


<* SECTION-6 *>
/**********************************************************************************************/
/* All data collection Function for Order . Thses are very similar what we have in            */
/* FUNCLIB_PV_MS_INTEGRATION but are rewritten to reused in any other funclib with out        */
/* copying them  over record since all have input and output parameter both                   */
/* Function can be reused -- all has input/ouput param                                        */
/**********************************************************************************************/
<* Not Required in 8.8 on wards 
Function FixXMLString(&XMLString As string) Returns string
   &XMLString = Substitute(&XMLString, "&", "&amp;");
   &XMLString = Substitute(&XMLString, "<", "&lt;");
   &XMLString = Substitute(&XMLString, ">", "&gt;");
   REM &XMLString = Left(&XMLString, 255); /* Comments are getting truncated to 254 */
   Return &XMLString;
End-Function;
*>
Function GetCarrierId(&BU, &PO_ID, &LINE_NBR, &SCHED_NBR) Returns string
   SQLExec(SQL.PV_SEL_CARRIER_ID, &BU, &PO_ID, &LINE_NBR, &SCHED_NBR, &CARRIER_ID);
   
   Return &CARRIER_ID;
   
End-Function; /* GetCarrierId */

Function GetShipToComments(&BU, &PO_ID, &SHIPTO_ID) Returns string
   
   SQLExec(SQL.PV_SHIPTO_COMMENTS_SEL, &BU, &PO_ID, &SHIPTO_ID, &SHIPTO_COMMENTS);
   
   REM &SHIPTO_COMMENTS = FixXMLString(&SHIPTO_COMMENTS);
   
   Return &SHIPTO_COMMENTS;
   
End-Function;


Function GetMSItem(&IVendor_Setid, &IVendor_id, &ISetid, &IItem_id, &PV_CP_SPN, &PV_CP_PART_EXT, &UOM, &CurrencyCD)
   
   rem get marketsite item;
   
   &SQL = GetSQL(SQL.PV_CP_SEL_ITM_XREF, &IVendor_Setid, &IVendor_id, &ISetid, &IItem_id);
   &RET = &SQL.Fetch(&PV_CP_SPN, &PV_CP_PART_EXT, &UOM, &CurrencyCD);
   REM &PV_CP_SPN = FixXMLString(&PV_CP_SPN);
   REM &PV_CP_PART_EXT = FixXMLString(&PV_CP_PART_EXT);
   
End-Function;

Function GetBUData(&Business_Unit, &BU_DESCR, &BU_LOC_SETID, &BU_COUNTRY, &BU_ADDRESS1, &BU_ADDRESS2, &BU_ADDRESS3, &BU_ADDRESS4, &BU_CITY, &BU_NUM1, &BU_NUM2, &BU_HOUSE_TYPE, &BU_COUNTY, &BU_STATE, &BU_POSTAL, &BU_PHONE, &BU_FAX, &BU_DB_NUMBER, &BU_STD_COMNT_TYPE, &BU_STD_COMMENT_ID, &BU_PO_IMAGE_PATH, &BU_PRINT_IMAGE, &BU_PO_IMG_SIG_PATH, &BU_PRINT_IMAGE_SIG)
   
   SQLExec(SQL.PV_BU_DATA_SEL, &Business_Unit, &BU_DESCR, &BU_LOC_SETID, &BU_COUNTRY, &BU_ADDRESS1, &BU_ADDRESS2, &BU_ADDRESS3, &BU_ADDRESS4, &BU_CITY, &BU_NUM1, &BU_NUM2, &BU_HOUSE_TYPE, &BU_COUNTY, &BU_STATE, &BU_POSTAL, &BU_PHONE, &BU_FAX, &BU_DB_NUMBER, &BU_STD_COMNT_TYPE, &BU_STD_COMMENT_ID, &BU_PO_IMAGE_PATH, &BU_PRINT_IMAGE, &BU_PO_IMG_SIG_PATH, &BU_PRINT_IMAGE_SIG);
   
   &BU_COUNTRY = ConvertCountry(&BU_COUNTRY);
   
End-Function;


Function GetExtraPOlineData(&Business_Unit, &PO_ID, &Line_Nbr, &PV_CP_SPN, &PV_CP_PART_EXT, &UOM, &CurrencyCD, &IVendor_id, &IVendor_Setid)
   &PV_CP_SPN = ""; /* Initialize */
   
   SQLExec("SELECT INV_ITEM_ID FROM PS_PO_LINE WHERE BUSINESS_UNIT =:1 AND PO_ID =:2 AND LINE_NBR =:3", &Business_Unit, &PO_ID, &Line_Nbr, &INV_ITEM_ID);
   If &INV_ITEM_ID = "" Then /* EXTERNAL ITEM */
      &PV_CP_PART_EXT = "";
      SQLExec(SQL.PV_PO_SELLER_ITM_INFO, &Business_Unit, &PO_ID, &Line_Nbr, &SuppPartID, &SuppPartAuxID);
      &PV_CP_SPN = &SuppPartID;
      &PV_CP_PART_EXT = &SuppPartAuxID;
   Else
      
      SQLExec(SQL.PV_POL_LINE_ITM_INFO, &Business_Unit, &PO_ID, &Line_Nbr, &Item_Setid, &Item_Id, &ITM_ID_VNDR);
      If All(&Item_Id) Then
         GetMSItem(&IVendor_Setid, &IVendor_id, &Item_Setid, &Item_Id, &PV_CP_SPN, &PV_CP_PART_EXT, &UOM, &CurrencyCD);
      End-If;
      If None(&PV_CP_SPN) Then
         If None(&ITM_ID_VNDR) Then
            &PV_CP_SPN = &Item_Id;
         Else
            &PV_CP_SPN = &ITM_ID_VNDR;
         End-If;
         REM &PV_CP_SPN = FixXMLString(&PV_CP_SPN);
      End-If;
   End-If;
   
End-Function;

Function GetBuyerData(&Business_Unit, &PO_ID, &BUYER_ID, &BUYER_PHONE, &BUYER_FAX, &PO_STATUS, &BUYER_EMAIL)
   
   SQLExec(SQL.PV_BUYER_DATA_SEL, &Business_Unit, &PO_ID, &BUYER_ID, &BUYER_PHONE, &BUYER_FAX, &PO_STATUS, &BUYER_EMAIL);
   
End-Function;

Function GetVendorData(&Business_Unit, &PO_ID, &Vendor_Id, &VNDR_NAME1, &VNDR_ADDRESS1, &VNDR_ADDRESS2, &VNDR_CITY, &VNDR_STATE, &VNDR_POSTAL, &VNDR_COUNTRY)
   
   SQLExec(SQL.PV_VNDR_DATA_SEL, &Business_Unit, &PO_ID, &Vendor_Id, &VNDR_NAME1, &VNDR_ADDRESS1, &VNDR_ADDRESS2, &VNDR_CITY, &VNDR_STATE, &VNDR_POSTAL, &VNDR_COUNTRY);
   
   &VNDR_COUNTRY = ConvertCountry(&VNDR_COUNTRY);
   &BadCountry = setBadCountry(&VNDR_COUNTRY);
   
End-Function;

<* Old Function Valid till 8.8 
Function GetPaymentData(&Business_Unit, &PO_ID, &PayTermsCD, &CREDIT_CARD_VENDOR, &CRDMEM_ACCT_NBR, &EXPIRATION_DTx, &PV_GHOST_CARD, &PayTermsDescr)
   
   SQLExec(SQL.PV_PYMNT_DATA_SEL, &Business_Unit, &PO_ID, &CREDIT_CARD_VENDOR, &CRDMEM_ACCT_NBR, &EXPIRATION_DTx);
   
   &EXPIRATION_DT = GetMpDate(&EXPIRATION_DTx);
   
   SQLExec(SQL.PV_GHOST_CARD_SEL, &Vendor_Setid, &Vendor_Id, &PV_GHOST_CARD);
   
   If None(&PayTermsCD) Then
      SQLExec(SQL.PV_SEL_PYMNT_TRM_CD, &Business_Unit, &PO_ID, &PayTermsCD);
   End-If;
   
   SQLExec(SQL.PV_PYMNT_TRM_DESCR, &Business_Unit, &PayTermsCD, &PayTermsDescr);
   
End-Function;
*>
Function GetPaymentData(&Business_Unit, &PO_ID, &PayTermsCD, &CREDIT_CARD_VENDOR, &CRDMEM_ACCT_NBR, &EXPIRATION_DT, &PV_GHOST_CARD, &PayTermsDescr, &CREDIT_HOLDER_NAME)
   Local SCM_PO_CC:CCCommon &CC;
   Local number &CC_SECURITY_ID, &PO_SECURITY_ID, &VNDR_SECURITY_ID;
   Local Record &CC_REC;
   Local string &DISP_OPT, &CONTACT_NM, &CONTACT_PH, &INSTRUCTIONS, &CC_USE_FLAG, &PROGRAM_ID, &CC_PAYTERM, &CC_PAYTERMDESCR;
   Local date &EXPIRATION_DTx;
   &PROGRAM_ID = "POPO005";
   &CC_PAYTERM = "CC_PAYTERM";
   &CC_PAYTERMDESCR = "CC_PAYTERMDESCR";
   
   
   &CC = create SCM_PO_CC:CCCommon();
   
   SQLExec(SQL.PV_PYMNT_DATA_SEL, &Business_Unit, &PO_ID, &CC_USE_FLAG, &CC_SECURITY_ID);
   
   If &CC_USE_FLAG = "Y" And
         &CC_SECURITY_ID <> 0 Then
      
      &CC_REC = &CC.GetMaskedCardNumberBySecId(&CC_SECURITY_ID);
      
      &CREDIT_CARD_VENDOR = &CC_REC.GetField(Field.CREDIT_CARD_VENDOR).Value;
      &CRDMEM_ACCT_NBR = &CC_REC.GetField(Field.CRDMEM_ACCT_MSK).Value;
      &EXPIRATION_DTx = &CC_REC.GetField(Field.EXPIRATION_DT).Value;
      
   End-If;
   
   &EXPIRATION_DT = GetMpDate(&EXPIRATION_DTx);
   
   SQLExec(SQL.PV_VNDR_LOC_SEL, &Business_Unit, &PO_ID, &Vendor_Setid, &Vendor_Id, &Vndr_loc, &PO_SECURITY_ID);
   SQLExec(SQL.PV_VNDR_SECURITY_ID, &Vendor_Setid, &Vendor_Id, &Vndr_loc, &VNDR_SECURITY_ID);
   
   If &PO_SECURITY_ID = &VNDR_SECURITY_ID Then
      &PV_GHOST_CARD = "Y"
   Else
      &PV_GHOST_CARD = "N"
   End-If;
   
   SQLExec(SQL.PV_CC_DISP_OPTION, &Business_Unit, &PO_ID, &DISP_OPT);
   SQLExec(SQL.PV_CC_CONTACT_INFO, &Business_Unit, &PO_ID, &CONTACT_NM, &CONTACT_PH);
   SQLExec(SQL.PV_CC_INSTRUCTIONS, &Business_Unit, &PO_ID, &INSTRUCTIONS);
   
   Evaluate &DISP_OPT
   When "D"
      &CREDIT_HOLDER_NAME = &CONTACT_NM | " " | &CONTACT_PH;
      Break;
   When "E"
      &CRDMEM_ACCT_NBR = "Card on File";
      Break;
   When "F"
      &CRDMEM_ACCT_NBR = "";
      Break;
   End-Evaluate;
   
   If &CC_USE_FLAG = "Y" And
         &CC_SECURITY_ID <> 0 Then
      
      SQLExec(SQL.PV_PYMNT_TERM, &PROGRAM_ID, &CC_PAYTERM, &PayTermsCD);
      SQLExec(SQL.PV_PYMNT_TERM, &PROGRAM_ID, &CC_PAYTERMDESCR, &PayTermsDescr);
      
      &PayTermsDescr = &PayTermsCD | " " | &PayTermsDescr;
      
   Else
      If None(&PayTermsCD) Then
         SQLExec(SQL.PV_SEL_PYMNT_TRM_CD, &Business_Unit, &PO_ID, &PayTermsCD);
      End-If;
      
      SQLExec(SQL.PV_PYMNT_TRM_DESCR, &Business_Unit, &PayTermsCD, &PayTermsDescr);
      
   End-If;
   
End-Function;

Function GetContactData(&POBusiness_Unit, &PO_id, &POLine_Nbr, &CntName, &CntEmail, &CntPhone, &CntFax)
   
   SQLExec(SQL.PV_CONTACT_DATA_SEL, &POBusiness_Unit, &PO_id, &POLine_Nbr, &CntName, &CntEmail, &CntPhone, &CntFax);
   
End-Function;

Function GetReqLineData(&POBusiness_Unit, &PO_id, &POLine_Nbr, &SchdNbr, &LnAttnTo)
   
   SQLExec(SQL.PV_REQ_LINE_DATA_SEL, &POBusiness_Unit, &PO_id, &POLine_Nbr, &SchdNbr, &LnAttnTo);
   
End-Function;

Function GetDCData(&POBusiness_Unit, &PO_id, &POLine_Nbr, &Key1Data, &Key2Data, &Key3Data)
   SQLExec(SQL.PV_REQ_LINE_DC_DATA, &POBusiness_Unit, &PO_id, &POLine_Nbr, &Key1Data, &Key2Data, &Key3Data);
End-Function;

Function GetShipToData(&Business_Unit, &PO_ID, &LINE_NBR, &SCHED_NBR, &SHIPTO_ID, &SHIPTO_DESCR, &SHIPTO_COUNTRY, &SHIPTO_ADDRESS1, &SHIPTO_ADDRESS2, &SHIPTO_ADDRESS3, &SHIPTO_ADDRESS4, &SHIPTO_CITY, &SHIPTO_NUM1, &SHIPTO_NUM2, &SHIPTO_HOUSE_TYPE, &SHIPTO_COUNTY, &SHIPTO_STATE, &SHIPTO_POSTAL, &ATTN_TO, &SHIPTO_COMMENTS, &OneTimeShipto)
   /*One Time ShipTo*/
   &OneTimeShipto = "Y";
   SQLExec(SQL.PV_ONE_TIME_SHIP_DATA_SEL, &Business_Unit, &PO_ID, &LINE_NBR, &SCHED_NBR, &SHIPTO_COUNTRY, &SHIPTO_ADDRESS1, &SHIPTO_ADDRESS2, &SHIPTO_ADDRESS3, &SHIPTO_ADDRESS4, &SHIPTO_CITY, &SHIPTO_NUM1, &SHIPTO_NUM2, &SHIPTO_HOUSE_TYPE, &SHIPTO_COUNTY, &SHIPTO_STATE, &SHIPTO_POSTAL);
   
   SQLExec(SQL.PV_ONE_TIME_SHIP_DATA_SEL1, &Business_Unit, &PO_ID, &LINE_NBR, &SCHED_NBR, &SHIPTO_ID, &SHIPTO_DESCR_ONETIME);
   
   
   If None(&SHIPTO_COUNTRY) Then
      &OneTimeShipto = "N";
      SQLExec(SQL.PV_SHIPTO_DATA_SEL, &Business_Unit, &SHIPTO_ID, &SHIPTO_DESCR, &SHIPTO_COUNTRY, &SHIPTO_ADDRESS1, &SHIPTO_ADDRESS2, &SHIPTO_ADDRESS3, &SHIPTO_ADDRESS4, &SHIPTO_CITY, &SHIPTO_NUM1, &SHIPTO_NUM2, &SHIPTO_HOUSE_TYPE, &SHIPTO_COUNTY, &SHIPTO_STATE, &SHIPTO_POSTAL, &ATTN_TO);
      
      REM &SHIPTO_DESCR = FixXMLString(&SHIPTO_DESCR);
   End-If;
   
   If All(&SHIPTO_DESCR_ONETIME) Then
      &SHIPTO_DESCR = &SHIPTO_DESCR_ONETIME;
   End-If;
   
   SQLExec(SQL.PV_SHIPTO_COMNTS_SEL1, &Business_Unit, &PO_ID, &SHIPTO_ID, &SHIPTO_COMMENTS);
   
   REM &SHIPTO_COMMENTS = FixXMLString(&SHIPTO_COMMENTS);
   
   &SHIPTO_COUNTRY = ConvertCountry(&SHIPTO_COUNTRY);
   &BadCountry = setBadCountry(&SHIPTO_COUNTRY);
   
End-Function;

Function GetBillToData(&Business_Unit, &PO_ID, &BillLocation, &BILLTO_DESCR, &BILLTO_COUNTRY, &BILLTO_ADDRESS1, &BILLTO_ADDRESS2, &BILLTO_ADDRESS3, &BILLTO_ADDRESS4, &BILLTO_CITY, &BILLTO_NUM1, &BILLTO_NUM2, &BILLTO_HOUSE_TYPE, &BILLTO_COUNTY, &BILLTO_STATE, &BILLTO_POSTAL, &AP_Business_Unit, &BILLTO_ATTNTO)
   
   If None(&BillLocation) Then
      SQLExec(SQL.PV_PO_BILL_LOC_SEL, &Business_Unit, &PO_ID, &BillLocation);
   End-If;
   
   SQLExec(SQL.PV_BILL_DATA_SEL, &Business_Unit, &BillLocation, &BILLTO_DESCR, &BILLTO_COUNTRY, &BILLTO_ADDRESS1, &BILLTO_ADDRESS2, &BILLTO_ADDRESS3, &BILLTO_ADDRESS4, &BILLTO_CITY, &BILLTO_NUM1, &BILLTO_NUM2, &BILLTO_HOUSE_TYPE, &BILLTO_COUNTY, &BILLTO_STATE, &BILLTO_POSTAL, &BILLTO_ATTNTO);
   
   &BILLTO_COUNTRY = ConvertCountry(&BILLTO_COUNTRY);
   &BadCountry = setBadCountry(&BILLTO_COUNTRY);
   
   SQLExec(SQL.PV_BU_AP_SEL, &Business_Unit, &AP_Business_Unit);
   
   REM &BILLTO_DESCR = FixXMLString(&BILLTO_DESCR);
   
End-Function;

Function GetDueDate(&Business_Unit, &PO_ID, &Line_Nbr, &DueDate)
   If &Line_Nbr <= 0 Then
      SQLExec(SQL.PV_PO_DUE_DT_SEL1, &Business_Unit, &PO_ID, &DueDatex);
   Else
      SQLExec(SQL.PV_PO_DUE_DT_SEL2, &Business_Unit, &PO_ID, &Line_Nbr, &DueDatex);
      
   End-If;
   
   &DueDate = GetMpDate(&DueDatex);
   
End-Function;

Function GetHeaderComment(&Business_Unit, &PO_ID, &HdrComment)
   
   SQLExec(SQL.PV_HDR_COMMENT_SEL, &Business_Unit, &PO_ID, &HdrComment);
   
   
   REM &HdrComment = FixXMLString(&HdrComment);
   
End-Function;

Function GetLineComment(&Business_Unit, &PO_ID, &LineNbr, &LnComment)
   
   SQLExec(SQL.PV_PO_LINE_COMMNET_SEL, &Business_Unit, &PO_ID, &LineNbr, &LnComment);
   
   REM &LnComment = FixXMLString(&LnComment);
   
End-Function;

Function GetItemDescription(&Business_Unit, &PO_ID, &LineNbr, &Item_Setid, &Item_Id, &Item_descr, &Category_Id, &Cat_Descr)
   
   SQLExec(SQL.PV_ITEM_DESCR_SEL, &Item_Setid, &Item_Id, &Item_descr, &Category_Id);
   SQLExec(SQL.PV_LINE_DESC254_SEL, &Business_Unit, &PO_ID, &LineNbr, &Item_descr_po);
   
   If All(&Item_descr_po) Then
      &Item_descr = &Item_descr_po;
   End-If;
   
   SQLExec(SQL.PV_ITM_CAT_DESC_SEL, &Item_Setid, &Category_Id, &Cat_Descr);
   
   REM &Item_descr = FixXMLString(&Item_descr);
   REM &Cat_Descr = FixXMLString(&Cat_Descr);
   
End-Function;

Function GetTransPortData(&TBusiness_Unit, &TPO_ID, &TLINE_NBR);
   /* code it if you where to get Transport data  */
End-Function;

Function GetTaxData(&Business_Unit, &PO_ID, &Sut_Count, &Vat_Count, &TaxCdSut, &TaxPct, &SalesTaxAmt, &UseTaxAmt, &TaxCdVat, &VatPct, &VatAmt)
   
   SQLExec(SQL.PV_TAX_DATA_SEL1, &Business_Unit, &PO_ID, &Sut_Count);
   
   
   SQLExec(SQL.PV_TAX_DATA_SEL2, &Business_Unit, &PO_ID, &Vat_Count);
   
   If &Sut_Count <> 0 Then
      
      SQLExec(SQL.PV_TAX_DATA_SEL3, &Business_Unit, &PO_ID, &TaxPct, &SalesTaxAmt, &UseTaxAmt);
      
   End-If;
   
   If &Vat_Count <> 0 Then
      
      SQLExec(SQL.PV_TAX_DATA_SEL4, &Business_Unit, &PO_ID, &TaxCdVat, &VatPct, &VatAmt);
      
   End-If;
   
End-Function; /* GetTaxData */

Function GetTaxLineData(&Business_Unit, &PO_ID, &PO_Line, &Sut_Count, &Vat_Count, &TaxCdSut, &TaxPct, &SalesTaxAmt, &UseTaxAmt, &TaxCdVat, &VatPct, &VatAmt)
   
   SQLExec(SQL.PV_TAX_DATA_SEL5, &Business_Unit, &PO_ID, &PO_Line, &Sut_Count);
   
   
   SQLExec(SQL.PV_TAX_DATA_SEL6, &Business_Unit, &PO_ID, &PO_Line, &Vat_Count);
   
   If &Sut_Count <> 0 Then
      
      SQLExec(SQL.PV_TAX_DATA_SEL7, &Business_Unit, &PO_ID, &PO_Line, &TaxPct, &SalesTaxAmt, &UseTaxAmt);
      
   End-If;
   
   If &Vat_Count <> 0 Then
      
      SQLExec(SQL.PV_TAX_DATA_SEL8, &Business_Unit, &PO_ID, &PO_Line, &TaxCdVat, &VatPct, &VatAmt);
      
   End-If;
   
End-Function; /* GetTaxLineData */

Function GetMerchendiseAmt(&BU, &POID, &PO_LINE_NBR, &PO_SCHD_NBR, &MerchendiseAmt, &CurrencyCd, &RevisionNbr)
   SQLExec("SELECT MERCHANDISE_AMT,CURRENCY_CD,REVISION FROM PS_PO_LINE_SHIP A WHERE A.BUSINESS_UNIT = :1 AND A.PO_ID = :2 AND A.LINE_NBR = :3 AND A.SCHED_NBR = :4", &BU, &POID, &PO_LINE_NBR, &PO_SCHD_NBR, &MerchendiseAmt, &CurrencyCd, &RevisionNbr);
End-Function;

Function IsOneScheduleOrSameShipToID(&Business_Unit, &PO_ID, &LINE_NBR) Returns boolean
   REM  SQLExec("SELECT COUNT(*),SHIPTO_ID  FROM PS_PO_LINE_SHIP A WHERE A.BUSINESS_UNIT = :1 AND A.PO_ID = :2 AND A.LINE_NBR = :3", &Business_Unit, &PO_ID, &LINE_NBR, &PO_SCHD_COUNT);
   &PO_SCHD_COUNT = 0;
   &GetSHIPTO_ID_SQL = GetSQL(SQL.GET_SCHEDCOUNT_SHITO_ID, &Business_Unit, &PO_ID, &LINE_NBR);
   While &GetSHIPTO_ID_SQL.Fetch(&ShipToIDCount, &NextSHIPTO_ID);
      &PO_SCHD_COUNT = &PO_SCHD_COUNT + 1; /* Number of rows with same SHITO_ID */
   End-While;
   If &PO_SCHD_COUNT > 1 Then
      Return False;
   Else
      Return True;
   End-If;
End-Function;

/* End data Collection Function                                                           */
/* END SECTION-6 */
/******************************************************************************************/


Function FormatPath(&Path As string) Returns string
   Local number &i, &begin, &end;
   Local string &stringToSearch, &stringToCut;
   &stringToSearch = &Path;
   &begin = Find("{", &stringToSearch);
   While &begin > 0
      &end = Find("}", &stringToSearch);
      &stringToCut = Substring(&stringToSearch, &begin, &end - &begin + 1);
      &stringToSearch = Substitute(&stringToSearch, &stringToCut, "");
      &begin = Find("{", &stringToSearch);
      If &i = 1000 Then /* Safety break */
         Break;
      Else
         &i = &i + 1;
      End-If;
   End-While;
   Return Substitute(&stringToSearch, ".", " > ");
End-Function;

Function IScript_doSearch()
   Local string &q, &node, &partialUrl, &fullUrl, &resultsHtml;
   Local number &resCounter;
   Local ApiObject &portal, &query, &results, &result, &cref;
   Local Request &Request = %Request;
   Local Response &Response = %Response;
   
   REM If no query text avail, return nothing;
   &q = &Request.GetParameter("q");
   If &q = "" Then
      Return;
   End-If;
   
   &portal = %Session.GetPortalRegistry();
   &portal.Open(%Portal);
   &query = &portal.GetSearchQuery();
   &query.Language = %Language;
   &query.QueryText = &q | "*";
   &query.RequestedFields = "CONTENT_PROVIDER,URL,SCORE";
   &query.SortSpecifications = "SCORE desc";
   &results = &query.Execute(1, 20);
   
   If &results <> Null Then
      &result = &results.First();
   Else
      &result = Null;
   End-If;
   
   &resCounter = 1;
   While &result <> Null
      &node = &result.SearchFields.ItemByName("CONTENT_PROVIDER").Value;
      &partialUrl = &result.SearchFields.ItemByName("URL").Value;
      &fullUrl = &portal.GetAbsoluteContentURL(&node, &partialUrl);
      &cref = &portal.FindCrefByURL(&fullUrl);
      If &cref <> Null Then
         If &cref.Authorized And
               &cref.isVisible And
               (&cref.URLType = "UPGE" Or
                  &cref.URLType = "UEXT" Or
                  &cref.URLType = "USCR" Or
                  &cref.URLType = "UGEN") Then
            &resultsHtml = &resultsHtml | GetHTMLText(HTML.CSS_LIVE_SEARCH_RESULT, &cref.Label, &cref.AbsolutePortalURL, FormatPath(&cref.Path), &cref.Description);
            If &resCounter = 8 Then
               Break;
            End-If;
            &resCounter = &resCounter + 1;
         End-If;
      End-If;
      &result = &results.Next();
   End-While;
   &portal.close();
   
   If &resultsHtml <> "" Then
      &Response.Write(GetHTMLText(HTML.CSS_LIVE_SEARCH, &resultsHtml));
   End-If;
End-Function;



Function IScript_TestJavaScript();
   
   %Response.WriteLine("<script src= " | %Response.GetJavaScriptURL(HTML.X_PRINT_X) | "></script>");
   
End-Function;



<*
Local object &IDE;

&IDE = CreateObject("PEOPLESOFT.IDE");
/* ObjectSetProperty(&IDE, "Visible", True); */
ObjectDoMethod(&IDE, "ViewObject", "Record.XREF_VIEW");
*>
rem &strng = "<?xml version='1.0'?><PurchaseOrderMatch/>";
&namespaceprefix = "http://www.qwest.com/XMLSchema";
rem &namespaceprefix = "p1";
rem &strng = "<?xml version='1.0'encoding='UTF-8'standalone='yes'?><" | &namespaceprefix | ":PurchaseOrderMatch/>";
&XmlResponse = CreateXmlDoc("");
&rootnode = &XmlResponse.CreateDocumentElement("p1:PurchaseOrderMatch", &namespaceprefix);
rem %Super = CreateXmlDoc("<?xml version='1.0' encoding=" | &encoding | "?><" | &namespaceprefix | ":schema></" | &namespaceprefix | ":schema>") ;
rem &strng = "<?xml version='1.0'?>"|"p1:"|"<PurchaseOrderMatch/>";
rem &XmlResponse = CreateXmlDoc("<?xml version='1.0'?><p1:PurchaseOrderMatch/>");
rem &XmlResponse = CreateXmlDoc(&strng);
rem &ret = &XmlResponse.ParseXmlString(&strng);
&XmlResponse.DocumentElement.AddAttribute("xmlns", "p1:http://www.qwest.com/XMLSchema");

&PurchaseOrderMatchInfo = &XmlResponse.DocumentElement.AddElement("p1:PurchaseOrderMatchInfo");
&EnterpriseId = &PurchaseOrderMatchInfo.AddElement("p1:EnterpriseId");

&PurchaseOrderId = &PurchaseOrderMatchInfo.AddElement("p1:PurchaseOrderId");

&PurchaseOrderLineNo = &PurchaseOrderId.AddElement("p1:PurchaseOrderLineNo");

&PurchaseOrderLineCloseInd = &XmlResponse.DocumentElement.AddElement("p1:PurchaseOrderLineCloseInd");

&MatchCode = &PurchaseOrderLineCloseInd.AddElement("p1:MatchCode");
&MatchCode.Addattribute("xsi:nil", "true");
&STR = &XmlResponse.GenFormattedXmlString();
Local File &File = GetFile("C:\Temp\Tanuja." | %Datetime | ".xml", "W", %FilePath_Absolute);
&File.WriteString(&STR);


&soapRes = CreateSOAPDoc();
&soapRes.AddEnvelope(%SOAP_Custom);
&EnvNode = &soapRes.EnvelopeNode;
&AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
&AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
&AddEnvelopeAttribute = &EnvNode.AddAttribute("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");

&soapRes.AddBody();
&bodynode = &soapRes.BodyNode;
&method = &bodynode.addelement("GetDepotBvappResponse");
&method.addattribute("xmlns", "http://www.qwest.com/webservices/NetworkProvisioning/DepotVendorPricing");
&doc = &method.Addelement("GetDepotSupplementResp");
&doc.addattribute("xmlns", "http://www.qwest.com/XMLSchema");
&MatchCode = &doc.AddElement("p1:MatchCode");
&MatchCode.Addattribute("xsi:nil", "true");
&NEWSTR = &soapRes.GenFormattedXmlString();
Local File &NEWFile = GetFile("C:\Temp\Tanuja1111." | %Datetime | ".xml", "W", %FilePath_Absolute);
&NEWFile.WriteString(&NEWSTR);


&RC = DoModal(Panel.XREF_VIEWTXT_SP, MsgGetText(102, 50, "View Text"), - 1, - 1, 0);


If XREF_VIEW.RECTYPE = 1 Then
   UnHide(XREF_WRK.XREF_VIEWTXT_BTN);
Else
   Hide(XREF_WRK.XREF_VIEWTXT_BTN);
End-If;


<*
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("com.mycompany.mydepartment.PS.Component.Record.Field.Event");
&logger.debug("Logger created");
remark... do some processing ...;
&logger.info("Process completed successfully");
GetLevel0()(1).X_DERIVED_X.DESCR20_MIXED.Value = GetHTMLText(HTML.USERJS, "user_function1()");
*>
Declare Function Sleep Library "kernel32"
      (long Value As number);

Function IEPrompt(&sTitle As string, &sLabel As string, &arrPromptValues As array of string, &nSelected As number) Returns number
   Local object &IE = CreateObject("InternetExplorer.Application");
   &IE.Visible = True;
   
   &IE.Top = 200;
   &IE.Left = 200;
   &IE.Width = 400;
   &IE.Height = 200;
   
   &IE.Navigate("About:Blank");
   &IE.menubar = 0;
   &IE.toolbar = 0;
   &IE.statusBar = 0;
   
   Local string &sSelected = "";
   Local object &Doc = &IE.document;
   &Doc.Open();
   &Doc.WriteLn("<html><head><title>" | &sTitle | "</title></head><body onload='javascript:document.promptform.promptname.focus();'>");
   &Doc.WriteLn(&sLabel | "<form name='promptform'>");
   &Doc.WriteLn("<input name='watchme' type='hidden' value='here'>");
   &Doc.WriteLn("<select name='promptname'>");
   
   &Doc.Write("<option value='0'");
   If &nSelected = 0 Then
      &Doc.Write(" selected");
   End-If;
   &Doc.WriteLn("> </option>");
   
   For &i = 1 To &arrPromptValues.Len
      &Doc.Write("<option value='" | &i | "'");
      If &nSelected = &i Then
         &Doc.Write(" selected");
      End-If;
      &Doc.WriteLn(">" | &arrPromptValues [&i] | "</option>");
   End-For;
   &Doc.WriteLn("</select>");
   
   &Doc.WriteLn("<input type='submit' value='Select' onclick='javascript:document.promptform.watchme.value=0; return false;'></form>");
   &Doc.WriteLn("</body></html>");
   &Doc.Close();
   
   Local number &nActualSelected = 0;
   Local boolean &bDone = False;
   While ( Not &bDone)
      Sleep(50);
      
      REM First should check if IE is still there;
      If &Doc.promptform.watchme.value <> "here" Then
         &nActualSelected = &Doc.promptform.promptname.value;
         Break;
      End-If;
      
   End-While;
   
   &IE.Quit();
   
   Return &nActualSelected;
End-Function;

Function GetProjectsList() Returns array of string
   
   Local array of string &arrProjects = CreateArrayRept("", 0);
   Local string &sProject;
   Local SQL &projectsSQL = CreateSQL("SELECT PROJECTNAME FROM PSPROJECTDEFN ORDER BY PROJECTNAME");
   While &projectsSQL.Fetch(&sProject)
      &arrProjects.Push(&sProject);
   End-While;
   &projectsSQL.Close();
   Return &arrProjects;
   
End-Function;

Function GetProjectName() Returns string
   Local string &sTitle = "Grey Sparling Version Control Project Splitter";
   Local string &sLabel = "Select the project that you want to split";
   
   Local array of string &arrProjects = GetProjectsList();
   
   Local number &nProjectNumber = IEPrompt(&sTitle, &sLabel, &arrProjects, 0);
   If &nProjectNumber > 0 Then
      Return &arrProjects [&nProjectNumber];
   Else
      Return "";
   End-If;
End-Function;

Declare Function GetCommandLineA Library "kernel32" Returns long As number;
Declare Function lstrcpyA Library "kernel32"
      (string As string, long Value As number) Returns long As number;


REM This is ported from http://www.thecodeproject.com/csharp/command_line.asp ;
REM ;
REM Valid parameters forms:
REM {-,/,--}param{ ,=,:}((",')value(",'))
REM Examples: 
REM -param1 value1 --param2 /param3:"Test-:-work" 
REM /param4=happy -param5 '--=nice=--';

REM It currently doesn't get things like -I7892 correct, the lack of spaces are the problem ;
Function ParseCommandLineArgs(&arrArgs As array of string) Returns JavaObject;
   
   Local JavaObject &jPattern = GetJavaClass("java.util.regex.Pattern");
   Local JavaObject &jRA = GetJavaClass("java.lang.reflect.Array");
   
   Local JavaObject &jParms = CreateJavaObject("java.util.HashMap");
   
   Local string &sSplitPattern = "^-{1,2}|^/|=|:";
   Local JavaObject &jSplitter = &jPattern.compile(&sSplitPattern, &jPattern.CASE_INSENSITIVE);
   Local string &sRemoverPattern = "^['""]?(.*?)['""]?$";
   Local JavaObject &jRemover = &jPattern.compile(&sRemoverPattern, &jPattern.CASE_INSENSITIVE);
   
   Local string &sParameter = "";
   rem Local integer &I;
   For &i = 1 To &arrArgs.Len
      
      REM Look for new parameters (-,/ or --) and a possible enclosed value (=,:)   ;
      
      REM *** Ugh, PeopleTools screws up the method lookup here, so we have to repeatedly compile the regex *** ;
      REM Local JavaObject &jParts = &jSplitter.split(&arrArgs [&I], 3);
      Local JavaObject &jParts = CreateJavaObject("java.lang.String", &arrArgs [&i]).split(&sSplitPattern, 3);
      Evaluate &jRA.getLength(&jParts)
         REM Found a value (for the last parameter found (space separator));
      When = 1
         If &sParameter <> "" Then
            If Not &jParms.containsKey(&sParameter) Then
               Local string &sParts0 = &jRA.get(&jParts, 0).toString();
               &sParts0 = &jRemover.matcher(CreateJavaObject("java.lang.String", &sParts0)).replaceAll("$1");
               &jParms.put(&sParameter, &sParts0);
            End-If;
            &sParameter = "";
         End-If;
         Break;
         
         REM Found just a parameter;
      When = 2
         REM  The last parameter is still waiting. With no value, set it to true. ;
         If &sParameter <> "" Then
            If Not &jParms.containsKey(&sParameter) Then
               &jParms.put(&sParameter, True);
            End-If;
         End-If;
         &sParameter = &jRA.get(&jParts, 1).toString();
         Break;
         
         REM Parameter with enclosed value ;
      When = 3
         REM The last parameter is still waiting. With no value, set it to true. ;
         If &sParameter <> "" Then
            If Not &jParms.containsKey(&sParameter) Then
               &jParms.put(&sParameter, True);
            End-If;
         End-If;
         
         &sParameter = &jRA.get(&jParts, 1).toString();
         
         REM Remove possible enclosing characters (",'") ;
         If Not &jParms.containsKey(&sParameter) Then
            Local string &sParts2 = &jRA.get(&jParts, 2).toString();
            &jParms.put(&sParameter, &jRemover.matcher(CreateJavaObject("java.lang.String", &sParts2)).replaceAll("$1"));
         End-If;
         &sParameter = "";
         Break;
      End-Evaluate;
      
   End-For;
   
   REM In case a parameter is still waiting ;
   If &sParameter <> "" Then
      If Not &jParms.containsKey(&sParameter) Then
         &jParms.put(&sParameter, True);
      End-If;
   End-If;
   
   Return &jParms;
   
End-Function;

REM Note that this currently does not deal with strings with embedded spaces in them ;
Function ParseCommandLine(&sCMDLine As string) Returns JavaObject;
   Local array of string &arrArgs = Split(&sCMDLine, " ");
   REM The first parmeter is always the .exe itself (on Windows, but what about other platforms?) ;
   &arrArgs.Shift();
   Return ParseCommandLineArgs(&arrArgs);
End-Function;

Function ParseWindowsCommandLine() Returns JavaObject
   
   Local string &sOSName = GetJavaClass("java.lang.System").getProperty("os.name");
   If Find("Windows", &sOSName) = 0 Then
      Error ("This function can only be called on Windows. This machine is currently running " | &sOSName);
   End-If;
   
   Local string &sCMDLine = Rept(" ", 1024);
   Local number &nResults = lstrcpyA(&sCMDLine, GetCommandLineA());
   
   Return ParseCommandLine(&sCMDLine);
   
End-Function;

Local string &sProject;
Local JavaObject &jParms = ParseWindowsCommandLine();
Local JavaObject &jProject = &jParms.get("project");
If &jProject <> Null Then
   &sProject = &jProject.toString();
Else
   MessageBox(0, "", 0, 0, "Hi!!!");
   &Str = GetProjectName();
   rem Here's where you would prompt for the project name;
End-If;


<*
Local object &IDE;

&IDE = CreateObject("PEOPLESOFT.IDE");
/* ObjectSetproperty(&IDE, "Visible", True); */
ObjectDoMethod(&IDE, "ViewObject", Record.X_DERIVED_X);
*>

&oFEA = CreateObject("COM", "FEAGLOBLIBSIMPLE.FEAGLOBLIBSIMPLE.1");
If None(&oFEA) Then
   throw CreateException(13537, 91, "The FEA library not found.");
Else
   &strGlobalVersion = &oFEA.GetVersion();
   MessageBox(0, "", 0, 0, "&strGlobalVersion " | &strGlobalVersion);
End-If;

Local object &WORKSHEET;

&WORKSHEET = CreateObject("Excel.Sheet");


Local JavaObject &email_regex = CreateJavaObject("java.lang.String", "\b[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}\b");
Local JavaObject &test_string = CreateJavaObject("java.lang.String", X_VACATION.VAL2);
If &test_string.matches(&email_regex) Then
   /* PAGE_RECORD.TEST_FIELD is a valid email address */
   MessageBox(0, "", 0, 0, "is a valid email address");
Else
   MessageBox(0, "", 0, 0, "is an INvalid email address");
   X_VACATION.VAL2 = &test_string.replaceAll(&email_regex, "<a href=""mailto:$0"">$0</a>");
End-If;


/* Subscription PeopleCode */
/* IB Installation Verification - Async message w/ response example */
Local SQL &trx_SQL;
Local Message &request_MSG, &response_MSG;
Local Rowset &request_RS, &response_RS;
Local Record &trx_REC;
Local any &QryNode, &I;

/* Get the request message from the queue */
&request_MSG = GetMessage();

/* Get the request rowset object from the buffer */
&request_RS = &request_MSG.GetRowset();

/* Extract the nodeName field from the request */
&QryNode = &request_RS.GetRow(1).GetRecord(Record.PSINST_VER).GetField(Field.MSGNODENAME).Value;

/* Instantiate the response message object */
&response_MSG = CreateMessage(Message.IB_INST_VER_RESP_MSG);

/* Create a rowset with the same structure as the response message */
&response_RS = &response_MSG.GetRowset();

/* Create the record for the query results */
&trx_REC = CreateRecord(Record.PSINST_VER_TRX);

/* Generate the SQL object and open it for fetches */
&trx_SQL = CreateSQL("Select MSGNODENAME, TRXTYPE, RQSTMSGNAME, RQSTMSGVER, RESPMSGNAME,   RESPMSGVER from PSNODETRX where MSGNODENAME = :1", &QryNode);

&I = 1;
While &trx_SQL.Fetch(&trx_REC)
   &response_RS.InsertRow(&I);
   &trx_REC.CopyFieldsTo(&response_RS.GetRow(&I).GetRecord(Record.PSINST_VER_TRX));
   &I = &I + 1;
End-While;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
REM - CUSTOM CODE BY PRASHANT STARTS. 
      CopyRowset - It copies the Rowset Data (&response_RS)
	  to an XmlDoc Object (&inXMLDoc);
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
Local XmlDoc &inXMLDoc;
Local boolean &ret;

&inXMLDoc = CreateXmlDoc("<?xml version='1.0'?><root xmlns='http://www.peoplesoft.com'/>");
&ret = &inXMLDoc.CopyRowset(&response_RS, "IB_INST_VER_RESP_MSG", "VERSION_1");
Local string &STRNEW = &inXMLDoc.GenFormattedXmlString();
Local File &NEWFILE = GetFile("C:\temp\CData Testing\COPYROWSET" | %Datetime | ".xml", "W", %FilePath_Absolute);
&NEWFILE.WriteString(&STRNEW);
&NEWFILE.Close();

/* Now Use CopyToRowset method to copy data from the XmlDoc to an already instantiated Rowset */
Local Message &msg;
Local Rowset &rs;
Local boolean &yo;

&msg = CreateMessage(Message.IB_INST_VER_RESP_MSG);
rem &rs = &msg.GetRowset();
&rs = CreateRowset(Record.PSINST_VER_TRX);
rem &outXMLDoc = CreateXmlDoc("<?xml version='1.0'?><root xmlns='http://www.peoplesoft.com'/>");
rem &yo = &inXMLDoc.CopyToRowset(&rs, "IB_INST_VER_RESP_MSG", "VERSION_1");
&yo = &inXMLDoc.CopyToRowset(&rs, "IB_INST_VER_RESP_MSG", "VERSION_1");
For &i666 = 1 To &rs.ActiveRowCount
   Local File &OLDFILE = GetFile("C:\temp\CData Testing\CopyToRowset" | %Datetime | ".out", "W", "A", %FilePath_Absolute);
   &OLDFILE.WriteLine("~~~");
   &OLDFILE.WriteLine(&rs(&i666).GetRecord(Record.PSINST_VER_TRX).GetField(Field.MSGNODENAME).Value);
   &OLDFILE.WriteLine(&rs(&i666).GetRecord(Record.PSINST_VER_TRX).GetField(Field.RQSTMSGNAME).Value);
   &OLDFILE.WriteLine("~~~");
   &OLDFILE.Close();
End-For;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
REM - CUSTOM CODE BY PRASHANT ENDS - 07/Jun/2006;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* Check to see if at least one row was populated */
If (&response_MSG.GetRowset().GetRow(1).GetRecord(Record.PSINST_VER_TRX).GetField(Field.MSGNODENAME).Value = "") Then
   &response_MSG.GetRowset().GetRow(1).GetRecord(Record.PSINST_VER_TRX).GetField(Field.RQSTMSGNAME).Value = "*** No transactions exist";
End-If;

&response_MSG.Publish();


/* Subscription PeopleCode */
/* IB Installation Verification - Async response example */
Local Message &response;
Local Rowset &response_RS;
Local Record &response_REC, &IB_INST_VER_DB_REC;
Local any &I;

/* Get the incoming response message from the queue */
&response = GetMessage();

/* Get the response rowset object from the buffer */
&response_RS = &response.GetRowset();

/* Create the database record object for the response */
&IB_INST_VER_DB_REC = CreateRecord(Record.PSINST_VER_TRX);

/* Loop through the message rows moving the data into the database table */
For &I = 1 To (&response_RS.RowCount)
   &response_REC = &response_RS.GetRow(&I).GetRecord(Record.PSINST_VER_TRX);
   &response_REC.CopyFieldsTo(&IB_INST_VER_DB_REC);
   &IB_INST_VER_DB_REC.Insert();
End-For;


REM  Connection info to login to the Jabber server;
REM  In a real system, we would ;
REM    a) not store these in the code and ;
REM    b) not connect to the server on receipt of every message;
Local string &user = "prashant.prakash1";
Local string &password = "natasha";

REM The Jabber server host and server name.  Here we are using GoogleTalk,  ;
REM but the Oracle Collaboration Suite IM stuff is also based on the Jabber/XMPP standard;
REM as are many other open source and commercial IM servers;
Local string &host = "talk.google.com";
Local string &serverName = "gmail.com";

REM We use a unique resource name since we're logging in multiple times with our Jabber account;
Local string &resource = "ReportNotifier";


REM ************* No need to change anything below here ***************************;

Local Rowset &rsReportMessage = GetMessage().GetRowset();

REM Dig out the report URL and who has access to it;
Local Row &rowReport = &rsReportMessage.GetRow(1);
Local Record &recReport = &rowReport.GetRecord(Record.PSRF_RCREAT_WRK);
Local string &sReportURL = &recReport.GetField(Field.PSRF_REPORT_URL).Value;

Local Rowset &rsReportSecurity = &rowReport.GetRowset(Scroll.PSRF_RSCRTY_TBL);

REM This code uses the convention of the "Other" type in the user's email list for storing ;
REM their Instant Messaging ID.  That was purely to keep the demo simple though ;
Local array of string &arrUsers = CreateArrayRept("", 0);
For &nUserCtr = 1 To &rsReportSecurity.ActiveRowCount;
   Local Record &recRepSec = &rsReportSecurity.GetRow(&nUserCtr).GetRecord(Record.PSRF_RSCRTY_TBL);
   Local string &sUserId = &recRepSec.GetField(Field.USERID).Value;
   Local string &sXMPPId, &sUserName;
   If SQLExec("SELECT A.EMAILID, B.OPRDEFNDESC FROM PSUSEREMAIL A, PSOPRDEFN B WHERE B.OPRID = A.OPRID AND A.EMAILTYPE = 'OTH' AND A.OPRID = :1", &sUserId, &sXMPPId, &sUserName) Then
      &arrUsers.Push(&sXMPPId, &sUserName);
   End-If;
End-For;

REM Only send messages if we found some XMPP ids for the users receiving this report;
If &arrUsers.Len > 0 Then
   
   Local boolean &useSSL = False;
   rem Local integer &port = 5222;
   Local integer &port = 443;
   If &useSSL Then
      &port = 5223;
   End-If;
   
   Local JavaObject &connection;
   try
      
      Local string &connClassName = "org.jivesoftware.smack.XMPPConnection";
      If &useSSL Then
         &connClassName = "org.jivesoftware.smack.SSLXMPPConnection";
      End-If;
      
      &connection = CreateJavaObject(&connClassName, &host, &port, &serverName);
      &connection.login(&user, &password, &resource);
      
      Local JavaObject &roster = &connection.getRoster();
      
      REM We have to wait for the presence packets to show up - definitely not production code here! ;
      GetJavaClass("java.lang.Thread").sleep(3 * 1000);
      
      For &nCtr = 1 To &arrUsers.Len Step 2
         Local string &sTalkTo = &arrUsers [&nCtr];
         
         Local JavaObject &presence = &roster.getPresence(&sTalkTo);
         
         REM Is this person online? ;
         If &presence <> Null Then
            Local string &sCR = Char(13) | Char(10);
            Local JavaObject &chat = &connection.createChat(&sTalkTo);
            Local string &sMessage = "Hello " | &arrUsers [&nCtr + 1] | ". Your report is ready. " | &sCR;
            &sMessage = &sMessage | "Here is the link to the report. " | &sCR;
            &sMessage = &sMessage | &sReportURL | &sCR;
            &sMessage = &sMessage | "Goodbye. " | &sCR | &sCR;
            &chat.sendMessage(&sMessage);
         End-If;
         
      End-For;
      
   catch Exception &e
      Warning ("Caught exception: " | &e.ToString());
      
   end-try;
   
   If &connection <> Null Then
      &connection.close();
   End-If;
   
End-If;


<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="SourcingXSLT.xsl"?>
<catalog>
  <cd>
    <title>Empire Burlesque</title>
	<artist>Bob Dylan</artist>
	<country>USA</country>
    <company>Columbia</company>
    <price>10.90</price>
    <year>1985</year>
   </cd>
</catalog>

<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <xsl:template match="/">
  <html>
  <body>
    <h2>PP's CD Collection</h2>
    <table border="1">
    <tr bgcolor="#9acd32">
      <th>Title</th>
      <th>Artist</th>
	  <th>Country</th>
	</tr>
    <xsl:for-each select="catalog/cd">
    <tr>
      <td><xsl:value-of select="title"/></td>
      <td><xsl:value-of select="artist"/></td>
      <td><xsl:value-of select="country"/></td>
	</tr>
    </xsl:for-each>
    </table>
  </body>
  </html>
 </xsl:template>
</xsl:stylesheet>


<input type="hidden" name="USERJSINJECTION" value=""/>
<script type="text/javascript">
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
   window.onload = func;
  } else {
   window.onload = function() {
     oldonload();
     func();
   }
  }
}
 
function user_function1() {
  window.print();
}
function user_function2() {
  alert('Hello from user javascript');
}
 
addLoadEvent(function() {
  %bind(:1)
});
</script>


<HTML>
<head>
<SCRIPT language="javascript">
function setprint {
window.print();
}
</SCRIPT>
<body onLoad="setprint()">
</body>
<head>
</HTML>


<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope
    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:tns="http://www.oorsprong.org/websamples.countryinfo"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
     <soap:Body>
       <tns:CountryName>
         <tns:sCountryISOCode>%BIND(:1)</tns:sCountryISOCode>
       </tns:CountryName>
	 </soap:Body>
  </soap:Envelope>


  <?xml version="1.0"?>
<env:Envelope  xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema">
 <env:Body env:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <m:buy xmlns:m="http://www.bea.com/examples/Trader">
   <string xsi:type="xsd:string">%Bind(:1)</string>
   <intVal xsi:type="xsd:int">%Bind(:2)</intVal>
  </m:buy>
 </env:Body>
</env:Envelope>


SetSearchEdit(X_ORDR_SRCH_VW.BUSINESS_UNIT);
SetSearchDefault(X_ORDR_SRCH_VW.BUSINESS_UNIT);



If None(X_ORDR_SRCH_VW.BUSINESS_UNIT) Then
   Error MsgGet(9000, 3, "Business Unit is a required field.")
End-If;


Function collapseall();
   
   &PO = GetField(X_ORDR_STS_WRK.URL_1);
   rem &MSR = GetField(X_ORDR_STS_WRK.URL_2);
   &PO.dataareacollapsed = True;
   rem &MSR.dataareacollapsed = True;
   
End-Function;

collapseall();


Function expandall();
   
   &PO = GetField(X_ORDR_STS_WRK.URL_1);
   rem &MSR = GetField(X_ORDR_STS_WRK.URL_2);
   &PO.dataareacollapsed = False;
   rem MSR.dataareacollapsed = False;
   
End-Function;

expandall();


Component Rowset &rsPO, &rsWRK;

Function PO_Init_values()
   &line = CurrentRowNumber();
   If All(X_ORDR_SRCH_VW.PO_ID) Then
      rem This is for PO;
      &PO_VW = CreateRecord(Record.X_PO_HDR_VW);
      &PO_RCPT_VW = CreateRecord(Record.X_PO_RECV_VW);
      /* Order Information TAB */
      X_PO_HDR_VW.BUSINESS_UNIT = X_ORDR_SRCH_VW.BUSINESS_UNIT.Value;
      X_PO_HDR_VW.PO_ID = X_ORDR_SRCH_VW.PO_ID.Value;
      /* VENDOR Information TAB */
      &hdr_SQL = CreateSQL("%SELECTALL(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3");
      &hdr_SQL.Execute(&PO_VW, X_PO_HDR_VW.BUSINESS_UNIT, X_PO_HDR_VW.PO_ID);
      While &hdr_SQL.Fetch(&PO_VW)
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.VENDOR_ID, &PO_VW.GetField(Field.VENDOR_ID).Value);
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.NAME1, &PO_VW.GetField(Field.NAME1).Value);
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.LINE_NBR, &PO_VW.GetField(Field.LINE_NBR).Value);
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.INV_ITEM_ID, &PO_VW.GetField(Field.INV_ITEM_ID).Value);
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.ITM_ID_VNDR, &PO_VW.GetField(Field.ITM_ID_VNDR).Value);
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.DESCR, &PO_VW.GetField(Field.DESCR).Value);
         UpdateValue(Scroll.X_PO_HDR_VW, &line, X_PO_HDR_VW.BUYER_ID, &PO_VW.GetField(Field.BUYER_ID).Value);
      End-While;
      /* RECEIPTING TAB */
      &rcpt_SQL = CreateSQL("%SELECTALL(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3");
      &bool = &rcpt_SQL.Execute(&PO_RCPT_VW, X_PO_HDR_VW.BUSINESS_UNIT, X_PO_HDR_VW.PO_ID);
      While &rcpt_SQL.Fetch(&PO_RCPT_VW)
         X_ORDR_STS_WRK.RECEIVER_ID = &PO_RCPT_VW.RECEIVER_ID.Value;
         X_ORDR_STS_WRK.RECEIPT_DT = &PO_RCPT_VW.GetField(Field.RECEIPT_DT).Value;
         rem X_ORDR_STS_WRK.CONTAINER_ID = &PO_RCPT_VW.GetField(Field.CONTAINER_ID).Value;
         X_ORDR_STS_WRK.RECV_LN_NBR = &PO_RCPT_VW.GetField(Field.RECV_LN_NBR).Value;
         rem X_ORDR_STS_WRK.RECV_SHIP_STATUS = &PO_RCPT_VW.GetField(Field.RECV_SHIP_STATUS).Value;
         X_ORDR_STS_WRK.QTY_SH_RECVD = &PO_RCPT_VW.GetField(Field.QTY_SH_RECVD).Value;
         X_ORDR_STS_WRK.QTY_PO = &PO_RCPT_VW.GetField(Field.QTY_PO).Value;
         /*
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.RECEIVER_ID, &PO_RCPT_VW.GetField(Field.RECEIVER_ID).Value);
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.RECEIPT_DT, &PO_RCPT_VW.GetField(Field.RECEIPT_DT).Value);
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.CONTAINER_ID, &PO_RCPT_VW.GetField(Field.CONTAINER_ID).Value);
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.RECV_LN_NBR, &PO_RCPT_VW.GetField(Field.RECV_LN_NBR).Value);
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.RECV_SHIP_STATUS, &PO_RCPT_VW.GetField(Field.RECV_SHIP_STATUS).Value);
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.QTY_SH_RECVD, &PO_RCPT_VW.GetField(Field.QTY_SH_RECVD).Value);
         UpdateValue(Scroll.X_ORDR_STS_WRK, &line, X_ORDR_STS_WRK.QTY_PO, &PO_RCPT_VW.GetField(Field.QTY_PO).Value);
		 */
      End-While;
   Else
      rem This is for MSR;
   End-If;
End-Function;

&rsPO = GetLevel0()(1).GetRowset(Scroll.X_PO_HDR_VW);
rem &rsWRK = GetLevel0().GetRow(1).GetRowset(Scroll.X_ORDR_STS_WRK);
PO_Init_values();


/************************** $Qwest$ *******************************
ITR#:     QR4IIN017
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added Functions to read RMA Data 
		  

GenerateFileID - This function is used to generate unique FileIDs 
				 for RMA Data Flat Files processed.
Input	       - Custom parameters - "R", "Random"  
Output         - FileID.

InsertControl - Function to insert FileIDs against FileNames
Input		  - Process Instance, FileID
Output		  - None

File_RMA - Function to process Files
Input	 - RMA Data FLat File and FileID.
Output	 - None

/******************************************************************/

/* Begin QWEST QR4IIN017 Prashant Prakash 11/15/2006 PSCIO-R34
   This code was added to Process and Update RMA details in PS */


Declare Function File_RMA PeopleCode Z_RMA_TRACKING.BUSINESS_UNIT FieldFormula;
Declare Function GenerateFileID PeopleCode Z_RMA_TRACKING.BUSINESS_UNIT FieldFormula;
Declare Function InsertControl PeopleCode Z_RMA_TRACKING.BUSINESS_UNIT FieldFormula;
Declare Function Log_PPM_error PeopleCode Z_ERROR_LOG.Z_ERR_CODE FieldFormula;
Declare Function NotifyError PeopleCode Z_RMA_TRACKING.BUSINESS_UNIT FieldFormula;
Declare Function RouteEmail_3PL_Data_Errors PeopleCode Z_FUNCLIB_INV1.Z_INV_NOTIFICATION FieldFormula;

Component array of string &RMA_ARR_File;
Component boolean &errorFlag;
Local string &File_path, &path, &FILE_NAME_1, &DBcharset, &fileName;
Local number &Len, &RtnCode;
Local boolean &yo;
Component File &LogFile;

&startTime = %PerfTime;
/* Retreive File name from State record */
&fileName = Z_RMA_LOAD_AET.FILE_ID;
&dir = Lower(%DbName);
rem &PI = String(Z_RMA_LOAD_AET.PROCESS_INST_STG);
&PI = NumberToString("", Z_RMA_LOAD_AET.PROCESS_INST_STG.Value);
/* Retrieve the Files to be processed */
&path = GetURL(URL.Z_IN_RMA_LOAD);
/* Replace the DbName in the URL */
&FILE_NAME_1 = Substitute(&path, "<dbname>", &dir);
&File_path = &FILE_NAME_1 | "INVRECON_*.xml";
&Len = Len(&File_path);
&Len_new = Len(&FILE_NAME_1);
&LogFileName = "/psoft/fscmsys/interface/3PL/RMARR/INVRECON_RMA_" | String(Z_RMA_LOAD_AET.PROCESS_INST_STG) | ".LOG";
SQLExec("SELECT UNICODE_ENABLED FROM PSSTATUS", &RtnCode);
If &RtnCode = 1 Then
   &DBcharset = "U"; /* UNICODE */
Else
   &DBcharset = "ANSI"; /* ANSI */
End-If;
&LogFile = GetFile(&LogFileName, "W", &DBcharset, %FilePath_Absolute);
&RMA_ARR_File = FindFiles(&File_path, %FilePath_Absolute);
/* Use GetURL for the path. %FilePath_Absolute */
&LogFile.WriteLine("Files to be processed " | &RMA_ARR_File.Len);
/* Check whether CONTROL - M has copied files from SDG to be processed */
If (&RMA_ARR_File.Len > 0) Then
   For &eRMA = 1 To &RMA_ARR_File.Len
      &file_Id = GenerateFileID("R", "Random");
      /* Retrieve the File Name */
      &final = Len(&RMA_ARR_File [&eRMA]);
      &fileName = Substring(&RMA_ARR_File [&eRMA], &Len_new + 1, &final);
      InsertControl(&PI, &file_Id, &fileName);
      &filePath = %FilePath;
      &errorFlag = False;
      File_RMA(&RMA_ARR_File [&eRMA], &file_Id, &fileName);
      /* Send Notification For each file */
      If (&errorFlag = True) Then
         rem NotifyError(&PI, &fileName);
         &emailid = GetURL(URL."Z_PROCUREMENT_ADMIN_EMAIL");
         RouteEmail_3PL_Data_Errors("", &emailid, "ACTION REQUIRED:  Return to Warehouse Configuration Error", &fileName, &PI, "LRMA");
      End-If;
   End-For;
Else
   MessageBox(0, "", 21000, 9, "Message Not Found", &dir);
   &Interface_id = "LRMA";
   &error_code = "X11";
   &error_message = MsgGetExplainText(21000, 9, "Message Not Found", "Z_RMA_LOAD", %Datetime);
   &LogFile.WriteLine(MsgGetExplainText(21000, 35, "Message Not Found"));
   &ZKey1 = "";
   &ZKey2 = "";
   &ZKey3 = "";
   &ZKey4 = "";
   &ZKey5 = "";
   &ZKey6 = "";
   &yo = Log_PPM_error(&Interface_id, &ZKey1, &ZKey2, &ZKey3, &ZKey4, &ZKey5, &ZKey6, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
   rem &yo = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.REASON_CD.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
End-If;
&End = %PerfTime;
&NEW_TIME = NumberToString("%6.3", Value(&End - &startTime));
&LogFile.WriteLine("TimeDiff B/W Start and End of execution " | &NEW_TIME);
rem MessageBox(0, "", 0, 0, "TimeDiff B/W Start and End of execution " | &NEW_TIME);



import PT_WF_NOTIFICATION:*;

Declare Function Log_PPM_error PeopleCode Z_ERROR_LOG.Z_ERR_CODE FieldFormula;
Declare Function Validate_IBU PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function Validate_Storage PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function Validate_Item PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function Validate_LOT PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function Validate_QTY PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function Validate_UOM PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function Validate_Reason_code PeopleCode Z_FUNCLIB_INV1.Z_INV_VALIDATIONS FieldFormula;
Declare Function GetErrorQueryURL PeopleCode Z_FUNCLIB_INV1.Z_INV_NOTIFICATION FieldFormula;
Declare Function RMA_FORM PeopleCode Z_RMA_TRACKING.RECEIPT_FLAG FieldFormula;

Component array of string &rma_Imp, &recv_rma_Imp;
Component File &LogFile;
Component string &Lot_Control;
Local Rowset &File_RS, &rowset, &Z_HDR, &Z_RMA_LN, &LINE_RMA;
Local string &Return_ID;
Local boolean &call_CI;
Component boolean &errorFlag;

Function NotifyError(&PROCESS_INSTANCE, &fileName);
   
   Local array of string &aryValues;
   Local array of PT_WF_NOTIFICATION:NotificationAddress &mynotifyto;
   Local PT_WF_NOTIFICATION:NotificationAddress &mynotifyaddress;
   Local PT_WF_NOTIFICATION:Notification &mynotification;
   &mynotifyto = CreateArrayRept(&mynotifyaddress, 0);
   rem &emailid = GetURL(URL."Z_PROCUREMENT_ADMIN_EMAIL");
   rem &emailid = "shailesh.d.choudhari@accenture.com";
   &emailid = "madhusudhan.kommineni@qwest.com";
   rem &emailid = GetURL(URL."Z_INV_ANALYST_ROLE");
   &mynotifyaddress = create PT_WF_NOTIFICATION:NotificationAddress(%UserId, "", %Language, &emailid, "Email");
   &mynotifyto.Push(&mynotifyaddress);
   &mynotifytemplate = create PT_WF_NOTIFICATION:NotificationTemplate("", "", "Z_RMA_DATA_ERR_1", "G");
   
   
   /* Populate an array to contain the values needed by the template */
   &aryValues = CreateArrayRept("", 0);
   /* Push Variables as per the Template (InOrder) */
   &aryValues.Push(&fileName);
   &aryValues.Push(&PROCESS_INSTANCE);
   &aryValues.Push(GetErrorQueryURL());
   &aryValues.Push(&emailid);
   
   &xmlVars = &mynotifytemplate.SetupGenericVars(&aryValues);
   &flg = &mynotifytemplate.GetAndExpandTemplate(%Language, &xmlVars);
   /* At this point, the &mynotifytemplate should have every value resolved */
   &mynotification = create PT_WF_NOTIFICATION:Notification("Z_MAIL_ADMIN", %Datetime, %Language);
   &mynotification.NotifyTo = &mynotifyto;
   &mynotification.Subject = &mynotifytemplate.Subject;
   &mynotification.Message = &mynotifytemplate.Text;
   &mynotification.Send();
   
End-Function;

Function errorHandler()
   Local ApiObject &oPSMessageCollection, &oPSMessage;
   Local number &i;
   Local string &sErrMsgSetNum, &sErrMsgNum, &sErrMsgText, &sErrType;
   
   &oPSMessageCollection = &oSession.PSMessages;
   For &i = 1 To &oPSMessageCollection.Count
      &oPSMessage = &oPSMessageCollection.Item(&i);
      &sErrMsgSetNum = &oPSMessage.MessageSetNumber;
      &sErrMsgNum = &oPSMessage.MessageNumber;
      &sErrMsgText = &oPSMessage.Text;
      &fileLog.WriteLine(&sErrType | " (" | &sErrMsgSetNum | "," | &sErrMsgNum | ") - " | &sErrMsgText);
   End-For;
   rem ***** Delete the Messages from the collection *****;
   &oPSMessageCollection.DeleteAll();
End-Function;

Function Insert_LOT(&RMA_line)
   
   Local ApiObject &LOTSession, &oZInvLotControl;
   Local File &LOTFILE;
   
   try
      &LOTSession = %Session;
      &LOTSession.PSMessagesMode = 3;
      
      rem ***** Get the Component Interface *****;
      &oZInvLotControl = &LOTSession.GetCompIntfc(CompIntfc.Z_INV_LOT_CONTROL);
      If &oZInvLotControl = Null Then
         errorHandler();
         throw CreateException(0, 0, "GetCompIntfc failed");
      End-If;
      
      rem ***** Set the Component Interface Mode *****;
      &oZInvLotControl.InteractiveMode = True;
      &oZInvLotControl.GetHistoryItems = True;
      &oZInvLotControl.EditHistoryItems = False;
      
      rem ***** Set Component Interface Get/Create Keys *****;
      &oZInvLotControl.BUSINESS_UNIT = &RMA_line.BUSINESS_UNIT.Value;
      &oZInvLotControl.INV_ITEM_ID = &RMA_line.INV_ITEM_ID.Value;
      &oZInvLotControl.INV_LOT_ID = &RMA_line.AUC_PREV_LOT_ID.Value;
      
      /* Check the Execute mode for the CI */
      If Not &oZInvLotControl.Get() Then
         If Not &oZInvLotControl.Create() Then
            errorHandler();
            throw CreateException(0, 0, "Create failed");
         Else
            &oZInvLotControl.DESCR = " ";
            &oZInvLotControl.LOT_BIRTHDATE = %Datetime;
            &oZInvLotControl.EXPIRATION_DATE = " ";
            &oZInvLotControl.RETEST_DATE = " ";
            &oZInvLotControl.AVAIL_DATE = %Datetime;
            &oZInvLotControl.AVAIL_STATUS = 1;
            &oZInvLotControl.AVAIL_STATUS_TYPE = " ";
            &oZInvLotControl.REASON_CD = " ";
            &oZInvLotControl.WARNING_MSG = " ";
            &oZInvLotControl.PURCH_LOT_ID = " ";
            &oZInvLotControl.INV_PROD_GRADE = " ";
            &oZInvLotControl.CONFIG_CODE = " ";
            &oZInvLotControl.QTY_ONHAND = 0;
            &oZInvLotControl.QTY_AVAILABLE = 0;
            &oZInvLotControl.QTY_ALLOCATED = 0;
            &oZInvLotControl.DT_TIMESTAMP = %Datetime;
            &oZInvLotControl.OPRID = %UserId;
         End-If;
         rem errorHandler();
         rem throw CreateException(0, 0, "Get failed");
      End-If;
      If Not &oZInvLotControl.Save() Then;
         errorHandler();
         throw CreateException(0, 0, "Save failed");
      End-If;
   catch Exception &ex
      rem Handle the exception;
      rem &fileLog.WriteLine(&ex.ToString());
   end-try;
   
End-Function;

/****************************************************************/
/* Build EIP_CTL_ID from the method and a value passed */

Function Build_EIP_CTL_ID(&METHOD, &PARM2) Returns string;
   &EIP_CTL_ID = Right(String(&METHOD), 1) | Right("000000000000000" | String(&PARM2), 15) | "000000001";
   Return &EIP_CTL_ID;
   
End-Function;

/****************************************************************/
/* Increment Sequence Portion of EIP_CTL_ID by 2 */

Function Increment_EIP_CTL_ID(&EIP_CTL_ID) Returns string;
   &NEXT_EIP_CTL_ID = Left(&EIP_CTL_ID, 16) | Right("000000000" | String(Value(Right(&EIP_CTL_ID, 9)) + 1), 9);
   Return &NEXT_EIP_CTL_ID;
   
End-Function;

Function GenerateFileID(&METHOD, &PARM2) Returns string
   
   /****************************************************************/
   /* Generate EIP_CTL_ID based on the method and parm passed */
   
   If (&METHOD = "R") Then
      rem &VALUE2 = Truncate((Rand() * 10**15), 0);
      &VALUE2 = Truncate((Rand() * 10 * 15), 0);
   Else
      Error MsgGet(18022, 114, "Method must be 1(random), 2(Process Instance), 3(Next Trans)or 4(SubscriptionProcessID).");
   End-If;
   /* Call Build EIP */
   SQLExec("SELECT COUNT(*) FROM PS_Z_RMA_FILEID", &count);
   If (&count = 0) Then
      &EIP_CTL_ID = Build_EIP_CTL_ID(&METHOD, &VALUE2);
   Else
      SQLExec("SELECT Max(FILE_ID) FROM PS_Z_RMA_FILEID", &eip);
      &EIP_CTL_ID = Increment_EIP_CTL_ID(&eip);
   End-If;
   Return &EIP_CTL_ID;
End-Function;

rem =================================================;
rem = Insert the File_ID for the RMA Data FLat File =;
rem =================================================;
Function InsertControl(&PROCESS_INSTANCE, &file_Id, &fileName);
   
   
   &INSERTCNTRL = CreateRecord(Record.Z_RMA_FILEID);
   &INSERTCNTRL.FILE_ID.Value = &file_Id;
   &INSERTCNTRL.PROCESS_INST_STG.Value = &PROCESS_INSTANCE;
   &INSERTCNTRL.FILENAME.Value = &fileName;
   &INSERTCNTRL.DATETIME_STAMP.Value = %Datetime;
   &INSERTCNTRL.Insert();
   
End-Function;

Function ImportData(&INPUT_ROWSET As Rowset, &file_Id, &fileName)
   
   rem === read Rowset ===;
   rem &INPUT_ROWSET = &ImportFile.ReadRowset();
   &File_Delete_Flag = False;
   &no_of_lines = 0;
   &line = 1;
   While &INPUT_ROWSET <> Null
      
      /* Read RMA Lines */
      &LINE_RMA = &INPUT_ROWSET.GetRow(1).GetRowset(1);
      
      For &I = 1 To &LINE_RMA.ActiveRowCount
         rem Z_RMA_LOAD_AET.ROW_COUNT = Z_RMA_LOAD_AET.ROW_COUNT + 1;
         /* Process  &INPUT_ROWSET */
         try
            &HDR = &INPUT_ROWSET(1).Z_HEADER;
            &RMA_line = &LINE_RMA(&I).Z_RMA_LINE;
            If None(&RMA_line.REASON_CD.Value) Then
               /* Set errorFlag to True*/
               &call_CI = False;
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "8";
               &error_message = MsgGetText(21000, 34, "Reason Code is Invalid");
               &yo_REASON = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.REASON_CD.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            If None(&RMA_line.UNIT_OF_MEASURE.Value) Then
               /* Set errorFlag to True */
               &call_CI = False;
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "10";
               &error_message = MsgGetText(21000, 4, "Message Not Found", "RMA Load", &fileName, &RMA_line.UNIT_OF_MEASURE.Value, &RMA_line.INV_ITEM_ID.Value);
               &yo_UOM = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.UNIT_OF_MEASURE.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            If None(&RMA_line.QTY_RETURNED.Value) Or
                  (&RMA_line.QTY_RETURNED.Value = 0) Then
               &call_CI = False;
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "2";
               &error_message = MsgGetText(21000, 14, "Quantity Must Be Greater Than Zero");
               &yo_QTY = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.QTY_RETURNED.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            rem === Validate IBU ===;
            &ret_IBU = Validate_IBU(&RMA_line.BUSINESS_UNIT.Value);
            If (&ret_IBU = True) Then
               If (&call_CI = False) Then
               Else
                  &call_CI = True;
               End-If;
            Else /* Validate IBU IF */
               &call_CI = False;
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "3";
               &error_message = MsgGetText(21000, 2, "Message Not Found", &fileName, &RMA_line.BUSINESS_UNIT.Value);
               &yo_BU = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.BUSINESS_UNIT.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
               /* Log SETID based errors */
               
               &LogFile.WriteLine(Rept("-", 40));
               rem &LogFile.WriteLine(MsgGetText(21000, 2, "Invalid IBU for Line No " | &line | " in File " | &file_Id));
               &LogFile.WriteLine("Invalid IBU for Line No " | &line | " in File " | &file_Id);
               &LogFile.WriteLine(" ");
               If All(&RMA_line.REFERENCE.Value) Then
                  &LogFile.WriteLine(MsgGetText(21000, 51, "Skipped this RMA in error", &RMA_line.DOCUMENT_ID.Value));
               Else
                  &LogFile.WriteLine("XML FLat File " | &file_Id | " with no Body");
                  /* Log PPM Error */
               End-If;
            End-If; /* IBU return true IF */
            rem === Validate Item ===;
            &ret_ITEM = Validate_Item(&RMA_line.BUSINESS_UNIT.Value, &RMA_line.INV_ITEM_ID.Value);
            If (&ret_ITEM = True) Then
               If (&call_CI = False) Then
               Else
                  &call_CI = True;
               End-If;
            Else
               &call_CI = False;
               &LogFile.WriteLine(Rept("-", 40));
               &LogFile.WriteLine(MsgGetText(21000, 1, "Invalid Item ID"));
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "13";
               &error_message = MsgGetText(21000, 1, "Message Not Found", &fileName, &RMA_line.INV_ITEM_ID.Value, &RMA_line.BUSINESS_UNIT.Value);
               &yo_ITEM = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.BUSINESS_UNIT.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If; /* Validate IBU/ITEM_ID IF */
            rem === Validate UOM ===;
            &ret_UOM = Validate_UOM(&RMA_line.BUSINESS_UNIT.Value, &RMA_line.INV_ITEM_ID.Value, &RMA_line.UNIT_OF_MEASURE.Value);
            
            If Not &ret_UOM Then
               &call_CI = False;
               /* Set errorFlag to True */
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "11";
               &error_message = MsgGetText(21000, 4, "Message Not Found", "RMA Load", &fileName, &RMA_line.UNIT_OF_MEASURE.Value, &RMA_line.INV_ITEM_ID.Value);
               &yo_UOM = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.UNIT_OF_MEASURE.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            Else
               If (&call_CI = False) Then
               Else
                  &call_CI = True;
               End-If;
            End-If;
            rem === Validate QTY ===;
            &ret_QTY = Validate_QTY(&RMA_line.QTY_RETURNED.Value);
            If Not &ret_QTY Then
               &call_CI = False;
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "12";
               &error_message = MsgGetText(21000, 14, "Quantity Must Be Greater Then Zero");
               &yo_QTY = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.QTY_RETURNED.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            Else
               If (&call_CI = False) Then
               Else
                  &call_CI = True;
               End-If;
            End-If;
            rem === Validate STORAGE AREA ===;
            &ret_STORAGE = Validate_Storage(&RMA_line.BUSINESS_UNIT.Value, &RMA_line.STORAGE_AREA.Value);
            If Not &ret_STORAGE Then
               &call_CI = False;
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "4";
               &error_message = MsgGetText(21000, 3, "Message Not Found", &fileName, &RMA_line.STORAGE_AREA.Value, &RMA_line.BUSINESS_UNIT.Value);
               &yo_STOR = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.STORAGE_AREA.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            Else
               If (&call_CI = False) Then
               Else
                  &call_CI = True;
               End-If;
            End-If;
            rem === Validate REASON_CODE ===;
            &ret_REASON = Validate_Reason_code(&RMA_line.BUSINESS_UNIT.Value, &RMA_line.REASON_CD.Value, "10");
            If Not &ret_REASON Then
               &call_CI = False;
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "9";
               &error_message = MsgGetText(21000, 34, "Reason Code is Invalid");
               &yo_REASON = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.REASON_CD.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            Else
               If (&call_CI = False) Then
               Else
                  &call_CI = True;
               End-If;
            End-If;
            /*** Validate CF ***/
            SQLExec("SELECT Z_JOBNO, Z_RCC, Z_ADRS FROM PS_CM_ACCTG_DIST_D WHERE BUSINESS_UNIT = :1 AND TRANSACTION_GROUP = '024'", &RMA_line.BUSINESS_UNIT.Value, &JOB, &RCC, &ADRS);
            SQLExec("SELECT COUNT(*) FROM PS_Z_FRC_LKUP_TBL WHERE BUSINESS_UNIT = :1", &RMA_line.BUSINESS_UNIT.Value, &FRC_COUNT);
            /*~~~Z_ADRS~~~*/
            If None(&ADRS) Then
               &call_CI = False;
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "13";
               &error_message = MsgGetExplainText(21000, 252, &RMA_line.BUSINESS_UNIT.Value, "Message Not found");
               &yo_JOB = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.BUSINESS_UNIT.Value, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            /*~~~Z_JOBNO~~~*/
            If None(&JOB) Then
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "15";
               &error_message = MsgGetExplainText(21000, 250, &RMA_line.BUSINESS_UNIT.Value, "Message Not found");
               &yo_JOB = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.BUSINESS_UNIT.Value, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            /*~~~Z_RCC~~~*/
            If None(&RCC) Then
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "14";
               &error_message = MsgGetExplainText(21000, 251, &RMA_line.BUSINESS_UNIT.Value, "Message Not found");
               &yo_JOB = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.BUSINESS_UNIT.Value, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            /*~~~Z_COMBD_CD~~~*/
            If (&FRC_COUNT = 0) Then
               /* Set errorFlag to True*/
               &errorFlag = True;
               /* Log_PPM_Error */
               &error_code = "16";
               &error_message = MsgGetExplainText(21000, 253, &RMA_line.BUSINESS_UNIT.Value, "Message Not found");
               &yo_JOB = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.BUSINESS_UNIT.Value, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            End-If;
            /*** Check whether the INV_ITEM_ID is LOT_CONTROLLED ***/
            SQLExec("SELECT LOT_CONTROL FROM PS_MASTER_ITEM_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", "USWC", &RMA_line.INV_ITEM_ID.Value, &Lot_Control);
            If (&Lot_Control = "Y") Then
               If All(&RMA_line.AUC_PREV_LOT_ID.Value) Then
                  If (&call_CI = True) Then
                     Insert_LOT(&RMA_line);
                     rem=== CALL RMA_FORMS CI ===;
                     rem=========================;
                     /* True Count of the rows processed */
                     Z_RMA_LOAD_AET.ROW_COUNT = Z_RMA_LOAD_AET.ROW_COUNT + 1;
                     &Return_ID = RMA_FORM(&RMA_line);
                  End-If;
               Else
                  /* Set errorFlag to True*/
                  &errorFlag = True;
                  /* Log_PPM_Error */
                  &error_code = "61";
                  &error_message = MsgGetText(21000, 5, "Invalid Lot ID");
                  &yo_LOT = Log_PPM_error("LRMA", &fileName, Z_RMA_LOAD_AET.PROCESS_INST_STG, &RMA_line.DOCUMENT_ID.Value, &I, &RMA_line.INV_ITEM_ID.Value, &RMA_line.AUC_PREV_LOT_ID.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
               End-If;
            Else
               If (&call_CI = True) Then
                  /* True Count of the rows processed */
                  Z_RMA_LOAD_AET.ROW_COUNT = Z_RMA_LOAD_AET.ROW_COUNT + 1;
                  &Return_ID = RMA_FORM(&RMA_line);
               End-If;
            End-If;
            
            If All(&Return_ID) Then
               &RMA_LN = "(" | &RMA_line.BUSINESS_UNIT.Value | ", " | &Return_ID | ")";
               &rma_Imp.Push(&RMA_LN);
               &temp = "";
               For &it = 1 To &rma_Imp.Len
                  &temp = "  " | &rma_Imp.Pop() | &temp;
               End-For;
               &LogFile.WriteLine(MsgGetText(21000, 49, "Imported RMA's:") | &temp);
               &LogFile.WriteLine(Left(String(%Time), 8) | " " | MsgGetText(5825, 113, "Number of rows imported", (Z_RMA_LOAD_AET.ROW_COUNT)));
            End-If;
            rem &LogFile.WriteLine(MsgGetText(21000, 50, "", &rma_Imp.Len));
            rem &yo = Log_PPM_error("LRMA", &BU_BODY, &INV_ITEM_ID, &SEQ_NBR, &file_Id, &KeyName5, &KeyName6, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
            
         catch Exception &c1
            &Error_desc = "Error encountered during processing the row:  " | &c1.ToString();
            /* Log PPM Error */
         end-try;
         CommitWork();
         &line = &line + 1;
      End-For;
      &INPUT_ROWSET = &ImportFile.ReadRowset();
   End-While;
   /* Delete the File currently processed */
   If &ImportFile.IsOpen Then
      &ImportFile.Delete();
   End-If;
End-Function;

Function File_RMA(&fileinformation As string, &file_Id, &fileName);
   
   &LogFile.WriteLine(Rept("-", 40));
   &LogFile.WriteLine("RMA File Import");
   &LogFile.WriteLine(" ");
   &LogFile.WriteLine(%Date | "   " | %Time);
   &LogFile.WriteLine(Rept("-", 40));
   /* Get the file in UTF-8 Format */
   try
      &ImportFile = GetFile(&fileinformation, "R", "UTF-8", %FilePath_Absolute);
   catch Exception &E1
      /* Cannot open file */
      &Interface_id = "LRMA";
      &error_code = "X10";
      &error_message = MsgGetExplainText(21000, 10, "Message Not Found", "Returns to Warehouse", &fileName, %Datetime);
      &ZKey1 = &fileName;
      &ZKey2 = Z_RMA_LOAD_AET.PROCESS_INST_STG;
      &ZKey3 = "";
      &ZKey4 = "";
      &ZKey5 = "";
      &ZKey6 = "";
      &yo = Log_PPM_error(&Interface_id, &ZKey1, &ZKey2, &ZKey3, &ZKey4, &ZKey5, &ZKey6, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, &error_code, &error_message);
      rem &LogFile.WriteLine(MsgGetText(21000, 112, "GetFile error", &fileinformation));
      &LogFile.WriteLine(MsgGetText(5825, 126, "GetFile error", &fileinformation));
      &LogFile.WriteLine(" ");
      &TotalError = &TotalError + 1;
      Exit (1);
   end-try;
   /* Set The File Layout */
   If &ImportFile.SetFileLayout(FileLayout.Z_RMA_LOAD_HD) Then
      &LogFile.WriteLine(" ");
      &LogFile.WriteLine(MsgGetText(21000, 42, "Processing file...", &file_Id));
      &LogFile.WriteLine(" ");
      &File_RS = &ImportFile.ReadRowset();
      &rma_Imp = CreateArrayRept("", 0);
      &recv_rma_Imp = CreateArrayRept("", 0);
      &call_CI = True;
      ImportData(&File_RS, &file_Id, &fileName);
      rem &ImportFile.Close();
   Else
      &LogFile.WriteLine(MsgGetText(21000, 43, "Set File Layout Failed...", &file_Id));
      &LogFile.WriteLine(" ");
   End-If;
End-Function;


Component Rowset &err_RS;
Component string &Lot_Control;
Component File &LogFile;
Component array of string &rma_Imp, &recv_rma_Imp;
Local File &fileLog, &fileLog_RECV;
Local SQL &LINE_SQL, &HDR_SQL, &update_HDR_SQL, &update_LN_SQL, &update_SQL, &SQL_FRC_LOCAL, &SQL_FRC_NATL;
Local Rowset &FRC_rowset;
Local ApiObject &oSession, &oZRmaFormInv;
Local ApiObject &oItemProdVwCollection, &oItemProdVw;
Local ApiObject &oInstallationCollection, &oInstallation;
Local ApiObject &oRmaLineCollection, &oRmaLine;
Local ApiObject &oInstallation2Collection, &oInstallation2;
Local ApiObject &oRmaLineAttVwCollection, &oRmaLineAttVw;
/* Retrieve the GL Business Unit */
Declare Function GET_BU_GL_IN PeopleCode FUNCLIB_PCINTFC.INV FieldFormula;

/**************************************
  Initialize and prepare reusable SQLs
 **************************************/
Function SQL_Init(&BU, &RMA_ID, &ITEM_ID)
   
   rem === RMA Header ===;
   rem &HDR_SQL = CreateSQL("SELECT RMA_ID FROM PS_Z_RMA_HDR WHERE BUSINESS_UNIT = :1", &BU);
   &HDR_SQL = CreateSQL("SELECT RMA_ID FROM PS_Z_RMA_HDR WHERE RMA_ID = :1", &RMA_ID);
   &HDR_SQL.TraceName = "Z_RMA_LOAD.PC.HDR." | &RMA_ID;
   &HDR_SQL.ReuseCursor = True;
   rem === AVG COST ===;
   /*
   &AVG_SQL = CreateSQL("SELECT QTY_ONHAND FROM PS_BU_ITEMS_INV WHERE BUSINESS_UNIT = :1 AND INV_ITEM_ID = :2", &BU, &ITEM_ID);
   &AVG_SQL.TraceName = "Z_RMA_LOAD.PC.AVG." | &RMA_ID;
   &AVG_SQL.ReuseCursor = True;
   */
   rem === RMA Line ===;
   rem &LINE_SQL = CreateSQL("SELECT LINE_NBR FROM PS_Z_RMA_LINE WHERE BUSINESS_UNIT = :1 AND RMA_ID = :2", &BU, &RMA_ID);
   rem &LINE_SQL.TraceName = "Z_RMA_LOAD.PC.LN." | &RMA_ID;
   rem &LINE_SQL.ReuseCursor = True;
   
End-Function;

Function Rotate_FRC(&BUSS_UNIT) Returns string
   
   SQLExec("SELECT COUNT(*) FROM PS_Z_FRC_LKUP_TBL WHERE BUSINESS_UNIT = :1 AND Z_LOC_CLASS_FLG = :2", &BUSS_UNIT, "L", &count_frc);
   &update_SQL = CreateSQL("UPDATE PS_Z_FRC_LKUP_TBL SET COUNTER = :1 WHERE BUSINESS_UNIT = :2 AND Z_LOC_CLASS_FLG = :3");
   &update_SQL.ReuseCursor = True;
   If (&count_frc <> 0) Then
      /* Retrieve Counter for either Local or National Type IBU */
      SQLExec("SELECT COUNTER FROM PS_Z_FRC_LKUP_TBL WHERE BUSINESS_UNIT = :1 AND Z_LOC_CLASS_FLG = :2", &BUSS_UNIT, "L", &Assign);
      &FRC_rowset = CreateRowset(Record.Z_FRC_LKUP_TBL);
      &FRC_rowset.Fill("WHERE BUSINESS_UNIT = :1 AND Z_LOC_CLASS_FLG = :2", &BUSS_UNIT, "L");
      For &y = 1 To &FRC_rowset.ActiveRowCount
         If (&Assign >= &count_frc) Then
            /* Reset the Counter to 1 */
            &update_SQL.Execute(1, &BUSS_UNIT, "L");
         Else
            &new_count = &Assign + 1;
            &update_SQL.Execute(&new_count, &BUSS_UNIT, "L");
         End-If;
         &ret_FRC = &FRC_rowset(&Assign).Z_FRC_LKUP_TBL.Z_COMBD_CD.Value;
         Return &ret_FRC
      End-For;
   Else
      SQLExec("SELECT COUNTER FROM PS_Z_FRC_LKUP_TBL WHERE BUSINESS_UNIT = :1 AND Z_LOC_CLASS_FLG = :2", &BUSS_UNIT, "N", &Assign);
      &FRC_rowset = CreateRowset(Record.Z_FRC_LKUP_TBL);
      &FRC_rowset.Fill("WHERE BUSINESS_UNIT = :1 AND Z_LOC_CLASS_FLG = :2", &BUSS_UNIT, "N");
      For &y = 1 To &FRC_rowset.ActiveRowCount
         If (&Assign >= &count_frc) Then
            &update_SQL.Execute(1, &BUSS_UNIT, "N");
            Return &ret_FRC;
         Else
            &new_count = &Assign + 1;
            &update_SQL.Execute(&new_count, &BUSS_UNIT, "N");
         End-If;
         &ret_FRC = &FRC_rowset(&Assign).Z_FRC_LKUP_TBL.Z_COMBD_CD.Value;
      End-For;
   End-If;
   Return &ret_FRC;
End-Function;

Function Calculate_AVG_COST(&COST, &RMA_QTY, &ACT_COST, &RMA_line) Returns number
   /*
   &AVG_SQL = CreateSQL("SELECT QTY_ONHAND FROM PS_BU_ITEMS_INV WHERE BUSINESS_UNIT = :1 AND INV_ITEM_ID = :2", &RMA_line.BUSINESS_UNIT.Value, &RMA_line.INV_ITEM_ID.Value);
   &AVG_SQL.TraceName = "Z_RMA_LOAD.PC.AVG." | &RMA_line.DOCUMENT_ID.Value;
   &AVG_SQL.ReuseCursor = True;
   
   While &AVG_SQL.fetch(&QTY);
   End-While;
   */
   SQLExec("SELECT QTY_ONHAND FROM PS_BU_ITEMS_INV WHERE BUSINESS_UNIT = :1 AND INV_ITEM_ID = :2", &RMA_line.BUSINESS_UNIT.Value, &RMA_line.INV_ITEM_ID.Value, &QTY);
   /*
    Impaired cost = (([On Hand Inv]*[Impaired Cost fromPS db]) + 
				    ([RMA Qty(in File)]*[Provided Cost on RMA])) / 
					([On Hand Inv]+[RMA Qty]) 
   */
   rem &QTY_1 = NumberToString("%6.3", Value((&QTY)*(&rma_arr [22])));
   SQLExec("SELECT Z_AVG_IMPRCOST FROM PS_Z_IMPRCOST_TBL WHERE BUSINESS_UNIT = :1 AND INV_ITEM_ID = :2 AND EFFDT = (SELECT MAX(EFFDT) FROM PS_Z_IMPRCOST_TBL WHERE BUSINESS_UNIT = :1 AND INV_ITEM_ID = :2)", &RMA_line.BUSINESS_UNIT.Value, &RMA_line.INV_ITEM_ID.Value, &Z_AVG_COST);
   
   &QTY_1 = Round(&QTY * &Z_AVG_COST, 3);
   &QTY_2 = Round(&RMA_QTY * &COST, 3);
   &QTY_3 = Round(&QTY + &RMA_QTY, 3);
   &FINAL_QTY = Round((&QTY_1 + &QTY_2) / &QTY_3, 3);
   
   Return &FINAL_QTY;
End-Function;

rem ==========================;
rem = Insert into Z_IMPRCOST =;
rem ==========================;

Function Insert_Z_IMPRCOST(&RMA_line);
   Local Record &IMP_COST;
   &IMP_COST = CreateRecord(Record.Z_IMPRCOST_TBL);
   &IMP_COST.BUSINESS_UNIT.Value = &RMA_line.BUSINESS_UNIT.Value;
   &IMP_COST.INV_ITEM_ID.Value = &RMA_line.INV_ITEM_ID.Value;
   &IMP_COST.EFFDT.Value = %Date;
   &IMP_COST.COST_ELEMENT.Value = "MATL";
   &COST = &RMA_line.Z_RMA_COST.Value;
   &QTY_RET = &RMA_line.QTY_RETURNED.Value;
   &ACT_COST = &RMA_line.ACTUAL_COST.Value;
   &IMP_COST.Z_RMA_IMP_COST.Value = &COST;
   &AVG = Calculate_AVG_COST(&COST, &QTY_RET, &ACT_COST, &RMA_line);
   &IMP_COST.Z_AVG_IMPRCOST.Value = &AVG;
   &Date = %Date;
   /*
   If Not &IMP_COST.SelectByKeyEffDt(&Date) Then
      &IMP_COST.Insert();
   Else
      &IMP_COST.Update();
   End-If;
   */
   &Update = &IMP_COST.Update(&IMP_COST);
   If Not &Update Then
      &IMP_COST.Insert();
   End-If;
End-Function;

Function Insert_RMA_TRACKING(&RMA_line, &NEW_RMA_ID, &RECV_ID, &JOB, &RCC, &ADRS, &Assign_FRC);
   
   Local Record &Z_RMA_TRKN;
   &Z_RMA_TRKN = CreateRecord(Record.Z_RMA_TRACKING);
   &Z_RMA_TRKN.BUSINESS_UNIT.Value = &RMA_line.BUSINESS_UNIT.Value;
   &Z_RMA_TRKN.RMA_ID.Value = &NEW_RMA_ID;
   &Z_RMA_TRKN.RMA_LINE_NBR.Value = 1;
   &Z_RMA_TRKN.RECEIVER_ID.Value = &RECV_ID;
   &Z_RMA_TRKN.Z_AD_HOC_RMA_FLG.Value = "Y";
   &Z_RMA_TRKN.INV_ITEM_ID.Value = &RMA_line.INV_ITEM_ID.Value;
   &Z_RMA_TRKN.QTY_RETURNED.Value = &RMA_line.QTY_RETURNED.Value;
   &Z_RMA_TRKN.Z_DEPOT_BVAPP.Value = &RMA_line.Z_DEPOT_BVAPP.Value;
   &Z_RMA_TRKN.RMA_DATE.Value = %Date;
   &Z_RMA_TRKN.DATETIME_ADDED.Value = %Datetime;
   &Z_RMA_TRKN.RECEIPT_FLAG.Value = "Y";
   &Z_RMA_TRKN.CANCEL_FLAG.Value = "N";
   &Z_RMA_TRKN.RECEIPT_DT.Value = %Date;
   &Z_RMA_TRKN.QTY_RECEIVED.Value = &RMA_line.QTY_RETURNED.Value;
   &Z_RMA_TRKN.STORAGE_AREA.Value = &RMA_line.STORAGE_AREA.Value;
   &Z_RMA_TRKN.STOR_LEVEL_1.Value = "01";
   &Z_RMA_TRKN.STOR_LEVEL_2.Value = "01";
   &Z_RMA_TRKN.Z_NAT_RMA_ID.Value = &RMA_line.DOCUMENT_ID.Value;
   If All(&RMA_line.Z_JOBNO.Value) Then
      &Z_RMA_TRKN.Z_JOBNO.Value = &RMA_line.Z_JOBNO.Value;
   Else
      &Z_RMA_TRKN.Z_JOBNO.Value = &JOB;
   End-If;
   If All(&RMA_line.Z_RCC.Value) Then
      &Z_RMA_TRKN.Z_DEPOT_RC_CD.Value = &RMA_line.Z_RCC.Value;
   Else
      &Z_RMA_TRKN.Z_DEPOT_RC_CD.Value = &RCC;
   End-If;
   If All(&RMA_line.Z_ADRS.Value) Then
      &Z_RMA_TRKN.Z_ADRS.Value = &RMA_line.Z_ADRS.Value;
   Else
      &Z_RMA_TRKN.Z_ADRS.Value = &ADRS;
   End-If;
   &Z_RMA_TRKN.RMA_STATUS.Value = "";
   &Z_RMA_TRKN.TRANSACTION_DTTM.Value = "";
   &Z_RMA_TRKN.Z_RMA_COST.Value = &RMA_line.ACTUAL_COST.Value;
   &Z_RMA_TRKN.STATE.Value = &RMA_line.STATE_OF_INCORP.Value;
   
   &Z_RMA_TRKN.REASON_CD.Value = &RMA_line.REASON_CD.Value;
   &Z_RMA_TRKN.Z_RMA_IMP_COST.Value = &RMA_line.Z_RMA_COST.Value;
   
   If &Z_RMA_TRKN.Save() Then
      MessageBox(0, "", 0, 0, "Save Success for Z_RMA_TRACKING");
   Else
      MessageBox(0, "", 0, 0, "Save FAILED!!! for Z_RMA_TRACKING");
   End-If;
   
End-Function;

Function Orig_Rma(&BU As string, &RMA_ID As string, &QTY As number, &INV As string) Returns boolean
   
   rem ============================;
   rem = Verify RMA_ID from Field =;
   rem ============================;
   
   /* Query the Z_RMA_HDR table to verify the RMA ID */
   
   Evaluate &HDR_SQL.Status
   When = %SQLStatus_OK
      While &HDR_SQL.Fetch(&exists);
         &HDR_SQL.LTrim = True;
         &SQL_STR = &HDR_SQL.Value;
         If All(&exists) Then
            &update_HDR_SQL = CreateSQL("UPDATE PS_Z_RMA_HDR SET Z_RMA_RECEIVED = 'Y', RMA_STATUS = 'C' WHERE RMA_ID = :1");
            &update_HDR_SQL.Execute(&RMA_ID);
            If &update_HDR_SQL.RowsAffected = 0 Then
               /* We did not Update any rows.  */
            Else
               &update_LN_SQL = CreateSQL("UPDATE PS_Z_RMA_LINE SET QTY_RECEIVED = :1 , RMA_LINE_STATUS = 'C' WHERE RMA_ID = :2 AND INV_ITEM_ID = :3");
               &update_LN_SQL.Execute(&QTY, &RMA_ID, &INV);
               If &update_LN_SQL.RowsAffected = 0 Then
               Else
                  &Flag = True;
               End-If;
            End-If;
         End-If;
         &Flag = False;
      End-While;
      Break;
   When = %SQLStatus_NotFound
      Error ("HDR Not Found");
      Break;
   When = %SQLStatus_Duplicate
      Error ("DUPLICATE HDR");
      Break;
   End-Evaluate;
   /*   
   If (&HDR_SQL.Status = 0) Then
      While &HDR_SQL.Fetch(&RMA_ID, &RMA_ID1);
         &HDR_SQL.LTrim = True;
      End-While;
   End-If;
*/
   &HDR_SQL.Close();
   Return &Flag;
   
End-Function;

Function errorHandler(&NEW_RMA_ID)
   Local ApiObject &oPSMessageCollection, &oPSMessage;
   Local number &i, &LEN, &START, &NSTART, &FLEN;
   Local boolean &FIND;
   Local string &sErrMsgSetNum, &sErrMsgNum, &sErrMsgText, &sErrType, &SOURCE, &TEXT;
   
   &oPSMessageCollection = &oSession.PSMessages;
   For &i = 1 To &oPSMessageCollection.Count
      &oPSMessage = &oPSMessageCollection.Item(&i);
      If &oPSMessage.Type = 1 Then
         &TEXT = &oPSMessage.text;
         &SOURCE = &oPSMessage.Source;
         &LEN = Len(&SOURCE);
         &FIND = False;
         &START = Find(".", &SOURCE);
         While Not (&FIND)
            &NSTART = Find(".", &SOURCE, &START + 1);
            If &NSTART = 0 Then
               &FIND = True;
            Else
               &START = &NSTART;
            End-If;
         End-While;
         &FLEN = &LEN - &START;
         &FIELD = Substring(&SOURCE, &START + 1, &FLEN);
         MessageBox(0, "", 999, 9999, "You received the following error: " | &TEXT | "For field " | &FIELD);
      End-If;
      &sErrMsgSetNum = &oPSMessage.MessageSetNumber;
      &sErrMsgNum = &oPSMessage.MessageNumber;
      &sErrMsgText = &oPSMessage.Text;
      &fileLog.WriteLine(&NEW_RMA_ID | " | Error Details " | &sErrType | " (" | &sErrMsgSetNum | "," | &sErrMsgNum | ") - " | &sErrMsgText);
   End-For;
   rem ***** Delete the Messages from the collection *****;
   &oPSMessageCollection.DeleteAll();
End-Function;

Function RECV_errorHandler(&RECV_ID);
   
   Local ApiObject &RECV_PSMessageCollection, &RECV_PSMessage;
   Local number &i, &LEN, &START, &NSTART, &FLEN;
   Local boolean &FIND;
   Local string &sErrMsgSetNum, &sErrMsgNum, &sErrMsgText, &sErrType, &SOURCE, &TEXT;
   
   &RECV_PSMessageCollection = &RECV_Session.PSMessages;
   For &i = 1 To &RECV_PSMessageCollection.Count
      &RECV_PSMessage = &RECV_PSMessageCollection.Item(&i);
      If &RECV_PSMessage.Type = 1 Then
         &TEXT = &RECV_PSMessage.text;
         &SOURCE = &RECV_PSMessage.Source;
         &LEN = Len(&SOURCE);
         &FIND = False;
         &START = Find(".", &SOURCE);
         While Not (&FIND)
            &NSTART = Find(".", &SOURCE, &START + 1);
            If &NSTART = 0 Then
               &FIND = True;
            Else
               &START = &NSTART;
            End-If;
         End-While;
         &FLEN = &LEN - &START;
         &FIELD = Substring(&SOURCE, &START + 1, &FLEN);
         MessageBox(0, "", 999, 9999, "You received the following error: " | &TEXT | "For field " | &FIELD);
      End-If;
      &sErrMsgSetNum = &RECV_PSMessage.MessageSetNumber;
      &sErrMsgNum = &RECV_PSMessage.MessageNumber;
      &sErrMsgText = &RECV_PSMessage.Text;
      &fileLog_RECV.WriteLine(&RECV_ID | " | Error Details " | &sErrType | " (" | &sErrMsgSetNum | "," | &sErrMsgNum | ") - " | &sErrMsgText);
   End-For;
   rem ***** Delete the Messages from the collection *****;
   &RECV_PSMessageCollection.DeleteAll();
End-Function;

Function Call_RECV(&RMA_line, &NEW_RMA_ID, &JOB, &RCC, &ADRS, &Assign_FRC) Returns string
   rem SetTracePC(2048);
   rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
   rem ===========================;
   rem = Auto-receive RMA's in PS ;
   rem ===========================;
   try
      
      rem ***** Set the Log File *****;
      &fileLog_RECV = GetFile("/psoft/fscmsys/interface/conversion/in/Z_RECV_RMA.log", "w", "a", %FilePath_Absolute);
      &fileLog_RECV.WriteLine("Begin");
      
      &RECV_Session = %Session;
      
      &RECV_Session.PSMessagesMode = 3;
      rem &RECV_ID = GenerateReceiverID(&RMA_line.BUSINESS_UNIT.Value);
      
      rem ***** Get the Component Interface *****;
      &oZRecvRma = &RECV_Session.GetCompIntfc(CompIntfc.Z_RECV_RMA);
      If &oZRecvRma = Null Then
         RECV_errorHandler(&oZRecvRma.RECEIVER_ID);
         throw CreateException(0, 0, "GetCompIntfc failed");
      End-If;
      
      rem ***** Set the Component Interface Mode *****;
      &oZRecvRma.InteractiveMode = True;
      &oZRecvRma.GetHistoryItems = False;
      &oZRecvRma.EditHistoryItems = False;
      /* Set This property to True ALWAYS */
      &oZRecvRma.stoponfirsterror = True;
      
      rem ***** Set Component Interface Get/Create Keys *****;
      &oZRecvRma.BUSINESS_UNIT = &RMA_line.BUSINESS_UNIT.Value;
      &oZRecvRma.RECEIVER_ID = "NEXT";
      &receiptType = "RMA";
      &oZRecvRma.RECEIPT_TYPE = &receiptType;
      
      rem ***** Execute Create ******;
      If Not &oZRecvRma.Create() Then;
         rem ***** Unable to Create Component Interface for the Add keys provided. *****;
         RECV_errorHandler(&oZRecvRma.RECEIVER_ID);
         throw CreateException(0, 0, "Create failed");
      End-If;
      
      
      rem ***** Begin: Get/Set Component Interface Properties *****;
      &oZRecvRma.BILL_OF_LADING = " ";
      &oZRecvRma.INV_RECV_STATUS = "C";
      &oZRecvRma.PORT_OF_UNLOADING = "";
      &oZRecvRma.PUTAWAY_ACTION = "S";
      &oZRecvRma.STORAGE_AREA_0 = &RMA_line.STORAGE_AREA.Value;
      &oZRecvRma.STOR_LEVEL_1_0 = "01";
      &oZRecvRma.STOR_LEVEL_2_0 = "01";
      &oZRecvRma.BUSINESS_UNIT_PC = "101";
      
      rem ***** Set/Get INV_RECV_VW Collection Field Properties -- Parent: PS_ROOT Collection *****;
      &oInvRecvVwCollection = &oZRecvRma.INV_RECV_VW;
      &oInvRecvVw = &oInvRecvVwCollection.Item(1);
      
      &oInvRecvVw.BUSINESS_UNIT_RMA = &RMA_line.BUSINESS_UNIT.Value;
      &oInvRecvVw.DESTIN_BU = &RMA_line.BUSINESS_UNIT.Value;
      &oInvRecvVw.BUSINESS_UNIT_IN = &RMA_line.BUSINESS_UNIT.Value;
      &oInvRecvVw.RETURN_TO_IBU = &RMA_line.BUSINESS_UNIT.Value;
      &oInvRecvVw.RMA_ID = &NEW_RMA_ID;
      &oInvRecvVw.RMA_LINE_NBR = 1;
      &oInvRecvVw.INV_ITEM_ID_1 = &RMA_line.INV_ITEM_ID.Value;
      &oInvRecvVw.QTY_RECEIPT = &RMA_line.QTY_RETURNED.Value;
      &oInvRecvVw.UNIT_MEASURE_STD = &RMA_line.UNIT_OF_MEASURE.Value;
      &oInvRecvVw.UNIT_MEASURE_SHIP = &RMA_line.UNIT_OF_MEASURE.Value;
      &oInvRecvVw.UOM_QTY_RETURN = &RMA_line.UNIT_OF_MEASURE.Value;
      &oInvRecvVw.SELECT_FLAG = "Y";
      /*
      rem ***** Set INV_RECV_SER_VW Collection Field Properties -- Parent: INV_RECV_VW Collection *****;
      &oInvRecvSerVwCollection = &oInvRecvVw.INV_RECV_SER_VW;
      &oInvRecvSerVw = &oInvRecvSerVwCollection.Item(1);
      
      rem &oInvRecvSerVw.SELECT_FLAG_1 = [*];
      rem &oInvRecvSerVw.QTY = [*];
      */
      rem ***** Set/Get INV_RECV_LN Collection Field Properties -- Parent: PS_ROOT Collection *****;
      &oInvRecvLnCollection = &oZRecvRma.INV_RECV_LN;
      &oInvRecvLn = &oInvRecvLnCollection.Item(1);
      
      &oInvRecvLn.RECV_LN_NBR = 1;
      &oInvRecvLn.BUSINESS_UNIT_IN_1 = &RMA_line.BUSINESS_UNIT.Value;
      &oInvRecvLn.INV_ITEM_ID_3 = &RMA_line.INV_ITEM_ID.Value;
      /* Associate the earlier created RMA_ID in this run with the TO BE generated Receiver ID */
      &oInvRecvLn.RMA_ID_1 = &NEW_RMA_ID;
      &oInvRecvLn.INV_RECVLN_STATUS = "C";
      &oInvRecvLn.SOURCE_BUS_UNIT = &RMA_line.BUSINESS_UNIT.Value;
      &oInvRecvLn.UNIT_OF_MEASURE_1 = &RMA_line.UNIT_OF_MEASURE.Value;
      &oInvRecvLn.UNIT_MEASURE_STD = &RMA_line.UNIT_OF_MEASURE.Value;
      &oInvRecvLn.QTY_INV_RECV = &RMA_line.QTY_RETURNED.Value;
      &oInvRecvLn.QTY_STD = &RMA_line.QTY_RETURNED.Value;
      &oInvRecvLn.DISTRIB_TYPE = &RMA_line.DISTRIB_TYPE.Value;
      &oInvRecvLn.RECEIPT_DT = %Date;
      &oInvRecvLn.RECEIPT_TM = %Time;
      
      rem ***** Set INV_RECV_CF_TMP Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
      &oInvRecvCfTmpCollection = &oInvRecvLn.INV_RECV_CF_TMP;
      &oInvRecvCfTmp = &oInvRecvCfTmpCollection.Item(1);
      
      &oInvRecvCfTmp.PROJECT_ID = " ";
      If All(&RMA_line.Z_JOBNO.Value) Then
         &oInvRecvCfTmp.Z_JOBNO = &RMA_line.Z_JOBNO.Value;
      Else
         &oInvRecvCfTmp.Z_JOBNO = &JOB;
      End-If;
      If All(&RMA_line.Z_RCC.Value) Then
         &oInvRecvCfTmp.Z_RCC = &RMA_line.Z_RCC.Value;
      Else
         &oInvRecvCfTmp.Z_RCC = &RCC;
      End-If;
      If All(&RMA_line.Z_ADRS.Value) Then
         &oInvRecvCfTmp.Z_ADRS = &RMA_line.Z_ADRS.Value;
      Else
         &oInvRecvCfTmp.Z_ADRS = &ADRS;
      End-If;
      If All(&RMA_line.Z_COMBD_CD.Value) Then
         &oInvRecvCfTmp.Z_COMBD_CD = &RMA_line.Z_COMBD_CD.Value;
      Else
         &oInvRecvCfTmp.Z_COMBD_CD = &Assign_FRC;
      End-If;
      /*
      rem ***** Set INV_RECV_SHPSER Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
      &oInvRecvShpserCollection = &oInvRecvLn.INV_RECV_SHPSER;
      &oInvRecvShpser = &oInvRecvShpserCollection.Item(1);
      
      rem &oInvRecvShpser.SELECT_CB = [*];
      rem &oInvRecvShpser.SERIAL_ID_1 = [*];
      rem &oInvRecvShpser.INV_LOT_ID = [*];
      */
      rem ***** Set INV_RECV_SERIAL Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
      &oInvRecvSerialCollection = &oInvRecvLn.INV_RECV_SERIAL;
      &oInvRecvSerial = &oInvRecvSerialCollection.Item(1);
      
      rem &oInvRecvSerial.CONTAINER_ID_1 = [*];
      &oInvRecvSerial.QTY_1 = &RMA_line.QTY_RETURNED.Value;
      &oInvRecvSerial.SERIAL_ID_3 = "NONE";
      If (&Lot_Control = "Y") Then
         &oInvRecvSerial.UNIT_OF_MEASURE_3 = &RMA_line.UNIT_OF_MEASURE.Value;
         /* Check whether the Item is Lot Controlled - Assign LOT_ID only if the Item is Lot Controlled */
         &oInvRecvSerial.LOT_ID_1 = &RMA_line.AUC_PREV_LOT_ID.Value;
      End-If;
      
      rem ***** Set STAGED_IRCV_VW Collection Field Properties -- Parent: INV_RECV_LN Collection *****;
      &oStagedIrcvVwCollection = &oInvRecvLn.STAGED_IRCV_VW;
      &oStagedIrcvVw = &oStagedIrcvVwCollection.Item(1);
      
      /* Check whether the Item is Lot Controlled - Assign LOT_ID only if the Item is Lot Controlled */
      &oStagedIrcvVw.BUSINESS_UNIT = &RMA_line.BUSINESS_UNIT.Value;
      &oStagedIrcvVw.SOURCE_BUS_UNIT = &RMA_line.BUSINESS_UNIT.Value;
      &oStagedIrcvVw.RECEIPT_TYPE = &receiptType;
      &oStagedIrcvVw.RMA_ID = &NEW_RMA_ID;
      &oStagedIrcvVw.RMA_LINE_NBR = 1;
      
      If (&Lot_Control = "Y") Then
         &oStagedIrcvVw.INV_LOT_ID_1 = &RMA_line.AUC_PREV_LOT_ID.Value;
      End-If;
      
      &oStagedIrcvVw.SERIAL_ID_5 = "NONE";
      &oStagedIrcvVw.INV_ITEM_ID = &RMA_line.INV_ITEM_ID.Value;
      &oStagedIrcvVw.QTY_3 = &RMA_line.QTY_RETURNED.Value;
      &oStagedIrcvVw.UNIT_OF_MEASURE_5 = &RMA_line.UNIT_OF_MEASURE.Value;
      &oStagedIrcvVw.STORAGE_AREA_1 = &RMA_line.STORAGE_AREA.Value;
      &oStagedIrcvVw.STOR_LEVEL_1_1 = "01";
      &oStagedIrcvVw.STOR_LEVEL_2_1 = "01";
      
      rem ***** End: Get/Set Component Interface Properties *****;
      
      rem ***** Execute Save *****;
      If Not &oZRecvRma.Save() Then;
         RECV_errorHandler(&oZRecvRma.RECEIVER_ID);
         throw CreateException(0, 0, "Save failed");
      Else
         &Return_RECV_ID = &oZRecvRma.RECEIVER_ID;
         rem &LogFile.WriteLine("Receiver ID " | &oZRecvRma.RECEIVER_ID | " associated with RMA_ID " | &NEW_RMA_ID);
         Insert_RMA_TRACKING(&RMA_line, &NEW_RMA_ID, &oZRecvRma.RECEIVER_ID, &JOB, &RCC, &ADRS, &Assign_FRC);
      End-If;
      rem ***** Execute Cancel *****;
      If Not &oZRecvRma.Cancel() Then;
         RECV_errorHandler(&oZRecvRma.RECEIVER_ID);
         throw CreateException(0, 0, "Cancel failed");
      End-If;
      
   catch Exception &ex
      rem Handle the exception;
      &fileLog_RECV.WriteLine(&ex.ToString());
   end-try;
   &fileLog_RECV.WriteLine("End");
   &fileLog_RECV.Close();
   
   Return &Return_RECV_ID;
End-Function; /* Call_RECV */


Function RMA_FORM(&RMA_line) Returns string
   rem SetTracePC(%TracePC_Assigns + %TracePC_ParamsOut + %TracePC_Starts + %TracePC_Functions + %TracePC_ParamsIn);
   rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
   rem ==========================;
   rem = Auto-Create RMA's in PS ;
   rem ==========================;
   try;
      
      rem ***** Get current PeopleSoft Session *****;
      &oSession = %Session;
      /* Set the Message Mode */
      &oSession.PSMessagesMode = 3;
      /* Generate the RMA ID */
      rem &NEW_RMA_ID = RetrieveNEXT_RMA_ID(&RMA_line.BUSINESS_UNIT.Value);
      rem ***** Get the Component Interface *****;
      &oZRmaFormInv = &oSession.GetCompIntfc(CompIntfc.Z_RMA_FORM_INV);
      If &oZRmaFormInv = Null Then
         errorHandler(&oZRmaFormInv.RMA_ID);
         throw CreateException(0, 0, "GetCompIntfc failed");
      End-If;
      
      rem ***** Set the Component Interface Mode *****;
      &oZRmaFormInv.InteractiveMode = True;
      &oZRmaFormInv.GetHistoryItems = False;
      &oZRmaFormInv.EditHistoryItems = False;
      /* Set This property to True ALWAYS */
      &oZRmaFormInv.stoponfirsterror = True;
      
      rem ***** Set Component Interface Get/Create Keys *****;
      &oZRmaFormInv.BUSINESS_UNIT = &RMA_line.BUSINESS_UNIT.Value;
      rem &NEW_RMA_ID = RetrieveNEXT_RMA_ID(&oZRmaFormInv.BUSINESS_UNIT);
      &oZRmaFormInv.RMA_ID = "NEXT";
      rem=== As per FDD ===;
      &oZRmaFormInv.RETURN_FROM_OPTION = "I";
      /* Retrieve Return from Location and other chart fields */
      SQLExec("SELECT Z_JOBNO, Z_RCC, Z_ADRS FROM PS_CM_ACCTG_DIST_D WHERE BUSINESS_UNIT = :1 AND TRANSACTION_GROUP = '024'", &RMA_line.BUSINESS_UNIT.Value, &JOB, &RCC, &ADRS);
      If None(&RMA_line.Z_ADRS.Value) Then
         &oZRmaFormInv.RETURN_FROM_LOC = &ADRS;
      Else
         &oZRmaFormInv.RETURN_FROM_LOC = &RMA_line.Z_ADRS.Value;
      End-If;
      &oZRmaFormInv.RETURN_FR_CUST_ID = "";
      
      rem ***** Execute Create ******;
      If Not &oZRmaFormInv.Create() Then;
         rem ***** Unable to Create Component Interface for the Add keys provided. *****;
         errorHandler(&oZRmaFormInv.RMA_ID);
         throw CreateException(0, 0, "Create failed");
      End-If;
      
      rem ***** Get/Set Level 0 Field Properties *****;
      /* Initiate SQL's */
      SQL_Init(&RMA_line.BUSINESS_UNIT.Value, &RMA_line.DOCUMENT_ID.Value, &RMA_line.INV_ITEM_ID.Value);
      
      /* Check whether the RMA originated from PS/3PL */
      &O_RMA = Orig_Rma(&RMA_line.BUSINESS_UNIT.Value, &RMA_line.DOCUMENT_ID.Value, &RMA_line.QTY_RETURNED.Value, &RMA_line.INV_ITEM_ID.Value);
      
      &oZRmaFormInv.ADDRESS_SEQ_SHIP = "0";
      &oZRmaFormInv.DISTRIB_TYPE = &RMA_line.DISTRIB_TYPE.Value;
      &oZRmaFormInv.REASON_CD = &RMA_line.REASON_CD.Value;
      &oZRmaFormInv.RETURN_TO_IBU = &RMA_line.BUSINESS_UNIT.Value;
      &oZRmaFormInv.RMA_APPROVED_FLAG = "N";
      &oZRmaFormInv.RMA_DATE = %Date;
      &oZRmaFormInv.RMA_STATUS = "O";
      &oZRmaFormInv.EST_RETURN_DT = %Date;
      &oZRmaFormInv.EST_RETURN_TM = %Time;
      &oZRmaFormInv.INV_ITEM_ID = &RMA_line.INV_ITEM_ID.Value;
      
      rem ***** Set/Get INSTALLATION Collection Field Properties -- Parent: PS_ROOT Collection *****;
      &oInstallationCollection = &oZRmaFormInv.INSTALLATION;
      &oInstallation = &oInstallationCollection.Item(1);
      
      If None(&oInstallation.BUSINESS_UNIT_GL) Then
         &oInstallation.BUSINESS_UNIT_GL = GET_BU_GL_IN(&oZRmaFormInv.RETURN_TO_IBU);
      End-If;
      &oInstallation.SETID = GetSetId("BUSINESS_UNIT", &oInstallation.BUSINESS_UNIT_GL, Record.GL_ACCT_BUGL_VW, "");;
      &oInstallation.PROJECT_ID = " ";
      If All(&RMA_line.Z_JOBNO.Value) Then
         &oInstallation.Z_JOBNO = RTrim(LTrim(&RMA_line.Z_JOBNO.Value));
      Else
         /* Retrieve Z_JOBNO from Transaction Accounting Rules */
         &oInstallation.Z_JOBNO = &JOB;
      End-If;
      If All(&RMA_line.Z_RCC.Value) Then
         &oInstallation.Z_RCC = RTrim(LTrim(&RMA_line.Z_RCC.Value));
      Else
         /* Retrieve Z_RCC from Transaction Accounting Rules */
         &oInstallation.Z_RCC = &RCC
      End-If;
      If All(&RMA_line.Z_ADRS.Value) Then
         &oInstallation.Z_ADRS = RTrim(LTrim(&RMA_line.Z_ADRS.Value));
      Else
         /* Retrieve Z_ADRS from Transaction Accounting Rules */
         &oInstallation.Z_ADRS = &ADRS
      End-If;
      If All(&RMA_line.Z_COMBD_CD.Value) Then
         &oInstallation.Z_COMBD_CD = RTrim(LTrim(&RMA_line.Z_COMBD_CD.Value));
      Else
         /* Rotate FRC Codes for this IBU */
         &Assign_FRC = Rotate_FRC(&RMA_line.BUSINESS_UNIT.Value);
         &oInstallation.Z_COMBD_CD = &Assign_FRC;
      End-If;
      
      rem ***** Set/Get RMA_LINE Collection Field Properties -- Parent: PS_ROOT Collection *****;
      &oRmaLineCollection = &oZRmaFormInv.RMA_LINE;
      
      &oRmaLine = &oRmaLineCollection.Item(1);
      &oRmaLine.RMA_LINE_NBR = 1;
      &oRmaLine.INV_ITEM_ID_1 = &RMA_line.INV_ITEM_ID.Value;
      &QTY_RETURNED = &RMA_line.QTY_RETURNED.Value;
      &oRmaLine.QTY_RETURNED = &RMA_line.QTY_RETURNED.Value;
      &oRmaLine.RMA_LINE_STATUS = "O";
      
      rem ***** Set INSTALLATION2 Collection Field Properties -- Parent: RMA_LINE Collection *****;
      &oInstallation2Collection = &oRmaLine.INSTALLATION2;
      &oInstallation2 = &oInstallation2Collection.Item(1);
      
      &oInstallation2.PROJECT_ID_3 = " ";
      &oInstallation2.Z_JOBNO_1 = &oInstallation.Z_JOBNO;
      &oInstallation2.Z_RCC_1 = &oInstallation.Z_RCC;
      &oInstallation2.Z_ADRS_1 = &oInstallation.Z_ADRS;
      &oInstallation2.Z_COMBD_CD_1 = &oInstallation.Z_COMBD_CD;
      
      If (&Lot_Control = "Y") Then
         rem ***** Set RMA_SERIAL_LOT Collection Field Properties -- Parent: RMA_LINE Collection *****;
         &oRmaSerialLotCollection = &oRmaLine.RMA_SERIAL_LOT;
         &oRmaSerialLot = &oRmaSerialLotCollection.Item(1);
         
         &oRmaSerialLot.LOT_ID = &RMA_line.AUC_PREV_LOT_ID.Value;
         &oRmaSerialLot.QTY = &RMA_line.QTY_RETURNED.Value;
      End-If;
      
      rem ***** Execute Save *****;
      If Not &oZRmaFormInv.Save() Then
         errorHandler(&oZRmaFormInv.RMA_ID);
         throw CreateException(0, 0, "Save failed");
      Else
         &ID_RMA = &oZRmaFormInv.RMA_ID;
         Insert_Z_IMPRCOST(&RMA_line);
         &Return_RECV_ID = Call_RECV(&RMA_line, &ID_RMA, &JOB, &RCC, &ADRS, &Assign_FRC);
         
         If All(&Return_RECV_ID) Then
            &RECV_RMA_LN = "(" | &RMA_line.BUSINESS_UNIT.Value | ", " | &ID_RMA | ", " | &Return_RECV_ID | ")";
            &recv_rma_Imp.Push(&RECV_RMA_LN);
            &recvtemp = "";
            For &recv = 1 To &recv_rma_Imp.Len
               &recvtemp = "  " | &recv_rma_Imp.Pop() | &recvtemp;
            End-For;
            &LogFile.WriteLine(" ");
            &LogFile.WriteLine(MsgGetText(21000, 78, "Imported Receipts:") | &recvtemp);
         End-If;
         rem Return &ID_RMA;
      End-If;
      
      rem ***** Execute Cancel *****;
      If Not &oZRmaFormInv.Cancel() Then;
         errorHandler(&oZRmaFormInv.RMA_ID);
         throw CreateException(0, 0, "Cancel failed");
      End-If;
      
   catch Exception &ex
      rem Handle the exception;
      rem &fileLog.WriteLine(&ex.ToString());
   end-try;
   Return &ID_RMA;
End-Function; /* RMA_FORM */



Component number &val;
Component Rowset &rsFRC;

&rsFRC = GetLevel0()(1).GetRowset(Scroll.Z_FRC_LKUP_TBL);
&val = &rsFRC(1).Z_FRC_LKUP_TBL.COUNTER.Value;

Z_FRC_LKUP_TBL.Z_COMBD_CD.ShowRequiredFieldCue = True;
If (Z_FRC_LKUP_TBL.Z_LOC_CLASS_FLG = "N") Then
   SetLabel(Z_FRC_LKUP_TBL.Z_COMBD_CD, "National FRC");
Else
   SetLabel(Z_FRC_LKUP_TBL.Z_COMBD_CD, "Local FRC");
End-If;


&LOC = GetField(Z_FRC_LKUP_TBL.Z_LOC_CLASS_FLG);
&LOC.SearchDefault = True;
&LOC.SearchEdit = True;


/************************** $Qwest$ *********************************
ITR#:     QR4EIN005
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added code to Insert/Update Z_INV_DMD_TBL for the MSR Lines
/********************************************************************/

/*************************************** $Qwest$ *********************/
/* RICEF #: QR4IIN011 */
/* NAME: Roopa Vani   */
/* DATE: 02/08/2007    */
/* DESCR: Added code to store custom fields in Z_INV_DMD_TBL.         */
/*********************************************************************/

Declare Function Create_Auto_Reserve_Request PeopleCode FUNCLIB_ININTFC.RUN_RESERVATIONS FieldFormula;
Local boolean &FUNC_RETURN;

/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to declare various variables used */
Component boolean &Retail, &y;
Component number &Count;
Component string &Imp_Parms_Upd, &ID;
Component array of string &Arr_ITEM;
Local Record &Z_INV_DMD, &Old_rec, &MAResvWrk;
Local Rowset &LVL0RS;

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */


If (DF_SETUP_INV.AUTO_RSRV_FLAG = "Y") Then
   &FUNC_RETURN = Create_Auto_Reserve_Request(ISSUE_HDR_VW.BUSINESS_UNIT, ISSUE_HDR_VW.DEMAND_SOURCE, ISSUE_HDR_VW.SOURCE_BUS_UNIT, ISSUE_HDR_VW.ORDER_NO);
End-If;


/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to Update/Insert Z_INV_DMD_TBL */

&rsDMD = GetLevel0()(1).GetRowset(Scroll.DEMAND_TI_VW);
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.DEMAND_WRK_INV);
&Z_INV_DMD = CreateRecord(Record.Z_INV_DMD_TBL);
&Old_rec = CreateRecord(Record.Z_INV_DMD_TBL);
/* Retrieve the DESCR254 for the ORDER_NO */
&custom_descr = "SHIP CONFIRM ONLY";
rem &Add_Descr = &custom_descr | " : " | &descr254;

/* Fire only for Non Retail BU's */
If (&Retail = False) Then
   For &I = 1 To &rsDMD.ActiveRowCount;
      
      &Z_INV_DMD.BUSINESS_UNIT.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).BUSINESS_UNIT.Value;
      &Z_INV_DMD.DEMAND_SOURCE.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DEMAND_SOURCE.Value;
      &Z_INV_DMD.SOURCE_BUS_UNIT.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).SOURCE_BUS_UNIT.Value;
      &Z_INV_DMD.ORDER_NO.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).ORDER_NO.Value;
      &Z_INV_DMD.ORDER_INT_LINE_NO.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).ORDER_INT_LINE_NO.Value;
      &Z_INV_DMD.SCHED_LINE_NO.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).SCHED_LINE_NO.Value;
      &Z_INV_DMD.INV_ITEM_ID.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).INV_ITEM_ID.Value;
      &Z_INV_DMD.DEMAND_LINE_NO.Value = &rsDMD.GetRow(&I).DEMAND_TI_VW.DEMAND_LINE_NO.Value;
      
      /*Begin QWEST QR4IIN011 Roopa Vani - 02/08/2007  PSCIO/Release4 */
      
      &MAResvWrk = &LVL0RS.GetRow(1).GetRecord(Record.Z_MA_RESV_WRK);
      &Z_INV_DMD.Z_ENGINEER_NAME.Value = &MAResvWrk.OPRID.Value;
      &Z_INV_DMD.Z_ENGINEER_PHONE.Value = &MAResvWrk.Z_ENGINEER_PHONE.Value;
      &Z_INV_DMD.Z_RESV_DATE.Value = &MAResvWrk.Z_RESV_DATE.Value;
      &Z_INV_DMD.Z_BVAPP_NUMBER.Value = &MAResvWrk.Z_BVAPP_NUMBER.Value;
      
      /*End QWEST QR4IIN011 Roopa Vani - 02/08/2007  PSCIO/Release4 */
      
      
      /* Assign Key Values to Old Record to Update */
      
      &Old_rec.BUSINESS_UNIT.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).BUSINESS_UNIT.Value;
      &Old_rec.DEMAND_SOURCE.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DEMAND_SOURCE.Value;
      &Old_rec.SOURCE_BUS_UNIT.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).SOURCE_BUS_UNIT.Value;
      &Old_rec.ORDER_NO.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).ORDER_NO.Value;
      &Old_rec.ORDER_INT_LINE_NO.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).ORDER_INT_LINE_NO.Value;
      &Old_rec.SCHED_LINE_NO.Value = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).SCHED_LINE_NO.Value;
      rem &Old_rec.INV_ITEM_ID.Value = &ID;
      
      If (&I <= &Arr_ITEM.Len) Then
         &Old_rec.INV_ITEM_ID.Value = &Arr_ITEM [&I];
      End-If;
      &Old_rec.DEMAND_LINE_NO.Value = &rsDMD.GetRow(&I).DEMAND_TI_VW.DEMAND_LINE_NO.Value;
      
      If GetLevel0()(1).DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Value = "Y" Then
         &Z_INV_DMD.Z_DMND_PUB_FLG.Value = "N";
         &Z_INV_DMD.Z_ER_PUB_FLG.Value = "N";
         &Z_INV_DMD.Z_SHIP_ONLY_FLG.Value = "Y";
         &Z_INV_DMD.Z_ACK_FLG.Value = "N";
         &Z_INV_DMD.Z_PICK_FLAG.Value = "N";
         &descr254 = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.Value;
         &Add_Descr = &custom_descr | " : " | &descr254;
         If %Mode = "A" Then
            &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.Value = &Add_Descr;
         Else
            If (&rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.IsChanged) Then
               &old_descr = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.Value;
               &POS = Find("SHIP CONFIRM ONLY", &old_descr, 1);
               If (&POS = 0) Then
                  &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.Value = &Add_Descr;
               End-If;
            Else
               rem &DESCR = &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.Value;
               If (&y = True) Then
                  If (&I > &Count) Then
                     &rsDMD.GetRow(&I).GetRecord(Record.DEMAND_TI_VW).DESCR254.Value = &Add_Descr;
                  End-If;
               End-If;
            End-If;
         End-If;
      Else
         &Z_INV_DMD.Z_DMND_PUB_FLG.Value = "N";
         &Z_INV_DMD.Z_ER_PUB_FLG.Value = "N";
         &Z_INV_DMD.Z_SHIP_ONLY_FLG.Value = "N";
         &Z_INV_DMD.Z_ACK_FLG.Value = "N";
         &Z_INV_DMD.Z_PICK_FLAG.Value = "N";
      End-If;
      &Z_INV_DMD.DT_TIMESTAMP.Value = %Datetime;
      
      If (&Imp_Parms_Upd = "U") Then
         &ret_val = &Z_INV_DMD.Update(&Old_rec);
         If (&ret_val = False) Then
            &Z_INV_DMD.Insert();
         End-If;
      Else
         &Z_INV_DMD.Insert();
      End-If;
      rem &Imp_Parms_Upd = "";
      &LVL0REC.Z_SHIP_ONLY_FLG.Enabled = False;
   End-For;
End-If;
For &t = 1 To &Arr_ITEM.Len
   &Arr_ITEM.Pop();
End-For;

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */


/************************** $Qwest$ ************************************
ITR#:     QR4EIN005
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added code to control the diplaying of the Ship Confirmation 
          Only Flag based on the Role and Mode in which the user logs in
/***********************************************************************/

/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to Set Variables */

Component boolean &Retail;
Component number &Count;
Component array of string &Arr_ITEM;
Local Rowset &RS;

Declare Function verify_destin_bu PeopleCode FUNCLIB_IN.DESTIN_BU FieldFormula;
Declare Function get_iu_attributes_from PeopleCode FUNCLIB_IN.DESTIN_BU FieldFormula;
Declare Function iu_ownership PeopleCode FUNCLIB_IN.DESTIN_BU FieldFormula;

&Arr_ITEM = CreateArrayRept("", 0);

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */

Page.MATERIAL_ISS1_INV.Visible = False;
Page.MATERIAL_ISS2_INV.Visible = False;
Page.MATERIAL_ISS3_INV.Visible = False;
Page.MATERIAL_ISS5_INV.Visible = False;
&WRK_REC = GetLevel0().GetRow(1).GetRecord(Record.DEMAND_WRK_INV);
&WRK_REC.MSR_SUMMARY_PB.Enabled = False;
&WRK_REC.QTY_DATE_DTL_PB.Enabled = True;
&WRK_REC.SHIPMENT_DTL_PB.Enabled = True;
&WRK_REC.ACCT_IUT_DTL_PB.Enabled = True;
&WRK_REC.COMMENTS_PB.Enabled = True;


/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to control the display of the Custom flag */

/* Retrieve the BU Details */

&MSR_REC = GetLevel0().GetRow(1).GetRecord(Record.ISSUE_HDR_VW);
&rsDMD = GetLevel0()(1).GetRowset(Scroll.DEMAND_TI_VW);
&Count = &rsDMD.ActiveRowCount;
&BU = &MSR_REC.BUSINESS_UNIT.Value;
&ORD_NO = &MSR_REC.ORDER_NO.Value;
SQLExec("SELECT BUSINESS_UNIT FROM PS_Z_IBU_REF_TBL WHERE Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", &BU, &NON_BU);
&Retail = False;
If All(&NON_BU) Then
   If %Mode = "A" Then
      If IsUserInRole("Z_Inventory Analyst", "Z_Procurement Support") Then
         &WRK_REC.Z_SHIP_ONLY_FLG.Visible = True;
         &bAllowAccess = True;
      Else
         &WRK_REC.Z_SHIP_ONLY_FLG.Enabled = False;
         &WRK_REC.Z_SHIP_ONLY_FLG.Visible = True;
         &bAllowAccess = False;
      End-If;
   Else
      If IsUserInRole("Z_Inventory Analyst", "Z_Procurement Support") Then
         &WRK_REC.Z_SHIP_ONLY_FLG.Visible = True;
         &WRK_REC.Z_SHIP_ONLY_FLG.Enabled = False;
      Else
         &WRK_REC.Z_SHIP_ONLY_FLG.Enabled = False;
         &WRK_REC.Z_SHIP_ONLY_FLG.Visible = True;
      End-If;
      SQLExec("SELECT Z_SHIP_ONLY_FLG FROM PS_Z_INV_DMD_TBL WHERE BUSINESS_UNIT = :1 AND ORDER_NO = :2", &BU, &ORD_NO, &Z_SHIP_ONLY);
      &WRK_REC.Z_SHIP_ONLY_FLG.value = &Z_SHIP_ONLY;
   End-If;
Else
   &Retail = True;
   &WRK_REC.Z_SHIP_ONLY_FLG.Visible = False;
   rem MessageBox(0, "", 0, 0, " Retail BU " | &Retail);
End-If;
/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */


/************************** $Qwest$ *******************************
ITR#:     QR4EIN005
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added code to Delete rows from all peer tables where 
		  the user deleted the demand row
/******************************************************************/

/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to Delete rows from all peer tables where the user deleted the demand row */

Local Record &DmdPeer, &DmdRec;
Local number &A;

&A = CurrentRowNumber();
&Row = GetLevel0()(1).GetRowset(Scroll.DEMAND_TI_VW).GetRow(&A);
&DmdRec = &Row.GetRecord(Record.DEMAND_TI_VW);
If &Row.IsDeleted Then
   /* Delete rows from all peer tables where the user deleted the demand row */
   &DmdPeer = CreateRecord(Record.Z_INV_DMD_TBL);
   &DmdRec.CopyFieldsTo(&DmdPeer);
   &DmdPeer.Delete();
End-If;

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */


/************************** $Qwest$ ******************************
ITR#:     QR4EIN005
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added code to retrieve the prior value in the buffer for 
          INV_ITEM_ID
/*****************************************************************/
/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to declare various variables used */

Component string &ID;
Component array of string &Arr_ITEM;

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */

/* R-HGILBE-SA4CV - SP2 Deferred Processing.  Remove gray/ungray and hide/unhide logic, and set default logic as well. */

Declare Function compute_rtr PeopleCode FUNCLIB_ININTFC.INV_ITEM_ID FieldFormula;
Declare Function set_dflt_uom PeopleCode FUNCLIB_ININTFC.INV_ITEM_ID FieldFormula;
Declare Function get_curr_cd PeopleCode FUNCLIB_ININTFC.BUSINESS_UNIT FieldFormula;
Declare Function get_dflt_dest PeopleCode FUNCLIB_ININTFC.BUSINESS_UNIT FieldFormula;
Declare Function get_dflt_shipinfo PeopleCode FUNCLIB_ININTFC.BUSINESS_UNIT FieldFormula;
Declare Function get_def_distr PeopleCode FUNCLIB_ININTFC.BUSINESS_UNIT FieldFormula;
Declare Function get_cf PeopleCode FUNCLIB_ININTFC.BUSINESS_UNIT FieldFormula;
Declare Function get_proj_info PeopleCode FUNCLIB_ININTFC.BUSINESS_UNIT FieldFormula;
Declare Function find_transfer_yield PeopleCode FUNCLIB_ININTFC.TRANSFER_YIELD FieldFormula;
Declare Function calc_transfer_yield PeopleCode FUNCLIB_ININTFC.TRANSFER_YIELD FieldFormula;
Declare Function comp_transf_cost PeopleCode FUNCLIB_ININTFC.TOTAL_COST FieldFormula;
Declare Function lot_alloc_chk PeopleCode FUNCLIB_ININTFC.LOT_ALLOCATION1 FieldFormula;
Declare Function Iut_Arrv_Date PeopleCode FUNCLIB_ININTFC.INV_ITEM_ID FieldFormula;

Function ez_issue_item_chg
   /* Compute the RTR date. */
   compute_rtr();
   /* Get the base currency code (if field is blank). */
   get_curr_cd();
   /* Get the default destination (if fields are blank). */
   get_dflt_dest();
   /* Get the default shipping info (if fields are blank). */
   get_dflt_shipinfo();
   /* Get the distribution type (if field is blank), and pull down the override GL business unit if one was entered. */
   get_def_distr();
   /* Get the ChartFields as long as the line is NOT an interunit transfer. */
   If ISSUE_HDR_VW.REQUEST_TYPE2 <> "U" Then
      get_cf();
      get_proj_info();
   End-If;
   /* See if we can default the order UOM. */
   set_dflt_uom();
   
   /* Initialize quantities back to zero. */
   If %PanelGroup <> PanelGroup.MATERIAL_ISSUES Then
      SetDefault(DEMAND_WRK_INV.QTY_REQUESTED_ORIG);
      SetDefault(DEMAND_WRK_INV.QTY_REQ_ORIG_BASE);
      SetDefault(DEMAND_WRK_INV.QTY_TO_SHIP);
      SetDefault(DEMAND_TI_VW.QTY_REQUESTED);
      SetDefault(DEMAND_TI_VW.QTY_REQUESTED_BASE);
   End-If;
   /*
    Check to see if there is a planned loss for this transaction.  If the quantity requested has been entered, calculate the inflated quantity that needs to be shipped (using the planned loss value).  Also calculate the total transfer cost if necessary.
*/
   If %PanelGroup = PanelGroup.MATERIAL_ISSUES Then
      If ISSUE_HDR_VW.REQUEST_TYPE2 = "U" Then
         DEMAND_TI_VW.INTERUNIT_FLG = "Y";
         DEMAND_TI_VW.DESTIN_BU = MSR_HDR_INV.DESTIN_BU;
         DEMAND_TI_VW.DIRECT_INVOICING = MSR_HDR_INV.DIRECT_INVOICING;
         DEMAND_TI_VW.TRANSFER_YIELD = find_transfer_yield(DEMAND_TI_VW.DESTIN_BU, DEMAND_TI_VW.INV_ITEM_ID, DEMAND_TI_VW.BUSINESS_UNIT, DEMAND_TI_VW.SHIP_TYPE_ID, DEMAND_TI_VW.REQUEST_DATE);
         If Not None(DEMAND_WRK_INV.QTY_REQUESTED_ORIG) Then
            DEMAND_TI_VW.QTY_REQUESTED = calc_transfer_yield(DEMAND_TI_VW.TRANSFER_YIELD, DEMAND_WRK_INV.QTY_REQUESTED_ORIG);
            DEMAND_WRK_INV.QTY_TO_SHIP = DEMAND_TI_VW.QTY_REQUESTED;
         End-If;
      End-If;
      SetDefault(DEMAND_TI_VW.TRANSFER_COST);
      SetDefault(DEMAND_TI_VW.PRICE_MARKUP_PCT);
      SetDefault(PANELS2_INV_WRK.TOTAL_COST);
      If None(DEMAND_TI_VW.LOAD_ID) Then
         If All(BU_ITEMS_INV.SHIP_TYPE_ID) And
               None(DEMAND_TI_VW.SHIP_TYPE_ID) Then
            DEMAND_TI_VW.SHIP_TYPE_ID = BU_ITEMS_INV.SHIP_TYPE_ID;
         End-If;
         /* 
   This has to be done after SHIP_TYPE_ID assignment and only for an Inter
   Unit Transfer order.
*/
         If DEMAND_TI_VW.INTERUNIT_FLG = "Y" Then
            Iut_Arrv_Date(DEMAND_TI_VW.DESTIN_BU, DEMAND_TI_VW.INV_ITEM_ID, DEMAND_TI_VW.BUSINESS_UNIT, DEMAND_TI_VW.SHIP_TYPE_ID, %Date, "N", 0, 0);
         End-If;
      End-If;
      /*
       Flush the lot allocation scroll.
   */
      &ROW = CurrentRowNumber();
      &DEMAND_REC = Record.DEMAND_TI_VW;
      &LOT_ALLOC_REC = Record.LOT_ALLC_INV_VW;
      &ITEM = DEMAND_TI_VW.INV_ITEM_ID;
      &QTY = DEMAND_TI_VW.QTY_REQUESTED;
      &ORDR_UOM = DEMAND_TI_VW.UNIT_OF_MEASURE;
      &LOT_CONTROL = MASTER_ITEM_TBL.LOT_CONTROL;
      &LOT_ALLOC_FLG = BUS_UNIT_TBL_IN.LOT_ALLOC_FLG;
      &APPROVED = DEMAND_TI_VW.APPROVED_FLAG;
      &AUTO_APPROVAL = DF_SETUP_INV.AUTO_DEMD_APPROVE;
      lot_alloc_chk(&ROW, "Y", &DEMAND_REC, &LOT_ALLOC_REC, &ITEM, &QTY, &ORDR_UOM, &LOT_CONTROL, &LOT_ALLOC_FLG, &APPROVED, &AUTO_APPROVAL);
      /*
          If the Configurator is installed and this is a configured item,
          clear out any previous configurator code that might have been entered.
      */
      If INSTALLATION.CP = "Y" Then
         &CFG_CODE_OPT = FetchValue(MASTER_ITEM_TBL.CFG_CODE_OPT, &ROW);
         If &CFG_CODE_OPT <> "Y" Then
            SetDefault(DEMAND_TI_VW.CONFIG_CODE);
         End-If;
      End-If;
   End-If;
   
   /* check for existance of partial_qty and backorder_cancel flags at the item level.  Otherwise get them from the BU. */
   
   &PART_QTY = "";
   &BCKORDR_CNCL = "";
   
   SQLExec("select PARTIAL_QTY_FLAG, BCKORDR_CNCL_FLAG from ps_df_setup_it_inv where business_unit = :1 and inv_item_id = :2", DEMAND_TI_VW.BUSINESS_UNIT, DEMAND_TI_VW.INV_ITEM_ID, &PART_QTY, &BCKORDR_CNCL);
   
   If None(&PART_QTY) Then
      DEMAND_TI_VW.PARTIAL_QTY_FLAG = DF_SETUP_INV.PARTIAL_QTY_FLAG;
   Else
      DEMAND_TI_VW.PARTIAL_QTY_FLAG = &PART_QTY
   End-If;
   If None(&BCKORDR_CNCL) Then
      DEMAND_TI_VW.BCKORDR_CNCL_FLAG = DF_SETUP_INV.BCKORDR_CNCL_FLAG;
   Else
      DEMAND_TI_VW.BCKORDR_CNCL_FLAG = &BCKORDR_CNCL
   End-If;
   If DEMAND_TI_VW.PARTIAL_QTY_FLAG = "Y" And
         PANELS2_INV_WRK.PARTIAL_ORDER_FLAG = "N" Then
      DEMAND_TI_VW.PARTIAL_QTY_FLAG = "N"
   End-If;
   
   /* clear out the config-code */
   SetDefault(DEMAND_TI_VW.CONFIG_CODE);
   
End-Function;

&Arr_ITEM = CreateArrayRept("", 0); /* creates an empty array of string */

ez_issue_item_chg();
/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to retrieve the Prior value for INV_ITEM_ID */

&ID = PriorValue(DEMAND_TI_VW.INV_ITEM_ID, CurrentRowNumber());
&Arr_ITEM.Push(&ID);
/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */


/************************** $Qwest$ ************************************
ITR#:     QR4EIN005
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added code to identify the new row added for an existing MSR
/***********************************************************************/

/* Increment the Order Line Number */
Declare Function incr_ord_line PeopleCode FUNCLIB_ININTFC.ORDER_NO FieldFormula;

/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to Set Variables */

Component boolean &y;
Component number &Count;

If (CurrentRowNumber() > &Count) Then
   &y = True;
End-If;
/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */

incr_ord_line();


/************************** $Qwest$ *******************************
ITR#:     QR4EIN005
NAME:     Prashant Prakash
DATE:     11/15/2006
DESCR:    Added code to set the component variable based on the 
		  Mode in which the user logs in
/******************************************************************/

/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to Set the Mode */

Component string &Imp_Parms_Upd;

If %Mode = "A" Then
   &Imp_Parms_Upd = "I";
Else
   &Imp_Parms_Upd = "U";
   rem MessageBox(0, "", 0, 0, "&Imp_Parms_Upd " | &Imp_Parms_Upd);
End-If;

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */

/* Begin QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 
   This code was added to issue a Message to the user when he checks the SHip Confirmation Only Flag */
If %Mode = "A" Then
   /*
   If (DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Value = "Y") Then
      &yo = MessageBox(%MsgStyle_YesNo, "", 21000, 30, "Message Not Found");
   End-If;
   If (&yo = %MsgResult_Yes) Then
      DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Enabled = False;
   Else
      Warning (MsgGetText(21000, 61, "Error"));
      DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Value = "N";
      DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Enabled = True;
   End-If;
   */
   If (DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Value = "Y") Then
      Warning (MsgGetText(21000, 30, "Message Not Found"));
   End-If;
   rem DEMAND_WRK_INV.Z_SHIP_ONLY_FLG.Enabled = False;
End-If;

/* End QWEST QR4EIN005 Prashant Prakash 11/15/2006 PSCIO-R4 */



/**********************************$QWEST$************************************
Modification or custom object:  Custom 
CR or TR#:                      QR3IPO002
By:                             Prashant Prakash
Date:                           01/08/2006
Project:                        Z_QR3IPO002_PRJ
Reason:                         Email/Delegation Update
*******************************************************************************/

Declare Function PrcsDelg_Msg PeopleCode Z_DELG_HIST_TBL.Z_DELEGATOR_USERID FieldFormula;
Declare Function MsgEdit PeopleCode Z_DELG_HIST_TBL.Z_DELEGATOR_USERID FieldFormula;
Declare Function Log_PPM_error PeopleCode Z_ERROR_LOG.Z_ERR_CODE FieldFormula;
Declare Function LogError PeopleCode Z_USER_INTR_TBL.EMAILID_VNDR FieldFormula;
Declare Function PrcsEmail_Msg PeopleCode Z_USERPREF_E_VW.OPRID FieldFormula;

Local Message &MSG;
Local Rowset &MsgRowset;
Local XmlDoc &Request, &ResXml, &z_request_xml;
Global string &Pubnode, &Channel, &Subchannel, &Message_ID;
Global number &PubId;
Global Rowset &err_RS;
Local array of XmlNode &DELEGATOR_USERID, &DELEGATE_USERID, &START_DATE, &END_DATE;
Local array of XmlNode &ZCUID, &IsEmailUser;

&Request = GetMessageXmlDoc();

rem &URL = GetURL(URL.Z_XML_NAMESPACE_URL);
&URL = "http://peoplesoft.com/PSUSERPREFREQUESTRequest";
/* Retrieve the CUID */
&ZCUID = &Request.DocumentElement.GetElementsByTagNameNS(&URL, "CUID");
For &iCUID = 1 To &ZCUID.Len
   &Z_CUID = &ZCUID.Get(&iCUID);
End-For;
/* Retrieve the User Preferences */
&IsEmailUser = &Request.DocumentElement.GetElementsByTagNameNS(&URL, "ISEMAILUSER");
For &iEmail = 1 To &IsEmailUser.Len
   &Is_Email = &IsEmailUser.Get(&iEmail);
End-For;
/* Retrieve the Delegated User ID*/
&DELEGATE_USERID = &Request.DocumentElement.GetElementsByTagNameNS(&URL, "PSDELEGATEDUSERID");
For &i = 1 To &DELEGATE_USERID.Len
   &Z_DELEGATE_USERID = &DELEGATE_USERID.Get(&i);
End-For;
/* Retrieve the Start Date of Delegation */
&START_DATE = &Request.DocumentElement.GetElementsByTagNameNS(&URL, "STARTDATE");
For &i = 1 To &START_DATE.Len
   &Z_START_DATE = &START_DATE.Get(&i);
End-For;
/* Retrieve the End Date of Delegation */
&END_DATE = &Request.DocumentElement.GetElementsByTagNameNS(&URL, "ENDDATE");
For &i = 1 To &END_DATE.Len
   &Z_END_DATE = &END_DATE.Get(&i);
End-For;
/* Retrieve Node Values */
&Z_CUID_VALUE = Upper(&Z_CUID.NodeValue);
&Is_Email_VALUE = &Is_Email.NodeValue;
&Z_DELEGATE_VALUE = Upper(&Z_DELEGATE_USERID.NodeValue);
&Z_START_DATE_VALUE = &Z_START_DATE.NodeValue;
&Z_END_DATE_VALUE = &Z_END_DATE.NodeValue;
/* Retrieve the XML without the Wrapper */

&str = MsgGetExplainText(20000, 108, "", &Z_CUID_VALUE, &Is_Email_VALUE, &Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE);

&Data = "<?xml version='1.0'?>" | &str;

&z_request_xml = CreateXmlDoc(&Data);
rem &r = &z_request_xml.ParseXmlString(&Data);

&outStr = &z_request_xml.GenFormattedXmlString();

&MSG = CreateMessage(Message.Z_USER_PREF_MSG);
&MSG.LoadXMLString(&outStr);

/* Retrieve the Message Rowset */
&MsgRowset = &MSG.GetRowset();
/* Retrieve Values from the Rowset */
&err_RS = CreateRowset(Record.Z_ERROR_LOG);
&OPRID = &MsgRowset(1).Z_USERPREF_E_VW.OPRID.Value;
&ISUSER = &MsgRowset(1).Z_USERPREF_E_VW.EMAIL_USER_SW.Value;
&DELEGATE = &MsgRowset(1).Z_USERPREF_E_VW.Z_DELEGATE_USERID.Value;

/* Message Parameters */
&Pubnode = &MSG.PubNodeName;
&Channel = &MSG.ChannelName;
&PubId = &MSG.PubID;
&Message_ID = &MSG.Name;
If All(&Z_CUID_VALUE) Then
   /* Perform Edits on the Message */
   &err_status = MsgEdit(&MSG);
   /* Check Delegation values */
   If Not (&err_status) Then
      If (All(&Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE) Or
            None(&Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE)) Then
         If (&Z_START_DATE_VALUE <= &Z_END_DATE_VALUE) Then
            &err_status_delg = PrcsDelg_Msg(&MsgRowset);
            If Not &err_status_delg Then
               &Status = "00";
            Else
               &Status = "20";
            End-If;
         Else
            &Status = "10";
            LogError(&Z_CUID_VALUE, &Is_Email_VALUE, &Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE, "10", "Invalid Delegation Dates: Start Date is greater than End Date");
         End-If;
      Else
         If (None(&Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE)) Then
            &err_status_email = PrcsEmail_Msg(&MsgRowset);
            If Not &err_status_email Then
               &Status = "10";
            Else
               &Status = "00";
            End-If;
         Else
            &Status = "10";
            &errMsg = "Delegation to: " | "'" | &Z_DELEGATE_VALUE | "'" | " failed for: " | "'" | &Z_CUID_VALUE | "'" | " from Start Date: " | "'" | &Z_START_DATE_VALUE | "'" | " to End Date: " | "'" | &Z_END_DATE_VALUE | "'";
            LogError(&Z_CUID_VALUE, &Is_Email_VALUE, &Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE, "10", &errMsg);
         End-If;
      End-If;
   Else
      &Status = "10";
   End-If;
Else
   &Status = "10";
   LogError(&Z_CUID_VALUE, &Is_Email_VALUE, &Z_DELEGATE_VALUE, &Z_START_DATE_VALUE, &Z_END_DATE_VALUE, "10", "CUID is a required field");
End-If;
/*Response Message */

&str = GetHTMLText(HTML.Z_USER_SOAP_HTML);

&Delg_rec = &MsgRowset.GetRow(1).GetRecord(Record.Z_USERPREF_E_VW);
&delegator = &Z_CUID_VALUE;
&DELEGATE = &Z_DELEGATE_VALUE;
&start_dt = &Z_START_DATE_VALUE;
&end_dt = &Z_END_DATE_VALUE;
&Email_User = &Delg_rec.EMAIL_USER_SW.Value;
/* Z_ERR_ORIGIN_ID - Interface ID */
&Interface_ID = "EPWD";


&ResRootXml = CreateXmlDoc(&str);
rem &ResRootXml = CreateSOAPDoc(&str);
/* Add SOAP BODY */
rem &Node = &ResRootXml.DocumentElement.FindNode("soap:Body");
&Node = &ResRootXml.DocumentElement.FindNode("SOAP-ENV:Body");
&AddNode_Resp1 = &Node.AddElement("PSUSERPREFRESPONSEResponse:PSUSERPREFRESPONSE");
&AddNode_Resp = &AddNode_Resp1.AddElement("PSUSERPREFRESPONSEResponse:Transaction");
/* Add Status */
&AddNode_Status = &AddNode_Resp.AddElement("PSUSERPREFRESPONSEResponse:STATUS");
/* Error Status as per return values for Email and Delegation */
&AddNode_Status.NodeValue = &Status;
/* Add Response Elements */
&AddNode_CUID = &AddNode_Resp.AddElement("PSUSERPREFRESPONSEResponse:CUID");
&AddNode_CUID.NodeValue = &delegator;
&AddNode_Error_info = &AddNode_Resp.AddElement("PSUSERPREFRESPONSEResponse:ERRORINFO");
&AddNode_Error_count = &AddNode_Error_info.AddElement("PSUSERPREFRESPONSEResponse:ERRORCOUNT");
/* Error Count */
&count = &err_RS.ActiveRowCount - 1;
/* Error TAG */
&AddNode_Error_count.NodeValue = &count;
&AddNode_Error_list = &AddNode_Error_info.AddElement("PSUSERPREFRESPONSEResponse:ERRORLIST");

For &i = 1 To &err_RS.ActiveRowCount - 1
   &AddNode_Error_list_Entry = &AddNode_Error_list.AddElement("PSUSERPREFRESPONSEResponse:ERRORLISTENTRY");
   &AddNode_Error_text = &AddNode_Error_list_Entry.AddElement("PSUSERPREFRESPONSEResponse:ERRORTEXT");
   &AddNode_Error_text.NodeValue = &err_RS(&i).Z_ERROR_LOG.DESCRLONG.Value;
   &AddNode_Error_code = &AddNode_Error_list_Entry.AddElement("PSUSERPREFRESPONSEResponse:ERRORCODE");
   &AddNode_Error_code.NodeValue = &err_RS(&i).Z_ERROR_LOG.Z_KEY6.Value;
   /* LOG ERROR IN PPM */
   &error = Log_PPM_error(&Interface_ID, &delegator, &DELEGATE, &start_dt, &end_dt, &err_RS(&i).Z_ERROR_LOG.Z_KEY5.Value, &err_RS(&i).Z_ERROR_LOG.Z_KEY6.Value, &Pubnode, &Channel, &PubId, &Subchannel, &Message_ID, " ", &err_RS(&i).Z_ERROR_LOG.DESCRLONG.Value);
   
End-For;
&ResMsg = CreateMessage(Message.Z_USER_PREF_RES_MSG);

&ResMsg.SetXMLDoc(&ResRootXml);
ReturnToServer(&ResMsg);


<?xml version="1.0"?>
<SOAP-ENV:Envelope
		xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
		xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
	<SOAP-ENV:Body xmlns:PSUSERPREFRESPONSEResponse="http://peoplesoft.com/PSUSERPREFRESPONSEResponse">
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>



/************************** $Qwest$ *******************************
ITR#:     QR3IPO005
NAME:     Prashant Prakash
DATE:     04/10/2006
DESCR:    Added New Function CALL_PO to publish PO Data 
		  

CALL_PO     - This function is used to generate the XML Message for 
			  PO Data as required by the ORBIT, B2B Systems.
Input	    - PO data from PO Page.  
Output      - XML Doc and XML Message.

Call_ORBIT_RESP  - Function to process ORBIT'S response
Input			 - Response XML doc
Output			 - Boolean

Call_B2B_RESP    - Function to process B2B'S response
Input			 - Response XML doc
Output			 - Boolean


Call_REMEDY_RESP    - Function to process REMEDY'S response
Input			    - Response XML doc
Output			    - Boolean
/******************************************************************/

/* Begin QWEST QR3IPO005 Prashant Prakash 04/10/2006 PSCIO-R3 
   This code was added to Create and Publish XML for the PO */

/* Begin QWEST Z_QR3IPO005_PRJ_454 Prashant Prakash 07/18/2006 PSCIO-R3
   This code was added to cater to the Defect ID 454. PO Publish was not working for Custom Dispatch Methods 
   and Code has been added to verify the incoming XML whether it is from TIBCO or the Legacy */

/* Begin QWEST CHANGE REQUEST - 73 Prashant Prakash 07/21/2006 PSCIO-R3 
   This code was added to send NULL values for Account Code on DISTRIB LEVEL if the ACCOUNT VALUE = "00000000"*/

/* Begin QWEST Z_QR3IPO005_PRJ_531 Prashant Prakash 07/27/2006 PSCIO-R3 
   This code was added to interchange the Values for the TAGS <STATE_DLOC> and <POSTAL_DLOC> on DISTRIB LEVEL */

/* Function to Log Errors in the Error Log Table */
Declare Function Log_PPM_error PeopleCode Z_ERROR_LOG.Z_ERR_CODE FieldFormula;

Local string &Z_PO_ATTN_TO; /* vairable for ATTN_TO at the header level. */
Local File &file;

/************************
 Initialize the variables
 ************************/
Function InitVariables()
   
   &BU = "";
   &PO_ID = "";
   &CHNG_ORD_BATCH = "";
   &NAME1 = "";
   &VENADDR1 = "";
   &VENADDR2 = "";
   &VENADDR3 = "";
   &VENADDR4 = "";
   &VENCOUN = "";
   &VENCITY = "";
   &VENSTATE = "";
   &VENPOSTAL = "";
   &ATTN_TO = "";
   &DESCR = "";
   &ADDR1 = "";
   &ADDR2 = "";
   &ADDR3 = "";
   &ADDR4 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &COCD = "";
   &Z_ORDER_TYPE = "";
   &DSC_TRMS_AVAIL_FLG = "";
   &TERMS_ADJUST_DAYS = "";
   &DSCNT_TRMS_PERCENT = "";
   &TMG_DAY_INCR_VAL = "";
   &Z_FIRST_NAME = "";
   &MIDDLE_NAME = "";
   &Z_LAST_NAME = "";
   &Z_SMTP = "";
   &WS_WORK_PHONE = "";
   &OPRID = "";
   &COMMENT_ID = "";
   &RANDOM = "";
   &BU_LINE = "";
   &PO_LINE = "";
   &LINE_NBR = "";
   &INV_ITEM_ID = "";
   &ITM_ID_VNDR = "";
   &UOM = "";
   &MFG_ITM_ID = "";
   &CNTRCT_ID = "";
   &DESCR254 = "";
   &DESCR60 = "";
   &BU_SCHED = "";
   &PO_SCHED = "";
   &LINE_NBR_SCHED = "";
   &SCHED_NBR = "";
   &PRICE_PO = "";
   &SHIPTO_ID = "";
   &QTY_PO = "";
   &SHIP_TYPE_ID = "";
   &SHIP_DATE = "";
   &L_ADDR1 = "";
   &L_ADDR2 = "";
   &L_ADDR3 = "";
   &L_ADDR4 = "";
   &L_CO_CD = "";
   &L_CITY = "";
   &L_STATE = "";
   &L_POSTAL = "";
   &SHIP_DESCR = "";
   &BU_DISTRIB = "";
   &PO_ID_DISTRIB = "";
   &LINE_NBR_DISTRIB = "";
   &SCHED_NBR_DISTRIB = "";
   &DISTRIB_LINE_NUM = "";
   &DLOC = "";
   &BU_REQ = "";
   &REQ_ID = "";
   &REQ_LINE_NBR = "";
   &REQ_SCHED_NBR = "";
   &REQUESTER_ID = "";
   &D_Z_FIRST_NAME = "";
   &D_MIDDLE_NAME = "";
   &D_Z_LAST_NAME = "";
   &D_Z_SMTP = "";
   &D_WS_WORK_PHONE = "";
   &D_ADDR1 = "";
   &D_ADDR2 = "";
   &D_ADDR3 = "";
   &D_ADDR4 = "";
   &D_CO_CD = "";
   &D_CITY = "";
   &D_STATE = "";
   &D_POSTAL = "";
   &RET_ORB = "";
   &RET_REM = "";
   &RET_B2B = "";
   &RMDY_FLG = "N";
   
End-Function;

/**********************
 Process ORBIT RESPONSE
 **********************/
Function Call_ORBIT_RESP(&ORB_RESP_XML As XmlDoc, &ORB_BU As string, &ORB_PO_ID As string, &ORB_DISP_METHOD As string) Returns boolean;
   
   Local array of XmlNode &checkFile_ORB;
   
   /* Check whether the Reponse was from ORBIT or TIBCO  - Code has been added to verify the Incoming XML*/
   &checkFile_ORB = &ORB_RESP_XML.GetElementsByTagName("Exception");
   If (&checkFile_ORB.Len <> 0) Then
      
      Local string &ORB_Cd_status;
      Local boolean &ORB_retval;
      Local array of XmlNode &ORB_statusCode;
      &ORB_statusCode = &ORB_RESP_XML.GetElementsByTagName("Exception");
      If &ORB_statusCode.Len <> 0 Then
         For &ipp = 1 To &ORB_statusCode.Len
            &ORB_Cd_status = &ORB_statusCode [&ipp].NodeValue;
         End-For;
      End-If;
      /* Further Process based on response from TIBCO */
      Evaluate &ORB_Cd_status
      When "Error - Response null - Check Error Logs"
      When "Error - Bus Exception - Check Error Logs"
      When "Error - Exception - Check Error Logs"
         Local string &errCode = "ERROR";
         &sysDate = %Date;
         /* Retrieve IB Values for the Message */
         &msgName = "Z_PO_PUBLISH_MSG";
         &Z_POPUBLISH_ORBIT = GetURL(URL.Z_POPUBLISH_ORBIT);
         /* Call Error Log function */
         SQLExec("SELECT A.PUBNODE, A.CHNLNAME, A.GUID,A.MSGNAME FROM PSIBLOGHDR A WHERE A.MSGNAME = 'Z_PO_PUBLISH_MSG' AND A.PUBNODE = 'PSFT_EP' AND A.CHNLNAME = 'PURCHASE_ORDER' AND A.LASTUPDDTTM = (SELECT MAX(B.LASTUPDDTTM) FROM PSIBLOGHDR B WHERE B.PUBNODE = A.PUBNODE AND B.CHNLNAME = A.CHNLNAME AND B.MSGNAME=A.MSGNAME)", &Pubnode, &Channel, &Message_ID, &PubId);
         &logErr = Log_PPM_error("OPO", &ORB_BU, &ORB_PO_ID, &ORB_DISP_METHOD, "ORBIT", "", "", "PSFT_EP", "PURCHASE_ORDER", 0, &PubId, &Message_ID, &errCode, &ORB_Cd_status);
         &ORB_retval = False;
         Break;
      When "Success - Message published"
         &ORB_retval = True;
         Break;
      End-Evaluate;
   Else
      /* Process Response for ORBIT */
      Local array of XmlNode &transaction_type_arr_ORB, &business_unit_arr_ORB, &receiver_id_arr_ORB;
      Local array of XmlNode &error_code_arr_ORB, &error_descr_arr_ORB;
      
      &transaction_type_arr_ORB = &ORB_RESP_XML.GetElementsByTagName("TRANSACTION_TYPE");
      &business_unit_arr_ORB = &ORB_RESP_XML.GetElementsByTagName("BUSINESS_UNIT");
      &receiver_id_arr_ORB = &ORB_RESP_XML.GetElementsByTagName("TRANSACTION_ID");
      &error_code_arr_ORB = &ORB_RESP_XML.GetElementsByTagName("Z_ORBIT_STATUS_CD");
      &error_descr_arr_ORB = &ORB_RESP_XML.GetElementsByTagName("ERROR_DESCR");
      
      /* Check Non-Retail BU Flag*/
      For &iBU = 1 To &business_unit_arr_ORB.Len
         /* Check the Transaction type */
         For &iTransaction = 1 To &transaction_type_arr_ORB.Len
            If (&transaction_type_arr_ORB [&iTransaction].NodeValue = "OPO") Then
               For &iError = 1 To &error_code_arr_ORB.Len
                  Evaluate &error_code_arr_ORB [&iError].NodeValue
                  When "0000"
                     &ORB_retval = True;
                     Break;
                  When "0001"
                  When "0002"
                     &done = Log_PPM_error("OPO", &business_unit_arr_ORB [&iBU].NodeValue, &receiver_id_arr_ORB [1].NodeValue, "ORB_RES", "", "", "", "", "", "", "", "", &error_code_arr_ORB [&iError].NodeValue, &error_descr_arr_ORB [1].NodeValue);
                     &ORB_retval = False;
                     Break;
                  End-Evaluate;
               End-For;
            End-If;
         End-For;
      End-For;
   End-If;
   /* Return Boolean so as to update the PS_Z_PO_TEMP table based on the Boolean */
   Return &ORB_retval;
   
End-Function; /* Call_ORBIT_RESP */

/*************************
 Process REMEDY's RESPONSE
 *************************/
Function Call_REMEDY_RESP(&REM_RESP_XML As XmlDoc, &REMEDY_BU As string, &REMEDY_PO_ID As string, &REMEDY_DISP_METHOD As string) Returns boolean;
   
   Local array of XmlNode &checkFile_RMD;
   
   /* Check whether the Reponse was from Remedy or TIBCO - Code has been added to verify the Incoming XML */
   &checkFile_RMD = &REM_RESP_XML.GetElementsByTagName("Exception");
   If (&checkFile_RMD.Len <> 0) Then
      
      Local string &REM_cd_status;
      Local boolean &REM_retval;
      Local array of XmlNode &REM_statusCode;
      &REM_statusCode = &REM_RESP_XML.GetElementsByTagName("Exception");
      If &REM_statusCode.Len <> 0 Then
         For &iRem = 1 To &REM_statusCode.Len
            &REM_cd_status = &REM_statusCode [&iRem].NodeValue;
         End-For;
      End-If;
      /* Further Process based on response from TIBCO */
      Evaluate &REM_cd_status
      When "Error - Response null - Check Error Logs"
      When "Error - Bus Exception - Check Error Logs"
      When "Error - Exception - Check Error Logs"
         Local string &REM_errCode = "ERROR";
         &sysDate = %Date;
         /* Retrieve IB Values for the Message */
         &msgName = "Z_PO_PUBLISH_MSG";
         &Z_POPUBLISH_REMEDY = GetURL(URL.Z_POPUBLISH_REMEDY);
         /* Call Error Log function */
         SQLExec("SELECT A.PUBNODE, A.CHNLNAME, A.GUID,A.MSGNAME FROM PSIBLOGHDR A WHERE A.MSGNAME = 'Z_PO_PUBLISH_MSG' AND A.PUBNODE = 'PSFT_EP' AND A.CHNLNAME = 'PURCHASE_ORDER' AND A.LASTUPDDTTM = (SELECT MAX(B.LASTUPDDTTM) FROM PSIBLOGHDR B WHERE B.PUBNODE = A.PUBNODE AND B.CHNLNAME = A.CHNLNAME AND B.MSGNAME=A.MSGNAME)", &Pubnode, &Channel, &Message_ID, &PubId);
         &logErr = Log_PPM_error("RPO", &REMEDY_BU, &REMEDY_PO_ID, &REMEDY_DISP_METHOD, "REMEDY", "", "", "PSFT_EP", "PURCHASE_ORDER", 0, &PubId, &Message_ID, &REM_errCode, &REM_cd_status);
         &REM_retval = False;
         Break;
      When "Success - Message published"
         &REM_retval = True;
         Break;
      End-Evaluate;
      
   Else
      /* Process Response for Remedy */
      Local array of XmlNode &transaction_type_arr_RMD, &business_unit_arr_RMD, &transaction_id_arr_RMD;
      Local array of XmlNode &remedy_ticket_id_RMD, &error_code_arr_RMD, &error_descr_arr_RMD;
      
      /* Retrieve Values from the XML. Assuming that the TAGS Names would be Consistent*/
      &transaction_type_arr_RMD = &REM_RESP_XML.GetElementsByTagName("TRANSACTION_TYPE");
      &business_unit_arr_RMD = &REM_RESP_XML.GetElementsByTagName("BUSINESS_UNIT");
      /* PO_ID from REMEDY */
      &transaction_id_arr_RMD = &REM_RESP_XML.GetElementsByTagName("TRANSACTION_ID");
      &remedy_ticket_id_RMD = &REM_RESP_XML.GetElementsByTagName("REMEDY_TICKET_ID");
      &error_code_arr_RMD = &REM_RESP_XML.GetElementsByTagName("Z_REMEDY_STATUS_CD");
      &error_descr_arr_RMD = &REM_RESP_XML.GetElementsByTagName("ERROR_DESCR");
      
      /* Check Non-Retail BU Flag*/
      For &iBU = 1 To &business_unit_arr_RMD.Len
         /* Check the Transaction type */
         For &iTransaction = 1 To &transaction_type_arr_RMD.Len
            If (&transaction_type_arr_RMD [&iTransaction].NodeValue = "RPO") Then
               For &iError = 1 To &error_code_arr_RMD.Len
                  Evaluate &error_code_arr_RMD [&iError].NodeValue
                  When "0000"
                     /* Update the Remedy Ticket Number */
                     SQLExec("UPDATE PS_Z_PO_HDR_PPM SET Z_REMEDY_TICKET_ID=:1 WHERE BUSINESS_UNIT=:2 AND PO_ID=:3", &remedy_ticket_id_RMD [1].NodeValue, &business_unit_arr_RMD [&iBU].NodeValue, &transaction_id_arr_RMD [&iTransaction].NodeValue);
                     &REM_retval = True;
                     Break;
                  When "0001"
                  When "0002"
                     &done = Log_PPM_error("RPO", &business_unit_arr_RMD [&iBU].NodeValue, &transaction_id_arr_RMD [&iTransaction].NodeValue, "RMD_RES", "", "", "", "", "", "", "", "", &error_code_arr_RMD [&iError].NodeValue, &error_descr_arr_RMD [1].NodeValue);
                     &REM_retval = False;
                     Break;
                  End-Evaluate;
               End-For;
            End-If;
         End-For;
      End-For;
   End-If;
   /* Return Boolean so as to update the PS_Z_PO_TEMP table based on the Boolean */
   Return &REM_retval;
   
End-Function; /* Call_REMEDY_RESP */

/**********************
 Process B2B's RESPONSE
 **********************/
Function Call_B2B_RESP(&B2B_RESP_XML As XmlDoc, &B2B_BU As string, &B2B_PO_ID As string, &B2B_DISP_METHOD As string) Returns boolean;
   
   Local string &B2B_cd_status;
   Local boolean &B2B_retval;
   Local array of XmlNode &B2B_statusCode;
   &B2B_statusCode = &B2B_RESP_XML.GetElementsByTagName("Exception");
   If &B2B_statusCode.Len <> 0 Then
      For &iB2B = 1 To &B2B_statusCode.Len
         &B2B_cd_status = &B2B_statusCode [&iB2B].NodeValue;
      End-For;
   End-If;
   /* Further Process based on response from TIBCO */
   Evaluate &B2B_cd_status
   When "Error - Response null - Check Error Logs"
   When "Error - Bus Exception - Check Error Logs"
   When "Error - Exception - Check Error Logs"
      Local string &B2B_errCode = "ERROR";
      &sysDate = %Date;
      &Z_POPUBLISH_B2B = GetURL(URL.Z_POPUBLISH_B2B);
      /* Call Error Log function */
      SQLExec("SELECT A.PUBNODE, A.CHNLNAME, A.GUID,A.MSGNAME FROM PSIBLOGHDR A WHERE A.MSGNAME = 'Z_PO_PUBLISH_MSG' AND A.PUBNODE = 'PSFT_EP' AND A.CHNLNAME = 'PURCHASE_ORDER' AND A.LASTUPDDTTM = (SELECT MAX(B.LASTUPDDTTM) FROM PSIBLOGHDR B WHERE B.PUBNODE = A.PUBNODE AND B.CHNLNAME = A.CHNLNAME AND B.MSGNAME=A.MSGNAME)", &Pubnode, &Channel, &Message_ID, &PubId);
      rem &logErr = Log_PPM_error("EPO", &B2B_BU, &B2B_PO_ID, &B2B_DISP_METHOD, "B2B", "", "", "PSFT_EP", "PURCHASE_ORDER", &PubId, &subChannel, &Msg_ID, &B2B_errCode, &B2B_cd_status);
      &logErr = Log_PPM_error("EPO", &B2B_BU, &B2B_PO_ID, &B2B_DISP_METHOD, "B2B", "", "", "PSFT_EP", "PURCHASE_ORDER", 0, &PubId, &Message_ID, &B2B_errCode, &B2B_cd_status);
      &B2B_retval = False;
      Break;
   When "Success - Message published"
      &B2B_retval = True;
      Break;
   End-Evaluate;
   /* Return Boolean so as to update the PS_Z_PO_TEMP table based on the Boolean */
   Return &B2B_retval;
   
End-Function; /* Call_B2B_RESP */

/****************
 Generate the XML 
 ****************/
Function CALL_PO(&Z_PO_HDR As Record)
   Local boolean &RMD_FLG = False;
   /* Verify RETAIL BU */
   SQLExec("SELECT BUSINESS_UNIT FROM PS_Z_BU_PM_TBL WHERE Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", Z_PO_PUB_AET.BUSINESS_UNIT, &NON_BU);
   If All(&NON_BU) Then
      
      /* declarations */
      Local XmlDoc &NEWDOC;
      
      /* Initialize Variables */
      InitVariables();
      /* Retrieve HEADER Values for the BUSINESS UNIT and PO_ID */
      &DISP_METHOD = &Z_PO_HDR.DISP_METHOD.Value;
      &PO_DT = &Z_PO_HDR.PO_DT.Value;
      &PO_REF = &Z_PO_HDR.PO_REF.Value;
      &PO_STATUS = &Z_PO_HDR.PO_STATUS.Value;
      &RECV_STATUS = &Z_PO_HDR.RECV_STATUS.Value;
      &VENSETID = &Z_PO_HDR.VENDOR_SETID.Value;
      &VENID = &Z_PO_HDR.VENDOR_ID.Value;
      &VNDR_LOC = &Z_PO_HDR.VNDR_LOC.Value;
      &PYMNT_CD = &Z_PO_HDR.PYMNT_TERMS_CD.Value;
      &BUYER_ID = &Z_PO_HDR.BUYER_ID.Value;
      &BILL_LOC = &Z_PO_HDR.BILL_LOCATION.Value;
      &CHNG_ORD_BATCH = &Z_PO_HDR.CHNG_ORD_BATCH.Value;
      &CHNG_ORD_SEQ = &Z_PO_HDR.CHNG_ORD_SEQ.Value;
      &CHNG_STATUS = &Z_PO_HDR.CHANGE_STATUS.Value;
      &ORIGIN = &Z_PO_HDR.ORIGIN.Value;
      &OPRID_ENT = &Z_PO_HDR.OPRID_ENTERED_BY.Value;
      &ENT_DT = &Z_PO_HDR.ENTERED_DT.Value;
      &OPRID_APP = &Z_PO_HDR.OPRID_APPROVED_BY.Value;
      &APP_DT = &Z_PO_HDR.APPROVAL_DT.Value;
      &OPRID_MODIF = &Z_PO_HDR.OPRID_MODIFIED_BY.Value;
      &LAST_DTTM_UPD = &Z_PO_HDR.LAST_DTTM_UPDATE.Value;
      /* Retrieve Address Details from Cross Reference Location Table */
      Local string &StrLoc = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LOCATION = :3 ";
      SQLExec("SELECT DESCR, ATTN_TO, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, PHONE, CITY, STATE, POSTAL, COUNTRY FROM PS_Z_PO_LOC_E_VW " | &StrLoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &BILL_LOC, &DESCR, &ATTN_TO, &ADDR1, &ADDR2, &ADDR3, &ADDR4, &PHONE, &CITY, &STATE, &POSTAL, &COUNT_HDR);
      /* Retrieve the VENDOR ADDRESS */
      Local string &StrComm = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 ";
      SQLExec("SELECT NAME1, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, STATE, POSTAL , COUNTRY FROM PS_Z_N_PO_VADD_EVW " | &StrComm, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NAME1, &VENADDR1, &VENADDR2, &VENADDR3, &VENADDR4, &VENCITY, &VENSTATE, &VENPOSTAL, &VENCOUN);
      /* Retrieve PAYMENT DETAILS */
      SQLExec("SELECT PYMNT_TERMS_CD, DSC_TRMS_AVAIL_FLG, TERMS_ADJUST_DAYS, DSCNT_TRMS_PERCENT, TMG_DAY_INCR_VAL FROM PS_Z_PO_PYMNT_E_VW " | &StrComm, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &PYMNT_TERMS_CD, &DSC_TRMS_AVAIL_FLG, &TERMS_ADJUST_DAYS, &DSCNT_TRMS_PERCENT, &TMG_DAY_INCR_VAL);
      /* Retrieve the BUSINESS UNIT DETAILS */
      SQLExec("%SelectAll(:1) Where BUSINESS_UNIT = :2", Record.Z_PO_BU_DET_EVW, Z_PO_PUB_AET.BUSINESS_UNIT, &NEW_BU, &DESCR_BU, &STD_COMMENT_TYPE, &STD_COMMENT_ID);
      /* Retrieve Values from Z_PO_HDR_PMM */
      SQLExec("SELECT Z_ORD_TYPE, Z_JOB_TYPE, Z_BVAPP_NUMBER, Z_REQUESTOR_ID, Z_FIRST_NAME, MIDDLE_NAME, Z_LAST_NAME, Z_SMTP_ADDR, WS_WORK_PHONE FROM PS_Z_PO_PPM_VW1 " | &StrComm, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Z_ORD_TYPE, &Z_JOB_TYPE, &Z_BVAPP_NUMBER, &Z_REQ_ID, &R_Z_FIRST_NAME, &R_MIDDLE_NAME, &R_Z_LAST_NAME, &R_Z_SMTP, &R_WS_WORK_PHONE);
      /* Retrieve Values from Z_MNET_TBL for BUYER */
      SQLExec("SELECT Z_FIRST_NAME, MIDDLE_NAME, Z_LAST_NAME, Z_SMTP_ADDR, WS_WORK_PHONE FROM PS_Z_PO_MNET_E_VW " | &StrComm, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Z_FIRST_NAME, &MIDDLE_NAME, &Z_LAST_NAME, &Z_SMTP, &WS_WORK_PHONE);
      /* Retrieve Business Unit Standard Comment */
      Local string &buStr = " WHERE TERMREC.SETCNTRLVALUE = PO.BUSINESS_UNIT AND PO.BUSINESS_UNIT = POBUSUNIT.BUSINESS_UNIT AND TERMREC.RECNAME = 'STD_COMM_TBL_PO' AND TERMS.STD_COMMENT_TYPE = POBUSUNIT.STD_COMMENT_TYPE AND TERMS.STD_COMMENT_ID = POBUSUNIT.STD_COMMENT_ID AND TERMS.SETID = TERMREC.SETID AND TERMS.COMMENT_ID = TERMSDESC.COMMENT_ID AND TERMS.OPRID = TERMSDESC.OPRID AND TERMS.RANDOM_CMMT_NBR = TERMSDESC.RANDOM_CMMT_NBR AND TERMS.EFFDT = (SELECT MAX(EFFDT) FROM PS_STD_COMM_TBL_PO TERMS1 WHERE TERMS1.STD_COMMENT_TYPE = POBUSUNIT.STD_COMMENT_TYPE AND TERMS1.STD_COMMENT_ID = POBUSUNIT.STD_COMMENT_ID AND TERMS1.EFF_STATUS = 'A' AND TERMS1.EFFDT <= SYSDATE) AND PO.BUSINESS_UNIT = :1 AND PO.PO_ID = :2";
      SQLExec("SELECT TERMS.STD_COMMENT_ID,TERMSDESC.COMMENTS_2000 FROM PS_COMMENTS_TBL TERMSDESC, PS_SET_CNTRL_REC TERMREC, PS_STD_COMM_TBL_PO TERMS, PS_PO_HDR PO, PS_BUS_UNIT_TBL_PM POBUSUNIT " | &buStr, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &STD_CMMT_ID, &COMMENTS_2000);
      &NEWDOC = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><Z_PO_PUBLISH_MSG/>");
      
      &AddNode0 = &NEWDOC.DocumentElement.AddElement("MsgData");
      /********************** 
       Create the Header Loop 
       **********************/
      &AddNode_TRANSACTION = &AddNode0.AddElement("Transaction");
      &AddNode_HEADER = &AddNode_TRANSACTION.AddElement("Z_HEADER_VW");
      &AddNode_HEADER.AddAttribute("class", "R");
      &AddNode_BU = &AddNode_HEADER.AddElement("BUSINESS_UNIT");
      &AddNode_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
      &AddNode_DESCR_BU = &AddNode_HEADER.AddElement("DESCR_BU");
      &AddNode_DESCR_BU.NodeValue = &DESCR_BU;
      /* Business Unit Standard Comment */
      &AddNode_BU_COMMENTS = &AddNode_HEADER.AddElement("TC");
      /* Do not add NodeValue for CData sections */
      &AddNode_BU_COMMENTS = &AddNode_BU_COMMENTS.AddCDataSection(&COMMENTS_2000);
      &AddNode_BU_STD_COMM = &AddNode_HEADER.AddElement("STD_COMMENT_TYPE");
      &AddNode_BU_STD_COMM.NodeValue = &STD_COMMENT_TYPE;
      &AddNode_BU_STD_COMM_ID = &AddNode_HEADER.AddElement("STD_COMMENT_ID");
      &AddNode_BU_STD_COMM_ID.NodeValue = &STD_COMMENT_ID;
      &AddNode_PO_ID = &AddNode_HEADER.AddElement("PO_ID");
      &AddNode_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
      &AddNode_PO_DT = &AddNode_HEADER.AddElement("PO_DT");
      &AddNode_PO_DT.NodeValue = &PO_DT;
      &AddNode_PO_AMT_TTL = &AddNode_HEADER.AddElement("PO_AMT_TTL");
      &AddNode_PO_AMT_TTL.NodeValue = Z_PO_PUB_AET.PO_AMT_TTL;
      &AddNode_CHNG_ORD_BATCH = &AddNode_HEADER.AddElement("CHNG_ORD_BATCH");
      &AddNode_CHNG_ORD_BATCH.NodeValue = &CHNG_ORD_BATCH;
      &AddNode_CHNG_ORD_SEQ = &AddNode_HEADER.AddElement("CHNG_ORD_SEQ");
      &AddNode_CHNG_ORD_SEQ.NodeValue = &CHNG_ORD_SEQ;
      &AddNode_CHNG_STATUS = &AddNode_HEADER.AddElement("CHANGE_STATUS");
      &AddNode_CHNG_STATUS.NodeValue = &CHNG_STATUS;
      &AddNode_ORIGIN = &AddNode_HEADER.AddElement("ORIGIN");
      &AddNode_ORIGIN.NodeValue = &ORIGIN;
      &AddNode_PO_STATUS = &AddNode_HEADER.AddElement("PO_STATUS");
      &AddNode_PO_STATUS.NodeValue = &PO_STATUS;
      &AddNode_RECV_STATUS = &AddNode_HEADER.AddElement("RECV_STATUS");
      &AddNode_RECV_STATUS.NodeValue = &RECV_STATUS;
      &AddNode_PO_REF = &AddNode_HEADER.AddElement("PO_REF");
      &AddNode_PO_REF.NodeValue = &PO_REF;
      &AddNode_BILL_LOC = &AddNode_HEADER.AddElement("BILL_LOCATION");
      &AddNode_BILL_LOC.NodeValue = &BILL_LOC;
      &AddNode_DISP_METHOD = &AddNode_HEADER.AddElement("DISP_METHOD");
      /*&AddNode_DISP_METHOD.NodeValue = &DISP_METHOD;*/
      /* CHECK FOR DISPATCH METHODS */
      /* Retrieve the Remedy Request Flag to populate the Matrix*/
      &setid = GetSetId("BUSINESS_UNIT", Z_PO_PUB_AET.BUSINESS_UNIT, Record.Z_ITEM_ATT_TBL, "");
      SQLExec("SELECT 'Y' FROM PS_Z_ITEM_ATT_TBL WHERE SETID = :1 AND INV_ITEM_ID IN (SELECT POL.INV_ITEM_ID FROM PS_PO_LINE POL WHERE POL.BUSINESS_UNIT = :2 AND POL.PO_ID = :3) AND Z_REMEDY_RQST_FLG = 'Y'", &setid, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &RMDY_FLG);
      If (&RMDY_FLG <> "Y") Then
         &RMDY_NODE_FLG = "N";
      Else
         &RMDY_NODE_FLG = "Y";
      End-If;
      Evaluate &DISP_METHOD
      When "B2B"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         rem  &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "EDX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "Y";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         rem &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "EML"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "FAX"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "LCM"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         rem &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "ORB"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         rem &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_RMD.NodeValue = "N";
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "PHN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "PRN"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "Y";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      When "RMD"
         &AddNode_B2B = &AddNode_DISP_METHOD.AddElement("B2B_FLG");
         &AddNode_B2B.NodeValue = "N";
         &AddNode_ORB = &AddNode_DISP_METHOD.AddElement("ORB_FLG");
         &AddNode_ORB.NodeValue = "N";
         &AddNode_RMD = &AddNode_DISP_METHOD.AddElement("RMD_FLG");
         &AddNode_RMD.NodeValue = &RMDY_NODE_FLG;
         &AddNode_LCM = &AddNode_DISP_METHOD.AddElement("LCM_FLG");
         &AddNode_LCM.NodeValue = "N";
         &AddNode_SYS1_FLG = &AddNode_DISP_METHOD.AddElement("SYS1_FLG");
         &AddNode_SYS1_FLG.NodeValue = "N";
         &AddNode_SYS2_FLG = &AddNode_DISP_METHOD.AddElement("SYS2_FLG");
         &AddNode_SYS2_FLG.NodeValue = "N";
         Break;
      End-Evaluate;
      
      /* Vendor Details */
      &AddNode_VENDOR_SETID = &AddNode_HEADER.AddElement("VENDOR_SETID");
      /*&AddNode_VENDOR_SETID.NodeValue = &VENSETID;*/
      &AddNode_VENDOR_SETID.NodeValue = "USWC"; /* HARD CODING AS PER FDD */
      &AddNode_VENDOR_ID = &AddNode_HEADER.AddElement("VENDOR_ID");
      &AddNode_VENDOR_ID.NodeValue = &VENID;
      &AddNode_VNDR_LOC = &AddNode_HEADER.AddElement("VNDR_LOC");
      &AddNode_VNDR_LOC.NodeValue = &VNDR_LOC;
      /* BUYER DETAILS */
      &AddNode_BUYER = &AddNode_HEADER.AddElement("BUYER_ID");
      &AddNode_BUYER.NodeValue = &BUYER_ID;
      &AddNode_Z_FIRST_NAME = &AddNode_HEADER.AddElement("BUYER_FNAME");
      &AddNode_Z_FIRST_NAME.NodeValue = &Z_FIRST_NAME;
      &AddNode_MIDDLE_NAME = &AddNode_HEADER.AddElement("BUYER_MNAME");
      &AddNode_MIDDLE_NAME.NodeValue = &MIDDLE_NAME;
      &AddNode_Z_LAST_NAME = &AddNode_HEADER.AddElement("BUYER_LNAME");
      &AddNode_Z_LAST_NAME.NodeValue = &Z_LAST_NAME;
      &AddNode_Z_SMTP = &AddNode_HEADER.AddElement("BUYER_EMAIL");
      &AddNode_Z_SMTP.NodeValue = &Z_SMTP;
      /* Buyer Phone */
      &AddNode_WS_WORK_PHONE = &AddNode_HEADER.AddElement("BUYER_PHONE");
      &AddNode_WS_WORK_PHONE.NodeValue = &WS_WORK_PHONE;
      /* Create Vendor Address Block */
      &AddNode_VNAME1 = &AddNode_HEADER.AddElement("VENDOR_NAME");
      &AddNode_VNAME1.NodeValue = &NAME1;
      /* Send Vendor Detail Flag */
      &AddNode_VEN_DET_FLG = &AddNode_HEADER.AddElement("VENDOR_DETAIL_FLG");
      /*&AddNode_VEN_DET_FLG.NodeValue = &VEN_DET_FLG; Table Not Present in DEV as yet */
      &AddNode_VEN_DET_FLG.NodeValue = "Y";
      &AddNode_VENADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_VNDR");
      &AddNode_VENADDR1.NodeValue = &VENADDR1;
      &AddNode_VENADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_VNDR");
      &AddNode_VENADDR2.NodeValue = &VENADDR2;
      &AddNode_VENADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_VNDR");
      &AddNode_VENADDR3.NodeValue = &VENADDR3;
      &AddNode_VENADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_VNDR");
      &AddNode_VENADDR4.NodeValue = &VENADDR4;
      /* Retrieve Vendor Phone */
      SQLExec("SELECT VNDPHN.PHONE FROM PS_VENDOR_ADDR_PHN VNDPHN, PS_PO_HDR POHD WHERE VNDPHN.SETID = POHD.VENDOR_SETID AND VNDPHN.VENDOR_ID = POHD.VENDOR_ID AND VNDPHN.ADDRESS_SEQ_NUM = POHD.ADDRESS_SEQ_NUM AND VNDPHN.PHONE_TYPE LIKE 'FAX' AND POHD.BUSINESS_UNIT = :1 AND POHD.PO_ID = :2 AND VNDPHN.VENDOR_ID = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &VENID, &VENPHN);
      &AddNode_VENPHN = &AddNode_HEADER.AddElement("PHONE_VNDR");
      &AddNode_VENPHN.NodeValue = &VENPHN;
      &AddNode_VENCITY = &AddNode_HEADER.AddElement("CITY_VNDR");
      &AddNode_VENCITY.NodeValue = &VENCITY;
      &AddNode_VENSTATE = &AddNode_HEADER.AddElement("STATE_VNDR");
      &AddNode_VENSTATE.NodeValue = &VENSTATE;
      &AddNode_VENPOSTAL = &AddNode_HEADER.AddElement("POSTAL_VNDR");
      &AddNode_VENPOSTAL.NodeValue = &VENPOSTAL;
      &AddNode_VENCOUNTRY = &AddNode_HEADER.AddElement("COUNTRY_VNDR");
      &AddNode_VENCOUNTRY.NodeValue = &VENCOUN;
      /* Create the Address Block */
      &AddNode_ATTN_TO = &AddNode_HEADER.AddElement("ATTN_BILL");
      &AddNode_ATTN_TO.NodeValue = &ATTN_TO;
      &AddNode_DESCR0 = &AddNode_HEADER.AddElement("DESCR_BILL");
      &AddNode_DESCR0.NodeValue = &DESCR;
      &AddNode_ADDR1 = &AddNode_HEADER.AddElement("ADDRESS1_BILL");
      &AddNode_ADDR1.NodeValue = &ADDR1;
      &AddNode_ADDR2 = &AddNode_HEADER.AddElement("ADDRESS2_BILL");
      &AddNode_ADDR2.NodeValue = &ADDR2;
      &AddNode_ADDR3 = &AddNode_HEADER.AddElement("ADDRESS3_BILL");
      &AddNode_ADDR3.NodeValue = &ADDR3;
      &AddNode_ADDR4 = &AddNode_HEADER.AddElement("ADDRESS4_BILL");
      &AddNode_ADDR4.NodeValue = &ADDR4;
      &AddNode_PHONE_BILL = &AddNode_HEADER.AddElement("PHONE_BILL");
      &AddNode_PHONE_BILL.NodeValue = &PHONE;
      &AddNode_CITY = &AddNode_HEADER.AddElement("CITY_BILL");
      &AddNode_CITY.NodeValue = &CITY;
      &AddNode_STATE = &AddNode_HEADER.AddElement("STATE_BILL");
      &AddNode_STATE.NodeValue = &STATE;
      &AddNode_POSTAL = &AddNode_HEADER.AddElement("POSTAL_BILL");
      &AddNode_POSTAL.NodeValue = &POSTAL;
      &AddNode_COCD = &AddNode_HEADER.AddElement("COUNTRY_BILL");
      &AddNode_COCD.NodeValue = &COUNT_HDR;
      /* PS_Z_PO_HDR_PPM */
      &AddNode_Z_ORD = &AddNode_HEADER.AddElement("Z_ORD_TYPE");
      &AddNode_Z_ORD.NodeValue = &Z_ORD_TYPE;
      &AddNode_Z_JOB = &AddNode_HEADER.AddElement("Z_JOB_TYPE");
      &AddNode_Z_JOB.NodeValue = &Z_JOB_TYPE;
      &AddNode_Z_BVAPP = &AddNode_HEADER.AddElement("Z_BVAPP_NUMBER");
      &AddNode_Z_BVAPP.NodeValue = &Z_BVAPP_NUMBER;
      /* Requestor Details */
      &AddNode_Z_REQ = &AddNode_HEADER.AddElement("Z_REQUESTOR_ID");
      &AddNode_Z_REQ.NodeValue = &Z_REQ_ID;
      &AddNode_Z_REQ_FNAME = &AddNode_HEADER.AddElement("REQ_FNAME");
      &AddNode_Z_REQ_FNAME.NodeValue = &R_Z_FIRST_NAME;
      &AddNode_Z_REQ_MNAME = &AddNode_HEADER.AddElement("REQ_MNAME");
      &AddNode_Z_REQ_MNAME.NodeValue = &R_MIDDLE_NAME;
      &AddNode_Z_REQ_LNAME = &AddNode_HEADER.AddElement("REQ_LNAME");
      &AddNode_Z_REQ_LNAME.NodeValue = &R_Z_LAST_NAME;
      /* Requestor Phone */
      &AddNode_Z_REQ_PHN = &AddNode_HEADER.AddElement("REQ_PHONE");
      &AddNode_Z_REQ_PHN.NodeValue = &R_WS_WORK_PHONE;
      /* Requestor Email */
      &AddNode_Z_REQ_EMAIL = &AddNode_HEADER.AddElement("REQ_EMAIL");
      &AddNode_Z_REQ_EMAIL.NodeValue = &R_Z_SMTP;
      /* PS_PYMT_TRMS_NET */
      &AddNode_PYMNT_TERMS_CD = &AddNode_HEADER.AddElement("PYMNT_TERMS_CD");
      &AddNode_PYMNT_TERMS_CD.NodeValue = &PYMNT_TERMS_CD;
      &AddNode_DSC_TRMS_AVAIL_FLG = &AddNode_HEADER.AddElement("DSC_TRMS_AVAIL_FLG");
      &AddNode_DSC_TRMS_AVAIL_FLG.NodeValue = &DSC_TRMS_AVAIL_FLG;
      /* PS_PYMT_TRMS_DSCNT */
      &AddNode_TERMS_DAYS = &AddNode_HEADER.AddElement("TERMS_ADJUST_DAYS");
      &AddNode_TERMS_DAYS.NodeValue = &TERMS_ADJUST_DAYS;
      &AddNode_DSCNT_PER = &AddNode_HEADER.AddElement("DSCNT_TRMS_PERCENT");
      &AddNode_DSCNT_PER.NodeValue = &DSCNT_TRMS_PERCENT;
      /* PS_PYMT_TRMS_TIME */
      &AddNode_TMG_DAY = &AddNode_HEADER.AddElement("TMG_DAY_INCR_VAL");
      &AddNode_TMG_DAY.NodeValue = &TMG_DAY_INCR_VAL;
      /* Add the Header Comment block */
      &AddNode_COMMENTS_HDR = &AddNode_HEADER.AddElement("COMMENTS_HDR");
      /* Create the Comment Block */
      Local SQL &COMMENTS_SQL_HDR = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "HDR", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, 0, "Y");
      While &COMMENTS_SQL_HDR.Fetch(&COM_BU, &COM_PO_ID, &OPRID, &COMMENT_ID, &RANDOM, &COMM_2000);
         If All(&COMM_2000) Then
            &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_HDR.AddElement("HEADER_COMMENTS");
            &AddNode_COMMENTS_2000 = &AddNode_COMMENTS_2000.AddCDataSection(&COMM_2000);
         End-If;
      End-While;
      /* USER INFO */
      &AddNode_OPRID_ENT = &AddNode_HEADER.AddElement("OPRID_ENTERED_BY");
      &AddNode_OPRID_ENT.NodeValue = &OPRID_ENT;
      &AddNode_ENT_DT = &AddNode_HEADER.AddElement("ENTERED_DT");
      &AddNode_ENT_DT.NodeValue = &ENT_DT;
      &AddNode_OPRID_APP = &AddNode_HEADER.AddElement("OPRID_APPROVED_BY");
      &AddNode_OPRID_APP.NodeValue = &OPRID_APP;
      &AddNode_APP_DT = &AddNode_HEADER.AddElement("APPROVAL_DT");
      &AddNode_APP_DT.NodeValue = &APP_DT;
      &AddNode_OPRID_MODIF = &AddNode_HEADER.AddElement("OPRID_MODIFIED_BY");
      &AddNode_OPRID_MODIF.NodeValue = &OPRID_MODIF;
      &AddNode_LAST_DTTM_UPD = &AddNode_HEADER.AddElement("LAST_DTTM_UPDATE");
      &AddNode_LAST_DTTM_UPD.NodeValue = &LAST_DTTM_UPD;
      
      /**********************
       Generate the Line Loop
       **********************/
      Local string &LineWhere = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 ";
      SQLExec("SELECT COUNT(*) FROM PS_PO_LINE " | &LineWhere, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &NO_LINES);
      If All(&NO_LINES) Then
         For &Line = 1 To &NO_LINES;
            /* Retrieve  Values for Line*/
            Local Record &AA_PO_LINE = CreateRecord(Record.Z_PO_LN_E_VW);
            Local string &LINE_STR = "%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4";
            Local SQL &SQL_LINE = CreateSQL(&LINE_STR, &AA_PO_LINE, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line);
            &SQL_LINE.ReuseCursor = True;
            While &SQL_LINE.Fetch(&L_BU, &L_PO_ID, &LINE_NBR, &CANCEL_STATUS_LINE, &CHANGE_STATUS, &CHNG_ORD_SEQ_LINE, &ITEM_SETID_L, &INV_ITM_ID, &DESCR254_MIXED, &VNDR_ITM_ID, &VNDR_CATALOG_ID, &UOM, &PRICE_DT_TYPE, &CNTRCT_SETID, &CNTRCT_ID, &CNTRCT_LINE_NBR, &RECV_REQ)
               /* Begin Qwest Z_QR3IPO005_PRJ_HD00002711373 Prashant Prakash 11/15/2006 PSCIO-R3
                  This Code was added to change the SQL which had a Standard Join on the Item Vendor Table to retrieve the Item Vendor Description */
               /*
               Local string &Itmwhrstr = "  WHERE HDR.BUSINESS_UNIT = LINE.BUSINESS_UNIT AND HDR.PO_ID = LINE.PO_ID AND TBL.SETID =  ITMVND.SETID AND TBL.INV_ITEM_ID = ITMVND.INV_ITEM_ID AND TBL.SETID IN (SELECT BB.SETID FROM PS_SET_CNTRL_REC BB WHERE BB.RECNAME = 'MASTER_ITEM_TBL' AND BB.SETCNTRLVALUE=HDR.BUSINESS_UNIT) AND HDR.BUSINESS_UNIT = :1 AND HDR.PO_ID = :2 AND LINE.LINE_NBR = :3 AND TBL.INV_ITEM_ID = LINE.INV_ITEM_ID";
               SQLExec("SELECT TBL.INV_ITEM_ID, TBL.DESCR60, ITMVND.DESCR254 FROM PS_MASTER_ITEM_TBL TBL, PS_PO_HDR HDR, PS_PO_LINE LINE, PS_ITM_VENDOR ITMVND " | &Itmwhrstr, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &INV_ITM_ID, &DESCR60, &ITM_VND_DESCR);
			   */
               /* Cater for PO's with no Items */
               Local string &Itmwhrstr = "  WHERE HDR.BUSINESS_UNIT = LINE.BUSINESS_UNIT AND HDR.PO_ID = LINE.PO_ID AND TBL.SETID IN (SELECT BB.SETID FROM PS_SET_CNTRL_REC BB WHERE BB.RECNAME = 'MASTER_ITEM_TBL' AND BB.SETCNTRLVALUE=HDR.BUSINESS_UNIT) AND HDR.BUSINESS_UNIT = :1 AND HDR.PO_ID = :2 AND LINE.LINE_NBR = :3 AND TBL.INV_ITEM_ID = LINE.INV_ITEM_ID";
               SQLExec("SELECT LINE.INV_ITEM_ID, TBL.DESCR60 FROM PS_MASTER_ITEM_TBL TBL, PS_PO_HDR HDR, PS_PO_LINE LINE " | &Itmwhrstr, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &INV_ITM_ID, &DESCR60);
               /* Retrieve the Item Vendor Relationship for the Items on PO LINE */
               SQLExec("SELECT DESCR254 FROM PS_ITM_VENDOR WHERE INV_ITEM_ID = :1 AND VENDOR_ID = :2", &INV_ITM_ID, &VENID, &ITM_VND_DESCR);
               /* End QWEST Z_QR3IPO005_PRJ_HD00002711373 Prashant Prakash 11/15/2006 */
               /* Retrieve Values from PPM record */
               SQLExec("SELECT Z_QUOTE_NUMBER FROM PS_Z_PO_LN_PPM_VW1 WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &Z_QUOTE_NBR);
               /* Retrieve Values From PS_Z_ITEM_ATT_TBL */
               Local string &StrWhere = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 ";
               SQLExec("SELECT Z_ICC_CODE_CD, Z_AIC_CODE_FLD ,Z_REMEDY_RQST_FLG, Z_DEVICE_IND FROM PS_Z_PO_LN_ITEM_VW " | &StrWhere, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &Z_ICC_CD, &Z_AIC_FLD, &Z_REM_REQ_FLG, &Z_DEVICE_IND);
               /* Retrieve Item Category */
               Local string &StrCat = " WHERE A.SETID IN (SELECT CAT.SETID FROM PS_SET_CNTRL_REC CAT WHERE CAT.RECNAME = 'ITM_CAT_TBL' AND CAT.SETCNTRLVALUE = B.BUSINESS_UNIT) AND B.CATEGORY_ID = A.CATEGORY_ID AND B.BUSINESS_UNIT = :1 AND B.PO_ID = :2 ";
               SQLExec("SELECT A.CATEGORY_ID, A.CATEGORY_CD, A.DESCR FROM PS_ITM_CAT_TBL A, PS_PO_LINE B " | &StrCat, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &CAT_ID, &CAT_CD, &CAT_DESCR);
               /* Manufacturer Block */
               /* Rikhav - bug 489*/
               rem Local string &StrMFG = " WHERE A.SETID IN (SELECT CAT.SETID FROM PS_SET_CNTRL_REC CAT WHERE CAT.RECNAME = 'MANUFACTURER' AND CAT.SETCNTRLVALUE = POL.BUSINESS_UNIT) AND HDR.BUSINESS_UNIT = POL.BUSINESS_UNIT AND HDR.PO_ID = POL.PO_ID AND POL.MFG_ID = A.MFG_ID AND HDR.BUSINESS_UNIT = :1 AND HDR.PO_ID = :2 ";
               Local string &StrMFG = " WHERE A.SETID IN (SELECT CAT.SETID FROM PS_SET_CNTRL_REC CAT WHERE CAT.RECNAME = 'MANUFACTURER' AND CAT.SETCNTRLVALUE = POL.BUSINESS_UNIT) AND POL.MFG_ID = A.MFG_ID AND POL.BUSINESS_UNIT = :1 AND POL.PO_ID = :2 AND POL.INV_ITEM_ID = :3";
               /* Rikhav - bug 489 */
               SQLExec("SELECT A.MFG_ID , POL.MFG_ITM_ID, A.DESCR FROM PS_MANUFACTURER A, PS_PO_LINE POL " | &StrMFG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &INV_ITM_ID, &MFG_ID, &MFG_ITM_ID, &MFG_DESCR);
               /* Create the LINE Block */
               &AddNode_LINE = &AddNode_HEADER.AddElement("Z_LINE_VW");
               /* Add Attributes for the Line Element */
               &AddNode_LINE.AddAttribute("class", "R");
               &AddNode_LINE_BU = &AddNode_LINE.AddElement("BUSINESS_UNIT");
               &AddNode_LINE_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
               &AddNode_LINE_PO_ID = &AddNode_LINE.AddElement("PO_ID");
               &AddNode_LINE_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
               &AddNode_LINE_NBR = &AddNode_LINE.AddElement("LINE_NBR");
               &AddNode_LINE_NBR.NodeValue = &LINE_NBR;
               &AddNode_CN_STS_LINE = &AddNode_LINE.AddElement("CANCEL_STATUS_LINE");
               &AddNode_CN_STS_LINE.NodeValue = &CANCEL_STATUS_LINE;
               &AddNode_CHNG_STS = &AddNode_LINE.AddElement("CHANGE_STATUS");
               &AddNode_CHNG_STS.NodeValue = &CHANGE_STATUS;
               &AddNode_CHNG_ORD_SEQ_LINE = &AddNode_LINE.AddElement("CHNG_ORD_SEQ_LINE");
               &AddNode_CHNG_ORD_SEQ_LINE.NodeValue = &CHNG_ORD_SEQ_LINE;
               /* ITEM DESCRIPTION */
               &AddNode_ITEM_SETID = &AddNode_LINE.AddElement("ITM_SETID");
               &AddNode_ITEM_SETID.NodeValue = "USWC"; /* As Per FDD */
               /* REMEDY ITEMS CHECK PENDING */
               &AddNode_ITEM_ID = &AddNode_LINE.AddElement("INV_ITEM_ID");
               &AddNode_ITEM_ID.NodeValue = &INV_ITM_ID;
               &AddNode_DESCR254_MIXED = &AddNode_LINE.AddElement("ITEM_DESCR");
               &AddNode_DESCR254_MIXED.NodeValue = &DESCR254_MIXED;
               /* Item Description from PS_MASTER_ITEM_TBL */
               &AddNode_ITM_DESCR60 = &AddNode_LINE.AddElement("DESCR60_ITM_MST");
               &AddNode_ITM_DESCR60.NodeValue = &DESCR60;
               /* Item Description from PS_ITM_VENDOR */
               &AddNode_ITM_VND_DESCR = &AddNode_LINE.AddElement("DESCR254_ITM_VND");
               &AddNode_ITM_VND_DESCR.NodeValue = &ITM_VND_DESCR;
               &AddNode_ITM_ID_VNDR = &AddNode_LINE.AddElement("ITM_ID_VNDR");
               &AddNode_ITM_ID_VNDR.NodeValue = &VNDR_ITM_ID;
               &AddNode_VNDR_CATALOG_ID = &AddNode_LINE.AddElement("VNDR_CATALOG_ID");
               &AddNode_VNDR_CATALOG_ID.NodeValue = &VNDR_CATALOG_ID;
               /*CATEGORY CODE */
               &AddNode_CATEGORY_ID = &AddNode_LINE.AddElement("CATEGORY_ID");
               &AddNode_CATEGORY_ID.NodeValue = &CAT_ID;
               &AddNode_CATEGORY_CD = &AddNode_LINE.AddElement("CATEGORY_CD");
               &AddNode_CATEGORY_CD.NodeValue = &CAT_CD;
               &AddNode_CATEGORY_DESCR = &AddNode_LINE.AddElement("CATEGORY_DESCR");
               &AddNode_CATEGORY_DESCR.NodeValue = &CAT_DESCR;
               /* UNIT OF MEASURE */
               &AddNode_UOM = &AddNode_LINE.AddElement("UNIT_OF_MEASURE");
               &AddNode_UOM.NodeValue = &UOM;
               &AddNode_PRICE_DT_TYPE = &AddNode_LINE.AddElement("PRICE_DT_TYPE");
               &AddNode_PRICE_DT_TYPE.NodeValue = &PRICE_DT_TYPE;
               /* MANUFACTURERS DETAILS */
               &AddNode_MFG_ID = &AddNode_LINE.AddElement("MFG_ID");
               &AddNode_MFG_ID.NodeValue = &MFG_ID;
               &AddNode_MFG_DESCR = &AddNode_LINE.AddElement("MFG_DESCR");
               &AddNode_MFG_DESCR.NodeValue = &MFG_DESCR;
               &AddNode_MFG_ITM_ID = &AddNode_LINE.AddElement("MFG_ITM_ID");
               &AddNode_MFG_ITM_ID.NodeValue = &MFG_ITM_ID;
               /* Add Code for Custom Item Attribute Table - Z_ITEM_ATT_TBL */
               &AddNode_Z_ICC_CD = &AddNode_LINE.AddElement("Z_ICC_CODE_CD");
               &AddNode_Z_ICC_CD.NodeValue = &Z_ICC_CD;
               &AddNode_Z_AIC_CD = &AddNode_LINE.AddElement("Z_AIC_CODE_FLD");
               &AddNode_Z_AIC_CD.NodeValue = &Z_AIC_FLD;
               &AddNode_Z_DEVICE_IND = &AddNode_LINE.AddElement("Z_DEVICE_IND");
               &AddNode_Z_DEVICE_IND.NodeValue = &Z_DEVICE_IND;
               /* REMEDY REQUEST FLAG */
               &AddNode_Z_REM_REQ_FLG = &AddNode_LINE.AddElement("Z_REMEDY_RQST_FLG");
               &AddNode_Z_REM_REQ_FLG.NodeValue = &Z_REM_REQ_FLG;
               /* Check Items for Remedy */
               If &Z_REM_REQ_FLG = "Y" Then
                  &RMD_FLG = True;
               Else
                  If (&Z_REM_REQ_FLG = "N") Then
                     If (&RMD_FLG = True) Then
                     Else
                        &RMD_FLG = False;
                     End-If;
                  End-If;
               End-If;
               /* CONTRACT DETAILS */
               &AddNode_CNTRCT_SETID = &AddNode_LINE.AddElement("CNTRCT_SETID");
               &AddNode_CNTRCT_SETID.NodeValue = &CNTRCT_SETID;
               &AddNode_CNTRCT_ID = &AddNode_LINE.AddElement("CNTRCT_ID");
               &AddNode_CNTRCT_ID.NodeValue = &CNTRCT_ID;
               &AddNode_CNTRCT_LINE_NBR = &AddNode_LINE.AddElement("CNTRCT_LINE_NBR");
               &AddNode_CNTRCT_LINE_NBR.NodeValue = &CNTRCT_LINE_NBR;
               &AddNode_RECV_REQ = &AddNode_LINE.AddElement("RECV_REQ");
               &AddNode_RECV_REQ.NodeValue = &RECV_REQ;
               &AddNode_Z_QUOTE_NBR = &AddNode_LINE.AddElement("Z_QUOTE_NUMBER");
               &AddNode_Z_QUOTE_NBR.NodeValue = &Z_QUOTE_NBR;
               /* Add Line Comments */
               &AddNode_COMMENTS_LINE = &AddNode_LINE.AddElement("COMMENTS_LINE");
               /* Create the COMMENTS BLOCK LINE LEVEL */
               Local SQL &COMMENTS_SQL_LINE = GetSQL(SQL.Z_PO_COMMENTS_SQL, "A", "LIN", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &LINE_NBR, "Y");
               While &COMMENTS_SQL_LINE.Fetch(&COM_BU, &COM_PO_ID, &OPRID_LN, &COMMENT_ID_LN, &RANDOM_LN, &COMM_2000_LN);
                  If All(&COMM_2000_LN) Then
                     &AddNode_COMMENTS_2000_LN = &AddNode_COMMENTS_LINE.AddElement("LINE_COMMENTS");
                     &AddNode_COMMENTS_2000_LN = &AddNode_COMMENTS_2000_LN.AddCDataSection(&COMM_2000_LN);
                  End-If;
               End-While; /* WHILE END LINE LEVEL */
            End-While; /* LINE LEVEL */
            &SQL_LINE.Close();
            
            /**************************
             Generate the Schedule Loop
             **************************/
            Local string &STRSCHED = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 ";
            SQLExec("SELECT COUNT(*) FROM PS_PO_LINE_SHIP " | &STRSCHED, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &NO_SCHED);
            If All(&NO_SCHED) Then
               For &SCHED = 1 To &NO_SCHED;
                  Local Record &AA_PO_SCHED = CreateRecord(Record.Z_PO_SCHED_EVW);
                  &SQL_STRING_SCHED = "%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5";
                  Local SQL &SQL_SCHEDULE = CreateSQL(&SQL_STRING_SCHED, &AA_PO_SCHED, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED);
                  &SQL_SCHEDULE.ReuseCursor = True;
                  rem Local Record &AA_PO_SCHED_ATTN_TO = CreateRecord(Record.PV_REQ_SCH_DTL);
                  If None(&Z_PO_ATTN_TO) Then
                     &SQL_STRING_SCHED_ATTN_TO = "SELECT B.ATTN_TO FROM PS_PO_LINE_DISTRIB A,PS_PV_REQ_SCH_DTL B WHERE A.BUSINESS_UNIT = B.BUSINESS_UNIT(+) AND A.REQ_ID = B.REQ_ID(+) AND A.LINE_NBR = B.LINE_NBR(+) AND A.SCHED_NBR = B.SCHED_NBR(+) AND A.BUSINESS_UNIT = :1 AND A.PO_ID = :2 AND A.LINE_NBR =:3 AND A. SCHED_NBR = :4";
                     SQLExec(&SQL_STRING_SCHED_ATTN_TO, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &Z_SCHED_ATTN_TO);
                     &Z_ATTN_TO = &Z_SCHED_ATTN_TO;
                  Else
                     &Z_ATTN_TO = &Z_PO_ATTN_TO
                  End-If;
                  While &SQL_SCHEDULE.Fetch(&S_BU, &S_PO_ID, &S_LINE, &S_SCHED, &CANCEL_STATUS_SCHED, &CHNG_STATUS_SCHED, &CHNG_ORD_SEQ_SCHED, &PRICE_PO, &CURRENCY_CD, &SHIPTO_SETID, &SHIPTO_ID, &QTY_PO, &ZERO_PRICE_IND, &SCHED_MERCHANDISE_AMT, &SUT_APP, &FREIGHT_TERMS, &SHIP_TYPE_ID, &SHIP_DATE, &DUE_DT, &DUE_TIME, &L_ADDR1, &L_ADDR2, &L_ADDR3, &L_ADDR4, &L_CITY, &L_STATE, &L_POSTAL, &COUNTRY_SCHED, &SHIP_DESCR, &L_PHONE_SCHED)
                     /* Normal Processing SCHEDULE LEVEL */
                     &AddNode_SCHEDULE = &AddNode_LINE.AddElement("Z_SCHEDULE_VW");
                     &AddNode_SCHEDULE.AddAttribute("class", "R");
                     &AddNode_SCHED_BU = &AddNode_SCHEDULE.AddElement("BUSINESS_UNIT");
                     &AddNode_SCHED_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                     &AddNode_SCHED_PO_ID = &AddNode_SCHEDULE.AddElement("PO_ID");
                     &AddNode_SCHED_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                     &AddNode_SCHED_LINE_NBR = &AddNode_SCHEDULE.AddElement("LINE_NBR");
                     &AddNode_SCHED_LINE_NBR.NodeValue = &Line;
                     &AddNode_SCHED_NBR = &AddNode_SCHEDULE.AddElement("SCHED_NBR");
                     &AddNode_SCHED_NBR.NodeValue = &SCHED;
                     &AddNode_CN_STS_SCHED = &AddNode_SCHEDULE.AddElement("CANCEL_STATUS_SCHED");
                     &AddNode_CN_STS_SCHED.NodeValue = &CANCEL_STATUS_SCHED;
                     &AddNode_CHNG_STATUS_SCHED = &AddNode_SCHEDULE.AddElement("CHANGE_STATUS_SCHED");
                     &AddNode_CHNG_STATUS_SCHED.NodeValue = &CHNG_STATUS_SCHED;
                     &AddNode_CHNG_ORD_SEQ_SCHED = &AddNode_SCHEDULE.AddElement("CHNG_ORD_SEQ_SCHED");
                     &AddNode_CHNG_ORD_SEQ_SCHED.NodeValue = &CHNG_ORD_SEQ_SCHED;
                     &AddNode_PRICE_PO = &AddNode_SCHEDULE.AddElement("PRICE_PO");
                     &AddNode_PRICE_PO.NodeValue = &PRICE_PO;
                     &AddNode_CURRENCY_CD = &AddNode_SCHEDULE.AddElement("CURRENCY_CD");
                     &AddNode_CURRENCY_CD.NodeValue = &CURRENCY_CD;
                     &AddNode_QTY_PO = &AddNode_SCHEDULE.AddElement("QTY_PO");
                     &AddNode_QTY_PO.NodeValue = &QTY_PO;
                     &AddNode_ZERO_PRICE_IND = &AddNode_SCHEDULE.AddElement("ZERO_PRICE_IND");
                     &AddNode_ZERO_PRICE_IND.NodeValue = &ZERO_PRICE_IND;
                     &AddNode_SHIP_DATE = &AddNode_SCHEDULE.AddElement("SHIP_DATE");
                     &AddNode_SHIP_DATE.NodeValue = &SHIP_DATE;
                     &AddNode_DUE_DT = &AddNode_SCHEDULE.AddElement("DUE_DT");
                     &AddNode_DUE_DT.NodeValue = &DUE_DT;
                     &AddNode_DUE_TIME = &AddNode_SCHEDULE.AddElement("DUE_TIME");
                     &AddNode_DUE_TIME.NodeValue = &DUE_TIME;
                     &AddNode_SUT_APP = &AddNode_SCHEDULE.AddElement("SUT_APPLICABILITY");
                     &AddNode_SUT_APP.NodeValue = &SUT_APP;
                     &AddNode_MERCHANDISE_AMT_SCHED = &AddNode_SCHEDULE.AddElement("SCHED_MERCHANDISE_AMT");
                     &AddNode_MERCHANDISE_AMT_SCHED.NodeValue = &SCHED_MERCHANDISE_AMT;
                     &AddNode_FREIGHT_TERMS = &AddNode_SCHEDULE.AddElement("FREIGHT_TERMS");
                     &AddNode_FREIGHT_TERMS.NodeValue = &FREIGHT_TERMS;
                     /* SHIP TO LOCATION DETAILS */
                     &AddNode_SHIPTO_SETID = &AddNode_SCHEDULE.AddElement("SHIPTO_SETID");
                     &AddNode_SHIPTO_SETID.NodeValue = &SHIPTO_SETID;
                     &AddNode_SHIPTO_ID = &AddNode_SCHEDULE.AddElement("SHIPTO_ID");
                     &AddNode_SHIPTO_ID.NodeValue = &SHIPTO_ID;
                     /* PS_SHIPTO_TBL */
                     &AddNode_DESCR_SHIP_SCHED = &AddNode_SCHEDULE.AddElement("DESCR_SHIPTO");
                     &AddNode_DESCR_SHIP_SCHED.NodeValue = &DESCR_SHIP_SCHED;
                     rem &AddNode_DESCR111.NodeValue = &SHIP_DESCR;
                     &AddNode_SHIP_TYPE_ID = &AddNode_SCHEDULE.AddElement("SHIP_TYPE_ID");
                     &AddNode_SHIP_TYPE_ID.NodeValue = &SHIP_TYPE_ID;
                     /* LOCATION_TBL */
                     &AddNode_L_ADDR1 = &AddNode_SCHEDULE.AddElement("ADDRESS1_SHIPTO");
                     &AddNode_L_ADDR1.NodeValue = &L_ADDR1;
                     &AddNode_L_ADDR2 = &AddNode_SCHEDULE.AddElement("ADDRESS2_SHIPTO");
                     &AddNode_L_ADDR2.NodeValue = &L_ADDR2;
                     &AddNode_L_ADDR3 = &AddNode_SCHEDULE.AddElement("ADDRESS3_SHIPTO");
                     &AddNode_L_ADDR3.NodeValue = &L_ADDR3;
                     &AddNode_L_ADDR4 = &AddNode_SCHEDULE.AddElement("ADDRESS4_SHIPTO");
                     REM &AddNode_L_ADDR4.NodeValue = &L_ADDR4;
                     &AddNode_L_ADDR4.NodeValue = &Z_ATTN_TO;
                     &AddNode_L_CITY = &AddNode_SCHEDULE.AddElement("CITY_SHIPTO");
                     &AddNode_L_CITY.NodeValue = &L_CITY;
                     &AddNode_L_STATE = &AddNode_SCHEDULE.AddElement("STATE_SHIPTO");
                     &AddNode_L_STATE.NodeValue = &L_STATE;
                     &AddNode_L_POSTAL = &AddNode_SCHEDULE.AddElement("POSTAL_SHIPTO");
                     &AddNode_L_POSTAL.NodeValue = &L_POSTAL;
                     &AddNode_L_COUNTRY_CD = &AddNode_SCHEDULE.AddElement("COUNTRY_SHIPTO");
                     &AddNode_L_COUNTRY_CD.NodeValue = &COUNTRY_SCHED;
                     &AddNode_L_PHONE = &AddNode_SCHEDULE.AddElement("PHONE_SHIPTO");
                     &AddNode_L_PHONE.NodeValue = &L_PHONE_SCHED;
                  End-While; /* SCHEDULE LEVEL */
                  &SQL_SCHEDULE.Close();
                  
                  /******************************
                   Generate the Distribution Loop
                   ******************************/
                  Local string &STRDISTRIB = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 ";
                  SQLExec("SELECT COUNT(*) FROM PS_PO_LINE_DISTRIB " | &STRDISTRIB, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &NO_DISTRIB);
                  If All(&NO_DISTRIB) Then
                     For &DISTRIB = 1 To &NO_DISTRIB;
                        Local Record &AA_PO_DIST = CreateRecord(Record.Z_PO_DISTR_E_VW);
                        Local string &SQL_DIST = "%SelectAll(:1) WHERE BUSINESS_UNIT = :2 AND PO_ID = :3 AND LINE_NBR = :4 AND SCHED_NBR = :5 AND DISTRIB_LINE_NUM = :6";
                        Local SQL &SQL_DISTRIB = CreateSQL(&SQL_DIST, &AA_PO_DIST, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB);
                        &SQL_DISTRIB.ReuseCursor = True;
                        /*****************************
		   				 Fix for Defect ID 531 - START
		  				 *****************************/
                        While &SQL_DISTRIB.Fetch(&D_BU, &BU_INV, &BU_GL, &D_PO_ID, &D_LINE, &D_SCHED, &D_DIST, &DISTRIB_LN_STATUS, &DISTRIB_QTY_PO, &CURRENCY_CD_DISTRIB, &MERCHANDISE_AMT, &SALES_TAX_AMT, &USE_TAX_AMT, &ACCOUNT, &Z_COMBD_CD, &Z_EXTC, &Z_JOBNO, &Z_JEO, &Z_ADRS, &Z_RCBS, &Z_CPIM, &Z_RCC, &TAG_NUMBER, &DLOC, &BU_REQ, &REQ_ID, &REQ_LINE_NBR, &REQ_SCHED_NBR, &REQ_DISTRIB_NBR, &D_ADDR1, &D_ADDR2, &D_ADDR3, &D_ADDR4, &D_CITY, &D_STATE, &D_POSTAL, &COUNTRY_DISTRIB)
                           /***************************
		   				    Fix for Defect ID 531 - END
		  				    ***************************/
                           /* Retrieve Values From DISTRIB PPM */
                           Local string &StrSerial = " WHERE BUSINESS_UNIT = :1 AND PO_ID = :2 AND LINE_NBR = :3 AND SCHED_NBR = :4 AND DISTRIB_LINE_NUM = :5 ";
                           SQLExec("SELECT Z_SERIAL_NO FROM PS_Z_PO_DIS_PPM_VW " | &StrSerial, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &Z_SERIAL_NO);
                           /* Retrieve the REQUESTOR ID */
                           Local string &StrReqID = " WHERE A.REQ_ID = B.REQ_ID AND A.BUSINESS_UNIT = :1 AND B.PO_ID = :2 AND B.LINE_NBR = :3 AND B.SCHED_NBR = :4 AND B.DISTRIB_LINE_NUM = :5 ";
                           SQLExec("SELECT A.REQUESTOR_ID , A.OPRID_ENTERED_BY FROM PS_REQ_HDR A , PS_PO_LINE_DISTRIB B " | &StrReqID, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Line, &SCHED, &DISTRIB, &REQUESTOR_ID, &OPRID_DISTRIB);
                           /* Normal Processing DISTRIB LEVEL */
                           &AddNode_DISTRIBUTION = &AddNode_SCHEDULE.AddElement("Z_DISTRIB_VW");
                           &AddNode_DISTRIBUTION.AddAttribute("class", "R");
                           &AddNode_DISTRIB_BU = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT");
                           &AddNode_DISTRIB_BU.NodeValue = Z_PO_PUB_AET.BUSINESS_UNIT;
                           /* Inventory Business Unit */
                           &AddNode_BU_INV = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_IN");
                           &AddNode_BU_INV.NodeValue = &BU_INV;
                           /* GL Business Unit */
                           &AddNode_BU_GL = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_GL");
                           &AddNode_BU_GL.NodeValue = &BU_GL;
                           &AddNode_DISTRIB_PO_ID = &AddNode_DISTRIBUTION.AddElement("PO_ID");
                           &AddNode_DISTRIB_PO_ID.NodeValue = Z_PO_PUB_AET.PO_ID;
                           &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("LINE_NBR");
                           &AddNode_DISTRIB_LINE_NBR.NodeValue = &Line;
                           &AddNode_DISTRIB_SCHED_NBR = &AddNode_DISTRIBUTION.AddElement("SCHED_NBR");
                           &AddNode_DISTRIB_SCHED_NBR.NodeValue = &SCHED;
                           &AddNode_DISTRIB_LINE_NBR = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LINE_NUM");
                           &AddNode_DISTRIB_LINE_NBR.NodeValue = &DISTRIB;
                           &AddNode_DISTRIB_LN_STATUS = &AddNode_DISTRIBUTION.AddElement("DISTRIB_LN_STATUS");
                           &AddNode_DISTRIB_LN_STATUS.NodeValue = &DISTRIB_LN_STATUS;
                           &AddNode_DISTRIB_QTY_PO = &AddNode_DISTRIBUTION.AddElement("DISTRIB_QTY_PO");
                           &AddNode_DISTRIB_QTY_PO.NodeValue = &DISTRIB_QTY_PO;
                           &AddNode_CURRENCY_CD_DISTRIB = &AddNode_DISTRIBUTION.AddElement("DISTRIB_CURRENCY_CD");
                           &AddNode_CURRENCY_CD_DISTRIB.NodeValue = &CURRENCY_CD_DISTRIB;
                           &AddNode_MERCHANDISE_AMT = &AddNode_DISTRIBUTION.AddElement("MERCHANDISE_AMT");
                           &AddNode_MERCHANDISE_AMT.NodeValue = &MERCHANDISE_AMT;
                           /* TAX DETAILS */
                           &AddNode_SALES_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("SALES_TAX_AMT");
                           &AddNode_SALES_TAX_AMT.NodeValue = &SALES_TAX_AMT;
                           &AddNode_USE_TAX_AMT = &AddNode_DISTRIBUTION.AddElement("USE_TAX_AMT");
                           &AddNode_USE_TAX_AMT.NodeValue = &USE_TAX_AMT;
                           &AddNode_ACCOUNT = &AddNode_DISTRIBUTION.AddElement("ACCOUNT");
                           /************************************ 
						    ~~~~~CHANGE REQUEST - 73 START~~~~~~ 
							************************************/
                           If (&ACCOUNT = "00000000") Then
                              &NEW_ACCOUNT = "";
                           Else
                              &NEW_ACCOUNT = &ACCOUNT;
                           End-If;
                           &AddNode_ACCOUNT.NodeValue = &NEW_ACCOUNT;
                           /************************************ 
						    ~~~~~CHANGE REQUEST - 73 END~~~~~~ 
							************************************/
                           /* CUSTOM FIELDS */
                           &AddNode_Z_COMBOD_CD = &AddNode_DISTRIBUTION.AddElement("Z_COMBD_CD");
                           /* Strip of the _(Underscore) */
                           &Z_COMBD_CD = Substitute(&Z_COMBD_CD, "_", "");
                           &AddNode_Z_COMBOD_CD.NodeValue = &Z_COMBD_CD;
                           &AddNode_Z_EXTC = &AddNode_DISTRIBUTION.AddElement("Z_EXTC");
                           &AddNode_Z_EXTC.NodeValue = &Z_EXTC;
                           &AddNode_Z_JOBNO = &AddNode_DISTRIBUTION.AddElement("Z_JOBNO");
                           &AddNode_Z_JOBNO.NodeValue = &Z_JOBNO;
                           &AddNode_Z_JEO = &AddNode_DISTRIBUTION.AddElement("Z_JEO");
                           &AddNode_Z_JEO.NodeValue = &Z_JEO;
                           &AddNode_Z_ADRS = &AddNode_DISTRIBUTION.AddElement("Z_ADRS");
                           &AddNode_Z_ADRS.NodeValue = &Z_ADRS;
                           &AddNode_Z_RCBS = &AddNode_DISTRIBUTION.AddElement("Z_RCBS");
                           &AddNode_Z_RCBS.NodeValue = &Z_RCBS;
                           &AddNode_Z_CPIM = &AddNode_DISTRIBUTION.AddElement("Z_CPIM");
                           &AddNode_Z_CPIM.NodeValue = &Z_CPIM;
                           &AddNode_Z_RCC = &AddNode_DISTRIBUTION.AddElement("Z_RCC");
                           &AddNode_Z_RCC.NodeValue = &Z_RCC;
                           &AddNode_TAG_NUMBER = &AddNode_DISTRIBUTION.AddElement("TAG_NUMBER");
                           &AddNode_TAG_NUMBER.NodeValue = &TAG_NUMBER;
                           &AddNode_Z_SERIAL_NO = &AddNode_DISTRIBUTION.AddElement("Z_SERIAL_NO");
                           &AddNode_Z_SERIAL_NO.NodeValue = &Z_SERIAL_NO;
                           &AddNode_D_LOCATION = &AddNode_DISTRIBUTION.AddElement("LOCATION_DLOC");
                           &AddNode_D_LOCATION.NodeValue = &DLOC;
                           &AddNode_BU_REQ = &AddNode_DISTRIBUTION.AddElement("BUSINESS_UNIT_REQ");
                           &AddNode_BU_REQ.NodeValue = &BU_REQ;
                           &AddNode_REQ_ID = &AddNode_DISTRIBUTION.AddElement("REQ_ID");
                           &AddNode_REQ_ID.NodeValue = &REQ_ID;
                           &AddNode_REQ_ID_LINE = &AddNode_DISTRIBUTION.AddElement("REQ_LINE_NBR");
                           &AddNode_REQ_ID_LINE.NodeValue = &REQ_LINE_NBR;
                           &AddNode_REQ_ID_SCHED = &AddNode_DISTRIBUTION.AddElement("REQ_SCHED_NBR");
                           &AddNode_REQ_ID_SCHED.NodeValue = &REQ_SCHED_NBR;
                           &AddNode_REQ_ID_DISTRIB = &AddNode_DISTRIBUTION.AddElement("REQ_DISTRIB_NBR");
                           &AddNode_REQ_ID_DISTRIB.NodeValue = &REQ_DISTRIB_NBR;
                           /* PS_LOCATION_TBL */
                           &AddNode_D_ADDR1 = &AddNode_DISTRIBUTION.AddElement("ADDRESS1_DLOC");
                           &AddNode_D_ADDR1.NodeValue = &D_ADDR1;
                           &AddNode_D_ADDR2 = &AddNode_DISTRIBUTION.AddElement("ADDRESS2_DLOC");
                           &AddNode_D_ADDR2.NodeValue = &D_ADDR2;
                           &AddNode_D_ADDR3 = &AddNode_DISTRIBUTION.AddElement("ADDRESS3_DLOC");
                           &AddNode_D_ADDR3.NodeValue = &D_ADDR3;
                           &AddNode_D_ADDR4 = &AddNode_DISTRIBUTION.AddElement("ADDRESS4_DLOC");
                           &AddNode_D_ADDR4.NodeValue = &D_ADDR4;
                           &AddNode_D_CITY = &AddNode_DISTRIBUTION.AddElement("CITY_DLOC");
                           &AddNode_D_CITY.NodeValue = &D_CITY;
                           &AddNode_D_STATE = &AddNode_DISTRIBUTION.AddElement("STATE_DLOC");
                           &AddNode_D_STATE.NodeValue = &D_STATE;
                           &AddNode_D_POSTAL = &AddNode_DISTRIBUTION.AddElement("POSTAL_DLOC");
                           &AddNode_D_POSTAL.NodeValue = &D_POSTAL;
                           &AddNode_D_COUNTRY_CD = &AddNode_DISTRIBUTION.AddElement("COUNTRY_DLOC");
                           &AddNode_D_COUNTRY_CD.NodeValue = &COUNTRY_DISTRIB;
                        End-While; /* DISTRIB LEVEL */
                        &SQL_DISTRIB.Close();
                     End-For; /* Distribution Loop */
                  End-If; /* Distribution Loop */
               End-For; /* Schedule Loop */
            End-If; /* Schedule Loop */
         End-For; /* Line Loop */
      End-If; /* Line Loop */
      /* Generate the Formatted XML */
      /* Remove ampersands from the XML string.  The '&' symbol will crash the parser during the transformation. */
      /*&NEWDOC = Substitute(&NEWDOC, "&", "&amp;");*/
      InitVariables();
      &STR = &NEWDOC.GenFormattedXmlString();
      &msgName = Message.Z_PO_PUBLISH_MSG;
      /* URL Definitions */
      &Z_POPUBLISH_B2B = GetURL(URL.Z_POPUBLISH_B2B);
      &Z_POPUBLISH_ORBIT = GetURL(URL.Z_POPUBLISH_ORBIT);
      &Z_POPUBLISH_REMEDY = GetURL(URL.Z_POPUBLISH_REMEDY);
      /* Evaluate the Dispatch Method to Publish Appropriately */
      Evaluate &DISP_METHOD
      When "EDX"
         /* Process Response Message from ORBIT based on Status Code */
         &RET_ORB = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_ORBIT);
         &ORB_response = Call_ORBIT_RESP(&RET_ORB As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture ORBIT's reponse */
         /* Process Response Message from B2B based on Status Code */
         &RET_B2B = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_B2B);
         &B2B_response = Call_B2B_RESP(&RET_B2B As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture B2B's reponse */
         /* Check for Remedy Flag Supersedes the Dispatch Method */
         If (&RMD_FLG = True) Then
            /* Process Response Message from REMEDY based on Status Code */
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
         Break;
         /*************************************************
		   Fix for Defect ID 454. PO Publish was not firing 
		   for Dispatch methods other than EDX - START
		  *************************************************/
      When "EML"
         /* Process Response Message from ORBIT based on Status Code */
         &RET_ORB = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_ORBIT);
         &ORB_response = Call_ORBIT_RESP(&RET_ORB As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture ORBIT's reponse */
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         If (&RMD_FLG = True) Then
            /* Process Response Message from REMEDY based on Status Code */
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
         Break;
      When "FAX"
         /* Process Response Message from ORBIT based on Status Code */
         &RET_ORB = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_ORBIT);
         &ORB_response = Call_ORBIT_RESP(&RET_ORB As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture ORBIT's reponse */
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         If (&RMD_FLG = True) Then
            /* Process Response Message from REMEDY based on Status Code */
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
         Break;
      When "PRN"
         /* Process Response Message from ORBIT based on Status Code */
         &RET_ORB = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_ORBIT);
         &ORB_response = Call_ORBIT_RESP(&RET_ORB As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture ORBIT's reponse */
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         If (&RMD_FLG = True) Then
            /* Process Response Message from REMEDY based on Status Code */
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
         Break;
      When "PHN"
         /* Process Response Message from ORBIT based on Status Code */
         &RET_ORB = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_ORBIT);
         &ORB_response = Call_ORBIT_RESP(&RET_ORB As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture ORBIT's reponse */
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         If (&RMD_FLG = True) Then
            /* Process Response Message from REMEDY based on Status Code */
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
         Break;
      When "B2B"
         &RET_B2B = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_B2B);
         &B2B_response = Call_B2B_RESP(&RET_B2B As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture B2B's reponse */
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         /* Begin QWEST QR3IPO005 Defect Fix # 345 PSCIO-R3 Sameer Kataria 09/28/2006 Commented the check for Remedy flag to disable PO Publish to Remedy if Dispatch method is B2B */
         <*         
		 If (&RMD_FLG = True) Then
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
		 *>
         /* End QWEST QR3IPO005 Defect Fix # 345 PSCIO-R3 Sameer Kataria 09/28/2006 */
         Break;
      When "ORB"
         /* Process Response Message for ORBIT based on Status Code */
         rem &file = GetFile("/psoft/fscmtst/interface/conversion/in/PO_OUT." | %Datetime | ".txt", "W", "A", %FilePath_Absolute);
         &RET_ORB = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_ORBIT);
         &ORB_response = Call_ORBIT_RESP(&RET_ORB As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture ORBIT's reponse */
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         /* Begin QWEST QR3IPO005 Defect Fix # 345 PSCIO-R3 Sameer Kataria 09/28/2006 Commented the check for Remedy flag to disable PO Publish to Remedy if Dispatch method is ORBIT */
         <*         
		 If (&RMD_FLG = True) Then
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
		 *>
         /* End QWEST QR3IPO005 Defect Fix # 345 PSCIO-R3 Sameer Kataria 09/28/2006 */
         Break;
      When "RMD"
         /* Check for Remedy Flag Supercedes the Dispatch Method */
         If (&RMD_FLG = True) Then
            &RET_REM = SyncRequestXmlDoc(&NEWDOC, Message.Z_PO_PUBLISH_MSG, &Z_POPUBLISH_REMEDY);
            &RMD_response = Call_REMEDY_RESP(&RET_REM As XmlDoc, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &DISP_METHOD); /* Function to capture REMEDY's reponse */
         End-If;
         Break;
         /*************************************************
		   Fix for Defect ID 454. PO Publish was not firing 
		   for Dispatch methods other than EDX - END
		  *************************************************/
      End-Evaluate;
      
      /* Where Clause */
      Local string &whereStr = " WHERE PROCESS_INSTANCE = :1 AND BUSINESS_UNIT = :2 AND PO_ID = :3";
      /* Update Database if Publish was successful */
      If (&ORB_response = "TRUE" Or
            &B2B_response = "TRUE" Or
            &RMD_response = "TRUE") Then
         SQLExec("UPDATE PS_Z_PO_TEMP SET Z_POPUB_FLG_CD = 'P'" | &whereStr, Z_PO_PUB_AET.PROCESS_INST_STG, Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);
      End-If;
      rem Else;
   End-If; /* RETAIL BU CHECK */
End-Function;

/**** MAIN ****/

/*DEFINE ROWSETS*/
Local Rowset &Z_PO_HDR = CreateRowset(Record.PO_HDR);

/* Fill the HDR Rowset for the PO_ID */
&NO_PO_LOADED = &Z_PO_HDR.Fill("WHERE BUSINESS_UNIT = :1 AND PO_ID = :2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID);

/* Check Whether PO's need to be processed */

/*****************************************************************************************
Query to check if the ATTN_TO is populated at the PO Level*/
SQLExec("SELECT ATTN_TO FROM PS_Z_PO_HDR_PPM WHERE BUSINESS_UNIT=:1 AND PO_ID =:2", Z_PO_PUB_AET.BUSINESS_UNIT, Z_PO_PUB_AET.PO_ID, &Z_PO_ATTN_TO);

/******************************************************************************************/

If All(&NO_PO_LOADED) Then
   For &PO = 1 To &Z_PO_HDR.ActiveRowCount
      /* Used Trace settings to determine Core Dump */
      rem SetTracePC(%TracePC_Assigns + %TracePC_Stack + %TracePC_List + %TracePC_ParamsOut + %TracePC_Starts + %TracePC_Functions + %TracePC_ParamsIn + %TracePC_Evaluations);
      rem SetTraceSQL(%TraceSQL_Statements + %TraceSQL_Variables + %TraceSQL_AppEngineInfo);
      /* NEED TO REMOVE THE ABOVE STATEMENTS BEFORE MIGRATING */
      CALL_PO(&Z_PO_HDR(&PO).GetRecord(Record.PO_HDR));
   End-For; /* HEADER FILL */
   /* Commit Work */
   CommitWork();
   /* Call Garbage Collector */
   CollectGarbage();
   &Z_PO_HDR.Flush();
End-If;

/* End QWEST Z_QR3IPO005_PRJ Prashant Prakash 04/10/2006 */
/* End QWEST Z_QR3IPO005_PRJ_454 Prashant Prakash 07/18/2006 */
/* End QWEST Z_QR3IPO005_PRJ_CR73 Prashant Prakash 07/21/2006 */
/* End QWEST Z_QR3IPO005_PRJ_531 Prashant Prakash 07/27/2006 */



/************************** $Qwest$ **************************************
ITR#:     QR3IPO005
NAME:     Prashant Prakash
DATE:     04/10/2006
DESCR:    Added New Function PUBLISH_PO 
		  
FUNCTIONS:
IsJob     - This function is used to retrieve the Process Instance for the 
			Application Engine
Input	  - Job Process Instance  
Output    - Process Instance

CriteriaForProcessInstance - Process Instance of the SQR POPO005.sqr

Input 					   - Process Instance
Output 					   - Where Clause for the Do Select
/*************************************************************************/

/* Begin QWEST QR3IPO005 Prashant Prakash 04/06/2006  
   This code was added to Retrieve the Process Instance for that PO */

/*****************************************
 FUNCTION TO RETRIEVE THE PROCESS INSTANCE 
 *****************************************/
Function IsJob(&pi As number) Returns boolean;
   Local boolean &found, &job;
   Local Record &rcd;
   
   &rcd = CreateRecord(Record.PSPRCSRQST);
   &rcd.PRCSINSTANCE.Value = &pi;
   &found = &rcd.SelectByKey();
   If &found Then
      If All(&rcd.JOBINSTANCE.Value) Then
         &job = True;
      End-If;
   End-If;
   Return &job;
End-Function;

Function CriteriaForProcessInstance(&pi As number, &where As string) Returns string;
   Local string &retval, &Str_All, &Str_Else;
   Local number &pi_sqr;
   
   &retval = &where;
   If IsJob(&pi) Then
      &Str_All = " AND PROCESS_INSTANCE = :1 AND Z_POPUB_FLG_CD <> 'P'";
      &retval = &retval | &Str_All;
      /* Changed as the Sequence of Execution of Z_PODISP was altered */
      &pi_sqr = &pi - 2;
      &retval = ExpandSqlBinds(&retval, &pi_sqr);
   Else
      /* Check for Published/UnPublished Flag */
      &Str_Else = " AND Z_POPUB_FLG_CD <> 'P'";
      &retval = &retval | &Str_Else;
   End-If;
   Return &retval;
End-Function;

/***  MAIN  ***/
Local string &sqltext;

/* Call Function to Create WHERE CLAUSE */
&sqltext = CriteriaForProcessInstance(Z_PO_PUB_AET.PROCESS_INSTANCE, "");
Z_PO_PUB_AET.WHERE_CLAUSE.Value = &sqltext;

/* End QWEST QR3IPO005 Prashant Prakash 04/06/2006 */


%SelectInit (PROCESS_INST_STG, PO_ID, DISP_METHOD, PO_AMT_TTL) 
 SELECT PROCESS_INSTANCE 
 , PO_ID 
 , DISP_METHOD 
 , PO_AMT_TTL 
  FROM PS_Z_PO_TEMP 
 WHERE BUSINESS_UNIT = %Bind(BUSINESS_UNIT) %Bind(WHERE_CLAUSE, NOQUOTES) 
  ORDER BY PO_ID, PROCESS_INSTANCE


  /*
************************** $Qwest$ ************************************************************************
RICEF#:   QR3IPO006 
NAME:     Madhavi Ghodke
DATE:     04/03/2006
DESCR:    Following functions has been used by Purchase Order,Requisition Components to make call to CFE
***********************************************************************************************************
*/

/*
************************** $Qwest$ ********************************
RICEF#:   QR3EPO040 
NAME:     Madhavi Ghodke
DATE:     04/25/2006
DESCR:    A Peoplecode to trigger notification to Requestor
          for each Requisition that has a CFE status of ԅrrorԍ
          (indicating invalid chartfield combination). 
          A notification may contain an email or worklist or both 
          based on the Requestor preferences. 
********************************************************************
*/

/*
************************** $Qwest$ ************************************************************************
RICEF#:   QR3EPO094
NAME:     Madhavi Ghodke
DATE:     07/26/2006
DESCR:    Capital_JobID_Check() function is added.
***********************************************************************************************************
*/

/*
************************** $Qwest$ ************************************************************************
RICEF#:   CR-73 (Change Request 73)
NAME:     Madhavi Ghodke
DATE:     07/21/2006
DESCR:    Code to override dummy account code i.e.If Account code with value'00000000' then pass NULL 
for MAIN & SUB Combination.
***********************************************************************************************************
*/

import PT_WF_WORKLIST:WorklistEntry;
import PT_WF_NOTIFICATION:*;

Declare Function construct_url PeopleCode FUNCLIB_WV.WF_FUNCTIONS FieldFormula;
Declare Function Log_PPM_error PeopleCode Z_ERROR_LOG.Z_ERR_CODE FieldFormula;

/*Begin QWEST QR3EPO094 Madhavi Ghodke 07/26/2006 PSCIO-Release3*/

/******************************************************************************************************
Capital_JobID_Check() : 
  This function looks whether Requisition has Capital Job ID required Items are present on requisition 
or not , If these are present on requisition then checks whether requestor has entered corresponding 
JOB NO's on corresponding requisition distrib lines or not , If requestor has not selected any JOB ID
then this function returns TRUE other wise this returns FALSE

Capital_JOBID_Check() is being called from PV_REQ_WRK.PV_SAVE_AND_SUBMIT.FieldChange peoplecode

*******************************************************************************************************/

Function Capital_JobID_Check Returns boolean
   
   Local boolean &showError;
   &showError = False;
   
   SQLExec("SELECT Z_RETAIL_BU_FLG FROM PS_Z_BU_PM_TBL WHERE BUSINESS_UNIT = :1", REQ_HDR.BUSINESS_UNIT, &RETAIL_BU_FLG);
   If (All(&RETAIL_BU_FLG) And
         &RETAIL_BU_FLG = "N") Then
      
      
      Local number &cnt1, &cnt2, &cnt3, &tmpLineRowCnt, &tmpShipRowCnt, &tmpDistRowCnt;
      Local string &capJobFlg;
      
      &tmpLineRowCnt = GetLevel0()(1).GetRowset(Scroll.REQ_LINE).RowCount;
      
      &cnt1 = 1;
      While (&cnt1 <= &tmpLineRowCnt)
         SQLExec("SELECT Z_CAPJOB_REQD_FLG FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", GetLevel0()(1).REQ_LINE (&cnt1).REQ_LINE.ITM_SETID.Value, GetLevel0()(1).REQ_LINE (&cnt1).REQ_LINE.INV_ITEM_ID.Value, &capJobFlg);
         
         If (All(&capJobFlg) And
               &capJobFlg = "Y") Then
            &tmpShipRowCnt = GetLevel0()(1).REQ_LINE (&cnt1).GetRowset(Scroll.REQ_LINE_SHIP).ActiveRowCount;
            &cnt2 = 1;
            While (&cnt2 <= &tmpShipRowCnt)
               &tmpDistRowCnt = GetLevel0()(1).REQ_LINE (&cnt1).REQ_LINE_SHIP (&cnt2).GetRowset(Scroll.REQ_LN_DISTRIB).ActiveRowCount;
               &cnt3 = 1;
               While (&cnt3 <= &tmpDistRowCnt)
                  
                  If ((GetLevel0()(1).REQ_LINE (&cnt1).REQ_LINE_SHIP (&cnt2).GetRowset(Scroll.REQ_LN_DISTRIB)(&cnt3).REQ_LN_DISTRIB.LINE_NBR.Value = GetLevel0()(1).REQ_LINE (&cnt1).REQ_LINE.LINE_NBR.Value) And
                        (None(GetLevel0()(1).REQ_LINE (&cnt1).REQ_LINE_SHIP (&cnt2).GetRowset(Scroll.REQ_LN_DISTRIB)(&cnt3).REQ_LN_DISTRIB.Z_JOBNO.Value))) Then
                     
                     &showError = True;
                  End-If;
                  &cnt3 = &cnt3 + 1;
               End-While;
               &cnt2 = &cnt2 + 1;
            End-While;
         End-If;
         &cnt1 = &cnt1 + 1;
      End-While;
      
      
   End-If;
   Return &showError;
End-Function;

/*End QWEST QR3EPO094 Madhavi Ghodke 07/26/2006 PSCIO-Release3*/

/********* Begin QWEST QR3EPO040 Madhavi Ghodke 04/25/06 PSCIO Release3*********/

/*Following Functions getAlternateUserName() ,isAlternateUserValid(),routeWorklist(),routeEmail(),build_keylist_db_fld()  are used by CFE validation Fallout design*/

/******************************************************************************************************
  getAlternateUserName() : 
  This function accepts a Operator Id and gets the name of the Alternate User if any.
  Parameters: &operator_id = Operator ID of the user for whom the Alternate user has to be found.
  Returns: Alternate User's name
  
  This Function is being used by Application Engine Z_CFE_INTFC.Main.Z_Step01.OnExecute
*******************************************************************************************************/

Function getAlternateUserName(&operator_id As string) Returns string
   Local string &sql;
   &sql = ExpandSqlBinds(FetchSQL(SQL.Z_GET_ALT_USER), &operator_id);
   SQLExec(&sql, &alternate_user);
   Return &alternate_user;
End-Function;


/****************************************************************************************************************
  isAlternateUserValid() :
  This function accepts a Operator Id and gets the name of the Alternate User for the current date, if any.
  Parameters: &operator_id = Operator ID of the user for whom the Alternate user has to be found.
  Returns: Alternate User ID is valid or not.

This Function is being used by Application Engine Z_CFE_INTFC.Main.Z_Step01.OnExecute
*****************************************************************************************************************/

Function isAlternateUserValid(&operator_id As string) Returns boolean
   Local string &sql;
   &sql = ExpandSqlBinds(FetchSQL(SQL.Z_GET_ALT_USER_DT), &operator_id);
   SQLExec(&sql, &alternate_user);
   If All(&alternate_user) Then
      Return True;
   Else
      Return False;
   End-If;
End-Function;

/***************************************************************************
  build_keylist_db_fld() :
  Builds the query string for key fields using actual field names.
  These field names and values are used to map the values to search fields.
 ******************************************************************************/

Function build_keylist_db_fld(&fld1, &val1, &fld2, &val2) Returns string;
   
   &key_list = "";
   If All(&val1) Then
      &key_list = &key_list | "&" | &fld1 | "=" | &val1;
   End-If;
   If All(&val2) Then
      &key_list = &key_list | "&" | &fld2 | "=" | &val2;
   End-If;
   Return "&ViaEmail=Y" | &key_list;
   
End-Function;

/****************************************************************************************************************
routeWorlist()  
This function is used to send WorkList to requestor if Requisition failed in CFE Validations.

Parameters used Are :
         &busUnit -- This tells the BusinessUnit of requisition which failed in CFE Validation.
         &reqId   -- This tells the Requisition ID of requisition which failed in CFE Validation.                   
         &wlName  -- The Worklist name , which must be hardcoded, against which Worklist Entry should get generated.
         &requestor_Id --Requestor ID of requisition, to whom worklist should get generated, its one of the key
                         field of worklist record.
         &operator_Id --Operator ID ,to whom worklist should get generated   
This Function is being used by Application Engine Z_CFE_INTFC.Main.Z_Step01.OnExecute
*****************************************************************************************************************/


Function routeWorklist(&busUnit As string, &reqId As string, &wlName As string, &requestor_Id As string, &operator_Id As string)
   
   Local PT_WF_WORKLIST:WorklistEntry &z_wl_requisition;
   Local number &create, &update, &save;
   Local Record &recInsertWL;
   Local string &z_wl_setId, &z_wl_reqId;
   /* Setup worklist record for routing */
   
   &z_wl_requisition = create PT_WF_WORKLIST:WorklistEntry();
   
   
   &z_wl_requisition.busprocname = "Z_REQ_CFE_BP";
   &z_wl_requisition.busactivity = "Z_REQ_CFE_ACT";
   &z_wl_requisition.buseventname = "Z_REQ_CFE_EVT";
   &z_wl_requisition.worklistname = &wlName;
   &z_wl_requisition.oprid = &operator_Id;
   
   
   &create = &z_wl_requisition.Create();
   
   If (&z_wl_requisition.Create() <> 0) Then
      &z_req_worklist = CreateRecord(Record.Z_IN_REQLOD_WL);
      &z_wl_requisition.oprid = &operator_Id;
      &z_req_worklist.GetField(Field.BUSPROCNAME).Value = &z_wl_requisition.busprocname;
      &z_req_worklist.GetField(Field.ACTIVITYNAME).Value = &z_wl_requisition.busactivity;
      &z_req_worklist.GetField(Field.EVENTNAME).Value = &z_wl_requisition.buseventname;
      &z_req_worklist.GetField(Field.WORKLISTNAME).Value = &z_wl_requisition.worklistname;
      &z_req_worklist.GetField(Field.INSTANCEID).Value = &z_wl_requisition.instanceid;
      &z_req_worklist.GetField(Field.TRANSACTIONID).Value = &z_wl_requisition.transactionid;
      &z_req_worklist.GetField(Field.BUSINESS_UNIT).Value = &busUnit;
      &z_req_worklist.GetField(Field.REQ_ID).Value = &reqId;
      &z_req_worklist.GetField(Field.REQUESTOR_ID).Value = &requestor_Id;
      
      
      &z_req_worklist.Insert();
      &update = &z_wl_requisition.Update();
      
      If &update = 1 Then
         /* UPDATE SUCCESS */
         /* SAVE WL entry to DB */
         &save = &z_wl_requisition.Save();
         
         If &save <> 0 Then
            /* SAVE SUCESS */
         Else
            /* SAVE FAILED */
         End-If;
      Else
         /* UPDATE FAILED */
         /* Do Error handling */
      End-If;
   Else
      
      /* CREATE FAILED */
      /* Do Error handling */
   End-If;
   
End-Function;

/****************************************************************************************************************
  This function is used to send Email to requestor if Requisition failed in CFE Validations.
routeEmail()
Parameters used Are :
         &busUnit -- This tells the BusinessUnit of requisition which failed in CFE Validation.
         &reqId   -- This tells the Requisition ID of requisition which failed in CFE Validation.                   
         &emailId  -- Email Id of requestor,where the email should go.
         &entered_date --Its one of the content of Email , it tells the creation date of Requisition.
         
This Function is being used by Application Engine Z_CFE_INTFC.Main.Z_Step01.OnExecute
*****************************************************************************************************************/

Function routeEmail(&busUnit As string, &reqId As string, &emailId As string, &entered_date As string)
   
   Local PT_WF_NOTIFICATION:NotificationAddress &z_notify_address, &z_notify_address_1;
   Local PT_WF_NOTIFICATION:Notification &z_notification;
   Local PT_WF_NOTIFICATION:NotificationTemplate &z_notify_template;
   Local array of PT_WF_NOTIFICATION:NotificationAddress &z_notify_to, &z_notify_to_1;
   
   Local array of string &array_values;
   Local array of string &error_descr_arr;
   Local Rowset &z_cfe_errors, &z_editinfo_ln;
   Local string &z_query_str, &url_poweruser, &qs_int;
   Local string &xml_strResult, &z_query;
   Local number &i, &j, &k;
   
   &z_notify_to = CreateArrayRept(&z_notify_address, 0);
   &z_notify_address = create PT_WF_NOTIFICATION:NotificationAddress("", "", "", &emailId, "Email");
   
   &z_notify_template = create PT_WF_NOTIFICATION:NotificationTemplate("", "", "Z_CFE_NOTIFICATION", "G");
   &z_notify_to.Push(&z_notify_address);
   
   &z_query_str = GetURL(URL.Z_REQ_CFE_NOTIF);
   &url_poweruser = construct_url( False, &z_query_str, "", "", "N", "N");
   &qs_int = build_keylist_db_fld(Field.BUSINESS_UNIT, &busUnit, Field.REQ_ID, &reqId);
   
   &z_query_str = &url_poweruser | &qs_int;
   
   
   
   /* Commented : we can use this function as well MAdhavi 15th june 06
   &url_poweruser = construct_url( False, "PV_MAIN_MENU.PV_REQUISITIONS.GBL?Page=PV_REQ_FORM&Action=U" | build_keylist_db_fld(Field.BUSINESS_UNIT, &busUnit, Field.REQ_ID, &reqId), "", "", False, True);
   */
   
   &array_values = CreateArrayRept("", 0);
   &error_descr_arr = CreateArrayRept("", 0);
   &array_values.Push(&busUnit);
   &array_values.Push(&reqId);
   &array_values.Push(&entered_date);
   &array_values.Push(&z_query_str);
   &z_cfe_errors = CreateRowset(Record.Z_CFE_ERRORS);
   &z_editinfo_ln = CreateRowset(Record.Z_EDITINFO_LN);
   &z_cfe_errors.Fill("where Business_unit=:1 and Z_ID=:2 and Z_ID_TYPE=:3", &busUnit, &reqId, "REQ");
   
   
   &xml_strResult = "<root><vars>";
   For &i = 1 To &array_values.Len
      &xml_strResult = &xml_strResult | "<" | &i | ">";
      &xml_strResult = &xml_strResult | &array_values [&i];
      &xml_strResult = &xml_strResult | "</" | &i | ">";
   End-For;
   &xml_strResult = &xml_strResult | "<5" | ">";
   
   For &j = 1 To &z_cfe_errors.ActiveRowCount
      &z_editinfo_ln.Fill("where Z_ERROR_CODE=:1", &z_cfe_errors.GetRow(&j).Z_CFE_ERRORS.Z_ERROR_CODE.Value);
      For &k = 1 To &z_editinfo_ln.ActiveRowCount
         If (&z_editinfo_ln.GetRow(&k).Z_EDITINFO_LN.Z_ERROR_STATUS.Value = "E") Then
            
            
            &xml_strResult = &xml_strResult | "  " | &z_cfe_errors.GetRow(&j).Z_CFE_ERRORS.LINE_NBR.Value | "                     " | &z_editinfo_ln.GetRow(&k).Z_EDITINFO_LN.Z_ERROR_DESCR.Value | Char(10);
            Break;
         Else
         End-If;
      End-For;
   End-For;
   
   &xml_strResult = &xml_strResult | "</5" | ">";
   &xml_strResult = &xml_strResult | "</vars></root>";
   
   &success = &z_notify_template.GetAndExpandTemplate(%Language, &xml_strResult);
   
   /*Begin Sameer Added From User ID*/
   /*&z_notification = create PT_WF_NOTIFICATION:Notification("", %Datetime, %Language);*/
   &z_notification = create PT_WF_NOTIFICATION:Notification("Z_MAIL_ADMIN", %Datetime, %Language);
   /*Begin Sameer Added From User ID*/
   &z_notification.NotifyTo = &z_notify_to;
   
   &z_notification.Subject = &z_notify_template.Subject;
   &z_notification.Message = &z_notify_template.Text;
   &z_notification.Send();
   
   
End-Function;


/********* End QWEST QR3EPO040 Madhavi Ghodke 05/06/06 PSCIO Release3*********/


/********* Begin QWEST QR3IPO006 Madhavi Ghodke 04/04/06 PSCIO Release3*********/

/********* Following function generates Request XMLDoc. This function has been referred by CFE_Request_Publish()*/

/****************************************************************************************************************
Create_CFE_XML()   
This function is used to create Request XML for CFE.This function passes various variables to a Message,which
is maintained in Message Catalog Entry.

Parameters used Are :
         &z_source_system : Source system i.e.from where this XML gets published.For PSCIO ,it is 'PSSCM'
         &z_edit_grp_code : Edit Group Code , its required by CFE & PSCIO passes value '0851' to this XML tag.
         &z_entp_id : Enterprise Id , its Business_unit_GL used by requisition or purchase order's distrib lines.
         &z_address_id : Z_ADRS chart field used on distrib lines of requisition & purchase orders.
         &z_asset_sr_intr_id : TAG_NUMBER chart field used on distrib lines of requisition & purchase orders.
         &z_asset_intr_id :  Z_AIC_CODE_FLD chart field used on distrib lines of requisition & purchase orders.
         &z_charged_rc :Z_RCC chart field used on distrib lines of requisition & purchase orders. 
         &z_job_id : Z_JOBNO    
         &z_journal_entity_org_code :  Z_JEO
         &z_market_unit_id : Z_RCBS
         &z_project_member_id : Z_CPIM
         &z_exp_code :Z_EXTC
         &z_acc_main : ACCOUNT is splitted in MAIN. 
         &z_acc_sub : ACCOUNT is splitted in SUB
         &z_frc_grp : Z_COMBD_CD is splitted in prefix.
         &z_frc_suffix : Z_COMBD_CD is splitted in suffix.
This Function is being used by Application Engine Z_CFE_INTFC.Main.Z_Step01.OnExecute
                               Component PV_REQUISITION on its SavePostChange Event
                               Component PURCHASE_ORDER on its SavePostChange Event
*****************************************************************************************************************/

Function Create_CFE_XML(&z_source_system As string, &z_edit_grp_code As string, &z_entp_id As string, &z_address_id As string, &z_asset_sr_intr_id As string, &z_asset_intr_id As string, &z_charged_rc As string, &z_job_id As string, &z_journal_entity_org_code As string, &z_market_unit_id As string, &z_project_member_id As string, &z_exp_code As string, &z_acc_main As string, &z_acc_sub As string, &z_frc_grp As string, &z_frc_suffix As string) Returns XmlDoc
   
   Local XmlDoc &z_cfe_xmlDoc;
   &z_cfe_xmlDoc = CreateXmlDoc("");
   
   &str = MsgGetExplainText(20000, 46, "Msg not found", &z_source_system, &z_edit_grp_code, %Date, &z_entp_id, &z_address_id, &z_asset_intr_id, &z_asset_sr_intr_id, &z_project_member_id, &z_frc_grp, &z_frc_suffix, &z_acc_main, &z_acc_sub, &z_exp_code, &z_job_id, &z_journal_entity_org_code, &z_market_unit_id, &z_charged_rc, &z_edit_grp_code);
   
   
   &ret1 = &z_cfe_xmlDoc.ParseXmlString(&str);
   
   Return &z_cfe_xmlDoc;
   
End-Function;


/***************Added Following Function to split the FRC Code ********************/

/***************************************************************************************************
This function takes FRC value as its parameter,looks for "_" , If "_" is found then returns
left side of "_" as FRC Prefix & right side of "_" as FRC Suffix.
IF it does not found "_" then considers Left 4 characters as FRC Prefix & right 2 characters as 
FRC Suffix.
****************************************************************************************************/

Function frcp_return(&z_combd_cd As string) Returns array of string
   
   Local array of string &frcp;
   &frcp = CreateArray("", "");
   &ln_z_combd_cd = Len(&z_combd_cd);
   &num = Find("_", &z_combd_cd);
   
   If (&num = 0) Then
      &frcp [1] = Substring(&z_combd_cd, 1, 4);
      
      &frcp [2] = Substring(&z_combd_cd, 5, 6);
      
      
   Else
      
      &frcp [1] = Substring(&z_combd_cd, 1, &num - 1);
      
      &frcp [2] = Substring(&z_combd_cd, &num + 1, &ln_z_combd_cd);
      
   End-If;
   
   Return (&frcp);
End-Function;

/***************************************************************************************************
CFE_frcp_return()
Its specially designed to return with FRC Suffix & Prefix values with blank spaces if it is less
than length 6.
It is used in request XML of CFE &JETS.

This function takes FRC value as its parameter,looks for "_" , If "_" is found then returns
left side of "_" by associating it with  blank space if FRC Prefix is less than 4 characters & 
associating one blank space to right side of "_" if its length is one as FRC Suffix.
IF it does not found "_" then considers Left 4 characters as FRC Prefix & right 2 characters as 
FRC Suffix.
****************************************************************************************************/

Function CFE_frcp_return(&z_combd_cd As string) Returns array of string
   
   Local array of string &frcp;
   &frcp = CreateArray("", "");
   &ln_z_combd_cd = Len(&z_combd_cd);
   &num = Find("_", &z_combd_cd);
   
   If (&num = 0) Then
      &frcp [1] = Substring(&z_combd_cd, 1, 4);
      &frcp [2] = Substring(&z_combd_cd, 5, 6);
      
   Else
      
      &frcp [1] = Substring(&z_combd_cd, 1, &num - 1);
      If Len(&frcp [1]) < 4 Then
         Repeat
            &frcp [1] = Char(32) | &frcp [1];
         Until Len(&frcp [1]) = 4
      End-If;
      &frcp [2] = Substring(&z_combd_cd, &num + 1, &ln_z_combd_cd);
      If Len(&frcp [2]) = 1 Then
         &frcp [2] = &frcp [2] | Char(32);
      End-If;
   End-If;
   
   Return (&frcp);
End-Function;

/*
 CFE_jobno_return() is being used by Request XML's of CFE &JETS
*/
Function CFE_jobno_return(&Z_JOBNO_NEW As string) Returns string
   Local number &len;
   &len = Len(&Z_JOBNO_NEW);
   If &len < 10 Then
      Repeat
         &Z_JOBNO_NEW = Char(32) | &Z_JOBNO_NEW;
      Until Len(&Z_JOBNO_NEW) = 10;
   End-If;
   Return &Z_JOBNO_NEW;
End-Function;

/***************Added Following Response Code For TESTING PURPOSE ********************/
/*
        test_response() :
        The response is hardcoded for testing purpose
*/
Function test_response() Returns XmlDoc
   Local XmlDoc &z_cfe_resp_xmldoc;
   Local XmlNode &rc_info, &charge, &edit_err, &err_list, &err_list_ent, &err_text1, &err_text2, &err_text3, &err_code1, &err_code2, &err_code3;
   Local XmlNode &e_a_r, &p_a_c, &prog, &audit, &message;
   Local XmlNode &text1, &text2, &text3, &text4, &text5, &text6, &text7, &text8, &text9, &text10;
   &z_cfe_resp_xmldoc = CreateXmlDoc("<?xml version='1.0'?><ProfitCommonEdit/>");
   &z_e_resp = &z_cfe_resp_xmldoc.DocumentElement.AddElement("EditResponse");
   &rc_info = &z_e_resp.addElement("RCInfo");
   &charge_rc = &rc_info.AddElement("ChargedRC");
   &text1 = &charge_rc.addtext("Assumed RCCode");
   
   &edit_err_info = &z_e_resp.addElement("EditErrorInfo");
   &err_count = &edit_err_info.addElement("ErrorCount");
   &text2 = &err_count.addtext("2");
   &err_list = &edit_err_info.addElement("ErrorList");
   &err_list_ent = &err_list.AddElement("ErrorListEntry");
   
   &err_text1 = &err_list_ent.AddElement("ErrorText");
   &text3 = &err_text1.AddText("Missing ENTP");
   &err_code1 = &err_list_ent.AddElement("ErrorCode");
   &text4 = &err_code1.AddText("0012");
   
   &err_text2 = &err_list_ent.AddElement("ErrorText");
   &text5 = &err_text2.AddText("Invalid ENTP");
   &err_code2 = &err_list_ent.AddElement("ErrorCode");
   &text6 = &err_code2.AddText("0010");
   
   
   &e_a_r = &z_cfe_resp_xmldoc.DocumentElement.AddElement("EditAuditReserve");
   &p_a_c = &e_a_r.AddElement("ProfitAuditCommon");
   &prog = &p_a_c.AddElement("ProgramReturnCode");
   &text9 = &prog.AddText("0010");
   &audit = &p_a_c.AddElement("AuditArea");
   &message = &audit.AddElement("MessageArea");
   &text10 = &message.AddText("Comments that might be usefull for solving the error");
   
   Return &z_cfe_resp_xmldoc;
   
End-Function;

/**************Ended Testing Code ***************************************************/


/************************error Log Function******************************************/
/*
  Log_CFE_Errors():
                   This function logs the requisition/Purchase Order distribution lines,
Which failed to communicate with CFE by reason like CFE is unavailable OR CFE does not returned 
response in assumed XML format , into Z_ERROR_LOG table.
                   System Administrator can find the failed requisition /Purchase order details 
along with Publication Node,Channel Name,Message NAme ,GUID of request published
by quering this table.
    
*/
Function Log_CFE_Errors(&business_unit, &id, &idType, &return_code, &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD) Returns boolean
   Local Rowset &rsLNDistrib;
   
   SQLExec("Select A.PUBNODE, A.CHNLNAME, A.GUID,A.MSGNAME From PSIBLOGHDR A Where A.MSGNAME = 'Z_CFE_OUT_SYNC' And A.PUBNODE = 'PSFT_EP' And A.CHNLNAME = 'Z_CFE' And A.LASTUPDDTTM = (Select Max(B.LASTUPDDTTM) From PSIBLOGHDR B Where B.PUBNODE = A.PUBNODE And B.CHNLNAME = A.CHNLNAME And B.MSGNAME=A.MSGNAME)", &Pubnode, &Channel, &Message_ID, &PubId);
   
   Evaluate &idType
   When = "REQ"
      &rsLNDistrib = CreateRowset(Record.REQ_LN_DISTRIB);
      &rsLNDistrib.Fill("where BUSINESS_UNIT=:1 and REQ_ID=:2", &business_unit, &id);
      
      For &i = 1 To &rsLNDistrib.ActiveRowCount
         SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_REQ_LINE WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
         SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
         
         If (&rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_ADRS.Value = &Z_ADRS And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCC.Value = &Z_RCC And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_EXTC.Value = &Z_EXTC And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.ACCOUNT.Value = &ACCOUNT And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JEO.Value = &Z_JEO And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCBS.Value = &Z_RCBS And
               &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_CPIM.Value = &Z_CPIM And
               &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
            
            &done = Log_PPM_error("CFE", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value, "0", &Pubnode, &Channel, 0, &PubId, &Message_ID, &return_code, "CFE Call Failed for given details of Requisition");
         End-If;
      End-For;
   When = "PO"
      &rsLNDistrib = CreateRowset(Record.PO_LINE_DISTRIB);
      
      &rsLNDistrib.Fill("where BUSINESS_UNIT=:1 and PO_ID=:2", &business_unit, &id);
      For &i = 1 To &rsLNDistrib.ActiveRowCount
         SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_PO_LINE WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
         SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
         If (&rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_ADRS.Value = &Z_ADRS And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCC.Value = &Z_RCC And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_EXTC.Value = &Z_EXTC And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.ACCOUNT.Value = &ACCOUNT And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JEO.Value = &Z_JEO And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCBS.Value = &Z_RCBS And
               &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_CPIM.Value = &Z_CPIM And
               &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
            
            &done = Log_PPM_error("CFE", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value, "0", &Pubnode, &Channel, 0, &PubId, &Message_ID, &return_code, "CFE Call Failed for given details of Purchase Order");
         End-If;
      End-For;
   End-Evaluate;
   Return True;
End-Function;

/************************End of Error Log Function******************************************/



/********* Following function Parses Response XMLDoc and updates corresponding tables with CFE Status.This function has been referred by CFE_Request_Publish()*/

/*
CFE_Response_Subscribe() :
               This function parses CFE response & logs CFE errors for corresponding Requisition/
Purchase Order distribution lines into Z_CFE_ERRORS table.
               The function also determines the CFE status for Requisition/Purchase Order distribution
line & returns this final CFE Status of distribution line to calling program.
Component : PurchaseOrder & PV_REQUISITION 's SavePostChange event as well as Z_CFE_INTFC.MAIN.Z_Step01.OnExecute
event's tooks this req / PO distrib level's CFE Status & updates req /PO's header level CFE Status accordingly.
                
*/

Function CFE_Response_Subscribe(&z_cfe_response As XmlDoc, &business_unit As string, &id As string, &idType As string, &business_unit_gl As string, &Z_ADRS As string, &TAG_NUMBER As string, &Z_RCC As string, &Z_EXTC As string, &ACCOUNT As string, &Z_COMBD_CD As string, &Z_JOBNO As string, &Z_JEO As string, &Z_RCBS As string, &Z_CPIM As string, &Z_AIC_CODE_FLD As string) Returns string
   
   /*  Following declaration of array of XMLNode's holds all the response elements such as Error Count , Program Returned Code , Error Text and Error Code */
   
   
   Local array of XmlNode &errorCount;
   Local XmlNode &assumed_ChargedRC, &chargedRC;
   Local array of XmlNode &program_returned_code;
   Local array of XmlNode &error_text;
   Local array of XmlNode &error_code;
   
   /* The &arr1,&header_array holds the CFE Status for distrib lines, this array is used further to decide the most critical error status*/
   
   Local array of string &arr1;
   Local array of string &header_array;
   &arr1 = CreateArrayRept("", 10);
   &header_array = CreateArrayRept("", 10);
   /*Following Rowset's hold data from tables like Distrib Line records for Requisition & PO and Z_CFE_ERRORS*/
   
   Local Rowset &rsLNDistrib;
   Local Record &rsCFEDistrib;
   Local Rowset &rsCFEHeader;
   
   /*This boolean variable is used to decide whether distrib line come with the CFE Errors or not*/
   Local boolean &bool_noerrors;
   Local number &CFE_ERR_COUNT;
   
   &errorCount = &z_cfe_response.DocumentElement.GetElementsByTagName("ErrorCount");
   
   &program_returned_code = &z_cfe_response.DocumentElement.GetElementsByTagName("ProgramReturnCode");
   &error_text = &z_cfe_response.DocumentElement.GetElementsByTagName("ErrorText");
   &error_code = &z_cfe_response.DocumentElement.GetElementsByTagName("ErrorCode");
   &return_code = &program_returned_code [1].NodeValue;
   &assumed_ChargedRC = &z_cfe_response.DocumentElement.FindNode("EditResponse/RCInfo/ChargedRC");
   &chargedRC = &z_cfe_response.DocumentElement.FindNode("EditRequest/ProfitFinancialEvent/ProfitFinancialCommon/ChargedRC");
   
   If (&return_code = "0000") Then
      
      /*Successfull talk with CFE happened , Proceed further for response Processing*/
      
      If &errorCount.Len > 0 Then
         
         If &errorCount [1].NodeValue = "0" Then
            &bool_noerrors = True;
         Else
            &bool_noerrors = False;
         End-If;
      End-If;
      
      If &errorCount.Len = 0 Or
            &bool_noerrors Then
         
         /*Indicates that CFE returned No Errors. Set Z_CFE_STATUS='V' for all those requisitions ,po's*/
         
         
         Evaluate &idType
         When = "REQ"
            /*This part sets the CFE Status to 'Valid' for Requisition distrib line*/
            
            
            &CFE_ERR_COUNT = 0;
            &rsLNDistrib = CreateRowset(Record.REQ_LN_DISTRIB);
            &rsLNDistrib.Fill("where BUSINESS_UNIT=:1 and REQ_ID=:2", &business_unit, &id);
            
            For &i = 1 To &rsLNDistrib.ActiveRowCount
               SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_REQ_LINE WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
               SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
               If (&rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_ADRS.Value = &Z_ADRS And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCC.Value = &Z_RCC And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_EXTC.Value = &Z_EXTC And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.ACCOUNT.Value = &ACCOUNT And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JEO.Value = &Z_JEO And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCBS.Value = &Z_RCBS And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_CPIM.Value = &Z_CPIM And
                     &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
                  
                  SQLExec("SELECT COUNT(*) FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6", &business_unit, &id, "REQ", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value, &CFE_ERR_COUNT);
                  
                  If (&CFE_ERR_COUNT > 0) Then
                     
                     /*For the given combination, if CFE Errors exists in PS_Z_CFE_ERRORS then delete all those errors from table*/
                     
                     SQLExec("DELETE FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6", &business_unit, &id, "REQ", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value);
                     
                  End-If;
                  /*update the CFE Status of Req Distrib line to "V" for the specified key combination*/
                  
                  SQLExec("UPDATE PS_Z_REQ_LN_DISTRB SET Z_CFE_STATUS='V' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value);
                  &z_cfe_distrib = "V";
                  
                  
                  /*Following Code will replace the RCCode with the one suggested in the response by CFE*/
                  
                  If ( Not (&assumed_ChargedRC.IsNull) And
                        Not (&chargedRC.IsNull) And
                        &assumed_ChargedRC.NodeValue <> &chargedRC.NodeValue) Then
                     
                     Local Record &temp_update;
                     &temp_update = &rsLNDistrib.GetRow(&i).GetRecord(Record.REQ_LN_DISTRIB);
                     &temp_update.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value;
                     &temp_update.REQ_ID.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value;
                     &temp_update.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value;
                     &temp_update.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value;
                     &temp_update.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value;
                     &temp_update.SelectByKey();
                     &temp_update.Z_RCC.Value = &assumed_ChargedRC.NodeValue;
                     &temp_update.Update();
                     
                  End-If;
                  
               End-If;
            End-For;
            Break;
            
         When = "PO"
            /*This part sets the CFE Status to 'Valid' for PO distrib line*/
            
            
            &CFE_ERROR_COUNT = 0;
            &rsLNDistrib = CreateRowset(Record.PO_LINE_DISTRIB);
            &rsLNDistrib.Fill("where BUSINESS_UNIT=:1 and PO_ID=:2", &business_unit, &id);
            For &i = 1 To &rsLNDistrib.ActiveRowCount
               SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_PO_LINE WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
               SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
               If (&rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_ADRS.Value = &Z_ADRS And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCC.Value = &Z_RCC And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_EXTC.Value = &Z_EXTC And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.ACCOUNT.Value = &ACCOUNT And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JEO.Value = &Z_JEO And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCBS.Value = &Z_RCBS And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_CPIM.Value = &Z_CPIM And
                     &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
                  
                  SQLExec("SELECT COUNT(*) FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6", &business_unit, &id, "PO", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value, &CFE_ERR_COUNT);
                  
                  If (&CFE_ERR_COUNT > 0) Then
                     
                     /*For the given combination, if CFE Errors exists in PS_Z_CFE_ERRORS then delete all those errors from table*/
                     
                     SQLExec("DELETE FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND  DISTRIB_LINE_NUM=:6", &business_unit, &id, "PO", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value);
                  End-If;
                  
                  /*update the CFE Status of PO Distrib line to "V" for the specified key combination*/
                  
                  SQLExec("UPDATE PS_Z_PO_LN_DST_PPM SET Z_CFE_STATUS='V' WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value);
                  &z_cfe_distrib = "V";
                  
                  /*Following Code will replace the RCCode with the one suggested in the response by CFE*/
                  
                  If ( Not (&assumed_ChargedRC.IsNull) And
                        Not (&chargedRC.IsNull) And
                        &assumed_ChargedRC.NodeValue <> &chargedRC.NodeValue) Then
                     Local Record &temp_update1;
                     &temp_update1 = &rsLNDistrib.GetRow(&i).GetRecord(Record.PO_LINE_DISTRIB);
                     &temp_update1.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value;
                     &temp_update1.PO_ID.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value;
                     &temp_update1.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value;
                     &temp_update1.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value;
                     &temp_update1.DST_ACCT_TYPE.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DST_ACCT_TYPE.Value;
                     &temp_update1.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value;
                     &temp_update1.SelectByKey();
                     &temp_update1.Z_RCC.Value = &assumed_ChargedRC.NodeValue;
                     &temp_update1.Update();
                  End-If;
                  
               End-If;
            End-For;
            
            Break;
         End-Evaluate
      Else
         /* MORE THAN ONE ERROR COUNT IS RETURNED .....ie CFE Errors exists for the distrib line */
         
         
         Local boolean &z_deleted;
         
         
         Evaluate &idType
         When = "REQ"
            &z_deleted = False;
            
            /*Process Error Codes for Requisition*/
            
            
            &rsLNDistrib = CreateRowset(Record.REQ_LN_DISTRIB);
            &rsCFEErrors = CreateRecord(Record.Z_CFE_ERRORS);
            &rsLNDistrib.Fill("where BUSINESS_UNIT=:1 and REQ_ID=:2", &business_unit, &id);
            
            
            For &i = 1 To &rsLNDistrib.ActiveRowCount
               
               &CFE_ERR_COUNT = 0;
               
               SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_REQ_LINE WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
               SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
               
               
               If (&rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_ADRS.Value = &Z_ADRS And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCC.Value = &Z_RCC And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_EXTC.Value = &Z_EXTC And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.ACCOUNT.Value = &ACCOUNT And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JEO.Value = &Z_JEO And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCBS.Value = &Z_RCBS And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_CPIM.Value = &Z_CPIM And
                     &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
                  
                  SQLExec("SELECT COUNT(*) FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6", &business_unit, &id, "REQ", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value, &CFE_ERR_COUNT);
                  
                  For &cnt = 1 To &error_code.Len
                     
                     &err_code = &error_code [&cnt].NodeValue;
                     
                     /*Get the CFE Status for the returned Error Code from Z_EDITINFO_LN*/
                     &error_status = "XX";
                     
                     
                     SQLExec("SELECT Z_ERROR_STATUS FROM PS_Z_EDITINFO_LN WHERE  Z_ERROR_CODE =:1", &err_code, &error_status);
                     
                     If (&CFE_ERR_COUNT > 0 And
                           &z_deleted = False And
                           &cnt = 1) Then
                        
                        /*Delete all previous errors from Z_CFE_ERRORS if errors exists for the given key combination*/
                        
                        SQLExec("DELETE FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6", &business_unit, &id, "REQ", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value);
                        &z_deleted = True;
                        /*Insert all new errors in to Z_CFE_ERRORS table for the given key combination*/
                        &rsCFEErrors.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value;
                        &rsCFEErrors.Z_ID.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value;
                        &rsCFEErrors.Z_ID_TYPE.Value = "REQ";
                        &rsCFEErrors.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value;
                        &rsCFEErrors.DST_ACCT_TYPE.Value = "";
                        &rsCFEErrors.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value;
                        &rsCFEErrors.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value;
                        
                        
                        /*If Errorcode is not found in Z_EDITINFO_LN then assign value "9999" to error code else assign ErrorCode that we got from response*/
                        If (&error_status = "" Or
                              None(&error_status) Or
                              &error_status = "XX") Then
                           &rsCFEErrors.Z_ERROR_CODE.Value = "9999";
                           SQLExec("SELECT Z_ERROR_STATUS FROM PS_Z_EDITINFO_LN WHERE  Z_ERROR_CODE =:1", "9999", &err_status);
                           
                           &error_status = &err_status;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        Else
                           &rsCFEErrors.Z_ERROR_CODE.Value = &err_code;
                           
                           /*The following IF statement assign error status "VE" for the missing AIC error codes if requestor has created the requisition from Special Request Page*/
                           
                           If ((&inv_itm_id = "" Or
                                 None(&inv_itm_id)) And
                                 (Substring(&err_code, 1, 1) = "A")) Then
                              &error_status = "VE";
                           End-If;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        End-If;
                        /*Assign the ErrorCode status to array*/
                        
                        &arr1.Push(&error_status);
                        
                        &rsCFEErrors.insert();
                        
                     Else
                        
                        /*Insert all new errors in to Z_CFE_ERRORS table for the given key combination*/
                        &rsCFEErrors.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value;
                        &rsCFEErrors.Z_ID.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value;
                        &rsCFEErrors.Z_ID_TYPE.Value = "REQ";
                        &rsCFEErrors.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value;
                        &rsCFEErrors.DST_ACCT_TYPE.Value = "";
                        &rsCFEErrors.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value;
                        &rsCFEErrors.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value;
                        
                        
                        /*If Errorcode is not found in Z_EDITINFO_LN then assign value "9999" to error code else assign ErrorCode that we got from response*/
                        If (&error_status = "" Or
                              None(&error_status) Or
                              &error_status = "XX") Then
                           &rsCFEErrors.Z_ERROR_CODE.Value = "9999";
                           SQLExec("SELECT Z_ERROR_STATUS FROM PS_Z_EDITINFO_LN WHERE  Z_ERROR_CODE =:1", "9999", &err_status);
                           
                           &error_status = &err_status;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        Else
                           
                           &rsCFEErrors.Z_ERROR_CODE.Value = &err_code;
                           
                           /*The following IF statement assign error status "VE" for the missing AIC error codes if requestor has created the requisition from Special Request Page*/
                           
                           If ((&inv_itm_id = "" Or
                                 None(&inv_itm_id)) And
                                 (Substring(&err_code, 1, 1) = "A")) Then
                              &error_status = "VE";
                           End-If;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        End-If;
                        
                        /*Assign the ErrorCode status to array*/
                        
                        &arr1.Push(&error_status);
                        
                        &rsCFEErrors.insert();
                        
                     End-If;
                  End-For;
               End-If;
               
               
               
            End-For;
            
            /*Following code assigns the most critical CFE Status to distrib line*/
            For &i = 1 To &rsLNDistrib.ActiveRowCount
               SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_REQ_LINE WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
               SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
               If (&rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_ADRS.Value = &Z_ADRS And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCC.Value = &Z_RCC And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_EXTC.Value = &Z_EXTC And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.ACCOUNT.Value = &ACCOUNT And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_JEO.Value = &Z_JEO And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_RCBS.Value = &Z_RCBS And
                     &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.Z_CPIM.Value = &Z_CPIM And
                     &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
                  &ret = &arr1.Find("E");
                  If (&ret <> 0) Then
                     SQLExec("UPDATE PS_Z_REQ_LN_DISTRB SET Z_CFE_STATUS='E' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value);
                     
                     &header_array.Push("E");
                     &z_cfe_distrib = "E";
                  Else
                     &ret2 = &arr1.Find("VE");
                     If &ret2 <> 0 Then
                        SQLExec("UPDATE PS_Z_REQ_LN_DISTRB SET Z_CFE_STATUS='VE' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value);
                        
                        &header_array.Push("VE");
                        &z_cfe_distrib = "VE";
                     Else
                        
                        &ret3 = &arr1.Find("V");
                        If &ret3 <> 0 Then
                           SQLExec("UPDATE PS_Z_REQ_LN_DISTRB SET Z_CFE_STATUS='V' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value);
                           
                           &header_array.Push("V");
                           &z_cfe_distrib = "V";
                        End-If;
                     End-If;
                  End-If;
                  /*Following Code will replace the RCCode with the one suggested in the response by CFE*/
                  If ( Not (&assumed_ChargedRC.IsNull) And
                        Not (&chargedRC.IsNull) And
                        &assumed_ChargedRC.NodeValue <> &chargedRC.NodeValue) Then
                     Local Record &temp_update2;
                     &temp_update2 = &rsLNDistrib.GetRow(&i).GetRecord(Record.REQ_LN_DISTRIB);
                     &temp_update2.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.BUSINESS_UNIT.Value;
                     &temp_update2.REQ_ID.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.REQ_ID.Value;
                     &temp_update2.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.LINE_NBR.Value;
                     &temp_update2.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.SCHED_NBR.Value;
                     &temp_update2.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).REQ_LN_DISTRIB.DISTRIB_LINE_NUM.Value;
                     &temp_update2.SelectByKey();
                     &temp_update2.Z_RCC.Value = &assumed_ChargedRC.NodeValue;
                     &temp_update2.Update();
                  End-If;
                  
               End-If;
            End-For;
            Break;
            
         When = "PO"
            /*Process Error Codes for Purchase Order*/
            
            &z_deleted = False;
            
            &rsLNDistrib = CreateRowset(Record.PO_LINE_DISTRIB);
            &rsCFEErrors = CreateRecord(Record.Z_CFE_ERRORS);
            
            &rsLNDistrib.Fill("where BUSINESS_UNIT=:1 and PO_ID=:2", &business_unit, &id);
            
            For &i = 1 To &rsLNDistrib.ActiveRowCount
               
               &CFE_ERR_COUNT = 0;
               
               SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_PO_LINE WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
               SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
               If (&rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_ADRS.Value = &Z_ADRS And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCC.Value = &Z_RCC And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_EXTC.Value = &Z_EXTC And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.ACCOUNT.Value = &ACCOUNT And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JEO.Value = &Z_JEO And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCBS.Value = &Z_RCBS And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_CPIM.Value = &Z_CPIM And
                     &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
                  
                  
                  SQLExec("SELECT COUNT(*) FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6", &business_unit, &id, "PO", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value, &CFE_ERR_COUNT);
                  
                  
                  For &cnt = 1 To &error_code.Len
                     &err_code = &error_code [&cnt].NodeValue;
                     /*Get the CFE Status for the returned Error Code from Z_EDITINFO_LN*/
                     
                     &error_status = "XX";
                     SQLExec("SELECT Z_ERROR_STATUS FROM PS_Z_EDITINFO_LN WHERE Z_ERROR_CODE =:1", &err_code, &error_status);
                     
                     
                     
                     If (&CFE_ERR_COUNT > 0 And
                           &z_deleted = False And
                           &cnt = 1) Then
                        
                        /*Delete all previous errors from Z_CFE_ERRORS if errors exists for the given key combination*/
                        
                        SQLExec("DELETE FROM PS_Z_CFE_ERRORS WHERE BUSINESS_UNIT=:1 AND Z_ID=:2 AND Z_ID_TYPE=:3 AND LINE_NBR=:4 AND SCHED_NBR=:5 AND DISTRIB_LINE_NUM=:6 ", &business_unit, &id, "PO", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value);
                        &z_deleted = True;
                        /*Insert all new errors in to Z_CFE_ERRORS table for the given key combination*/
                        &rsCFEErrors.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value;
                        &rsCFEErrors.Z_ID.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value;
                        &rsCFEErrors.Z_ID_TYPE.Value = "PO";
                        &rsCFEErrors.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value;
                        &rsCFEErrors.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value;
                        &rsCFEErrors.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value;
                        
                        
                        /*If Errorcode is not found in Z_EDITINFO_LN then assign value "9999" to error code else assign ErrorCode that we got from response*/
                        
                        If (&error_status = "" Or
                              None(&error_status) Or
                              &error_status = "XX") Then
                           &rsCFEErrors.Z_ERROR_CODE.Value = "9999";
                           SQLExec("SELECT Z_ERROR_STATUS FROM PS_Z_EDITINFO_LN WHERE  Z_ERROR_CODE =:1", "9999", &err_status);
                           &rsCFEErrors.Z_CFE_STATUS.Value = &err_status;
                           &error_status = &err_status;
                           
                        Else
                           &rsCFEErrors.Z_ERROR_CODE.Value = &err_code;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        End-If;
                        /*Assign the ErrorCode status to array*/
                        
                        &arr1.Push(&error_status);
                        
                        &rsCFEErrors.insert();
                     Else
                        /*Insert all new errors in to Z_CFE_ERRORS table for the given key combination*/
                        
                        &rsCFEErrors.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value;
                        &rsCFEErrors.Z_ID.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value;
                        &rsCFEErrors.Z_ID_TYPE.Value = "PO";
                        &rsCFEErrors.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value;
                        &rsCFEErrors.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value;
                        &rsCFEErrors.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value;
                        
                        
                        
                        
                        /*If Errorcode is not found in Z_EDITINFO_LN then assign value "9999" to error code else assign ErrorCode that we got from response*/
                        
                        If (&error_status = "" Or
                              None(&error_status) Or
                              &error_status = "XX") Then
                           &rsCFEErrors.Z_ERROR_CODE.Value = "9999";
                           SQLExec("SELECT Z_ERROR_STATUS FROM PS_Z_EDITINFO_LN WHERE  Z_ERROR_CODE =:1", "9999", &err_status);
                           
                           &error_status = &err_status;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        Else
                           &rsCFEErrors.Z_ERROR_CODE.Value = &err_code;
                           &rsCFEErrors.Z_CFE_STATUS.Value = &error_status;
                        End-If;
                        /*Assign the ErrorCode status to array*/
                        
                        &arr1.Push(&error_status);
                        
                        &rsCFEErrors.insert();
                        
                     End-If;
                     
                  End-For;
               End-If;
               
            End-For;
            
            /*Following code assigns the most critical CFE Status to distrib line*/
            
            For &i = 1 To &rsLNDistrib.ActiveRowCount
               SQLExec("SELECT ITM_SETID,INV_ITEM_ID FROM PS_PO_LINE WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3", &business_unit, &id, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &itm_setid, &inv_itm_id);
               SQLExec("SELECT Z_AIC_CODE_FLD FROM PS_Z_ITEM_ATT_TBL WHERE SETID=:1 AND INV_ITEM_ID=:2", &itm_setid, &inv_itm_id, &Z_AIC_CODE);
               If (&rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT_GL.Value = &business_unit_gl And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_ADRS.Value = &Z_ADRS And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.TAG_NUMBER.Value = &TAG_NUMBER And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCC.Value = &Z_RCC And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_EXTC.Value = &Z_EXTC And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.ACCOUNT.Value = &ACCOUNT And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_COMBD_CD.Value = &Z_COMBD_CD And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JOBNO.Value = &Z_JOBNO And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_JEO.Value = &Z_JEO And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_RCBS.Value = &Z_RCBS And
                     &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.Z_CPIM.Value = &Z_CPIM And
                     &Z_AIC_CODE = &Z_AIC_CODE_FLD) Then
                  &ret = &arr1.Find("E");
                  If (&ret <> 0) Then
                     SQLExec("UPDATE PS_Z_PO_LN_DST_PPM SET Z_CFE_STATUS='E' WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value);
                     
                     &header_array.Push("E");
                     &z_cfe_distrib = "E";
                  Else
                     &ret2 = &arr1.Find("VE");
                     If &ret2 <> 0 Then
                        SQLExec("UPDATE PS_Z_PO_LN_DST_PPM SET Z_CFE_STATUS='VE' WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value);
                        
                        &header_array.Push("VE");
                        &z_cfe_distrib = "VE";
                     Else
                        
                        
                        &ret3 = &arr1.Find("V");
                        If &ret3 <> 0 Then
                           SQLExec("UPDATE PS_Z_PO_LN_DST_PPM SET Z_CFE_STATUS='V' WHERE BUSINESS_UNIT=:1 AND PO_ID=:2 AND LINE_NBR=:3 AND SCHED_NBR=:4 AND DISTRIB_LINE_NUM=:5", &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value, &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value);
                           
                           &header_array.Push("V");
                           &z_cfe_distrib = "V";
                        End-If;
                     End-If;
                  End-If;
                  /*Following Code will replace the RCCode with the one suggested in the response by CFE*/
                  If ( Not (&assumed_ChargedRC.IsNull) And
                        Not (&chargedRC.IsNull) And
                        &assumed_ChargedRC.NodeValue <> &chargedRC.NodeValue) Then
                     Local Record &temp_update3;
                     &temp_update3 = &rsLNDistrib.GetRow(&i).GetRecord(Record.PO_LINE_DISTRIB);
                     &temp_update3.BUSINESS_UNIT.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.BUSINESS_UNIT.Value;
                     &temp_update3.PO_ID.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.PO_ID.Value;
                     &temp_update3.LINE_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.LINE_NBR.Value;
                     &temp_update3.SCHED_NBR.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.SCHED_NBR.Value;
                     &temp_update3.DST_ACCT_TYPE.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DST_ACCT_TYPE.Value;
                     &temp_update3.DISTRIB_LINE_NUM.Value = &rsLNDistrib.GetRow(&i).PO_LINE_DISTRIB.DISTRIB_LINE_NUM.Value;
                     &temp_update3.SelectByKey();
                     &temp_update3.Z_RCC.Value = &assumed_ChargedRC.NodeValue;
                     &temp_update3.Update();
                  End-If;
                  
               End-If;
            End-For;
            Break;
         End-Evaluate
      End-If;
      
      Return &z_cfe_distrib;
      
   Else
      
      /*CFE Call Failed */
      &done = Log_CFE_Errors(&business_unit, &id, &idType, &return_code, &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
      &z_cfe_distrib = "N";
      
      Return &z_cfe_distrib;
   End-If;
End-Function;




/********* Following function publishes CFE Request XMLDoc to Z_CFE_NODE ,Which passes the CFERequest XMLDoc to CFE System*/
/*
 CFE_Request_Publish():

  The function being Called from Component PV_REQUISITION , PURCHASE_ORDER 's SavePostChange event
  Also from application engine Z_CFE_INTFC.

  This function takes distinct combination of chartfields from requisition , Purchase Order , converts the
  chartfields into CFE understandable format , makes call to Create_CFE_XML() which generates CFE request XML.
  After getting request XML CFE_Request_Publish() publishes Request XML on CFE node using TIBCO bus by making call to
  SyncRequestXMLDoc().

  CFE_Request_Publish() , waits for response from CFE.

  After getting response , it checks whether returned XML is valid or not , if not calls Log_CFE_Errors().
  Otherwise it parses valid CFE Response by making call to CFE_Response_Subscribe() , determines CFE Status
  for Requistion/PO Distrib levels.

  CFE_Request_Publish() returns CFE Status of REQ/PO's Destrib level to the calling program.Which uses 
  this value to determine CFE Status at Requisition Header or PO Header.
  
*/

Function CFE_Request_Publish(&business_unit As string, &id As string, &idType As string, &business_unit_gl As string, &Z_ADRS As string, &TAG_NUMBER As string, &Z_RCC As string, &Z_EXTC As string, &ACCOUNT As string, &Z_COMBD_CD As string, &Z_JOBNO As string, &Z_JEO As string, &Z_RCBS As string, &Z_CPIM As string, &Z_AIC_CODE_FLD As string) Returns string
   
   Local XmlDoc &z_cfe_request, &z_cfe_response, &response;
   Local Message &Z_CFE_OUT_SYNC_MSG, &z_cfe_response1, &response1;
   Local string &z_str, &z_strXml, &cData, &Data;
   Local string &inv_item_id, &z_asset_intr_id;
   Local string &Z_JOBNO_NEW, &Z_JOBNO_OLD;
   Local array of string &frcp;
   Local array of XmlNode &Z_CData, &errorCnt, &prg_returned_code, &err_text, &exception;
   
   &frcp = CreateArray("", "");
   &z_cfe_request = CreateXmlDoc("");
   &z_cfe_response = CreateXmlDoc("");
   &response = CreateXmlDoc();
   
   &Z_JOBNO_OLD = &Z_JOBNO;
   &Z_JOBNO_NEW = CFE_jobno_return(&Z_JOBNO);
   
   /********* Begin QWEST Change Request 73 Madhavi Ghodke 07/21/06 PSCIO Release3*********/
   
   If &ACCOUNT = "00000000" Then
      &z_acc_main = "";
      &z_acc_sub = "";
   Else
      
      /********* End QWEST Change Request 73 Madhavi Ghodke 07/21/06 PSCIO Release3*********/
      
      &z_acc_main = Substring(&ACCOUNT, 1, 4);
      &z_acc_sub = Substring(&ACCOUNT, 5, 4);
      
      /********* Begin QWEST Change Request 73 Madhavi Ghodke 07/21/06 PSCIO Release3*********/
      
   End-If;
   
   /********* End QWEST Change Request 73 Madhavi Ghodke 07/21/06 PSCIO Release3*********/
   
   &frcp = CFE_frcp_return(&Z_COMBD_CD);
   
   &z_cfe_request = Create_CFE_XML("PSSCM", "0851", &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_AIC_CODE_FLD, &Z_RCC, &Z_JOBNO_NEW, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_EXTC, &z_acc_main, &z_acc_sub, &frcp [1], &frcp [2]);
   &response = SyncRequestXmlDoc(&z_cfe_request, Message.Z_CFE_OUT_SYNC, GetURL(URL.Z_CFE_NODE));
   
   
   If &response.IsNull Then
      &done = Log_CFE_Errors(&business_unit, &id, &idType, "XML Parser", &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO_OLD, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
      
      
      &z_distrib_status = "N";
   Else
      &xmldocstr = &response.GenFormattedXmlString();
      &Z_CData = &response.DocumentElement.GetElementsByTagName("data");
      &prg_returned_code = &response.DocumentElement.GetElementsByTagName("ProgramReturnCode");
      &exception = &response.DocumentElement.GetElementsByTagName("Exception");
      If &Z_CData.Len = 0 Or
            None(&Z_CData) Then
         If (&prg_returned_code.Len = 0 Or
               None(&prg_returned_code) Or
               &exception.Len = 1) Then
            &done = Log_CFE_Errors(&business_unit, &id, &idType, "XML Parser", &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO_OLD, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
            
            
            &z_distrib_status = "N";
         Else
            &z_distrib_status = CFE_Response_Subscribe(&response, &business_unit, &id, &idType, &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO_OLD, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
         End-If;
      Else
         
         &cData = &response.DocumentElement.GetElementsByTagName("data")[1].GetCDataValue();
         If None(&cData) Or
               &cData = "" Then
            &done = Log_CFE_Errors(&business_unit, &id, &idType, "XML Parser", &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO_OLD, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
            
            
            &z_distrib_status = "N";
         Else
            &Data = "<?xml version='1.0'?>" | &cData;
            Local XmlDoc &z_resp;
            Local array of XmlNode &errorCount;
            &z_resp = CreateXmlDoc("");
            &r = &z_resp.ParseXmlString(&Data);
            &z_cfe_response = &z_resp;
            &z_distrib_status = CFE_Response_Subscribe(&z_cfe_response, &business_unit, &id, &idType, &business_unit_gl, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO_OLD, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
            
         End-If;
         
      End-If;
      
   End-If;
   
   Return &z_distrib_status;
   
End-Function;


/********* End QWEST QR3IPO006 Madhavi Ghodke 04/20/06 PSCIO Release3*********/



/***********************$Qwest$*************************************
RICEF NO:    QR3IPO006
Name:        Madhavi Ghodke
Date: 	     04/05/2006                                                           
Description: Following Code builds the WhereClause to populate the CFE 
View and calls the CFE Secondary page.

*************************************************************************/

/*Begin QWEST QR3IPO006 Madhavi Ghodke 04/05/2006 PSCIO-Release3*/
/*This code brings secondary page after clicking the 'Show CFE Errors' hyperlink*/
Component string &glb_strCFE_Whereclause;

If %Component = Component.PURCHASE_ORDER Or
      %Component = Component.PV_REQUISITIONS Then
   Evaluate %Panel
   When = Panel.PV_REQ_FORM
      &BU = FetchValue(Scroll.REQ_LINE, 1, REQ_LINE.BUSINESS_UNIT);
      &REQ_ID = FetchValue(Scroll.REQ_LINE, 1, REQ_LINE.REQ_ID);
      &ID_TYPE = "REQ";
      /*Begin QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
      <*&LINE_NBR = CurrentRowNumber();*>
      &CURRENTLINE = CurrentRowNumber();
      
      &LINE_NBR = FetchValue(REQ_LINE.LINE_NBR, &CURRENTLINE);
      /*End QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
      &glb_strCFE_Whereclause = " where BUSINESS_UNIT='" | &BU | "' and z_id='" | &REQ_ID | "' and z_id_type='REQ'" | " and LINE_NBR=" | &LINE_NBR;
      
      DoModal(Page.Z_CFE_ERR_SBP, "CFE Errors for Requisition ", 8, 8);
      
      
      Break;
   When = Panel.PO_LINE
      
      &BU = FetchValue(Scroll.PO_LINE, 1, PO_LINE.BUSINESS_UNIT);
      &PO_ID = FetchValue(Scroll.PO_LINE, 1, PO_LINE.PO_ID);
      /*Begin QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
      <*&LINE_NBR=currentrownumber();*>
      &CURRENTLINE = CurrentRowNumber();
      &LINE_NBR = FetchValue(PO_LINE.LINE_NBR, &CURRENTLINE);
      /*End QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
      &ID_TYPE = "PO";
      &glb_strCFE_Whereclause = " where BUSINESS_UNIT='" | &BU | "' and z_id='" | &PO_ID | "' and z_id_type='PO'" | " and LINE_NBR=" | &LINE_NBR;
      DoModal(Page.Z_CFE_ERR_SBP, "CFE Errors for Purchase Order ", 8, 8);
      Break;
   When-Other
      Break;
   End-Evaluate;
End-If;

/*End QWEST QR3IPO006 Madhavi Ghodke 04/10/2006 PSCIO-Release3*/


/***********************$Qwest$*************************************
RICEF NO:    QR3IPO006
Name:        Madhavi Ghodke
Date: 	     04/05/2006                                                           
Description: Following Code enables/disables "Accounting Edits" hyperlink 
             according to availability/unavailability of CFE Errors for the
             specified REQUISION or PO.
*************************************************************************/

/*Begin QWEST QR3IPO006 Madhavi Ghodke 04/05/2006 PSCIO-Release3
This code was added to enable/disable 'Accounting Edits' hyperlink */


If %Component = Component.PURCHASE_ORDER Or
      %Component = Component.PV_REQUISITIONS Then
   
   Z_WRK.Z_SHOW_ERRORS.Label = "Accounting Edits";
   /*Begin Identified Code for Production/HD00002720704*/
   If %Component = Component.PURCHASE_ORDER Then
      &recCFEStatus = CreateRecord(Record.Z_PO_HDR_PPM);
      &recCFEStatus.BUSINESS_UNIT.Value = PO_HDR.BUSINESS_UNIT.Value;
      &recCFEStatus.PO_ID.Value = PO_HDR.PO_ID.Value;
      &recCFEStatus.SelectByKey();
      
      If ((&recCFEStatus.Z_CFE_STATUS.Value = "N" Or
            &recCFEStatus.Z_CFE_STATUS.Value = "E") And
            PO_HDR.HOLD_STATUS.Value = "N" And
            PO_HDR.PO_STATUS.Value = "O") Then
         rem WinMessage("here teast1", 0);
         GetLevel0()(1).Z_PO_HDR_PPM.Z_CFE_STATUS.Value = "N";
      End-If;
   End-If;
   /*End Identified Code for Production/HD00002720704*/
   /*Begin QWEST QR3IPO006-670 Madhavi Ghodke 04/05/2006 PSCIO-Release3*/
   If %Mode = "A" Then
      Z_WRK.Z_SHOW_ERRORS.Enabled = False;
   End-If;
   /*End QWEST QR3IPO006-670 Madhavi Ghodke 04/05/2006 PSCIO-Release3*/
   Evaluate %Panel
   When = Panel.PV_REQ_FORM
   When = Panel.PV_SRCH_REQ_PARAM
      /*Begin QWEST QR3IPO006-670 Madhavi Ghodke 04/05/2006 PSCIO-Release3*/
   When = Panel.PV_REQ_SR_GOOD
   When = Panel.PV_REQ_SR_SVC_FC
   When = Panel.PV_REQ_SR_SVC_TL
   When = Panel.PV_REQ_SR_SVC_TM1
      /*End QWEST QR3IPO006-670 Madhavi Ghodke 04/05/2006 PSCIO-Release3*/
      If %Mode = "U" Or
            %Mode = "L" Then
         &BU = FetchValue(Scroll.REQ_LINE, 1, REQ_LINE.BUSINESS_UNIT);
         &REQ_ID = FetchValue(Scroll.REQ_LINE, 1, REQ_LINE.REQ_ID);
         /*Begin QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
         /*
         &LINE_NBR=currentrownumber();
		 */
         &CURRENTLINE = CurrentRowNumber();
         
         &LINE_NBR = FetchValue(REQ_LINE.LINE_NBR, &CURRENTLINE);
         /*End QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
         &ID_TYPE = "REQ";
         &Exists = "";
         SQLExec(SQL.Z_CFE_ERRS_EXISTS, &BU, &REQ_ID, &LINE_NBR, &ID_TYPE, &Exists);
         If &Exists = "X" Then
            Z_WRK.Z_SHOW_ERRORS.Enabled = True;
         Else
            Z_WRK.Z_SHOW_ERRORS.Enabled = False;
         End-If;
      Else
         Z_WRK.Z_SHOW_ERRORS.Enabled = False;
      End-If;
      Break;
   When = Panel.PO_LINE
      If %Mode = "U" Or
            %Mode = "L" Then
         &BU = FetchValue(Scroll.PO_LINE, 1, PO_LINE.BUSINESS_UNIT);
         &PO_ID = FetchValue(Scroll.PO_LINE, 1, PO_LINE.PO_ID);
         &LINE_NBR = FetchValue(Scroll.PO_LINE, 1, PO_LINE.LINE_NBR);
         /*Begin QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
         /*
         &LINE_NBR=currentrownumber();
		 */
         &CURRENTLINE = CurrentRowNumber();
         &LINE_NBR = FetchValue(PO_LINE.LINE_NBR, &CURRENTLINE);
         /*End QWEST QR3IPO006-611 Madhavi Ghodke 10/05/2006 PSCIO-Release3*/
         &ID_TYPE = "PO";
         &Exists = "";
         SQLExec(SQL.Z_CFE_ERRS_EXISTS, &BU, &PO_ID, &LINE_NBR, &ID_TYPE, &Exists);
         If &Exists = "X" Then
            Z_WRK.Z_SHOW_ERRORS.Enabled = True;
         Else
            Z_WRK.Z_SHOW_ERRORS.Enabled = False;
         End-If;
      Else
         Z_WRK.Z_SHOW_ERRORS.Enabled = False;
      End-If;
      Break;
   When-Other
      Break;
   End-Evaluate;
End-If;

/*End QWEST QR3IPO006 Madhavi Ghodke 04/05/2006 PSCIO-Release3 */


/*
************************** $Qwest$ ********************************
RICEF#:   QR3IPO006 
NAME:     Madhavi Ghodke
DATE:     04/05/2006
DESCR:    This peoplecode makes call to CFE for unique combination 
of chartfields.
********************************************************************

************************** $Qwest$ ********************************
RICEF#:   QR3IPO008_009 
NAME:     Ankur Dhingra
DATE:     04/13/2006
DESCR:    Peoplecode to call JETS Requisition Budget Check.
********************************************************************

************************** $Qwest$ ********************************
RICEF#:   QR3EPO040 
NAME:     Madhavi Ghodke
DATE:     05/31/2006
DESCR:    A Peoplecode to mark the worklist as "worked" for "CFE Validation Fallout"
********************************************************************
*/

/********* Begin QWEST QR3IPO006 Declaration Madhavi Ghodke 04/05/06 PSCIO Release3*********/

Declare Function CFE_Request_Publish PeopleCode Z_INTFC_FUNCLIB.Z_CFE_STATUS FieldFormula;
Declare Function REQ_BGTCHECK PeopleCode Z_INTFC_FUNCLIB.Z_JETS_STATUS FieldFormula;

/********* End   QWEST QR3IPO006  Declaration Madhavi Ghodke 04/05/06 PSCIO Release3 *********/

/* Reset any remaining globals that are no longer needed */

Global string &PV_EXT_ORIGIN;
Global Rowset &Row_PV_SP_Delete;
Local boolean &Newwindow;

Global Rowset &RS_REQ_ITEMS;
Component string &PV_REQ_LN_SRC_COMP;

Local Row &Row;
Local Rowset &RS_HDR;
/*******************Start QR3IPO008_009***************************/
Local string &CFEStatus_ValidError;
Local string &CFEStatus_Valid;
/*******************End QR3IPO008_009***************************/

Component string &SaveMsgBefore, &SaveMsgAfter;

/********* Begin QWEST QR3EPO036 SAMEER KATARIA 06/09/06 PSCIO Release3*********/
Component number &nDoModal;
Component string &VP_APPROVER;
Component string &VP_APPROVER_CUID;
Component boolean &DUE_DT_CHANGED1;
Component boolean &SHIP_VIA_CHANGED1;
Declare Function routeWorklist PeopleCode Z_VP_REQ_WL.BUSINESS_UNIT FieldFormula;

/********* End QWEST QR3EPO036 SAMEER KATARIA 06/09/06 PSCIO Release3*********/

If &PV_REQ_LN_SRC_COMP = "E" Then
   
   &RS_REQ_ITEMS.Flush();
   
End-If;

ScrollFlush(Record.REQUESTOR_ITEMS);


If &PV_EXT_ORIGIN = "RI" Then
   &PV_EXT_ORIGIN = "";
   &eProObject = CreateObject("PV:SRM:PvReqLocalInterface");
   If All(&eProObject) Then
      &ret = &eProObject.GetNewWindow(&Newwindow);
      If &Newwindow = True Then
         &UserMsg = &SaveMsgBefore | " " | REQ_HDR.BUSINESS_UNIT | " - " | REQ_HDR.REQ_ID | " " | &SaveMsgAfter;
         PV_MAINNAV_HTML.PV_CLOSE_WINDOW = "<script language=javascript>alert('" | &UserMsg | "');top.window.close();</script>";
      Else
         /*&Status = &eProObject.TransferToExt( False);*/
      End-If;
   End-If;
End-If;
&Row_PV_SP_Delete.Flush();

/********* Begin QWEST QR3IPO006  Madhavi Ghodke 04/05/06 PSCIO Release3*********/
/*This code makes a call to CFE*/
Local SQL &SQL, &SQL1;
Local Rowset &displayLine;
Local Record &recCFEStatus;
Local string &z_distrib_status;
Local array of string &z_array;
Local string &Z_BU_STATUS;
&Z_BU_STATUS = "Y";

&displayLine = GetLevel0()(1).GetRowset(Scroll.REQ_LINE);
&recCFEStatus = CreateRecord(Record.Z_REQ_HDR);
&recCFEStatus.BUSINESS_UNIT.Value = &displayLine(1).REQ_LINE.BUSINESS_UNIT.Value;
&recCFEStatus.REQ_ID.Value = &displayLine(1).REQ_LINE.REQ_ID.Value;
&z_array = CreateArrayRept("", 0);
SQLExec("SELECT 'X' FROM PS_Z_BU_PM_TBL WHERE Z_RETAIL_BU_FLG = 'N' AND BUSINESS_UNIT = :1", REQ_HDR.BUSINESS_UNIT.Value, &Z_BU_STATUS);
If (&Z_BU_STATUS = "X") Then
   
   /********* Begin QWEST QR3IPO006/HD00002720704  Madhavi Ghodke 11/21/06 PSCIO Release3*********/
   
   /*If (&recCFEStatus.SelectByKey() And
         &recCFEStatus.Z_CFE_STATUS.Value = "N" And
         REQ_HDR.HOLD_STATUS.Value = "N" And
         REQ_HDR.REQ_STATUS = "O") Then*/
   
   If (&recCFEStatus.SelectByKey() And
         (&recCFEStatus.Z_CFE_STATUS.Value = "N" Or
            &recCFEStatus.Z_CFE_STATUS.Value = "E") And
         REQ_HDR.HOLD_STATUS.Value = "N" And
         REQ_HDR.REQ_STATUS = "O") Then
      /********* End QWEST QR3IPO006/HD00002720704  Madhavi Ghodke 11/21/06 PSCIO Release3*********/
      &SQL = CreateSQL("SELECT BUSINESS_UNIT,REQ_ID,BUSINESS_UNIT_GL,Z_ADRS,TAG_NUMBER,Z_RCC,Z_EXTC,ACCOUNT,Z_COMBD_CD,Z_JOBNO,Z_JEO,Z_RCBS,Z_CPIM,Z_AIC_CODE_FLD from PS_Z_REQ_CHTFLD_VW where BUSINESS_UNIT = :1 AND  REQ_ID = :2", &displayLine(1).REQ_LINE.BUSINESS_UNIT.Value, &displayLine(1).REQ_LINE.REQ_ID.Value);
      
      While &SQL.Fetch(&BUSINESS_UNIT, &REQ_ID, &BUSINESS_UNIT_GL, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD)
         
         &z_distrib_status = CFE_Request_Publish(&BUSINESS_UNIT, &REQ_ID, "REQ", &BUSINESS_UNIT_GL, &Z_ADRS, &TAG_NUMBER, &Z_RCC, &Z_EXTC, &ACCOUNT, &Z_COMBD_CD, &Z_JOBNO, &Z_JEO, &Z_RCBS, &Z_CPIM, &Z_AIC_CODE_FLD);
         &z_array.Push(&z_distrib_status);
         
         If &z_distrib_status = "N" Then
            
            Break;
         End-If;
         
         
         
      End-While;
      
      &SQL1 = CreateSQL("SELECT Z_CFE_STATUS FROM PS_Z_REQ_LN_DISTRB WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2", REQ_HDR.BUSINESS_UNIT.Value, REQ_HDR.REQ_ID.Value);
      
      While &SQL1.Fetch(&previous_cfe_status)
         &z_array.Push(&previous_cfe_status);
      End-While;
      
      &ret = &z_array.Find("N");
      If (&ret <> 0) Then
         
         SQLExec("UPDATE PS_Z_REQ_HDR SET Z_CFE_STATUS='N' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2", &displayLine(1).REQ_LINE.BUSINESS_UNIT.Value, &displayLine(1).REQ_LINE.REQ_ID.Value);
         MessageBox(0, "", 20000, 86, "Message not found", REQ_HDR.REQ_ID.Value);
      Else
         &ret = &z_array.Find("E");
         If (&ret <> 0) Then
            
            SQLExec("UPDATE PS_Z_REQ_HDR SET Z_CFE_STATUS='E' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2", &displayLine(1).REQ_LINE.BUSINESS_UNIT.Value, &displayLine(1).REQ_LINE.REQ_ID.Value);
            MessageBox(0, "", 20000, 76, "Message not found", REQ_HDR.REQ_ID.Value);
            
         Else
            &ret2 = &z_array.Find("VE");
            If &ret2 <> 0 Then
               
               SQLExec("UPDATE PS_Z_REQ_HDR SET Z_CFE_STATUS='VE' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2", &displayLine(1).REQ_LINE.BUSINESS_UNIT.Value, &displayLine(1).REQ_LINE.REQ_ID.Value);
               
            Else
               &ret3 = &z_array.Find("V");
               If &ret3 <> 0 Then
                  
                  
                  SQLExec("UPDATE PS_Z_REQ_HDR SET Z_CFE_STATUS='V' WHERE BUSINESS_UNIT=:1 AND REQ_ID=:2", &displayLine(1).REQ_LINE.BUSINESS_UNIT.Value, &displayLine(1).REQ_LINE.REQ_ID.Value);
                  
                  
               End-If;
            End-If;
         End-If;
      End-If;
   End-If;
End-If;

For &k = 1 To &displayLine.ActiveRowCount
   &BU = &displayLine(&k).REQ_LINE.BUSINESS_UNIT.Value;
   &REQ_ID = &displayLine(&k).REQ_LINE.REQ_ID.Value;
   &LINE_NBR = &displayLine(&k).REQ_LINE.LINE_NBR.Value;
   &ID_TYPE = "REQ";
   &Exists = "";
   
   SQLExec(SQL.Z_CFE_ERRS_EXISTS, &BU, &REQ_ID, &LINE_NBR, &ID_TYPE, &Exists);
   
   If &Exists = "X" Then
      
      &displayLine(&k).Z_WRK.Z_SHOW_ERRORS.Enabled = True;
      
   Else
      
      &displayLine(&k).Z_WRK.Z_SHOW_ERRORS.Enabled = False;
      
   End-If;
End-For;



/********* End QWEST QR3IPO006 Madhavi Ghodke 04/05/06 PSCIO Release3*********/


/*Begin QWEST QR3IPO008_009 Ankur Dhingra 07/19/06 PSCIO Release3 */
/*This code makes a call to JETS*/

/*  Fix for Defect # 461   */

If &recCFEStatus.SelectByKey() And
      (&recCFEStatus.Z_CFE_STATUS.Value = "V" Or
         &recCFEStatus.Z_CFE_STATUS.Value = "VE") And
      /* Begin QWEST QR3IPO08 - Fix for Defect # 554   */
      REQ_HDR.HOLD_STATUS.Value = "N" Then
   /* END QWEST QR3IPO08 - Fix for Defect # 554   */
   &ret = REQ_BGTCHECK(REQ_HDR.BUSINESS_UNIT.Value, REQ_HDR.REQ_ID.Value)
End-If;


/********* End QWEST QR3IPO008_009 Ankur Dhingra 04/05/06 PSCIO Release3*********/


/********* Begin QWEST QR3IPO006 Madhavi Ghodke 05/31/06 PSCIO Release3*********/
/*This Code will mark worklist as completed if requestor comes to this component by clicking on the Email URL*/
&wlName = %WLName;
If (None(&wlName)) Then
   SQLExec("SELECT INSTANCEID,TRANSACTIONID FROM PS_Z_IN_REQLOD_WL WHERE BUSPROCNAME=:1 AND ACTIVITYNAME=:2 AND EVENTNAME=:3 AND WORKLISTNAME=:4 AND BUSINESS_UNIT=:5 AND REQ_ID=:6 AND REQUESTOR_ID=:7", "Z_REQ_CFE_BP", "Z_REQ_CFE_ACT", "Z_REQ_CFE_EVT", "Z_CFE_REQ_WL", REQ_HDR.BUSINESS_UNIT.Value, REQ_HDR.REQ_ID.Value, REQ_HDR.REQUESTOR_ID.Value, &instanceId, &transId);
   If ( Not (None(&instanceId)) Or
         &instanceId <> "") Then
      SQLExec("SELECT INSTSTATUS,OPRID FROM PSWORKLIST WHERE BUSPROCNAME=:1 AND ACTIVITYNAME=:2 AND EVENTNAME=:3 AND WORKLISTNAME=:4 AND INSTANCEID=:5 AND TRANSACTIONID=:6", "Z_REQ_CFE_BP", "Z_REQ_CFE_ACT", "Z_REQ_CFE_EVT", "Z_CFE_REQ_WL", &instanceId, &transId, &wlStatus, &oprId);
      If (&oprId = %OperatorId And
            (&wlStatus = "2" Or
               &wlStatus = 2)) Then
         /*do nothing if WLstatus is 'Marked'*/
      Else
         /*update the WLstatus with 'Marked'*/
         
         SQLExec("UPDATE PSWORKLIST SET INSTSTATUS=2 , INSTWORKEDDTTM = %DATETIMEIN(:1) WHERE BUSPROCNAME=:2 AND ACTIVITYNAME=:3 AND EVENTNAME=:4 AND WORKLISTNAME=:5 AND INSTANCEID=:6 AND TRANSACTIONID=:7", %Datetime, "Z_REQ_CFE_BP", "Z_REQ_CFE_ACT", "Z_REQ_CFE_EVT", "Z_CFE_REQ_WL", &instanceId, &transId);
      End-If;
   End-If;
End-If;

/********* End QWEST QR3IPO006 Madhavi Ghodke 05/31/06 PSCIO Release3*********/


/********* Begin QWEST QR3EPO036 SAMEER KATARIA 06/09/06 PSCIO Release3 The following code updates VP approval statuses and sends notifications if CFE and JETS are validated.*********/

SQLExec("SELECT Z_VP_APPROVE_REQ, Z_VP_APPRVL_STATUS FROM PS_Z_REQ_HDR WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID, &REQ, &STATUS);
If &REQ = "N" And
      &STATUS = "D" Then
   SQLExec("UPDATE PS_Z_REQ_HDR SET Z_VP_APPROVE_REQ = 'N', Z_VP_APPRVL_STATUS = 'NA' WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID);
End-If;



If &DUE_DT_CHANGED1 = False And
      &SHIP_VIA_CHANGED1 = False Then
   SQLExec("UPDATE PS_Z_REQ_HDR SET Z_VP_APPROVE_REQ = 'N', Z_VP_APPRVL_STATUS = 'NA' WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID);
End-If;




If &nDoModal = 1 Then
   &VP_APPROVER = Z_DERIVED.OPRID.Value;
   SQLExec("SELECT OPRDEFNDESC FROM PS_Z_VP_APPRVR_TBL WHERE OPRID=:1", &VP_APPROVER, &VP_APPROVER_CUID);
   SQLExec("SELECT MAX(SEQNBR) FROM PS_Z_VP_REQ_TBL WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID, &SEQNBR);
   &VP_REQ_TBL = CreateRecord(Record.Z_VP_REQ_TBL);
   &VP_REQ_TBL.REQ_ID.VALUE = REQ_HDR.REQ_ID.Value;
   &VP_REQ_TBL.BUSINESS_UNIT.VALUE = REQ_HDR.BUSINESS_UNIT.Value;
   &VP_REQ_TBL.REQUESTOR_ID.VALUE = REQ_HDR.REQUESTOR_ID.Value;
   &VP_REQ_TBL.Z_VP_APPROVER.VALUE = &VP_APPROVER_CUID;
   &VP_REQ_TBL.Z_CUID.VALUE = &VP_APPROVER;
   &VP_REQ_TBL.Z_VP_APPRVL_CMMTS.VALUE = Z_DERIVED.Z_VP_APPRVL_CMMTS.Value;
   &VP_REQ_TBL.SEQNBR.VALUE = &SEQNBR + 1;
   &VP_REQ_TBL.INSERT();
   SQLExec("UPDATE PS_Z_REQ_HDR SET Z_VP_APPROVE_REQ = 'Y', Z_VP_APPRVL_STATUS = 'NA' WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID);
   
End-If;
/********* Begin QWEST QR3EPO036_622 Madhavi Ghodke 06/09/06 PSCIO Release3*********/
/*SQLExec("SELECT Z_CFE_STATUS, Z_BUDGET_STATUS FROM PS_Z_REQ_HDR WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID, &CFE, &BUDGET);*/
SQLExec("SELECT Z_CFE_STATUS, Z_BUDGET_STATUS,Z_VP_APPROVE_REQ,Z_VP_APPRVL_STATUS FROM PS_Z_REQ_HDR WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID, &CFE, &BUDGET, &Z_APPROVAL_REQ, &Z_APPROVAL_STATUS);
/*If &nDoModal = 1 And
      (&CFE = "V" Or
         &CFE = "VE") And
      REQ_HDR.HOLD_STATUS.Value = "N" And
      &BUDGET = "V" then */


If &nDoModal = 1 And
      (&CFE = "V" Or
         &CFE = "VE") And
      REQ_HDR.HOLD_STATUS.Value = "N" And
      &BUDGET = "V" And
      &Z_APPROVAL_REQ = "Y" And
      &Z_APPROVAL_STATUS = "NA" Then
   /********* End QWEST QR3EPO036_622 Madhavi Ghodke 06/09/06 PSCIO Release3*********/
   SQLExec("SELECT EMAILID FROM PSOPRDEFN WHERE OPRID = :1", &VP_APPROVER, &EMAIL_ID);
   routeWorklist("Z_VP_APPROVE_BP", "Z_VP_APPROVE_REQ_ACT", "Z_VP_APPROVE_REQ", "Z_VP_APPROVE_REQ", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID, &VP_APPROVER, "Z_VP_APPRVL_RQ_TMP", REQ_HDR.REQUESTOR_ID, &EMAIL_ID, "", "", &VP_REQ_TBL.SEQNBR.VALUE);
   SQLExec("UPDATE PS_Z_REQ_HDR SET Z_VP_APPRVL_STATUS = 'I' WHERE BUSINESS_UNIT = :1 AND REQ_ID = :2", REQ_HDR.BUSINESS_UNIT, REQ_HDR.REQ_ID);
End-If;
/********* End QWEST QR3EPO036 SAMEER KATARIA 06/09/06 PSCIO Release3*********/


/*ZZ Vik Kuttappan 3-5-2006 Added code for bus publish*/
/*ZZ Vik Kuttappan 3-17-2006 changed code to write to XML file */

/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    Added new functions APFlatFile, InitVariables, VendorNextancexmlfile

InitVariables-  This function is used to initiaze the variables used in the 
                APFlatfile and VendorNextanceXmlfile functions
Input	     -  None
Output       -  None

APFlatFile   -  This function is used to generate the Flat file as required by the AP Walker System
Input	     -  Message Object for the AP Walker system 
Output       -  Fixed format FLat file in a predefined folder.

VendorNextancexmlfile   -  This function is used to generate the XML Flat file as required by the Nextance System
Input	          -  Message Object for the Nextance System 
Output            -  XML FLat file in a predefined folder.

***********************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    Added the Evaluate statement to check for the message name and call corresponding functions 
		  based on the output format as required by the target system
***********************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     02/14/2006
DESCR:    Added the TIN TYPE field to the AP Flat file Layout. Peoplecode changed accordingly in APFlatFile Function
          Corrections implemneted for Defect Id's 245, 246, 247
***********************************************************************/

/************************** $Qwest$ ******************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     02/01/2006
DESCR:    Added New Function ItemNextancexmlfile and 
		  Added When clauses to the existing Evaluate Statement for Nextance

ItemNextancexmlfile - This function is used to generate the XML Flat file for 
					  Item Data as required by the Nextance System
Input	            - Message Object for the Nextance System 
Output              - XML FLat file in a predefined folder.
/*****************************************************************************/


/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004 
NAME:     Rikhav Thakkar
DATE:     02/22/2006
DESCR:    For the defect id 258, modified the file path to accomodate the changes in environment due to migration.
***********************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004 
NAME:     Murali Kannappan
DATE:     03/01/2006
DESCR:    Change Request - For AP Walker, the Location starting with 'P' and Descr starting with 'P*' 
          will be selected for publish instead of 'R' and 'R*' respectively.
***********************************************************************/
/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004 -Defect ID 297
NAME:     Murali Kannappan
DATE:     03/10/2006
DESCR:    Change Request - Change the Party type value to 'Supplier'
***********************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004 defect id - 61
NAME:     Rikhav Thakkar
DATE:     03/22/2006
DESCR:    For the defect id 61, made the "Also known as" Field for Nextance to null
***********************************************************************/
/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004 defect id - 63 & 76
NAME:     Rikhav Thakkar
DATE:     03/29/2006
DESCR:    For the defect id 63 & 76, added the condition for Vendor status = Unapproved it will be sent as YES
and also changed the description for Item to DESCR60 field instead of DESCR
***********************************************************************/

/************************** $Qwest$******************************************
ITR#:     QR4IPO002
NAME:     Prashant Prakash
DATE:     01/17/2007
DESCR:    Added Code to Update the Flags and Date
to indicate the Last Publish
/*****************************************************************************/

/************************/
/*   Global variables   */
/************************/
Global string &MSGNAME, &PUBLISH_RULE_ID, &CHUNK_RULE_ID, &CHUNK_RULE_REC, &WHERE;
Global string &PUB_BASE_FLG, &BATCH_FULL, &MSG_CREATED, &BREAK_POINT, &FIRST_TIME, &MSGNODENAME;
Global number &PROCESS_INSTANCE, &NUM_RECTYPE, &fileno;
Global date &DATE, &EFFDT;
Global Message &MSG;
Global Record &REC_CHUNK;

Global array of string &ARY_BREAKFLD, &ARY_STATUS, &ARY_ORDERBY, &ARY_LIST;
Global array of number &ARY_BREAKIDX;
Global array of SQL &ARY_SQL;
Global array of Record &ARY_REC;

Global array of array of string &ARY_ARY_KEYFLD, &ARY_ARY_RECNAME;
Global array of array of number &ARY_ARY_KEYSIDX;

Global number &ROWNUM;
Global number &CNTR;
Global number &TOT_CNT;
Global number &VND_CNT;

/************************/
/*   Local  variables   */
/************************/
Local Rowset &RS_LVL0, &RS_LVL1, &RS_LVL2, &RS_LVL3, &RS_LVL4, &RS_LVL5;
Local Record &REC, &REC_RESTART, &REC_PREV;
Local Record &REC_MSG_LVL0, &REC_MSG_LVL1, &REC_MSG_LVL2, &REC_MSG_LVL3;
Local Record &REC_MSG_LVL4, &REC_MSG_LVL5, &REC_TBL_LVL1, &REC_TBL_LVL2, &REC_HIST;
Local Record &REC_TBL_LVL3, &REC_TBL_LVL4, &REC_TBL_LVL5;
Local SQL &SQL_LVL0, &SQL_LVL1, &SQL_LVL2, &SQL_LVL3, &SQL_LVL4, &SQL_LVL5;
Local string &RESTART, &ORDER_BY, &LIST;
Local number &I;

Local boolean &already;
/*ZZ 3-5-2006 Added code for bus publish*/
Local Message &response;
Local XmlDoc &xmldoc;
Local File &MY_FILE;

/********* Start QR2IPO004 *********/
/********* Start QR2IIN006 *********/
/*-------------------------------------------------------------------------------  
 Desc    : Function to Initialize the Variables used in the Functions VendorNextancexmlfile
 Input   : None
 Output  : None
 Returns : None
---------------------------------------------------------------------------------*/

Function InitVariables()
   &SETID = "";
   &VENDOR_ID = "";
   /* Added variables for the Item Publish to Nextance */
   &INV_ITEM_ID = "";
   &ITM_STATUS_CURRENT = "";
   &ITEM_DESCR0 = "";
   &ITEM_DESCR60 = "";
   &MFG_ITM_ID = "";
   &DATE_CREATED = "";
   &CREATED_BY = "";
   &DATE_UPDATED = "";
   &UPDATED_BY = "";
   &UPDATE_COUNT = "";
   &PDT_VERSION = "";
   &DESCR = "";
   &IDE_TYPE = "";
   &IDE_VALUE = "";
   &DOC_NAME = "";
   &DOC_DESCR = "";
   &DOC_VERSION = "";
   &DOC_LOC = "";
   &DOC_CONT_NAME = "";
   &DOC_CONT_TYPE = "";
   &DOC_INTERNAL = "";
   &DOC_ATT_DATE = "";
   &DOC_ATT_BY = "";
   &FIELD_NAME = "";
   &FIELD_VALUE = "";
   &REF_NO = "";
   &NEXT_STATUS = "";
   &STD_UOM = "";
   &UNSPSC_CD = "";
   /*Fields added for Item Publish to Nextance */
   &DESCR = "";
   &VENDOR_LOC = "";
   &ADDRESS_SEQ_NUM = "";
   &REMIT_ADDRESS_SEQ_NUM = "";
   &ADDR_SEQ_NUM_ORDR = "";
   &ADDRESS1 = "";
   &ADDRESS2 = "";
   &ADDRESS3 = "";
   &CITY = "";
   &STATE = "";
   &POSTAL = "";
   &PHONE_TYPE = "";
   &PHONE = "";
   &PHONE_FORMATTED = "";
   &PYMNT_TERMS_CD = "";
   &COUNTRY = "";
   &TIN_TYPE = "";
End-Function;

/********* End QR2IIN006 *********/
/*-------------------------------------------------------------------------------  
 Desc    : Function to write to a Fixed format flat file
 Input   : Message 
 Output  : Flat File in a predefined folder
 Returns : None
---------------------------------------------------------------------------------*/
Function APFlatFile(&APMsg As Message);
   
   Local File &MYFILE;
   Local Rowset &MSG_Rowset, &MSG_PR_RS, &MSG_CH2_RS, &MSG_CH1_RS, &FILEROWSET;
   Local Row &MSG_PRS_ROW, &MSG_PRS_ROW1;
   Local Record &MSG_PRS_REC, &MSG_PRS_REC1, &RECLINE, &HEADERREC, &TRAILERREC;
   
   Local number &RECORD_COUNT_LEN, &FIELDLENGTH, &DETAILSCNT;
   Local string &COUNTER, &FILENAME, &FILECREATE;
   
   &VENDOR_STATUS = "";
   &VENDOR_TIN = "";
   &NAME1 = "";
   &FILECREATE = "N";
   
   /********* Start QR2IIN004 - Defect id : 258 *********/
   rem &FILENAME = "/psoft/fscmsys/interface/conversion/in/";
   &environment = Lower(%DbName);
   &FILENAME = "/psoft/" | &environment | "/interface/conversion/in/";
   /********* End QR2IIN004 - Defect id : 258 *********/
   
   SQLExec("SELECT COUNTER8,%dateout(LAST_DATE_WORKED),TOTAL_COUNT FROM PS_Z_AP_CNTR_REC", &CNTR, &LST_DT, &TOT_CNT);
   MessageBox(0, "", 0, 0, "Last Publish " | &LST_DT);
   MessageBox(0, "", 0, 0, "Total Published on " | &LST_DT | " : " | &CNTR);
   MessageBox(0, "", 0, 0, "Total count setup " | &TOT_CNT);
   
   If &TOT_CNT = 0 Then
      /* A default value that is initially required. This can be changed thru the AP File Publish Setup page*/
      &TOT_CNT = 125;
   End-If;
   
   If (&LST_DT <> %Date) Then
      &CNTR = 0;
   End-If;
   &ROWNUM = (&TOT_CNT - &CNTR);
   MessageBox(0, "", 0, 0, "Now Publishing: " | &ROWNUM | " Vendor(s)");
   SQLExec("DELETE FROM PS_Z_AP_125_TEMP");
   
   If (&ROWNUM <> 0) Then
      /* To check whether any valid data is present to create a file starts */
      &MSG_Rowset = &APMsg.GetRowset();
      For &A0 = 1 To &MSG_Rowset.ActiveRowCount
         &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
         For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
            &MSG_PRS_ROW1 = &MSG_PR_RS.GetRow(&p1);
            &MSG_PRS_REC1 = &MSG_PRS_ROW1.VNDR_LOC_SCROL;
            /********* Start QR2IPO004 - Change Request  *********/
            /*If Upper(Left(&MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value, 1)) = "R" Or
          Upper(Left(&MSG_PRS_REC1.GetField(Field.DESCR).Value, 2)) = "R*" Then */
            If Upper(Left(&MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value, 1)) = "P" Or
                  Upper(Left(&MSG_PRS_REC1.GetField(Field.DESCR).Value, 2)) = "P*" Then
               /********* End QR2IPO004 - Change Request *********/
               &FILECREATE = "Y";
            End-If;
         End-For;
      End-For;
      /* To check whether any valid data is present to create a file ends */
   Else
      MessageBox(0, "", 0, 0, "Total Publishes of " | &TOT_CNT | " Vendors Completed!! ");
   End-If;
   /* Create a new file */
   If &FILECREATE = "Y" Then
      Evaluate EO_BATLIB_AET.MSGNAME
      When "Z_AP_VNDR_SYNC_EFF"
         rem &FILENAME = "/psoft/fscmsys/interface/conversion/in/";
         &MYFILE = GetFile(&FILENAME | "APSync.TXT", "W", %FilePath_Absolute);
         
         Break;
      When "Z_AP_VNDR_FULLSYNC_EFF"
         rem &FILENAME = "/psoft/fscmsys/interface/conversion/in/";
         rem &MYFILE = GetFile(&FILENAME | "APFullSync.TXT", "W", %FilePath_Absolute);
         
         &MYFILE = GetFile(&FILENAME | "APFullSync.TXT", "W", %FilePath_Absolute);
         Break;
      End-Evaluate;
      
      /* Write the Header Record */
      
      If &MYFILE.IsOpen Then
         If &MYFILE.SetFileLayout(FileLayout.Z_VND_AP_FLY) Then
            &FILEROWSET = &MYFILE.CreateRowset();
            &HEADERREC = &FILEROWSET(1).GetRecord(Record.HEADER);
            &HEADERREC.GetField(Field.RECORD_TYPE).Value = "H";
            &HEADERREC.GetField(Field.Z_FILE_TYPE).Value = "AP UPDATE VENDOR";
            &HEADERREC.GetField(Field.Z_HFILLER).Value = "";
            &MYFILE.WriteRecord(&HEADERREC);
         End-If;
      End-If;
      
   End-If;
   &MSG_Rowset = &APMsg.GetRowset();
   InitVariables();
   &DETAILSCNT = 0;
   &VND_CNT = 0;
   If &FILECREATE = "Y" Then
      For &A0 = 1 To &MSG_Rowset.ActiveRowCount
         &already = False;
         If (&VND_CNT < &ROWNUM) Then
            &SETID = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.SETID).Value;
            &VENDOR_ID = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.VENDOR_ID).Value;
            &VENDOR_STATUS = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.VENDOR_STATUS).Value;
            &NAME1 = &MSG_Rowset(&A0).GetRecord(Record.VENDOR).GetField(Field.NAME1).Value;
            /* Process Vendor TIN Records */
            &VENDOR_TIN = &MSG_Rowset(&A0).GetRowset(Scroll.VENDOR_ID_NBRS)(1).GetRecord(Record.VENDOR_ID_NBRS).GetField(Field.STD_ID_NUM).Value;
            
            /* Process Vendor Location  - Records */
            
            &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
            For &T1 = 1 To &MSG_PR_RS.ActiveRowCount
               
               rem   &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
               &MSG_PRS_ROW1 = &MSG_PR_RS.GetRow(&T1);
               &MSG_PRS_REC1 = &MSG_PRS_ROW1.VNDR_LOC_SCROL;
               /********* Start QR2IPO004 - Change Request  *********/
               /*If Upper(Left(&MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value, 1)) = "R" Or
                  Upper(Left(&MSG_PRS_REC1.GetField(Field.DESCR).Value, 2)) = "R*" Then */
               If Upper(Left(&MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value, 1)) = "P" Or
                     Upper(Left(&MSG_PRS_REC1.GetField(Field.DESCR).Value, 2)) = "P*" Then
                  /********* End QR2IPO004 - Change Request *********/
                  &VENDOR_LOC = &MSG_PRS_REC1.GetField(Field.VNDR_LOC).Value;
                  &MSG_CH1_RS = &MSG_PR_RS(&T1).GetRowset(Scroll.VENDOR_LOC);
                  For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                     &MSG_PRS_ROW = &MSG_CH1_RS.GetRow(&p2);
                     &MSG_PRS_REC = &MSG_PRS_ROW.VENDOR_LOC;
                     /* To get the Remit to Addreses for the Vendor ----*/
                     &REMIT_ADDRESS_SEQ_NUM = &MSG_PRS_REC.GetField(Field.REMIT_ADDR_SEQ_NUM).Value;
                     &PYMNT_TERMS_CD = &MSG_PRS_REC.GetField(Field.PYMNT_TERMS_CD).Value;
                     
                     /* Addresss Details */
                     
                     &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_ADDR_SCROL);
                     For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
                        &MSG_CH1_RS = &MSG_PR_RS(&p1).GetRowset(Scroll.VENDOR_ADDR);
                        For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                           &MSG_PRS_ROW = &MSG_CH1_RS.GetRow(&p2);
                           &MSG_PRS_REC = &MSG_PRS_ROW.VENDOR_ADDR;
                           If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &REMIT_ADDRESS_SEQ_NUM Then
                              &ADDRESS1 = &MSG_PRS_REC.GetField(Field.ADDRESS1).Value;
                              &ADDRESS2 = &MSG_PRS_REC.GetField(Field.ADDRESS2).Value;
                              &ADDRESS3 = &MSG_PRS_REC.GetField(Field.ADDRESS3).Value;
                              &CITY = &MSG_PRS_REC.GetField(Field.CITY).Value;
                              &STATE = &MSG_PRS_REC.GetField(Field.STATE).Value;
                              &COUNTRY = &MSG_PRS_REC.GetField(Field.COUNTRY).Value;
                              &POSTAL = &MSG_PRS_REC.GetField(Field.POSTAL).Value;
                              &POSTAL = Substitute(&POSTAL, "-", "");
                           End-If;
                        End-For;
                     End-For;
                     
                     /* Addresss Phone Details */
                     &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_ADDR_SCROL);
                     For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
                        &MSG_CH1_RS = &MSG_PR_RS.GetRow(&p1).GetRowset(Scroll.VENDOR_ADDR);
                        For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                           &MSG_CH2_RS = &MSG_CH1_RS.GetRow(&p2).GetRowset(Scroll.VENDOR_ADDR_PHN);
                           For &P3 = 1 To &MSG_CH2_RS.ActiveRowCount
                              &MSG_PRS_REC = &MSG_CH2_RS.GetRow(&P3).VENDOR_ADDR_PHN;
                              If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &REMIT_ADDRESS_SEQ_NUM Then
                                 If &MSG_PRS_REC.GetField(Field.PHONE_TYPE).Value = "BUSN" Then
                                    &PHONE = &MSG_PRS_REC.GetField(Field.PHONE).Value;
                                    /* For Removing Special Characters from Phone - Starts */
                                    &PHONE = Substitute(&PHONE, "-", "");
                                    &PHONE = Substitute(&PHONE, "/", "");
                                    &PHONE = Substitute(&PHONE, "[", "");
                                    &PHONE = Substitute(&PHONE, "(", "");
                                    &PHONE = Substitute(&PHONE, "]", "");
                                    &PHONE = Substitute(&PHONE, ")", "");
                                    &PHONE_FORMATTED = "";
                                    For &I = 1 To Len(&PHONE)
                                       If Substring(&PHONE, &I, 1) <> " " Then
                                          &PHONE_FORMATTED = &PHONE_FORMATTED | Substring(&PHONE, &I, 1);
                                       End-If;
                                    End-For;
                                    &PHONE = &PHONE_FORMATTED;
                                    
                                    /* For Removing Special Characters from Phone - Ends */
                                 End-If;
                              End-If;
                           End-For;
                        End-For;
                     End-For;
                     
                     /* Tin Type Details */
                     
                     &MSG_PR_RS = &MSG_Rowset(&A0).GetRowset(Scroll.VNDR_LOC_SCROL);
                     For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
                        &MSG_CH1_RS = &MSG_PR_RS.GetRow(&p1).GetRowset(Scroll.VENDOR_LOC);
                        For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
                           &MSG_CH2_RS = &MSG_CH1_RS.GetRow(&p2).GetRowset(Scroll.VENDOR_WTHD);
                           For &P3 = 1 To &MSG_CH2_RS.ActiveRowCount
                              &MSG_PRS_REC = &MSG_CH2_RS.GetRow(&P3).VENDOR_WTHD;
                              If &MSG_PRS_REC.GetField(Field.VNDR_LOC).Value = &VENDOR_LOC And
                                    &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &REMIT_ADDRESS_SEQ_NUM Then
                                 If &MSG_PRS_REC.GetField(Field.WTHD_ENTITY).Value = "IRS" Then
                                    &TIN_TYPE = &MSG_PRS_REC.GetField(Field.TIN_TYPE).Value;
                                 End-If;
                              End-If;
                           End-For;
                        End-For;
                     End-For;
                     /* Write the Details Record */
                     &RECLINE = &FILEROWSET(1).GetRecord(Record.DETAILS);
                     &RECLINE.GetField(Field.RECORD_TYPE).Value = "D";
                     &RECLINE.GetField(Field.VNDR_LOC).Value = Upper(&VENDOR_LOC);
                     &RECLINE.GetField(Field.VENDOR_STATUS).Value = Upper(&VENDOR_STATUS);
                     &RECLINE.GetField(Field.VENDOR_TIN).Value = Upper(&VENDOR_TIN);
                     &RECLINE.GetField(Field.NAME1).Value = Upper(&NAME1);
                     &RECLINE.GetField(Field.ADDRESS1).Value = Upper(&ADDRESS1);
                     &RECLINE.GetField(Field.ADDRESS2).Value = Upper(&ADDRESS2);
                     &RECLINE.GetField(Field.ADDRESS3).Value = Upper(&ADDRESS3);
                     &RECLINE.GetField(Field.CITY).Value = Upper(&CITY);
                     &RECLINE.GetField(Field.STATE).Value = Upper(&STATE);
                     &RECLINE.GetField(Field.POSTAL).Value = Upper(&POSTAL);
                     &RECLINE.GetField(Field.PHONE).Value = &PHONE;
                     &RECLINE.GetField(Field.PYMNT_TERMS_CD).Value = Upper(&PYMNT_TERMS_CD);
                     &RECLINE.GetField(Field.COUNTRY).Value = Upper(&COUNTRY);
                     &RECLINE.GetField(Field.TIN_TYPE).Value = Upper(&TIN_TYPE);
                     &MYFILE.WriteRecord(&RECLINE);
                     &DETAILSCNT = &DETAILSCNT + 1;
                     If Not &already Then;
                        SQLExec("INSERT INTO PS_Z_AP_125_TEMP VALUES (:1,:2)", &SETID, &VENDOR_ID);
                        &already = True;
                        &VND_CNT = &VND_CNT + 1;
                     End-If;
                     InitVariables();
                  End-For;
               End-If;
            End-For;
         Else
            Break;
         End-If;
      End-For;
      &TRAILERREC = &FILEROWSET(1).GetRecord(Record.TRAILER);
      &TRAILERREC.GetField(Field.RECORD_TYPE).Value = "T";
      
      /* Formating the Trailer Record - Record Count */
      &RECORD_COUNT = &DETAILSCNT + 2;
      &RECORD_COUNT_LEN = Len(&RECORD_COUNT);
      &FIELDLENGTH = &TRAILERREC.GetField(Field.Z_RECORD_CNT).FieldLength;
      If &RECORD_COUNT_LEN < &FIELDLENGTH Then
         For &I = 1 To (&FIELDLENGTH - &RECORD_COUNT_LEN)
            &COUNTER = &COUNTER | "0";
         End-For;
         &COUNTER = &COUNTER | &RECORD_COUNT;
      Else
         &COUNTER = &RECORD_COUNT;
      End-If;
      /* Write the Trailer Record */
      &TRAILERREC.GetField(Field.Z_RECORD_CNT).Value = &COUNTER;
      &TRAILERREC.GetField(Field.Z_TFILLER).Value = "";
      &MYFILE.WriteRecord(&TRAILERREC);
      &MYFILE.Close();
   End-If;
   &SQL.ReuseCursor = True;
End-Function;

/*-------------------------------------------------------------------------------  
 Desc    : Function to write to a XMl File for Nextance (Vendor Publish)
 Input   : Message 
 Output  : a xml file
 Returns : None
---------------------------------------------------------------------------------*/

/*ZZ Vik Kuttappan 3-17-2006 changed code to write to XML file */
Function VendorNextanceXmlFile(&NTMsg As Message);
   Local XmlDoc &Xml, &ErrorInfo;
   Local Rowset &MSG_Rowset, &MSG_PR_RS, &MSG_CH1_RS, &MSG_CH2_RS, &COUNTRYROWSET;
   Local Row &MSG_PRS_ROW;
   Local Record &MSG_PRS_REC;
   &VENDOR_STATUS = "";
   &VENDOR_TIN = "";
   &NAME1 = "";
   
   /*Loading Country Table Details Starts */
   &COUNTRYROWSET = CreateRowset(Record.COUNTRY_TBL);
   &COUNTRYROWSET.Fill();
   /*Loading Country Table Details Ends */
   
   &Xml = CreateXmlDoc("<?xml version='1.0' encoding='UTF-8' standalone='yes'?><docType/>");
   
   &MSG_Rowset = &NTMsg.GetRowset();
   InitVariables();
   For &AO = 1 To &MSG_Rowset.ActiveRowCount
      &SETID = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.SETID).Value;
      &VENDOR_ID = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.VENDOR_ID).Value;
      rem *** Code to populate values for doctype node ******************;
      &Node_party = &Xml.DocumentElement.AddElement("party");
      REM       &Node_party.AddAttribute("ObjectId ", "&AO");
      &Node_party.AddAttribute("objectId", "0");
      &Node_party.AddAttribute("docType", "party");
      
      &ADDR_SEQ_NUM_ORDR = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.ADDR_SEQ_NUM_ORDR).Value;
      
      rem *** Type field in nextance is mapped to Sys Audit field in Peoplesoft ***  - start;
      &Node_sysAudit = &Node_party.AddElement("sysAudit");
      &Node_createDate = &Node_sysAudit.AddElement("createDate");
      &Node_createDate.nodevalue = "2005-04-07 11:39:18";
      
      &Node_createdBy = &Node_sysAudit.AddElement("createdBy");
      &Node_createdBy.Nodevalue = "admin";
      
      &Node_updateDate = &Node_sysAudit.AddElement("updateDate");
      &Node_updateDate.nodevalue = "2005-04-07 11:43:03";
      
      &Node_updatedBy = &Node_sysAudit.AddElement("updatedBy");
      &Node_updatedBy.Nodevalue = "admin";
      
      &Node_updateCount = &Node_sysAudit.AddElement("updateCount");
      &Node_updateCount.nodevalue = 0;
      
      rem *** Name field in nextance is mapped to Vendor Name1 in Peoplesoft ***;
      &Node_name = &Node_party.AddElement("name");
      &Node_name.Nodevalue = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.NAME1).Value;
      &Node_name = &Node_party.AddElement("description");
      rem *** Type field in nextance is mapped to Sys Audit field in Peoplesoft *** Murali - End;
      
      
      rem *** Type field in nextance is mapped to Phone type field in Peoplesoft ***;
      &Node_partyTypes = &Node_party.AddElement("partyTypes");
      &Node_partyType = &Node_partyTypes.AddElement("partyType");
      &Node_partyType.AddAttribute("sysId", "0");
      &Node_type = &Node_partyType.Addelement("type");
      /**********************Start - Defect ID 297 **********************/
      &Node_type.Nodevalue = "Supplier";
      /**********************End - Defect ID 297 **********************/
      
      rem *** Type field in nextance is mapped to Backround in Peoplesoft *** Murali - start;
      &Node_background = &Node_party.AddElement("background");
      &Node_ownershipType = &Node_background.AddElement("ownershipType");
      &Node_yearEstablished = &Node_background.AddElement("yearEstablished");
      &Node_businessClassification = &Node_background.AddElement("businessClassification");
      &Node_noOfEmployees = &Node_background.AddElement("noOfEmployees");
      &Node_geographicCoverage = &Node_background.AddElement("geographicCoverage");
      &Node_annualSalesVolume = &Node_background.AddElement("annualSalesVolume ");
      
      &Node_OrgLevel = &Node_party.AddElement("orgLevel");
      &Node_OrgLevel.Nodevalue = "Corporation";
      
      &Node_url = &Node_party.AddElement("url");
      rem *** Type field in nextance is mapped to Backround in Peoplesoft *** Murali - End;
      
      rem *** enterpriseId field in nextance is mapped to VendorID field in Peoplesoft ***;
      
      &Node_enterpriseId = &Node_party.AddElement("enterpriseId");
      &Node_enterpriseId.Nodevalue = &VENDOR_ID;
      
      rem *** Type field in nextance is mapped to stateOfIncorporation in Peoplesoft *** Murali - start;
      &Node_stateOfIncorporation = &Node_party.AddElement("stateOfIncorporation");
      &Node_stcode = &Node_stateOfIncorporation.AddElement("code");
      rem *** Type field in nextance is mapped to stateOfIncorporation in Peoplesoft *** Murali - End;
      
      rem *** Type field in nextance is mapped to countryOfIncorporation in Peoplesoft *** Murali - start;
      &Node_countryOfIncorporation = &Node_party.AddElement("countryOfIncorporation");
      &Node_cycode = &Node_countryOfIncorporation.AddElement("code");
      rem *** Type field in nextance is mapped to countryOfIncorporation in Peoplesoft *** Murali - 
      
      rem *** isActive field in nextance is mapped to Status field in Peoplesoft ***;
      &Node_isActive = &Node_party.AddElement("isActive");
      
      &VENDOR_STATUS = &MSG_Rowset(&AO).GetRecord(Record.VENDOR).GetField(Field.VENDOR_STATUS).Value;
      Evaluate &VENDOR_STATUS
      When "A"
         /********* Start QR2IIN004 - Defect id : 63 *********/
      When "E"
         /********* End QR2IIN004 - Defect id : 63 *********/
         &Node_isActive.Nodevalue = "Yes";
         Break;
      When-Other
         &Node_isActive.Nodevalue = "No";
         Break;
      End-Evaluate;
      
      rem *** Tag for isLegalEntity *** ;
      &Node_isLegalEntity = &Node_party.AddElement("isLegalEntity");
      &Node_isLegalEntity.nodevalue = "Yes";
      
      rem *** Tag for isInstalledParty *** ;
      &Node_isInternalEntity = &Node_party.AddElement("isInternalEntity");
      &Node_isInternalEntity.nodevalue = "No";
      
      rem *** Tag for isLegalEntity *** ;
      &Node_isInstalledParty = &Node_party.AddElement("isInstalledParty");
      
      rem *** Tag for parentEntity  - start*** ;
      &Node_parentEntity = &Node_party.AddElement("parentEntity");
      &Node_parentEntity.addattribute("docType", "party");
      &Node_parentEntity.addattribute("objectId", "0");
      rem murali
      rem *** Tag for parentEntity  - end *** ;
      
      rem *** Tag for corporateEntity   - start*** ;
      &Node_corporateEntity = &Node_party.AddElement("corporateEntity");
      &Node_corporateEntity.addattribute("docType", "party");
      &Node_corporateEntity.addattribute("objectId", "0");
      rem *** Tag for parentEntity d - end *** ;
      
      rem *** Tag for  synonyms - start*** ;
      &Node_synonyms = &Node_party.AddElement("synonyms");
      &Node_synonym = &Node_synonyms.AddElement("synonym");
      &Node_synonym.addattribute("type", "Also known as");
      /********* Start QR2IIN004 - Defect id : 61 *********/
      rem &Node_synonym.nodevalue = "Qwest";
      &Node_synonym.nodevalue = " ";
      /********* End QR2IIN004 - Defect id : 61 *********/
      rem *** Tag for synonyms  - End*** ;
      
      /* Addresss Details */
      
      &MSG_PR_RS = &MSG_Rowset(&AO).GetRowset(Scroll.VNDR_ADDR_SCROL);
      For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
         &MSG_CH1_RS = &MSG_PR_RS(&p1).GetRowset(Scroll.VENDOR_ADDR);
         For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
            &MSG_PRS_ROW = &MSG_CH1_RS.GetRow(&p2);
            &MSG_PRS_REC = &MSG_PRS_ROW.VENDOR_ADDR;
            If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &ADDR_SEQ_NUM_ORDR Then
               &ADDRESS1 = &MSG_PRS_REC.GetField(Field.ADDRESS1).Value;
               &ADDRESS2 = &MSG_PRS_REC.GetField(Field.ADDRESS2).Value;
               &ADDRESS3 = &MSG_PRS_REC.GetField(Field.ADDRESS3).Value;
               &CITY = &MSG_PRS_REC.GetField(Field.CITY).Value;
               &STATE = &MSG_PRS_REC.GetField(Field.STATE).Value;
               /* Finding the Two Character Country Code in the CountryRowSet Starts */
               For &Countryindex = 1 To &COUNTRYROWSET.ActiveRowCount
                  If &COUNTRYROWSET(&Countryindex).COUNTRY_TBL.COUNTRY.Value = &MSG_PRS_REC.GetField(Field.COUNTRY).Value Then
                     &COUNTRY = &COUNTRYROWSET(&Countryindex).COUNTRY_TBL.COUNTRY_2CHAR.Value;
                  End-If;
               End-For;
               
               /* Finding the Two Character Country Code in the CountryRowSet Ends */
               
               &POSTAL = &MSG_PRS_REC.GetField(Field.POSTAL).Value;
            End-If;
         End-For;
      End-For;
      
      rem *** Code to populate values for mailadresses  ***********;
      &Node_addresses = &Node_party.AddElement("addresses");
      &Node_mailAddresses = &Node_addresses.AddElement("mailAddresses");
      &Node_mailAddress = &Node_mailAddresses.AddElement("mailAddress");
      
      &Node_mailAddress.AddAttribute("type", "PrincipalPlaceOfBiz");
      rem *** street field in nextance is mapped to Address1 field in Peoplesoft ***;
      &Node_street1 = &Node_mailAddress.AddElement("street");
      &Node_street1.Nodevalue = &ADDRESS1;
      rem *** street field in nextance is mapped to Address2 field in Peoplesoft ***;
      &Node_street2 = &Node_mailAddress.AddElement("street");
      &Node_street2.Nodevalue = &ADDRESS2;
      rem *** street field in nextance is mapped to Address3 field in Peoplesoft ***;
      &Node_street3 = &Node_mailAddress.AddElement("street");
      &Node_street3.Nodevalue = &ADDRESS3;
      rem *** city field in nextance is mapped to City field in Peoplesoft ***;
      &Node_city = &Node_mailAddress.AddElement("city");
      &Node_city.Nodevalue = &CITY;
      rem *** stateProvincecode field in nextance is mapped to State field in Peoplesoft ***;
      &Node_stateProvince = &Node_mailAddress.AddElement("stateProvince");
      &Node_Code = &Node_stateProvince.AddElement("code");
      &Node_Code.Nodevalue = &STATE;
      rem *** postalCodeZip field in nextance is mapped to ZipCode field in Peoplesoft ***;
      &Node_postalCodeZip = &Node_mailAddress.AddElement("postalCodeZip");
      &Node_postalCodeZip.Nodevalue = &POSTAL;
      rem *** countrycode field in nextance is mapped to Country Code field in Peoplesoft ***;
      &Node_Country = &Node_mailAddress.AddElement("country");
      &Node_CountryCode = &Node_Country.AddElement("code");
      &Node_CountryCode.Nodevalue = Left(&COUNTRY, 2);
      
      rem *** Tag for email addresses   - start*** ;
      &Node_emailAddresses = &Node_addresses.AddElement("emailAddresses");
      &Node_emailAddress = &Node_emailAddresses.AddElement("emailAddress");
      &Node_emailAddress.AddAttribute("email", "");
      &Node_emailAddress.AddAttribute("type", "");
      
      rem *** Tag for email addresses   - End*** ;
      
      rem *** Code to populate values for phone address *****************;
      rem *** phoneAddress field in nextance is mapped to Telephone field in Peoplesoft ***;
      
      &MSG_PR_RS = &MSG_Rowset(&AO).GetRowset(Scroll.VNDR_ADDR_SCROL);
      For &p1 = 1 To &MSG_PR_RS.ActiveRowCount
         &MSG_CH1_RS = &MSG_PR_RS.GetRow(&p1).GetRowset(Scroll.VENDOR_ADDR);
         For &p2 = 1 To &MSG_CH1_RS.ActiveRowCount
            &MSG_CH2_RS = &MSG_CH1_RS.GetRow(&p2).GetRowset(Scroll.VENDOR_ADDR_PHN);
            For &P3 = 1 To &MSG_CH2_RS.ActiveRowCount
               &MSG_PRS_REC = &MSG_CH2_RS.GetRow(&P3).VENDOR_ADDR_PHN;
               If &MSG_PRS_REC.GetField(Field.ADDRESS_SEQ_NUM).Value = &ADDR_SEQ_NUM_ORDR Then
                  If &MSG_PRS_REC.GetField(Field.PHONE_TYPE).Value = "BUSN" Then
                     &PHONE = &MSG_PRS_REC.GetField(Field.PHONE).Value
                  End-If;
               End-If;
            End-For;
         End-For;
      End-For;
      
      &Node_phoneAddresses = &Node_addresses.AddElement("phoneAddresses");
      &Node_phoneAddress = &Node_phoneAddresses.AddElement("phoneAddress");
      &Node_phoneAddress.addattribute("phone", &PHONE);
      &Node_phoneAddress.addattribute("type", "Business");
      
      rem *** Tag for fax addresses   - start*** ;
      &Node_faxAddresses = &Node_addresses.AddElement("faxAddresses");
      &Node_faxAddress = &Node_faxAddresses.AddElement("faxAddress");
      &Node_faxAddress.AddAttribute("fax", "");
      &Node_faxAddress.AddAttribute("type", "");
      
      rem *** Tag for fax addresses    - end *** ;
      
      rem *** Tag for commercialInfo   - start*** ;
      &VENDOR_TIN = &MSG_Rowset(&AO).GetRowset(Scroll.VENDOR_ID_NBRS)(1).GetRecord(Record.VENDOR_ID_NBRS).GetField(Field.STD_ID_NUM).Value;
      &Node_commercialinfo = &Node_party.AddElement("commercialInfo");
      &Node_DUNS = &Node_commercialinfo.AddElement("DUNS");
      &Node_SICCode = &Node_commercialinfo.AddElement("SICCode");
      &Node_NAICSCode = &Node_commercialinfo.AddElement("NAICSCode");
      &Node_dnbRating = &Node_commercialinfo.AddElement("dnbRating");
      &Node_TIN = &Node_commercialinfo.AddElement("TIN");
      &Node_TIN.NodeValue = &VENDOR_TIN;
      &Node_TINType = &Node_commercialinfo.AddElement("TINType");
      rem *** Tag for commercialInfo   - ends*** ;
      
      rem *** Tag for diversityInfo   - start*** ;
      &Node_diversityInfo = &Node_party.AddElement("diversityInfo");
      &Node_SBE = &Node_diversityInfo.AddElement("SBE");
      &Node_MSBE = &Node_diversityInfo.AddElement("MSBE");
      &Node_WSBE = &Node_diversityInfo.AddElement("WSBE");
      &Node_VSBE = &Node_diversityInfo.AddElement("VSBE");
      &Node_SDBC = &Node_diversityInfo.AddElement("SDBC");
      &Node_HSBC = &Node_diversityInfo.AddElement("HSBC");
      &Node_PCO = &Node_diversityInfo.AddElement("PCO");
      
      &Node_minorityCertifications = &Node_diversityInfo.AddElement("minorityCertifications");
      &Node_attachment = &Node_minorityCertifications.AddElement("attachment");
      &Node_attachment.AddAttribute("sysId", "0");
      &Node_attachment.AddAttribute("type", "");
      &Node_docName = &Node_attachment.AddElement("docName");
      &Node_docDescription = &Node_attachment.AddElement("docDescription");
      &Node_docVersion = &Node_attachment.AddElement("docVersion");
      &Node_docLocation = &Node_attachment.AddElement("docLocation");
      &Node_docContentName = &Node_attachment.AddElement("docContentName");
      &Node_docContentType = &Node_attachment.AddElement("docContentType");
      &Node_docIsInternal = &Node_attachment.AddElement("docIsInternal");
      &Node_docIsInternal.nodevalue = "false";
      &Node_docAttachmentDate = &Node_attachment.AddElement("docAttachmentDate");
      &Node_docAttachedBy = &Node_attachment.AddElement("docAttachedBy");
      
      &Node_diversityCertifications = &Node_diversityInfo.AddElement("diversityCertifications");
      &Node_diversityCertification = &Node_diversityCertifications.AddElement("diversityCertification");
      &Node_diversityCertification.AddAttribute("sysId", "0");
      &Node_agency = &Node_diversityCertification.AddElement("agency");
      &Node_certificationDate = &Node_diversityCertification.AddElement("certificationDate");
      &Node_expirationDate = &Node_diversityCertification.AddElement("expirationDate");
      
      rem *** Tag for diversityInfo   - ends*** ;
      
      rem *** Tag for userDefinedFields   - start*** ;
      &Node_userDefinedFields = &Node_party.AddElement("userDefinedFields");
      &Node_userDefinedField = &Node_userDefinedFields.AddElement("userDefinedField");
      &Node_userDefinedField.AddAttribute("sysId", "0");
      
      &Node_fieldName = &Node_userDefinedField.AddElement("fieldName");
      &Node_fieldValue = &Node_userDefinedField.AddElement("fieldValue");
      rem *** Tag for userDefinedFields   - ends*** ;
      
      
      rem *** Tag for diversityInfo   - ends*** ;
      
      rem *** Tag for attachments   - start*** ;
      &Node_attachments = &Node_party.AddElement("attachments");
      &Node_attachment = &Node_attachments.AddElement("attachment");
      &Node_attachment.AddAttribute("sysId", "0");
      &Node_attachment.AddAttribute("type", "");
      
      &Node_docName = &Node_attachment.AddElement("docName");
      &Node_docDescription = &Node_attachment.AddElement("docDescription");
      &Node_docVersion = &Node_attachment.AddElement("docVersion");
      &Node_docLocation = &Node_attachment.AddElement("docLocation");
      &Node_docContentName = &Node_attachment.AddElement("docContentName");
      &Node_docContentType = &Node_attachment.AddElement("docContentType");
      &Node_docIsInternal = &Node_attachment.AddElement("docIsInternal");
      &Node_docIsInternal.nodevalue = "false";
      &Node_docAttachmentDate = &Node_attachment.AddElement("docAttachmentDate");
      &Node_docAttachedBy = &Node_attachment.AddElement("docAttachedBy");
      rem *** Tag for attachments   - ends*** ;
      
      rem *** Tag for Status  *** ;
      &Node_status = &Node_party.AddElement("status");
      
      rem *** Tag for supplierRelationship   - start*** ;
      &Node_supplierRelationship = &Node_party.AddElement("supplierRelationship");
      &Node_supplierSince = &Node_supplierRelationship.AddElement("supplierSince");
      &Node_currentSupplierClass = &Node_supplierRelationship.AddElement("currentSupplierClass");
      &Node_currentClassSince = &Node_supplierRelationship.AddElement("currentClassSince");
      
      rem *** Tag for supplierRelationship   - ends*** ;
      
      
      rem *** Tag for financialInformation   - start*** ;
      &Node_financialInformation = &Node_party.AddElement("financialInformation");
      &Node_fiscalYearEnding = &Node_financialInformation.AddElement("fiscalYearEnding");
      &Node_primaryCurrency = &Node_financialInformation.AddElement("primaryCurrency");
      &Node_bankruptcyFiled = &Node_financialInformation.AddElement("bankruptcyFiled");
      &Node_bankruptcyYear = &Node_financialInformation.AddElement("bankruptcyYear");
      &Node_chapter = &Node_financialInformation.AddElement("chapter");
      &Node_isReceivership = &Node_financialInformation.AddElement("isReceivership");
      &Node_receiverName = &Node_financialInformation.AddElement("receiverName");
      
      rem *** Tag for financialInformation   - ends*** ;
      
      rem *** Tag for financialDetails   - start*** ;
      &Node_financialDetails = &Node_party.AddElement("financialDetails");
      &Node_financialDetail = &Node_financialDetails.AddElement("financialDetail");
      &Node_financialDetail.AddAttribute("sysId", "0");
      &Node_fiscalYear = &Node_financialDetail.AddElement("fiscalYear");
      &Node_revenue = &Node_financialDetail.AddElement("revenue");
      &Node_revenue.AddAttribute("currency", "");
      &Node_revenue.nodevalue = "0.0";
      &Node_profitLoss = &Node_financialDetail.AddElement("profitLoss");
      &Node_profitLoss.AddAttribute("currency", "");
      &Node_profitLoss.AddAttribute("isProfit", "");
      &Node_profitLoss.nodevalue = "0.0";
      &Node_netWorth = &Node_financialDetail.AddElement("netWorth");
      &Node_netWorth.AddAttribute("currency", "");
      &Node_netWorth.nodevalue = "0.0";
      &Node_currentAssets = &Node_financialDetail.AddElement("currentAssets");
      &Node_currentAssets.AddAttribute("currency", "");
      &Node_currentAssets.nodevalue = "0.0";
      &Node_currentLiabilities = &Node_financialDetail.AddElement("currentLiabilities");
      &Node_currentLiabilities.AddAttribute("currency", "");
      &Node_currentLiabilities.nodevalue = "0.0";
      
      rem *** Tag for financialDetails   - ends*** ;
      
      rem *** Tag for bankingReference   - start*** ;
      &Node_bankingReference = &Node_party.AddElement("bankingReference");
      &Node_primaryRelationship = &Node_bankingReference.AddElement("primaryRelationship");
      &Node_accountOfficer = &Node_bankingReference.AddElement("accountOfficer");
      &Node_officerPhone = &Node_bankingReference.AddElement("officerPhone");
      &Node_address = &Node_bankingReference.AddElement("address");
      &Node_address.AddAttribute("preferenceNumber", "0");
      &Node_address.AddAttribute("type", "");
      &Node_streetbr1 = &Node_address.AddElement("street");
      &Node_streetbr2 = &Node_address.AddElement("street");
      &Node_streetbr3 = &Node_address.AddElement("street");
      &Node_citybr = &Node_address.AddElement("city");
      &Node_stateProvince = &Node_address.AddElement("stateProvince");
      &Node_codebrst = &Node_stateProvince.AddElement("code");
      &Node_postalCodeZip = &Node_address.AddElement("postalCodeZip");
      &Node_Country = &Node_address.AddElement("country");
      &Node_codebrcy = &Node_Country.AddElement("code");
      
      rem *** Tag for bankingReference   - ends*** ;
      
      rem *** Tag for productOfferings   - start*** ;
      
      &Node_productOfferings = &Node_party.AddElement("productOfferings");
      &Node_productOffering = &Node_productOfferings.AddElement("productOffering");
      &Node_productOffering.AddAttribute("sysId", "0");
      &Node_UNSPSCRef = &Node_productOffering.AddElement("UNSPSCRef");
      &Node_UNSPSCCode = &Node_UNSPSCRef.AddElement("UNSPSCCode");
      &Node_UNSPSCCode.nodevalue = "0";
      rem *** Tag for productOfferings   - ends*** ;
      
      rem *** Tag for products   - start*** ;
      &Node_products = &Node_party.AddElement("products");
      &Node_product = &Node_products.AddElement("product");
      &Node_product.AddAttribute("sysId", "0");
      &Node_productKey = &Node_product.AddElement("productKey");
      &Node_productKey.AddAttribute("docType", "product");
      &Node_productKey.AddAttribute("objectId", "0");
      rem *** Tag for products   - ends *** ;
      
      rem *** Tag for narratives   - start*** ;
      &Node_narratives = &Node_party.AddElement("narratives");
      &Node_narrative = &Node_narratives.AddElement("narrative");
      &Node_narrative.AddAttribute("sysId", "0");
      &Node_narrativeType = &Node_narrative.AddElement("narrativeType");
      &Node_enteredBy = &Node_narrative.AddElement("enteredBy");
      &Node_loginId = &Node_enteredBy.AddElement("loginId");
      &Node_date = &Node_narrative.AddElement("date");
      &Node_text = &Node_narrative.AddElement("text");
      rem *** Tag for narratives   - ends*** ;
   End-For;
   
   &VNDR_NEXT_MSGNAME = "MESSAGE." | EO_BATLIB_AET.MSGNAME;
   
   /* ERROR NOTIFICATION */
   
   /*&ErrorInfo = PingNode("PSFT_FTP");
   &Root = &ErrorInfo.DocumentElement;
   &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
   For &M = 1 To &MsgNodeArray.Len
      &MsgNode = &MsgNodeArray [&M];
      &MsgText = &MsgNode.FindNode("status").NodeValue;
      If &MsgText = "Success (117,73)" Then
         &RET = PublishXmlDoc(&Xml, @(&VNDR_NEXT_MSGNAME), Node.PSFT_FTP);
      Else
         Error ("Web Server not available for web service");
      End-If;
   End-For;*/
   /*PUBLISH MESSAGE ON NODE*/
   
   
   /*ZZ Vik Kuttappan 3-17-2006 changed code to write to XML file */
   &outStr = &Xml.GenXmlString();
   
   <*&filename = "/psoft/fscmtst/interface/conversion/in/vendor_" | %Datetime | ".xml";
   &MY_FILE = GetFile(&filename, "W", "A", %FilePath_Absolute);
   &MY_FILE.WriteLine(&outStr);*>
   
   &RET = PublishXmlDoc(&Xml, @(&VNDR_NEXT_MSGNAME), Node.Z_PSFT_FTP);
   
End-Function;

/********* End QR2IPO004 *********/
/********* Start QR2IIN006 *********/

/*********************************************
Added Function to Publish XML file to Nextance
**********************************************/

Function ItemNextanceXmlFile(&NEXT_Msg As Message);
   
   Local Rowset &NEXT_MSG_Rowset, &NEXT_ITM_MFG_RS;
   Local XmlDoc &ErrorInfo;
   Local Row &NEXT_MSG_ROW;
   Local Record &NEXT_MSG_REC;
   
   &NEXTxmlDoc = CreateXmlDoc("<?xml version='1.0'encoding='UTF-8'standalone='yes'?><docType/>");
   /*&NEXTxmldata = "<?xml version='1.0'encoding='UTF-8'standalone='yes'?>";
   &NEXTxmlDoc = CreateXmlDoc(&NEXTxmldata);
   &NEXTrootNode = &NEXTxmlDoc.DocumentElement.AddElement("docType");*/
   
   &NEXT_MSG_Rowset = &NEXT_Msg.GetRowset();
   InitVariables();
   For &NEXT0 = 1 To &NEXT_MSG_Rowset.ActiveRowCount
      
      &AddNode0 = &NEXTxmlDoc.DocumentElement.AddElement("product");
      &AddNode0.AddAttribute("docType", "product");
      &AddNode0.AddAttribute("objectId", &NEXT0);
      
      /******************* 
	   Process Item Master
	   *******************/
      
      &INV_ITEM_ID = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.INV_ITEM_ID).Value;
      &ITM_STATUS_CURRENT = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.ITM_STATUS_CURRENT).Value;
      &DATE_CREATED = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.DATE_ADDED).Value;
      &CREATED_BY = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.ORIG_OPRID).Value;
      &DATE_UPDATED = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.LAST_DTTM_UPDATE).Value;
      &UPDATED_BY = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.LAST_MAINT_OPRID).Value;
      &UPDATE_COUNT = 0;
      Evaluate &ITM_STATUS_CURRENT
      When "1"
         /* Begin--Pavan Bellari 12/04/2006 Fix for Ticket # HD00002697537 */
         /* Added When "2" and When "5" to send the isactive value 'YES' for Nextance  */
      When "2"
      When "5"
         /* End--Pavan Bellari 12/04/2006 Fix for Ticket # HD00002697537 */
      When "7"
         &ITM_STATUS_CURRENT = "Yes";
         Break;
      When "4"
      When "3"
         /* Begin--Pavan Bellari 12/04/2006 Fix for Ticket # HD00002697537 */
         /* Added When "6" to send the isactive value 'NO' for Nextance  */
      When "6"
         /* End--Pavan Bellari 12/04/2006 Fix for Ticket # HD00002697537 */
         &ITM_STATUS_CURRENT = "No";
         Break;
      End-Evaluate;
      
      &ITEM_DESCR0 = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.DESCR).Value;
      /********* Start QR2IIN004 - Defect id : 76 *********/
      SQLExec("select descr60 from ps_MASTER_ITEM_EVW where setid=:1 and inv_item_id=:2", "USWC", &INV_ITEM_ID, &descr60);
      &ITEM_DESCR60 = &descr60;
      /********* End QR2IIN004 - Defect id : 76 *********/
      
      &STD_UOM = &NEXT_MSG_Rowset(&NEXT0).GetRecord(Record.MASTER_ITEM_EVW).GetField(Field.UNIT_MEASURE_STD).Value;
      &UPD_DATE = DatePart(&DATE_UPDATED) | " " | Substitute(Substring(String(TimePart(&DATE_UPDATED)), 1, 8), ".", ":");
      /* SYSAUDIT */
      
      &AddNode_AUDIT = &AddNode0.AddElement("sysAudit");
      &AddNode_CREATEDATE = &AddNode_AUDIT.AddElement("createDate");
      &AddNode_CREATEDATE.NodeValue = &DATE_CREATED;
      &AddNode_CREATED_BY = &AddNode_AUDIT.AddElement("createdBy");
      &AddNode_CREATED_BY.NodeValue = &CREATED_BY;
      &AddNode_DATE_UPDATED = &AddNode_AUDIT.AddElement("updateDate");
      &AddNode_DATE_UPDATED.NodeValue = &UPD_DATE;
      &AddNode_UPDATED_BY = &AddNode_AUDIT.AddElement("updatedBy");
      &AddNode_UPDATED_BY.NodeValue = &UPDATED_BY;
      &AddNode_UPD_COUNT = &AddNode_AUDIT.AddElement("updateCount");
      &AddNode_UPD_COUNT.NodeValue = &UPDATE_COUNT;
      
      
      
      /*Create TAGS for ITEM_ID and ITEM DESCR*/
      
      &AddNode_PDT_NO = &AddNode0.AddElement("productNo");
      &AddNode_PDT_NO.NodeValue = &INV_ITEM_ID;
      &AddNode_PDT_NAME = &AddNode0.AddElement("productName");
      &AddNode_PDT_NAME.NodeValue = &ITEM_DESCR0;
      &AddNode_PDT_VER = &AddNode0.AddElement("productVersion");
      &AddNode_PDT_VER.NodeValue = "1";
      &AddNode_DESCR = &AddNode0.AddElement("description");
      &AddNode_DESCR.NodeValue = &ITEM_DESCR60;
      
      /*Create Additional tags*/
      
      &AddNode_Owner = &AddNode0.AddElement("owner");
      &AddNode_Owner.AddAttribute("docType", "party");
      &AddNode_Owner.AddAttribute("objectId", "0");
      &AddNode_PDT_GRP = &AddNode0.AddElement("productGroup");
      &AddNode_PDT_GRP.AddAttribute("docType", "productGroup");
      &AddNode_PDT_GRP.AddAttribute("objectId", "0");
      
      /* PRODUCT BLOCK */
      
      &AddNode_PDT_IDENT_S = &AddNode0.AddElement("productIdentifiers");
      &AddNode_PDT_IDENT = &AddNode_PDT_IDENT_S.AddElement("productIdentifier");
      &AddNode_PDT_IDENT.AddAttribute("sysId", "0");
      &AddNode_IDENT_TYPE = &AddNode_PDT_IDENT.AddElement("identifierType");
      &AddNode_IDENT_VALUE = &AddNode_PDT_IDENT.AddElement("identifierValue");
      
      
      /*Create Status TAG*/
      
      &AddNode_STATUS = &AddNode0.AddElement("isActive");
      &AddNode_STATUS.NodeValue = &ITM_STATUS_CURRENT;
      
      /* ATTACHMENT BLOCK */
      
      &AddNode_ATTACH_S = &AddNode0.AddElement("attachments");
      &AddNode_ATTACH = &AddNode_ATTACH_S.AddElement("attachment");
      &AddNode_ATTACH.AddAttribute("sysId", "0");
      &AddNode_ATTACH.AddAttribute("type", "");
      
      &AddNode_DOC_NAME = &AddNode_ATTACH.AddElement("docName");
      &AddNode_DOC_DESCR = &AddNode_ATTACH.AddElement("docDescription");
      &AddNode_DOC_VERSION = &AddNode_ATTACH.AddElement("docVersion");
      &AddNode_DOC_LOCATION = &AddNode_ATTACH.AddElement("docLocation");
      &AddNode_DOC_CONT_NAME = &AddNode_ATTACH.AddElement("docContentName");
      &AddNode_DOC_CONT_TYPE = &AddNode_ATTACH.AddElement("docContentType");
      &AddNode_DOC_IS_INT = &AddNode_ATTACH.AddElement("docIsInternal");
      &AddNode_DOC_IS_INT.NodeValue = "false";
      &AddNode_DOC_ATT_DATE = &AddNode_ATTACH.AddElement("docAttachmentDate");
      &AddNode_DOC_ATT_BY = &AddNode_ATTACH.AddElement("docAttachedBy");
      
      /* USER DEFINED FIELDS BLOCK */
      
      &AddNode_USER_FIELDS = &AddNode0.AddElement("userDefinedfields");
      &AddNode_USER_FIELD = &AddNode_USER_FIELDS.AddElement("userDefinedField");
      &AddNode_USER_FIELD.AddAttribute("sysId", "0");
      &AddNode_FIELD_NAME = &AddNode_USER_FIELD.AddElement("fieldName");
      &AddNode_FIELD_VALUE = &AddNode_USER_FIELD.AddElement("fieldValue");
      
      /* Reference No */
      
      &AddNode_REF_NO = &AddNode0.AddElement("referenceNo");
      &AddNode_STATUS = &AddNode0.AddElement("status");
      
      /**************************
	   Process Item Manufacturers
	   **************************/
      
      &NEXT_ITM_MFG_RS = &NEXT_MSG_Rowset(&NEXT0).GetRowset(Scroll.Z_NEX_LVL1_E_VW);
      For &NEXT01 = 1 To &NEXT_ITM_MFG_RS.ActiveRowCount
         &NEXT_MSG_ROW = &NEXT_ITM_MFG_RS.GetRow(&NEXT01);
         &NEXT_MSG_REC = &NEXT_MSG_ROW.Z_NEX_LVL1_E_VW;
         &MFG_ITM_ID = &NEXT_MSG_REC.GetField(Field.MFG_ITM_ID).Value;
         
         /*Create MFG_ITM_ID TAG*/
      End-For;
      /************** Qwest - Damodar - 02/17/06 **********/
      &AddNode_MPN = &AddNode0.AddElement("manufacturerPartNumber");
      &AddNode_MPN.NodeValue = &MFG_ITM_ID;
      &AddNode_STD_UOM = &AddNode0.AddElement("standardUOM");
      &AddNode_STD_UOM.NodeValue = &STD_UOM;
      /************** Qwest - Damodar - 02/17/06 **********/
      
      /* UNSPSC BLOCK */
      
      &AddNode_UNSPSC_RF = &AddNode0.AddElement("UNSPSCRef");
      &AddNode_UNSPSC_CD = &AddNode_UNSPSC_RF.AddElement("UNSPSCCode");
      &AddNode_UNSPSC_CD.NodeValue = "0";
      
      /* RELATED IP */
      
      &AddNode_REL_IP_S = &AddNode0.AddElement("relatedIPs");
      &AddNode_REL_IP = &AddNode_REL_IP_S.AddElement("relatedIP");
      &AddNode_REL_IP.AddAttribute("sysId", "0");
      &AddNode_IP_KEY = &AddNode_REL_IP.AddElement("ipKey");
      &AddNode_IP_KEY.AddAttribute("docType", "");
      &AddNode_IP_KEY.AddAttribute("objectId", "0");
      
      /*Initialize Variables*/
      
      InitVariables();
   End-For;
   &NEXT_STR = &NEXTxmlDoc.GenFormattedXmlString();
   &NEXT_MSGNAME = "MESSAGE." | EO_BATLIB_AET.MSGNAME;
   
   /* CHECK NODE */
   
   <*   &ErrorInfo = PingNode("PSFT_FTP");
   &Root = &ErrorInfo.DocumentElement;
   &MsgNodeArray = &Root.GetElementsByTagName("msgnode");
   For &M = 1 To &MsgNodeArray.Len
      &MsgNode = &MsgNodeArray [&M];
      &MsgText = &MsgNode.FindNode("status").NodeValue;
      If &MsgText = "Success (117,73)" Then
         /*PUBLISH MESSAGE ON NODE*/
         &NEXT_RET = PublishXmlDoc(&NEXTxmlDoc, @(&NEXT_MSGNAME), Node.PSFT_FTP);
      Else
         Error ("Web Server not available for web service");
      End-If;
   End-For;
  *>
   &NEXT_RET = PublishXmlDoc(&NEXTxmlDoc, @(&NEXT_MSGNAME), Node.Z_PSFT_FTP);
End-Function;

/*********************************************
Added Function to Publish XML file to Nextance
**********************************************/

/********* End QR2IIN006 *********/

/*-------------------------------------------------------------------------------  
 Desc    : Check Chunk Field Values.
 Input   : Level 0 record, breakfield array, chunk value array
 Output  : Chunk value 
 Returns : 
---------------------------------------------------------------------------------*/
Function CheckChunkValues(&REC_SAVE As Record, &REC_OLD As Record) Returns boolean;
   &KEYCHANGE = False;
   &I = 0;
   While &ARY_BREAKFLD.Next(&I)
      &FIELD_SAVE = &REC_SAVE.GetField(@("FIELD." | &ARY_BREAKFLD [&I]));
      &FIELD_OLD = &REC_OLD.GetField(@("FIELD." | &ARY_BREAKFLD [&I]));
      
      If &FIELD_SAVE.Value <> &FIELD_OLD.Value Then
         
         /*     If &REC_SAVE.GetField(@("FIELD." | &ARY_BREAKFLD[&I])).Value <> &REC_OLD.GetField(@("FIELD." | &ARY_BREAKFLD[&I])).Value Then
 */
         &KEYCHANGE = True;
         Break;
      End-If;
   End-While;
   Return &KEYCHANGE
End-Function;



/************************/
/*       Function       */
/*  Check if child row  */
/************************/
Function isChildRow(&REC_PARENT As Record, &REC_CHILD As Record, &PIDX As number, &CIDX As number) Returns number;
   
   If &ARY_STATUS [&CIDX] = "B" Then
      Return - 1;
   Else
      If &ARY_STATUS [&CIDX] = "E" Then
         Return 1;
      End-If;
   End-If;
   
   &ARY_KEYSIDX = &ARY_ARY_KEYSIDX [&PIDX];
   
   For &I = 1 To &ARY_KEYSIDX.Len;
      &PARENTF = &REC_PARENT.GetField(&ARY_KEYSIDX [&I]);
      &CURRNTF = &REC_CHILD.GetField(&ARY_KEYSIDX [&I]);
      
      If &PARENTF.value > &CURRNTF.value Then
         Return - 1;
      Else
         If &PARENTF.value < &CURRNTF.value Then
            Return 1;
         End-If;
      End-If;
   End-For;
   
   Return 0;
   
End-Function;



/************************/
/*       Function       */
/*     Get Next Row     */
/************************/
Function getNextRow(&REC_CHILD As Record, &CIDX As number);
   
   If Not &ARY_STATUS [&CIDX] = "E" Then
      &SQL = &ARY_SQL [&CIDX];
      If &SQL.Fetch(&REC_CHILD) Then
         &ARY_STATUS [&CIDX] = " ";
      Else
         &ARY_STATUS [&CIDX] = "E";
      End-If;
   End-If;
   
End-Function;


/************************/
/*   Level 5 Rowset     */
/************************/
Function Level_5_RowSet()
   
   &ROWCNT5 = 1;
   &REC_MSG_LVL5 = &RS_LVL5(&ROWCNT5).GetRecord(1);
   &LVL5_PSCAMA = &RS_LVL5(&ROWCNT5).PSCAMA;
   
   &X5 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL5.Name);
   &REC_TBL_LVL5 = &ARY_REC [&X5];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL4, &REC_TBL_LVL5, &X4, &X5);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL5, &X5);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL4, &REC_TBL_LVL5, &X4, &X5);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL5.CopyFieldsTo(&REC_MSG_LVL5);
      
      If &BATCH_FULL = "B" Then
         &LVL5_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL5.AUDIT_ACTN.Value;
      Else
         &LVL5_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL5.InsertRow(&ROWCNT5);
      &ROWCNT5 = &ROWCNT5 + 1;
      &REC_MSG_LVL5 = &RS_LVL5(&ROWCNT5).GetRecord(1);
      &LVL5_PSCAMA = &RS_LVL5(&ROWCNT5).PSCAMA;
      
      getNextRow(&REC_TBL_LVL5, &X5);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL4, &REC_TBL_LVL5, &X4, &X5);
   End-While;
   
   &RS_LVL5.DeleteRow(&ROWCNT5);
   
End-Function;


/************************/
/*   Level 4 Rowset     */
/************************/
Function Level_4_RowSet();
   
   &ROWCNT4 = 1;
   &REC_MSG_LVL4 = &RS_LVL4(&ROWCNT4).GetRecord(1);
   &LVL4_PSCAMA = &RS_LVL4(&ROWCNT4).PSCAMA;
   
   &X4 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL4.Name);
   &REC_TBL_LVL4 = &ARY_REC [&X4];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL3, &REC_TBL_LVL4, &X3, &X4);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL4, &X4);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL3, &REC_TBL_LVL4, &X3, &X4);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL4.CopyFieldsTo(&REC_MSG_LVL4);
      
      For &C4 = 1 To &RS_LVL4(&ROWCNT4).ChildCount
         &RS_LVL5 = &RS_LVL4(&ROWCNT4).GetRowset(&C4);
         Level_5_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL4_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL4.AUDIT_ACTN.Value;
      Else
         &LVL4_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL4.InsertRow(&ROWCNT4);
      &ROWCNT4 = &ROWCNT4 + 1;
      &REC_MSG_LVL4 = &RS_LVL4(&ROWCNT4).GetRecord(1);
      &LVL4_PSCAMA = &RS_LVL4(&ROWCNT4).PSCAMA;
      
      getNextRow(&REC_TBL_LVL4, &X4);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL3, &REC_TBL_LVL4, &X3, &X4);
   End-While;
   
   &RS_LVL4.DeleteRow(&ROWCNT4);
   
End-Function;


/************************/
/*   Level 3 Rowset     */
/************************/
Function Level_3_RowSet();
   
   &ROWCNT3 = 1;
   &REC_MSG_LVL3 = &RS_LVL3(&ROWCNT3).GetRecord(1);
   &LVL3_PSCAMA = &RS_LVL3(&ROWCNT3).PSCAMA;
   
   &X3 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL3.Name);
   &REC_TBL_LVL3 = &ARY_REC [&X3];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL2, &REC_TBL_LVL3, &X2, &X3);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL3, &X3);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL2, &REC_TBL_LVL3, &X2, &X3);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL3.CopyFieldsTo(&REC_MSG_LVL3);
      
      For &C3 = 1 To &RS_LVL3(&ROWCNT3).ChildCount
         &RS_LVL4 = &RS_LVL3(&ROWCNT3).GetRowset(&C3);
         Level_4_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL3_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL3.AUDIT_ACTN.Value;
      Else
         &LVL3_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL3.InsertRow(&ROWCNT3);
      &ROWCNT3 = &ROWCNT3 + 1;
      &REC_MSG_LVL3 = &RS_LVL3(&ROWCNT3).GetRecord(1);
      &LVL3_PSCAMA = &RS_LVL3(&ROWCNT3).PSCAMA;
      
      getNextRow(&REC_TBL_LVL3, &X3);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL2, &REC_TBL_LVL3, &X2, &X3);
   End-While;
   
   &RS_LVL3.DeleteRow(&ROWCNT3);
   
End-Function;



/************************/
/*   Level 2 Rowset     */
/************************/
Function Level_2_RowSet();
   
   &ROWCNT2 = 1;
   &REC_MSG_LVL2 = &RS_LVL2(&ROWCNT2).GetRecord(1);
   &LVL2_PSCAMA = &RS_LVL2(&ROWCNT2).PSCAMA;
   
   &X2 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL2.Name);
   &REC_TBL_LVL2 = &ARY_REC [&X2];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL1, &REC_TBL_LVL2, &X1, &X2);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL2, &X2);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL1, &REC_TBL_LVL2, &X1, &X2);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL2.CopyFieldsTo(&REC_MSG_LVL2);
      
      For &C2 = 1 To &RS_LVL2(&ROWCNT2).ChildCount
         &RS_LVL3 = &RS_LVL2(&ROWCNT2).GetRowset(&C2);
         Level_3_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL2_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL2.AUDIT_ACTN.Value;
      Else
         &LVL2_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL2.InsertRow(&ROWCNT2);
      &ROWCNT2 = &ROWCNT2 + 1;
      &REC_MSG_LVL2 = &RS_LVL2(&ROWCNT2).GetRecord(1);
      &LVL2_PSCAMA = &RS_LVL2(&ROWCNT2).PSCAMA;
      
      getNextRow(&REC_TBL_LVL2, &X2);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL1, &REC_TBL_LVL2, &X1, &X2);
   End-While;
   
   &RS_LVL2.DeleteRow(&ROWCNT2);
   
End-Function;



/************************/
/*   Level 1 Rowset     */
/************************/
Function Level_1_RowSet()
   
   &ROWCNT1 = 1;
   &REC_MSG_LVL1 = &RS_LVL1(&ROWCNT1).GetRecord(1);
   &LVL1_PSCAMA = &RS_LVL1(&ROWCNT1).PSCAMA;
   
   &X1 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL1.Name);
   &REC_TBL_LVL1 = &ARY_REC [&X1];
   
   &KEYEQUAL = isChildRow(&REC_TBL_LVL0, &REC_TBL_LVL1, &X0, &X1);
   While &KEYEQUAL = - 1;
      getNextRow(&REC_TBL_LVL1, &X1);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL0, &REC_TBL_LVL1, &X0, &X1);
   End-While;
   
   While &KEYEQUAL = 0;
      &REC_TBL_LVL1.CopyFieldsTo(&REC_MSG_LVL1);
      
      For &C1 = 1 To &RS_LVL1(&ROWCNT1).ChildCount
         &RS_LVL2 = &RS_LVL1(&ROWCNT1).GetRowset(&C1);
         Level_2_RowSet();
      End-For;
      
      
      If &BATCH_FULL = "B" Then
         &LVL1_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL1.AUDIT_ACTN.Value;
      Else
         &LVL1_PSCAMA.AUDIT_ACTN.Value = "A";
      End-If;
      
      &RS_LVL1.InsertRow(&ROWCNT1);
      &ROWCNT1 = &ROWCNT1 + 1;
      &REC_MSG_LVL1 = &RS_LVL1(&ROWCNT1).GetRecord(1);
      &LVL1_PSCAMA = &RS_LVL1(&ROWCNT1).PSCAMA;
      
      getNextRow(&REC_TBL_LVL1, &X1);
      &KEYEQUAL = isChildRow(&REC_TBL_LVL0, &REC_TBL_LVL1, &X0, &X1);
   End-While;
   
   &RS_LVL1.DeleteRow(&ROWCNT1);
   
End-Function;




/**************************/
/*   Start of Peoplecode  */
/*    Check for Restart   */
/**************************/
For &I = 1 To &ARY_SQL.Len;
   &SQL = &ARY_SQL [&I];
   
   If Not &SQL.IsOpen Then
      
      &REC = &ARY_REC [&I];
      &ORDER_BY = &ARY_ORDERBY [&I];
      &LIST = &ARY_LIST [&I];
      
      If All(&CHUNK_RULE_REC) And
            &NUM_RECTYPE < 2 Then
         If &BATCH_FULL = "F" Then
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where EXISTS (Select 'Y' from %Table(:2) B where B.CHUNK_RULE_ID = :3 and B.EFFDT = %DateIn(:4) " | &WHERE | &ORDER_BY, &REC, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         Else
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2 and EXISTS (Select 'Y' from %Table(:3) B where B.CHUNK_RULE_ID = :4 and B.EFFDT = %DateIn(:5) " | &WHERE | &ORDER_BY, &REC, &PROCESS_INSTANCE, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         End-If
      Else
         If &BATCH_FULL = "F" Then
            /********* Start QR2IPO004 *********/
            /********* Start QR2IIN006 *********/
            Evaluate EO_BATLIB_AET.MSGNAME
            When "VENDOR_SYNC_EFF"
               If &REC.Name = "VENDOR_ID_NBRS" Then
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
               Else
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
               End-If;
               Break;
            When "Z_AP_VNDR_SYNC_EFF"
               If &REC.Name = "VENDOR_ID_NBRS" Then
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
               Else
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
               End-If;
               Break;
            When "Z_NT_VNDR_SYNC_EFF"
               If &REC.Name = "VENDOR_ID_NBRS" Then
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
               Else
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
               End-If;
               Break;
            When "VENDOR_FULLSYNC_EFF"
            When "Z_NT_VNDR_FULLSYNC_EFF"
               If &REC.Name = "VENDOR_ID_NBRS" Then
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A WHERE A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
               Else
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
               End-If;
               Break;
            When "Z_AP_VNDR_FULLSYNC_EFF"
               If &REC.Name = "VENDOR_ID_NBRS" Then
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_VENDOR B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND B.VENDOR_STATUS = 'A' AND B.Z_RFX_CD = 'N' AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
               Else
                  &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_VENDOR B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND B.VENDOR_STATUS = 'A' AND B.Z_RFX_CD = 'N'" | &ORDER_BY, &REC);
               End-If;
               Break;
            When-Other
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
               Break;
            End-Evaluate;
            
            REM &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            /* The above existing sql statement has been commented and taken care in the 
		    when-other Part of the Evaluate statement above */
            /*********  End  QR2IPO004 *********/
            /*********  End  QR2IIN006 *********/
         Else
            
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2" | &ORDER_BY, &REC, &PROCESS_INSTANCE);
            
         End-If;
         
      End-If;
      
      &SQL.ReuseCursor = True;
      
      &ARY_SQL.Replace(&I, 1, &SQL);
      &RECNAME = &REC.Name;
      &REC_RESTART = CreateRecord(@("RECORD." | &RECNAME));
      &REC.CopyFieldsTo(&REC_RESTART);
      &ARY_STATUS [&I] = "";
      
      &KEYEQUAL = - 1;
      
      While &KEYEQUAL = - 1;
         getNextRow(&REC, &I);
         &KEYEQUAL = isChildRow(&REC_RESTART, &REC, &I, &I);
      End-While;
   End-If;
   
End-For;


/**************************/
/*   Start of Peoplecode  */
/*     Publish Message    */
/**************************/
rem &MAXMSGSIZE = %MaxMessageSize;
&domname = Lower(%DbName);
SQLExec("SELECT APMSGMAXMSGSIZE FROM PSOPTIONS", &MAXMSGSIZE);
&MSG = CreateMessage(@("MESSAGE." | &MSGNAME));
&ROWCNT0 = 1;
&RS_LVL0 = &MSG.GetRowset();
&REC_MSG_LVL0 = &RS_LVL0(&ROWCNT0).GetRecord(1);
&LVL0_PSCAMA = &RS_LVL0(&ROWCNT0).PSCAMA;
&X0 = &ARY_ARY_RECNAME.Find(&REC_MSG_LVL0.Name);
&REC_TBL_LVL0 = &ARY_REC [&X0];
&REC_PREV = CreateRecord(@("RECORD." | &REC_TBL_LVL0.Name));
&SQL_LVL0 = &ARY_SQL [&X0];
&BREAK_POINT = "N";

If &FIRST_TIME = "Y" Then
   If &SQL_LVL0.Fetch(&REC_TBL_LVL0) Then
      &ARY_REC.Replace(&X0, 1, &REC_TBL_LVL0);
   Else
      &BREAK_POINT = "Y";
      EO_BATLIB_AET.END_TRANS_FLG = "N";
      Exit (0);
   End-If;
   &FIRST_TIME = "N";
End-If;

While &BREAK_POINT = "N"
   &REC_TBL_LVL0.CopyFieldsTo(&REC_MSG_LVL0);
   &REC_TBL_LVL0.CopyFieldsTo(&REC_PREV);
   
   &LVL0_PSCAMA.PUBLISH_RULE_ID.Value = &PUBLISH_RULE_ID;
   &LVL0_PSCAMA.PROCESS_INSTANCE.Value = &PROCESS_INSTANCE;
   &LVL0_PSCAMA.MSGNODENAME.Value = &MSGNODENAME;
   &LVL0_PSCAMA.LANGUAGE_CD.Value = %Language_Base;
   &LVL0_PSCAMA.BASE_LANGUAGE_CD.Value = %Language_Base;
   
   If &BATCH_FULL = "B" Then
      &LVL0_PSCAMA.AUDIT_ACTN.Value = &REC_TBL_LVL0.AUDIT_ACTN.Value;
   Else
      &LVL0_PSCAMA.AUDIT_ACTN.Value = "A";
   End-If;
   
   For &C0 = 1 To &RS_LVL0(&ROWCNT0).ChildCount
      &RS_LVL1 = &RS_LVL0(&ROWCNT0).GetRowset(&C0);
      Level_1_RowSet();
   End-For;
   
   If &SQL_LVL0.Fetch(&REC_TBL_LVL0) Then
      &ARY_REC.Replace(&X0, 1, &REC_TBL_LVL0);
   Else
      If &PUB_BASE_FLG = "Y" Then
         
         /*ZZ 4-10-2006 Added error code to test error notifications 
         Error ("Publish failed");*/
         
         /*********  Start  QR2IPO004 *********/
         /*********  Start  QR2IINO06 *********/
         Evaluate EO_BATLIB_AET.MSGNAME
         When "Z_AP_VNDR_SYNC_EFF"
         When "Z_AP_VNDR_FULLSYNC_EFF"
            rem MessageBox(0, "", 0, 0, "Publsih area 1");
            APFlatFile(&MSG);
            Break;
         When "Z_NT_VNDR_SYNC_EFF"
         When "Z_NT_VNDR_FULLSYNC_EFF"
            VendorNextanceXmlFile(&MSG);
            Break;
         When "Z_NEXT_BATPUB_MSG"
         When "Z_NEXT_FULLPUB_MSG"
            ItemNextanceXmlFile(&MSG);
            Break;
            
            /*ZZ 3-5-2006 Added code for bus publish*/
         When "Z_PMPO_BATPUB_MSG"
            MessageBox(0, "", 0, 0, "Item BUS Publish");
            rem   &MSG.Publish();
            &response = &MSG.SyncRequest("Z_ITEM_BUSPUBLISH");
            rem &response = &MSG.SyncRequest("PST_FTP");
            &xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Item Batch Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Item Batch Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;
            
            Break;
            
            /* Begin QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 \t\t\t
This code was added to Update the Flags and Date to indicate the Last Publish */
            
         When "Z_ITEM_SYNC"
            rem &response =
            &MSG.SyncRequest("Z_ITEM_BUSPUBLISH");
            rem &response = &MSG.SyncRequest("Z_R4_ITEM_PUBLISH");
            &response = &MSG.SyncRequest();
            &xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Item Batch Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Item Batch Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;
            
            /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
            
            
         When "Z_PMPO_FULLPUB_MSG"
            MessageBox(0, "", 0, 0, "Item BUS Publish");
            &MSG.Publish();
            rem &response = &MSG.SyncRequest("Z_ITEM_BUSPUBLISH_FULLSYNC");
            rem &response = &MSG.SyncRequest("PST_FTP");
            <*&xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Item Full Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Item Full Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;
            *>
            Break;
            
         When "VENDOR_SYNC_EFF"
            MessageBox(0, "", 0, 0, "Vendor BUS Publish");
            &response = &MSG.SyncRequest("Z_VENDOR_BUSPUBLISH");
            rem &response = &MSG.SyncRequest("PSFT_FTP");
            rem &MSG.Publish();
            &xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Vendor Batch Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Vendor Batch Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;
            
            Break;
            
         When "VENDOR_FULLSYNC_EFF"
            MessageBox(0, "", 0, 0, "Vendor BUS Publish");
            rem &response = &MSG.SyncRequest("Z_VENDOR_BUSPUBLISH_FULLSYNC");
            rem &response = &MSG.SyncRequest("PSFT_FTP");
            &MSG.Publish();
            rem &tstmsg = &MSG.GetXmlDoc();
            <*&tstgenxml = &MSG.GenXMLString();
            &filename = "/psoft/" | &domname | "/interface/conversion/in/trial_" | %Datetime | ".xml";
            &MY_FILE = GetFile(&filename, "W", "A", %FilePath_Absolute);
            &MY_FILE.WriteLine(&tstgenxml);*>
            <*&xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Vendor Full Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Vendor Full Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;*>
            Break;
            
         When-Other
            rem MessageBox(0, "", 0, 0, "Here in publish for this mesasge");
            &MSG.Publish();
            Break;
            
         End-Evaluate;
         REM &MSG.Publish();
         
         /* The above existing Publish statement has been commented and taken care in the 
		 when-other Part of the Evaluate statement above */
         /*********  End  QR2IINO06 *********/
         /*********  End  QR2IPO004 *********/
      End-If;
      &MSG_CREATED = "Y";
      EO_BATLIB_AET.END_TRANS_FLG = "N";
      Exit (0);
   End-If;
   
   /********* Start QR2IPO004 *********/
   If (EO_BATLIB_AET.MSGNAME <> "Z_AP_VNDR_FULLSYNC_EFF") And
         (EO_BATLIB_AET.MSGNAME <> "Z_AP_VNDR_SYNC_EFF") Then
      /********* End QR2IPO004 *********/
      If &MSG.Size > &MAXMSGSIZE Then
         If &PUB_BASE_FLG = "Y" Then
            
            /*ZZ 4-10-2006 Added error code to test error notifications 
         Error ("Publish failed");*/
            
            
            /*********  Start  QR2IPO004 *********/
            /*********  Start  QR2IINO06 *********/
            Evaluate EO_BATLIB_AET.MSGNAME
            When "Z_AP_VNDR_SYNC_EFF"
            When "Z_AP_VNDR_FULLSYNC_EFF"
               
               MessageBox(0, "", 0, 0, "Publsih area 2");
               MessageBox(0, "", 0, 0, "Message Size : " | &MSG.Size);
               MessageBox(0, "", 0, 0, "mAXSIZE : " | &MAXMSGSIZE);
               APFlatFile(&MSG);
               Break;
            When "Z_NT_VNDR_SYNC_EFF"
            When "Z_NT_VNDR_FULLSYNC_EFF"
               VendorNextanceXmlFile(&MSG);
               Break;
            When "Z_NEXT_BATPUB_MSG"
            When "Z_NEXT_FULLPUB_MSG"
               ItemNextanceXmlFile(&MSG);
               Break;
               
               /*ZZ 3-5-2006 Added code for bus publish*/
            When "Z_PMPO_BATPUB_MSG"
               MessageBox(0, "", 0, 0, "Batch Item BUS Publish");
               rem &MSG.Publish();
               &response = &MSG.SyncRequest("Z_ITEM_BUSPUBLISH");
               rem &response = &MSG.SyncRequest("PST_FTP");
               &xmldoc = &response.GetXmlDoc();
               &resp_msg = &xmldoc.GenXmlString();
               MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
               &fnd_success = Find("Success", &resp_msg);
               If (&fnd_success <> 0) Then
                  MessageBox(0, "", 0, 0, "Item Batch Publish successfull !");
               Else
                  MessageBox(0, "", 0, 0, "Item Batch Publish Failed ! " | &response_node);
                  Error (&resp_msg);
               End-If;
               
               Break;
               
               /* Begin QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4
   \t\t\tThis code was added to Update the Flags and Date to indicate the Last Publish */
               
            When "Z_ITEM_SYNC"
               rem &response =
               &MSG.SyncRequest("Z_ITEM_BUSPUBLISH"
               );
               rem &response = &MSG.SyncRequest("Z_R4_ITEM_PUBLISH");
               rem &response = &MSG.SyncRequest();
               &response = &MSG.SyncRequest();
               &xmldoc = &response.GetXmlDoc();
               &resp_msg = &xmldoc.GenXmlString();
               &fnd_success = Find("Success", &resp_msg);
               If (&fnd_success <> 0) Then
                  MessageBox(0, "", 0, 0, "Item Batch Publish successfull !");
               Else
                  MessageBox(0, "", 0, 0, "Item Batch Publish Failed ! " | &response_node);
                  Error (&resp_msg);
               End-If;
               
               /* End QWEST QR4IPO002 Prashant
               Prakash 01/17/2007 PSCIO-R4 */
               
               
            When "Z_PMPO_FULLPUB_MSG"
               MessageBox(0, "", 0, 0, "Full Item BUS Publish");
               &MSG.Publish();
               rem &response = &MSG.SyncRequest("Z_ITEM_BUSPUBLISH_FULLSYNC");
               rem &response = &MSG.SyncRequest("PST_FTP");
               <*&xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Item Full Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Item Full Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;*>
               Break;
               
            When "VENDOR_SYNC_EFF"
               
               MessageBox(0, "", 0, 0, "Batch Vendor BUS Publish");
               &response = &MSG.SyncRequest("Z_VENDOR_BUSPUBLISH");
               rem &response = &MSG.SyncRequest("PSFT_FTP");
               rem &MSG.Publish();
               &xmldoc = &response.GetXmlDoc();
               &resp_msg = &xmldoc.GenXmlString();
               MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
               &fnd_success = Find("Success", &resp_msg);
               If (&fnd_success <> 0) Then
                  MessageBox(0, "", 0, 0, "Vendor Batch Publish successfull !");
               Else
                  MessageBox(0, "", 0, 0, "Vendor Batch Publish Failed ! " | &response_node);
                  Error (&resp_msg);
               End-If;
               
               Break;
               
            When "VENDOR_FULLSYNC_EFF"
               MessageBox(0, "", 0, 0, "Full Vendor BUS Publish");
               rem &response = &MSG.SyncRequest("Z_VENDOR_BUSPUBLISH_FULLSYNC");
               rem &response = &MSG.SyncRequest("PSFT_FTP");
               &MSG.Publish();
               rem &tstmsg = &MSG.GetXmlDoc();
               <*&tstgenxml = &MSG.GenXMLString();
            &filename = "/psoft/" | &domname | "/interface/conversion/in/trial_" | %Datetime | ".xml";
            &MY_FILE = GetFile(&filename, "W", "A", %FilePath_Absolute);
            &MY_FILE.WriteLine(&tstgenxml);*>
               <*&xmldoc = &response.GetXmlDoc();
            &resp_msg = &xmldoc.GenXmlString();
            MessageBox(0, "", 0, 0, "&fnd_successsdfdsds ! " | &resp_msg);
            &fnd_success = Find("Success", &resp_msg);
            If (&fnd_success <> 0) Then
               MessageBox(0, "", 0, 0, "Vendor Full Publish successfull !");
            Else
               MessageBox(0, "", 0, 0, "Vendor Full Publish Failed ! " | &response_node);
               Error (&resp_msg);
            End-If;
            *>
               Break;
               
            When-Other
               &MSG.Publish();
               Break;
            End-Evaluate;
            REM &MSG.Publish();
            
            /* The above existing Publish statement has been commented and taken care in the 
		 when-other Part of the Evaluate statement above */
            /*********  End  QR2IINO06 *********/
            /*********  End  QR2IPO004 *********/
            
         End-If;
         &MSG_CREATED = "Y";
         EO_BATLIB_AET.END_TRANS_FLG = "Y";
         Exit (0);
      End-If;
      /********* Start QR2IPO004 *********/
   End-If;
   /*********  End  QR2IPO004 *********/
   If All(&CHUNK_RULE_REC)
      /* And &NUM_RECTYPE = 2 */
      Then
      
      If CheckChunkValues(&REC_TBL_LVL0, &REC_PREV) Then
         If &PUB_BASE_FLG = "Y" Then
            &MSG.Publish();
         End-If;
         &MSG_CREATED = "Y";
         EO_BATLIB_AET.END_TRANS_FLG = "Y";
         Exit (0);
         
      End-If;
   End-If;
   
   
   &RS_LVL0.InsertRow(&ROWCNT0);
   &ROWCNT0 = &ROWCNT0 + 1;
   &REC_MSG_LVL0 = &RS_LVL0(&ROWCNT0).GetRecord(1);
   &LVL0_PSCAMA = &RS_LVL0(&ROWCNT0).PSCAMA;
   
End-While;


/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004ox
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    Added the Evaluate statment to check for the message name and change the 
          SQL query based on whether the message is for Batch Publish or Full Publish
***********************************************************************/

/************************** $Qwest$ *******************************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     01/20/2006
DESCR:    Added the Evaluate statment to check for the message name and Publish accordingly
/******************************************************************************************/


/************************/
/*   Global variables   */
/************************/
Global string &MSGNAME, &PUBLISH_RULE_ID, &CHUNK_RULE_ID, &CHUNK_RULE_REC, &REL_LANG_FOUND;
Global string &PUB_BASE_FLG, &BATCH_FULL, &FIRST_TIME, &MSGNODENAME, &WHERE;
Global number &PROCESS_INSTANCE, &NUM_RECTYPE;
Global date &DATE, &EFFDT;
Global Record &REC_CHUNK;

Global array of string &ARY_BREAKFLD, &ARY_STATUS, &ARY_ORDERBY, &ARY_LIST;
Global array of string &ARY_PRNTRECNAME, &ARY_EFFDT;
Global array of number &ARY_BREAKIDX;
Global array of SQL &ARY_SQL;
Global array of Record &ARY_REC;

Global array of array of string &ARY_ARY_KEYFLD, &ARY_ARY_RECNAME;
Global array of array of number &ARY_ARY_KEYSIDX;

/************************/
/*   Local variables    */
/************************/
Local string &RECNAME, &FIELDNUM, &FIELDNAME;
Local string &MSGRECNAME, &SRCRECNAME, &RELRECNAME;
Local string &ORDER_BY, &CHUNK_CLAUSE;
Local SQL &SQL, &SQL_BRKFLDS, &SQL_RECLIST, &SQL_ALTREC, &SQL_PSRECDEFN, &SQL_CHUNK;
Local Record &REC;

Local array of string &ARY_KEYFLD, &ARY_RECNAME;
Local array of number &ARY_KEYSIDX;




/************************/
/*      Function        */
/* Build SQL Statement  */
/************************/
Function buildSQLStmt();
   
   &ARY_KEYFLD = CreateArrayRept("", 0);
   &ARY_KEYSIDX = CreateArrayRept(0, 0);
   
   &ORDER_BY = " order by ";
   &COMMA = " ";
   &LIST = " ";
   &EFFDT_SW = "N";
   
   For &I = 1 To &REC.FieldCount;
      &FIELD = &REC.GetField(&I);
      
      
      If &FIELD.Name = "EFFDT" Then
         &EFFDT_SW = "Y";
      End-If;
      
      Evaluate &FIELD.Type
      When = "DATE"
         &LIST = &LIST | &COMMA | " %DateOut(A." | &FIELD.Name | ")";
         Break;
      When = "TIME"
         &LIST = &LIST | &COMMA | " %TimeOut(A." | &FIELD.Name | ")";
         Break;
      When = "DATETIME"
         &LIST = &LIST | &COMMA | " %DateTimeOut(A." | &FIELD.Name | ")";
         Break;
      When-Other
         &LIST = &LIST | &COMMA | "A." | &FIELD.Name;
         Break;
      End-Evaluate;
      
      
      &COMMA = ", ";
      
      If &FIELD.IsKey Then
         &ARY_KEYFLD.Push(&FIELD.Name);
         &ARY_KEYSIDX.Push(&I);
         
         If &ARY_KEYSIDX.Len > 1 Then
            &ORDER_BY = &ORDER_BY | ", ";
         End-If;
         
         &ORDER_BY = &ORDER_BY | "A." | &FIELD.NAME;
         
      End-If;
   End-For;
   
End-Function;



/************************/
/*       Set            */
/*   Global Variables   */
/************************/
If EO_BATLIB_AET.PRCSINSTANCE = 0 Then
   &BATCH_FULL = "F";
   &PROCESS_INSTANCE = EO_BATLIB_AET.PROCESS_INSTANCE;
Else
   &BATCH_FULL = "B";
   &PROCESS_INSTANCE = EO_BATLIB_AET.PRCSINSTANCE;
End-If;

If EO_BATLIB_AET.CREATE_FILE_FLG = "N" Then
   EO_BATLIB_AET.AE_APPLID = "EOL_PUBLISH";
   EO_BATLIB_AET.AE_SECTION = "PUBDTL";
Else
   EO_BATLIB_AET.CREATE_HDR_FLG = "N";
   EO_BATLIB_AET.CREATE_TRL_FLG = "N";
   EO_BATLIB_AET.AE_APPLID = "EOL_PUBLISH";
   EO_BATLIB_AET.AE_SECTION = "FLATFILE";
End-If;

&MSGNAME = EO_BATLIB_AET.MSGNAME;
&MSGNODENAME = EO_BATLIB_AET.MSGNODENAME;
&PUBLISH_RULE_ID = EO_BATLIB_AET.PUBLISH_RULE_ID;
&CHUNK_RULE_ID = EO_BATLIB_AET.CHUNK_RULE_ID;
&CHUNK_RULE_REC = EO_BATLIB_AET.RECNAME_CHUNK;
&PUB_BASE_FLG = EO_BATLIB_AET.PUBLISH_BASE_LANG;
&FIRST_TIME = "Y";
&Y = "Y";
&DATE = %Date;



/************************/
/*       Set            */
/*   Cache Variables    */
/************************/
EO_BATLIB_AET.END_TRANS_FLG = "Y";
EO_BATLIB_AET.BASE_LANGUAGE_CD = %Language_Base;


/************************/
/*       Build          */
/*     Chunk Array      */
/************************/
&ARY_BREAKFLD = CreateArrayRept("", 0);
&ARY_BREAKIDX = CreateArrayRept(0, 0);

If All(&CHUNK_RULE_ID) And
      None(&CHUNK_RULE_REC) Then
   
   &SQL_CHUNKRULE = GetSQL(SQL.EO_SEL_CHUNKRULE, &CHUNK_RULE_ID);
   
   If Not &SQL_CHUNKRULE.Fetch(&CHUNK_RULE_REC) Then
      &CHUNK_RULE_ID = "";
   End-If;
   
   &SQL_CHUNKRULE.Close()
End-If;

If All(&CHUNK_RULE_ID) And
      All(&CHUNK_RULE_REC) Then
   
   &WHERE = " ";
   
   &SQL_BRKFLDS = GetSQL(SQL.EO_SEL_CHUNKFIELDS, &CHUNK_RULE_REC);
   
   While &SQL_BRKFLDS.Fetch(&FIELDNUM, &FIELDNAME)
      &ARY_BREAKFLD.Push(&FIELDNAME);
      &ARY_BREAKIDX.Push(&FIELDNUM);
      
      &WHERE = &WHERE | " and A." | &FIELDNAME | " = " | "B." | &FIELDNAME;
      
   End-While;
   
   &WHERE = &WHERE | ")";
   
   &SQL_BRKFLDS.Close();
   
   &SQL_PSRECDEFN = GetSQL(SQL.EO_SEL_RECTYPE, &CHUNK_RULE_REC);
   
   If &SQL_PSRECDEFN.Fetch(&NUM_RECTYPE) Then
   End-If;
   
   &SQL_PSRECDEFN.Close();
   
   &REC_CHUNK = CreateRecord(@("RECORD." | &CHUNK_RULE_REC));
   
   If &NUM_RECTYPE < 2 Then
      &SQL_CHUNKEFFDT = GetSQL(SQL.EO_SEL_CHUNKEFFDT, &CHUNK_RULE_ID, &DATE);
      If Not &SQL_CHUNKEFFDT.Fetch(&EFFDT) Then
         Exit (1);
      End-If;
      
      &SQL_CHUNKEFFDT.Close();
      
   End-If;
   
End-If;


/************************/
/*       Build          */
/*  SQL Object Array    */
/************************/
&ARY_REC = CreateArrayRept(&REC, 0);
&ARY_SQL = CreateArrayRept(&SQL, 0);
&ARY_STATUS = CreateArrayRept(" ", 0);
&ARY_ORDERBY = CreateArrayRept(" ", 0);
&ARY_LIST = CreateArrayRept(" ", 0);
&ARY_PRNTRECNAME = CreateArrayRept(" ", 0);
&ARY_EFFDT = CreateArrayRept(" ", 0);
&ARY_ARY_KEYFLD = CreateArrayRept(CreateArrayRept(" ", 0), 0);
&ARY_ARY_RECNAME = CreateArrayRept(CreateArrayRept(" ", 0), 0);
&ARY_ARY_KEYSIDX = CreateArrayRept(CreateArrayRept(0, 0), 0);

&SQL_RECLIST = GetSQL(SQL.EO_SEL_MSGREC, &MSGNAME);

While &SQL_RECLIST.Fetch(&MSGRECNAME, &PRNTRECNAME)
   &REC = CreateRecord(@("RECORD." | &MSGRECNAME));
   &RELRECNAME = &REC.RelLangRecName;
   If All(&RELRECNAME) Then
      &REL_LANG_FOUND = "Y";
   End-If;
   &SRCRECNAME = " ";
   
   &SQL_ALTREC = GetSQL(SQL.EO_SEL_RECMAP, &MSGNAME, &PUBLISH_RULE_ID, &MSGRECNAME);
   
   If &SQL_ALTREC.Fetch(&SRCRECNAME) Then
      If All(&SRCRECNAME) Then
         &REC = CreateRecord(@("RECORD." | &SRCRECNAME));
      End-If;
   End-If;
   
   &SQL_ALTREC.Close();
   
   buildSQLStmt();
   
   If All(&CHUNK_RULE_REC) And
         &NUM_RECTYPE < 2 Then
      
      If &BATCH_FULL = "F" Then
         
         &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where EXISTS (Select 'Y' from %Table(:2) B where B.CHUNK_RULE_ID = :3 and B.EFFDT = %DateIn(:4) " | &WHERE | &ORDER_BY, &REC, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         
      Else
         
         &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2 and EXISTS (Select 'Y' from %Table(:3) B where B.CHUNK_RULE_ID = :4 and B.EFFDT = %DateIn(:5) " | &WHERE | &ORDER_BY, &REC, &PROCESS_INSTANCE, &REC_CHUNK, &CHUNK_RULE_ID, &EFFDT);
         
         
      End-If
   Else
      If &BATCH_FULL = "F" Then
         /********* Start QR2IPO004 *********/
         Evaluate EO_BATLIB_AET.MSGNAME
         When "VENDOR_SYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_PO_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "Z_AP_VNDR_SYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_AP_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "Z_NT_VNDR_SYNC_EFF"
            
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_Z_NT_BAT_PUB_VW B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "VENDOR_FULLSYNC_EFF"
         When "Z_NT_VNDR_FULLSYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A WHERE A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            End-If;
            Break;
         When "Z_AP_VNDR_FULLSYNC_EFF"
            If &REC.Name = "VENDOR_ID_NBRS" Then
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_VENDOR B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND B.VENDOR_STATUS = 'A' AND B.Z_RFX_CD = 'N' AND A.STD_ID_NUM_QUAL = 'TIN'" | &ORDER_BY, &REC);
            Else
               &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A, PS_VENDOR B WHERE A.SETID = B.SETID AND A.VENDOR_ID = B.VENDOR_ID AND B.VENDOR_STATUS = 'A' AND B.Z_RFX_CD = 'N'" | &ORDER_BY, &REC);
            End-If;
            Break;
            
            /********* Start QR2IIN006 *********/
         When "Z_PMPO_BATPUB_MSG"
            &SQL = CreateSQL("Select " | &LIST | " from %Table(:1) A, PS_Z_PMPOBATPUB_VW B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID" | &ORDER_BY, &REC);
            Break;
         When "Z_NEXT_BATPUB_MSG"
            &SQL = CreateSQL("Select " | &LIST | " from %Table(:1) A, PS_Z_NEXTBATPUB_VW B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID" | &ORDER_BY, &REC);
            Break;
            /********* End QR2IIN006 *********/
            /* Begin QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4
   This code was added to formulate the custom dynamic SQL to fetch Item Data */
            
         When "Z_ITEM_SYNC"
            &SQL = CreateSQL("SELECT " | &LIST | " FROM %TABLE(:1) A, PS_Z_ITEM_PUB_VW B WHERE A.SETID = B.SETID AND A.INV_ITEM_ID = B.INV_ITEM_ID" | &ORDER_BY, &REC);
            
            Break;
            
            /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
         When-Other
            &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
            Break;
         End-Evaluate;
         
         REM &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A" | &ORDER_BY, &REC);
         /* The above existing sql statement has been commented and taken care in the 
		 when-other Part of the Evaluate statement above */
         /*********  End  QR2IPO004 *********/
         
      Else
         
         &SQL = CreateSQL("Select" | &LIST | " from %Table(:1) A where A.PROCESS_INSTANCE = :2" | &ORDER_BY, &REC, &PROCESS_INSTANCE);
         
      End-If;
      
   End-If;
   
   &SQL.ReuseCursor = True;
   
   &ARY_REC.Push(&REC);
   &ARY_SQL.Push(&SQL);
   &ARY_STATUS.Push("B");
   &ARY_ORDERBY.Push(&ORDER_BY);
   &ARY_LIST.Push(&LIST);
   &ARY_PRNTRECNAME.Push(&PRNTRECNAME);
   &ARY_EFFDT.Push(&EFFDT_SW);
   &ARY_ARY_KEYSIDX.Push(&ARY_KEYSIDX);
   &ARY_ARY_KEYFLD.Push(&ARY_KEYFLD);
   &ARY_RECNAME = CreateArray(&MSGRECNAME, &SRCRECNAME, &RELRECNAME);
   &ARY_ARY_RECNAME.Push(&ARY_RECNAME);
   
End-While;

&SQL_RECLIST.Close();

If EO_BATLIB_AET.CREATE_DELAY_FLG = "Y" Then
   
   &AI = 0;
   While &ARY_ARY_RECNAME.Next(&AI)
      If &ARY_EFFDT [&AI] = "Y" And
            All(&ARY_PRNTRECNAME [&AI]) Then
         &BI = &ARY_ARY_RECNAME.Find(&ARY_PRNTRECNAME [&AI]);
         If &BI > 0 Then
            If &ARY_EFFDT [&BI] = "Y" Then
               &ARY_EFFDT.Replace(&AI, 1, "N");
            End-If;
         End-If;
      End-If;
   End-While;
End-If;



/************************** $Qwest$ *****************************************************************************
ITR#:     QR2IIN006
NAME:     Prashant Prakash
DATE:     02/26/2006
DESCR:    Added Code to update the Master Item Table when a Triggering Field is Changed on the Contract Component

/****************************************************************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR4IPO002
NAME:     Prashant Prakash
DATE:     01/17/2007
DESCR:    Code has been added to update MASTER_ITEM_TBL.Z_ITEM_PUB_CD 
		  if Triggering fields are Updated.
*********************************************************************/

/********* Start QR2IIN006 *********/

Local Rowset &LVL0RS, &cntrctline, &cntrctlineuom, &cntrctlineship;
Local Record &LVL0REC;
Local string &A, &C;
Local number &cntrct_hdr_change, &cntr_line_uom_change;

&LVL0RS = GetLevel0();
&cntrctline = GetLevel0().GetRow(1).GetRowset(Scroll.CNTRCT_LINE);
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.CNTRCT_HDR);
&A = "A";
&C = "C";
&cntrct_hdr_change = 0;
/* Define the Mode of Entrance of the User */

If %Mode = "A" Then
   &Mode = "A";
Else
   &Mode = "C";
End-If;

/* Check for the Component */


/******************
 LEVEL 0 CNTRCT_HDR
 ******************/
If %Component = Component.CNTRCT_ENTRY Then
   If &LVL0REC.CNTRCT_ID.IsChanged Or
         &LVL0REC.CNTRCT_STATUS.IsChanged Or
         &LVL0REC.CNTRCT_BEGIN_DT.IsChanged Or
         &LVL0REC.CNTRCT_EXPIRE_DT.IsChanged Then
      &cntrct_hdr_change = 1;
   End-If;
   
   /*******************
	LEVEL 1 CNTRCT_LINE
	*******************/
   
   For &cntline = 1 To &cntrctline.RowCount;
      If All(&cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value) Then
         /* Check to see the updation in fields from contract Header record */
         If (&cntrct_hdr_change = 1) Then
            SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID=:2 AND INV_ITEM_ID=:3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
            /* Begin QWEST QR4IPO002 Prashant Prakash 01/02/2007 PSCIO-R4
   This code was added to Update the Flag in MASTER_ITEM_TBL */
            SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_ITEM_PUB_CD = :1 WHERE SETID=:2 AND INV_ITEM_ID=:3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
            /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
         Else
            /* Check for cntrline and UOM fields */
            &cntrctlineuom = &cntrctline.GetRow(&cntline).GetRowset(Scroll.CNTRCT_LINE_UOM);
            &cntr_line_uom_change = 0;
            
            /***********************
		  LEVEL 2 CNTRCT_LINE_UOM
	      ***********************/
            For &cntlineuom = 1 To &cntrctlineuom.RowCount
               If ( Not &cntrctlineuom.GetRow(&cntlineuom).IsNew And
                     &cntrctlineuom.GetRow(&cntlineuom).IsDeleted) And
                     (&cntr_line_uom_change = 0) Then
                  &cntr_line_uom_change = 1;
                  SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID= :2 AND INV_ITEM_ID= :3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                  /* Begin QWEST QR4IPO002 Prashant Prakash 01/02/2007 PSCIO-R4
   This code was added to Update the Flag in MASTER_ITEM_TBL */
                  SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_ITEM_PUB_CD = :1 WHERE SETID=:2 AND INV_ITEM_ID=:3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                  /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
               Else
                  If (&cntrctlineuom.GetRow(&cntlineuom).CNTRCT_LINE_UOM.UNIT_OF_MEASURE.IsChanged Or
                        &cntrctlineuom.GetRow(&cntlineuom).CNTRCT_LINE_UOM.PRICE_CNTRCT_BASE.IsChanged) And
                        (&cntr_line_uom_change = 0) Then
                     &cntr_line_uom_change = 1;
                     SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID= :2 AND INV_ITEM_ID= :3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                     /* Begin QWEST QR4IPO002 Prashant Prakash 01/02/2007 PSCIO-R4
   This code was added to Update the Flag in MASTER_ITEM_TBL */
                     SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_ITEM_PUB_CD = :1 WHERE SETID=:2 AND INV_ITEM_ID=:3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                     /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
                  End-If;
               End-If;
            End-For;
            
            /************************
		  LEVEL 2 CNTRCT_LINE_SHIP
	      ************************/
            If (&cntr_line_uom_change = 0) Then
               &cntrctlineship = &cntrctline.GetRow(&cntline).GetRowset(Scroll.CNTRCT_LN_SHIP);
               For &cntlineship = 1 To &cntrctlineship.RowCount
                  If Not &cntrctlineship.GetRow(&cntlineship).IsNew And
                        &cntrctlineship.GetRow(&cntlineship).IsDeleted Then
                     SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID= :2 AND INV_ITEM_ID= :3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                     /* Begin QWEST QR4IPO002 Prashant Prakash 01/02/2007 PSCIO-R4
   This code was added to Update the Flag in MASTER_ITEM_TBL */
                     SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_ITEM_PUB_CD = :1 WHERE SETID=:2 AND INV_ITEM_ID=:3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                     /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
                  Else
                     If &cntrctlineship.GetRow(&cntlineship).CNTRCT_LN_SHIP.DAYS_TO_DELIV.IsChanged Then
                        SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID= :2 AND INV_ITEM_ID= :3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                        /* Begin QWEST QR4IPO002 Prashant Prakash 01/02/2007 PSCIO-R4
   This code was added to Update the Flag in MASTER_ITEM_TBL */
                        SQLExec("UPDATE PS_MASTER_ITEM_TBL SET Z_ITEM_PUB_CD = :1 WHERE SETID=:2 AND INV_ITEM_ID=:3", &Mode, &LVL0REC.SETID.Value, &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.Value);
                        /* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */
                     End-If;
                  End-If;
               End-For;
            End-If;
         End-If;
      End-If;
   End-For;
   /* Checking Critical Conditions */
   
   For &cntline = 1 To &cntrctline.RowCount;
      If &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.IsChanged Or
            ((&cntrctline.GetRow(&cntline).IsNew) And
               Not (&cntrctline.GetRow(&cntline).IsDeleted)) Then
         
         If &cntrctline.GetRow(&cntline).CNTRCT_LINE.INV_ITEM_ID.IsChanged Then
            
            /* Update 2 Items, new one and prior one  also check whether such item exist or not*/
            
         Else
            /* Update Item and check item exist or not */
            
         End-If;
      End-If;
   End-For;
   
End-If;

/********* End QR2IIN006 *********/


/************************** $Qwest$ *********************************
RICEF#:   QR2IPO004
NAME:     Murali Kannappan
DATE:     01/20/2006
DESCR:    The existing code below identifed by the RICEF no QR2IPO004 has been commented
		  The comment was done to disable the Vendor Publish from the Page
***********************************************************************/

/************************** $Qwest$ *********************************
RICEF#:   QR4IPO002
NAME:     Prashant Prakash
DATE:     01/17/2007
DESCR:    Code has been added to update MASTER_ITEM_TBL.Z_ITEM_PUB_CD 
		  if NAME1 field is Updated.
*********************************************************************/

/*************** Start QR2IPO004 **********/
REM Local Message &msg;
/**************** End  QR2IPO004 **********/
Local Rowset &rs0;
Local Row &rwTMP;
Local Record &rTMP;
Component string &sCCREnabled, &sCCRcreate;
Component Rowset &rsCcr_Vndr_Codes;
Component Record &rCCRXref;

/*************** Start QR2IPO004 **********/
/*&msg = CreateMessage(Message.VENDOR_SYNC);
If (&msg.IsActive) And
      VENDOR.VENDOR_PERSISTENCE <> "S" Then
   &Need_To_Publish = "N";
   &CurrentDate = %Date;
   SQLExec("select 'Y' from psnodetrx A where A.rqstmsgname = 'VENDOR_SYNC' and (A.trxtype = 'OA' or A.trxtype = 'OS') and A.eff_status = 'A' and %EffdtCheck(psnodetrx, A, :1)", &CurrentDate, &Need_To_Publish);
   If &Need_To_Publish = "Y" Then
      &rs0 = GetLevel0();
      &msg.CopyRowsetDelta(&rs0);*/
/* &msg.CopyRowsetDelta(&rs0, Record.VENDOR, Record.VENDOR_M, Record.VNDR_ADDR_SCROL, Record.VNDR_ADDR_SCR_M, Record.VENDOR_ADDR, Record.VENDOR_ADDR_M, Record.VENDOR_ADDR_PHN, Record.VNDR_ADDR_PHN_M, Record.VNDR_CNTCT_SCR, Record.VNDR_CNTCT_S_M, Record.VENDOR_CNTCT, Record.VENDOR_CNTCT_M, Record.VNDR_CNTCT_PHN, Record.VNDR_CNTCT_PH_M, Record.VNDR_LOC_SCROL, Record.VNDR_LOC_SCR_M, Record.VENDOR_LOC, Record.VENDOR_LOC_M, Record.VENDOR_PAY, Record.VENDOR_PAY_M, Record.VNDR_BANK_ACCT, Record.VNDR_BNK_ACCT_M); */
/*&msg.Publish();
   End-If;
End-If;*/

/****************  End  QR2IPO004 *********/

Evaluate %Mode
When "A"
   Page.VNDR_ID1_SUM.Visible = True;
   Break;
End-Evaluate;

/* Insert CCR Codes */
If &sCCREnabled = "Y" Then
   SQLExec("DELETE FROM %Table(VENDOR_CCR_CODE) WHERE SETID = :1 AND VENDOR_ID = :2", VENDOR.SETID, VENDOR.VENDOR_ID);
   If &rsCcr_Vndr_Codes <> Null Then
      For &i = 1 To &rsCcr_Vndr_Codes.RowCount
         &rwTMP = &rsCcr_Vndr_Codes.GetRow(&i);
         &rTMP = &rwTMP.GetRecord(1);
         &rTMP.Insert()
      End-For;
   End-If;
   rem -- If Vendor has not been created through CCR;
   If &sCCRcreate = "N" Then
      If VENDOR.VNDR_CCR_STATUS = "A" Then
         rem -- Delete from Xref;
         SQLExec("DELETE FROM %Table(CCR_VNDR_XREF) WHERE SETID = :1 AND VENDOR_ID = :2", VENDOR.SETID, VENDOR.VENDOR_ID);
         &rCCRXref.SETID.Value = VENDOR.SETID;
         &rCCRXref.VENDOR_ID.Value = VENDOR.VENDOR_ID;
         &rCCRXref.VNDR_CCR_ORGIN.Value = "M";
         &rCCRXref.Insert();
      End-If;
   End-If;
   
End-If;

/* Begin QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4
   This code was added to Update the Flag in MASTER_ITEM_TBL */

<*
/* Query to identify the Items for which the Flag needs to be updated */
&ret_ITEM = CreateSQL("SELECT INV_ITEM_ID FROM PS_" | Record.ITM_VENDOR | " WHERE SETID = :1 AND VENDOR_ID = :2", VENDOR.SETID, VENDOR.VENDOR_ID);
&item_SQL = CreateSQL("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID = :2 AND INV_ITEM_ID LIKE :3");
rem &item_arr = CreateArrayRept("", 0);

While &ret_ITEM.Fetch(&ITEM_ID);
   If All(&ITEM_ID) Then
      If %Mode = "A" Then
         &item_SQL.Execute("A", VENDOR.SETID, &ITEM_ID);
      Else
         If VENDOR.NAME1.IsChanged Then
            &item_SQL.Execute("C", VENDOR.SETID, &ITEM_ID);
         End-If;
      End-If;
      rem &item_arr.PUSH(&ITEM_ID);
   End-If;
End-While;
*>

&item_SQL = CreateSQL("UPDATE PS_MASTER_ITEM_TBL SET Z_PMPO_PUB_CD = :1 WHERE SETID = :2 AND INV_ITEM_ID IN (SELECT INV_ITEM_ID FROM PS_ITM_VENDOR WHERE SETID = :3 AND VENDOR_ID = :4)");
If %Mode = "A" Then
   &item_SQL.Execute("A", VENDOR.SETID, VENDOR.SETID, VENDOR.VENDOR_ID);
Else
   If VENDOR.NAME1.IsChanged Then
      &item_SQL.Execute("C", VENDOR.SETID, VENDOR.SETID, VENDOR.VENDOR_ID);
   End-If;
End-If;

/* End QWEST QR4IPO002 Prashant Prakash 01/17/2007 PSCIO-R4 */


set PS_HOME=C:\PT8.46
path = %PS_HOME%\bin\server\winx86;%path%
cd %PS_HOME%\appserv
psadmin -c boot -d EPSYS
psadmin -p start   -d EPSYS

set PS_HOME=C:\PT8.46
path = %PS_HOME%\bin\server\winx86;%path%
cd %PS_HOME%\appserv
psadmin -c shutdown -d EPSYS
psadmin -p stop   -d EPSYS






/*-----------------------*/
/*    BONY COMBO DATA    */
/*-----------------------*/
Component File &ImportFile, &LogFile;
Component array of string &Combo_Reject, &Combo_Imp;
Local string &DataFileName, &LogFileName, &DBcharset;
Local Rowset &File_RS;
Local integer &ERRcount, &RtnCode, &line;
Local boolean &ValAccnt, &ValDeptID;

/* Error Text Function */
Function AddErrorText(&Text As string);
   &ERRcount = &ERRcount + 1;
   If &Err_Text.Find(&Text) = 0 Then
      &Err_Text.Push(&Text);
      &LogFile.WriteLine("  " | &Text);
   End-If;
End-Function;

/* Identify Valid Account's */
Function ValidAccount(&REC_ACC As Record) Returns boolean
   
   Local SQL &SQL_VAcc;
   Local string &SetID, &Accnt;
   
   If &SQL_VAcc = Null Then
      &SQL_VAcc = CreateSQL("SELECT SETID, ACCOUNT FROM PS_GL_ACCOUNT_TBL WHERE SETID= :1 AND ACCOUNT = :2 AND EFF_STATUS = 'A' AND EFFDT = (SELECT MAX(EFFDT) FROM PS_GL_ACCOUNT_TBL GL WHERE SETID = GL.SETID AND ACCOUNT = GL.ACCOUNT", &REC_ACC.SETID.Value, &REC_ACC.ACCOUNT.Value);
      &SQL_VAcc.TraceName = "Get Valid Accounts";
      &SQL_VAcc.ReuseCursor = True;
   Else
      &SQL_VAcc.Execute(&REC_ACC.SETID.Value, &REC_ACC.ACCOUNT.Value);
   End-If;
   If &SQL_VAcc.Fetch(&SetID, &Accnt) Then
      &ValAccnt = True;
      Return True;
   Else
      Return False;
   End-If;
   rem Return True;
End-Function;

/* Identify Valid DeptID's */
Function ValidDept(&REC_DEPT As Record) Returns boolean
   
   Local SQL &SQL_DEPT;
   Local string &SetID, &Accnt;
   
   If &SQL_DEPT = Null Then
      &SQL_DEPT = CreateSQL("SELECT SETID, DEPTID FROM PS_DEPT_TBL WHERE SETID= :1 AND DEPTID = :2 AND EFF_STATUS = 'A' AND EFFDT = (SELECT MAX(EFFDT) FROM PS_DEPT_TBL DEPT WHERE SETID = DEPT.SETID AND ACCOUNT = DEPT.DEPTID", &REC_DEPT.SETID.Value, &REC_DEPT.DEPTID.Value);
      &SQL_DEPT.TraceName = "Get Valid DeptID's";
      &SQL_DEPT.ReuseCursor = True;
   Else
      &SQL_DEPT.Execute(&REC_DEPT.SETID.Value, &REC_DEPT.DEPTID.Value);
   End-If;
   If &SQL_DEPT.Fetch(&SetID, &DeptID) Then
      &ValDeptID = True;
      Return True;
   Else
      Return False;
   End-If;
   rem Return True;
End-Function;

/* Read the Input File */
Function ImportData(&File_RS As Rowset);
   
   Local SQL &SQL_Ins, &SQL_Upd, &SQL_InsErr;
   Local Record &HeaderREC;
   Local integer &it;
   
   &HeaderREC = CreateRecord(Record.BNY_COMBO_TMP);
   
   /* Intialize SQL objects and set BulkMode to TRUE...Set Trace Names for all SQL Objects */
   &SQL_Ins = CreateSQL("%INSERT(:1)");
   &SQL_Ins.BulkMode = True;
   &SQL_Ins.TraceName = "Insert COMBO Data values into table";
   &SQL_Upd = CreateSQL("%UPDATE(:1)");
   &SQL_Upd.BulkMode = True;
   &SQL_Upd.TraceName = "Update COMBO Data values into table";
   &SQL_InsErr = CreateSQL("%INSERT(:1)");
   &SQL_InsErr.BulkMode = True;
   &SQL_InsErr.TraceName = "Insert into Error Table";
   
   &rCombo = CreateRecord(Record.COMBO_DATA_TBL);
   &rCombo_err = CreateRecord(Record.BNY_COMB_LD_ERR);
   &File_RS = &ImportFile.ReadRowset();
   &line = 0;
   /* read all the values */
   While &File_RS <> Null
      try
         &FileREC = &File_RS(1).COMBO_DATA_TBL;
         &HeaderREC.SetDefault();
         &FileREC.CopyFieldsTo(&HeaderREC);
         If &ERRcount = 0 Then
            /* Chk Valid Account */
            If Not (ValidAccount(&HeaderREC)) Then
               AddErrorText(MsgGetText(20000, 235, "Invalid Account", &HeaderREC.ACCOUNT.Value, &HeaderREC.SETID.Value));
            End-If;
            /* Chk Valid DeptID  */
            If Not (ValidDept(&HeaderREC)) Then
               AddErrorText(MsgGetText(20000, 236, "Invalid Dept", &HeaderREC.DEPTID.Value, &HeaderREC.SETID.Value));
            End-If;
         End-If;
         /* Insert into COMBO_DATA_TBL */
         If &ValDeptID And
               &ValAccnt Then
            &File_RS.GetRow(1).COMBO_DATA_TBL.CopyFieldsTo(&rCombo);
            If Not (&SQL_Ins.Execute(&rCombo)) Then
               &SQL_Upd.Execute(&rCombo);
            End-If;
            If &SQL_Upd.RowsAffected = 0 Then
               /* no rows updated */
            End-If;
         Else
            /* Insert into Error Table */
            &SQL_InsErr.Execute(&rCombo_err);
         End-If;
         /* Insert into Array */
         &Combo_Val = "(" | &HeaderREC.SETID.Value | ", " | &HeaderREC.PROCESS_GROUP | ", " | &HeaderREC.COMBINATION | ", " | &HeaderREC.ACCOUNT | ", " | &HeaderREC.ALTACCT | ", " | &HeaderREC.DEPTID | ", " | &HeaderREC.PROJECT_ID | ")";
         &Combo_Imp.Push(&Combo_Val);
         &temp = "";
         For &it = 1 To &Combo_Imp.Len
            &temp = "  " | &Combo_Imp.Pop() | &temp;
         End-For;
         &LogFile.WriteLine("Imported COMBO DATA: " | &temp);
         rem &LogFile.WriteLine(Left(String(%Time), 8) | " " | MsgGetText(5825, 113, "Number of rows imported", (Z_RMA_LOAD_AET.ROW_COUNT)));
         
      catch Exception &Combo
         &Error_desc = "Error encountered during processing the row:  " | &Combo.ToString();
      end-try;
      /* COMMIT EACH ROW */
      CommitWork();
      /* Count number of rows imported */
      &line = &line + 1;
      /* Read Next Line */
      &File_RS = &ImportFile.ReadRowset();
   End-While;
   &LogFile.WriteLine(Left(String(%Time), 8) | " " | MsgGetText(5825, 113, "Number of rows imported", (&line)));
   /* Close SQL Objects */
   &SQL_Ins.Close();
   &SQL_Upd.Close();
End-Function;



/*========================================== /
/   MAIN PROGRAM - COMBO Data Upload         /
/ ==========================================*/
SQLExec("SELECT UNICODE_ENABLED FROM PSSTATUS", &RtnCode);
If &RtnCode = 1 Then
   &DBcharset = "U"; /* UNICODE */
Else
   &DBcharset = "ANSI"; /* ANSI */
End-If;

&LogFileName = "BNY_COMBO_DATA_" | String(BNY_COMBO_AET.PROCESS_INSTANCE) | ".LOG";
&LogFile = GetFile(&LogFileName, "W", &DBcharset, %FilePath_Relative);
&DataFileName = BNY_COMBO_AET.ATTACHUSERFILE;

&LogFile.WriteLine(MsgGetText(5825, 106, "BNY COMBO Data Load"));
&LogFile.WriteLine(" ");
&LogFile.WriteLine("         " | %Date);
&LogFile.WriteLine(Rept("-", 40));


try
   &RtnCode = GetAttachment(URL.BNY_COMBO_LOAD, BNY_COMBO_AET.ATTACHSYSFILENAME.Value, &DataFileName, "PS_FILEDIR");
catch Exception &Excp;
   &RtnCode = 99;
   If &Excp.MessageSetNumber = 2 And
         &Excp.MessageNumber = 788 Then
      MessageBox(0, "", 5825, 118, "Check PS_FILEDIR variable");
   Else
      Error (&Excp.ToString());
   End-If;
end-try;

If &RtnCode = 0 Then
   &ImportFile = GetFile(&DataFileName, "R", &CharSet, %FilePath_Relative);
   If &ImportFile.IsOpen Then
      &ImportFile.SetFileLayout(FileLayout.BNY_COMBO_EDIT);
      &LogFile.WriteLine(Left(String(%Time), 8) | " " | MsgGetText(5825, 104, "Processing file...", &DataFileName));
      MessageBox(0, "", 5825, 104, "", &DataFileName);
      
      &File_RS = &ImportFile.CreateRowset();
      &Combo_Imp = CreateArrayRept("", 0);
      &Combo_Reject = CreateArrayRept("", 0);
      ImportData(&File_RS);
      &ImportFile.Close();
   Else
      /* Cannot open file */
      &LogFile.WriteLine(MsgGetText(5825, 126, "GetFile error", &DataFileName));
      &ERRcount = &ERRcount + 1;
   End-If;
Else
   /* Error getting attachment */
   &LogFile.WriteLine(MsgGetText(5825, 125, "GetAttachment error", &DataFileName, &RtnCode));
   &ERRcount = &ERRcount + 1;
End-If;


If &ERRcount = 0 Then
   &LogFile.WriteLine(Left(String(%Time), 8) | " " | MsgGetText(5825, 116, "Validating imported data"));
Else
   /***** Rollback all transactions *****/
   &LogFile.Close();
   MessageBox(0, "", 5825, 102, "Errors found - Rollback");
   Exit (1);
End-If;

<*
/*Jimmy Chou*/
/*Bank of New York*/
/*2004-05-03*/
Local File &FILE1;
Local Rowset &FILEROWSET;
Local Record &rDept;
Local SQL &SQL1, &SQL2;

&FILE = Lower(RTrim(BNY_COMBO_AET.FILENAME));

If Not FileExists(&FILE, %FilePath_Absolute) Then
   /* Perform OnReturn instruction - in this case Abort with error */
   MessageBox(0, "", 0, 0, "File " | &FILE | " is not found. ");
   Exit (1);
Else
   &FILE1 = GetFile(&FILE, "R", "A", %FilePath_Absolute);
End-If;

&rCombo = CreateRecord(Record.COMBO_DATA_TBL);

&SQL1 = CreateSQL("%Insert(:1)");
&SQL2 = CreateSQL("%Update(:1)");

&FILEROWSET = &FILE1.CreateRowset();
If &FILE1.IsOpen Then
   If &FILE1.SetFileLayout(FileLayout.BNY_COMBO_EDIT) Then
      &FILEROWSET = &FILE1.ReadRowset();
      While &FILEROWSET <> Null;
         &FILEROWSET.GetRow(1).COMBO_DATA_TBL.CopyFieldsTo(&rCombo);
         &SQL1.Execute(&rCombo);
         &SQL2.Execute(&rCombo);
         &FILEROWSET = &FILE1.ReadRowset();
      End-While;
   Else
      /* do error processing file layout incorrect */
   End-If;
Else
   /*do error processing - file not open */
End-If;

&FILE1.Close();
*>

/* BNY MODIFICATION STARTS #PU0000423 */
      If (@("MenuName." | PT_WF_NOTFY_SRC.MENUNAME) = "APPROVE_EXPENSE_TRANSACTIONS") Then
         Evaluate (@("Component." | PT_WF_NOTIFY.COMPONENT_ID))
         When = "EX_SHEET_APPR"
            &expURL = GenerateComponentPortalURL(%Portal, %Node, MenuName.ADMINISTER_EXPENSE_FUNCTIONS, PT_WF_NOTIFY.MARKET, Component.TE_EXP_SHEET_INQ, Page.TE_SHEET_LINES, "") | &strKeys;
            &expURL = EncodeURL(&expURL);
            MessageBox(0, "", 0, 0, "&expURL " | &expURL);
            PT_WF_NOTIFY.TEMPLATE_TEXT = Substitute(PT_WF_NOTIFY.TEMPLATE_TEXT, "%1", &expURL);
            Break;
         When = "EX_ADV_APPR"
            &cashURL = GenerateComponentPortalURL(%Portal, %Node, MenuName.ADMINISTER_EXPENSE_FUNCTIONS, PT_WF_NOTIFY.MARKET, Component.TE_ADVANCE_INQ, Page.TE_ADVANCE, "") | &strKeys;
            &cashURL = EncodeURL(&cashURL);
            MessageBox(0, "", 0, 0, "&cashURL " | &cashURL);
            PT_WF_NOTIFY.TEMPLATE_TEXT = Substitute(PT_WF_NOTIFY.TEMPLATE_TEXT, "%1", &cashURL);
            Break;
         When-Other
            &strURL = GenerateComponentPortalURL(%Portal, %Node, @("MenuName." | PT_WF_NOTFY_SRC.MENUNAME), PT_WF_NOTIFY.MARKET, @("Component." | PT_WF_NOTIFY.COMPONENT_ID), PT_WF_NOTFY_SRC.PANELNAME, "") | &strKeys;
            &strURL = EncodeURL(&strURL);
            PT_WF_NOTIFY.TEMPLATE_TEXT = Substitute(PT_WF_NOTIFY.TEMPLATE_TEXT, "%1", &strURL);
            Break;
         End-Evaluate;
      Else
         &strURL = GenerateComponentPortalURL(%Portal, %Node, @("MenuName." | PT_WF_NOTFY_SRC.MENUNAME), PT_WF_NOTIFY.MARKET, @("Component." | PT_WF_NOTIFY.COMPONENT_ID), PT_WF_NOTFY_SRC.PANELNAME, "") | &strKeys;
         &strURL = EncodeURL(&strURL);
         MessageBox(0, "", 0, 0, "URL " | &strURL);
         PT_WF_NOTIFY.TEMPLATE_TEXT = Substitute(PT_WF_NOTIFY.TEMPLATE_TEXT, "%1", &strURL);
      End-If;
      /*
      &strURL = GenerateComponentPortalURL(%Portal, %Node, @("MenuName." | PT_WF_NOTFY_SRC.MENUNAME), PT_WF_NOTIFY.MARKET, @("Component." | PT_WF_NOTIFY.COMPONENT_ID), PT_WF_NOTFY_SRC.PANELNAME, "") | &strKeys;
      &strURL = EncodeURL(&strURL);
      PT_WF_NOTIFY.TEMPLATE_TEXT = Substitute(PT_WF_NOTIFY.TEMPLATE_TEXT, "%1", &strURL);
      */
      /* BNY MODIFICTAION ENDS #PU0000423 */


      /*******************************************************************************/
/*  RUNFTP:  Creates and Calls FTP Script Between HR and Finance               */
/*******************************************************************************/
/*******************************************************************************/
/* Tomasz Gujda, IBM, 12/17/2002                                               */
/*                                                                             */
/* DESCRIPTION OF PARAMETERS:                                                  */
/*                                                                             */
/* Parameter      Description                     Example                      */
/* ---------      -----------                     -------                      */
/* &getput        Get or Put directive            "put"                        */
/* &srcfile       Source File                     "HRMS_Head_Count.txt"        */
/* &dstfile       Target File                     "HRMS_Head_Count_ftp.txt"    */
/* &instance      Process Instance (used to       &prcs_process_instance       */
/*                insure unique ftp script name)                               */
/* &run_status    Returns 0 if successful or 1    0                            */
/*                if unsuccessful                                              */
/*                                                                             */
/* This process requires an executable file named "bny_exe" to exist in the    */
/* &path_ftp directory which contains the following command:                   */
/* chmod 755 /psoft/pshradm/psfiles/bny_ftp*                                   */
/*                                                                             */
/* FTP script is created in the &path_ftp directory identified in this         */
/* function in the format temp_[process instance].ftp.                         */
/* FTP error messages are captured in the log.                                 */
/* All files created by this function are deleted at the end.                  */
/*                                                                             */
/* Put Example                                                                 */
/* -----------                                                                 */
/* &filename = lower(&ReportID) | "_" | &prcs_process_instance | ".lis"        */
/* &srcfile  = "/tmp/" | &filename                                             */
/* &dstfile  = "c:\temp\" | &filename                                          */
/* &run_status = Run-FTP ("put", &srcfile, &dstfile, &prcs_process_instance)   */
/*                                                                             */
/* Get Example                                                                 */
/* -----------                                                                 */
/* &run_status = Run-FTP ("get", "c:\temp\payinput.dat", "/tmp/payinput.dat",  */
/*             &prcs_process_instance)                                         */
/*                                                                             */
/*******************************************************************************/
/* Lalji Paul June 23 ,2004 Added Variable Declarations                         */
/*******************************************************************************/

/*******************************************************************************/
/* Lalji Paul June 16 ,2006 HCM 89 upgrade - increased the loop count           */
/*******************************************************************************/

Declare Function ftp_input_output PeopleCode BNY_FUNCLIB_AE.LOCATION FieldFormula;
Declare Function external_input_output PeopleCode BNY_FUNCLIB_AE.LOCATION FieldFormula;

/* WHILE LOOP TO ENSURE THAT THE NEXT UNIX COMMAND EXECUTES AFTER FIRST IS COMPLETE */
Function delay()
   Local integer &i;
   &i = 0;
   /*******************************************************************************/
   /* Lalji Paul June 16 ,2006 HCM 89 upgrade - increased the loop count   -start  */
   /*******************************************************************************/
   /* Old code /*
   /*******************************************************************************/
   /* While &i <> 1000000  */
   /*******************************************************************************/
   /*******************************************************************************/
   /* Lalji Paul June 16 ,2006 HCM 89 upgrade - increased the loop count   -end */
   /*******************************************************************************/
   
   While &i <> 3000000
      &i = &i + 1;
   End-While;
End-Function;

/* FUNCTION USED TO FTP FILES */
Function RunFTP(&getput, &srcfile, &dstfile, &prcs_instance) Returns number;
   Local string &path, &path_ftp, &fs_dev_ip, &fs_dev_uid, &fs_dev_passwd, &fs_prod_ip;
   Local string &fs_prod_uid, &fs_prod_passwd, &hr_dev_ip, &hr_dev_uid, &hr_dev_passwd;
   Local string &hr_prod_ip, &hr_prod_uid, &hr_prod_passwd, &ConnectionError, &error_msg;
   
   
   
   &path = external_input_output(); /* /psoft/pshradm/files/ */
   &path_ftp = ftp_input_output(); /* /psoft/pshradm/psfiles/ */
   &fs_dev_ip = "10.28.77.73";
   &fs_dev_uid = "psftp";
   &fs_dev_passwd = "v2cppk2r";
   &fs_prod_ip = "10.28.78.41";
   &fs_prod_uid = "psftp";
   &fs_prod_passwd = "a8nzlp8y";
   &hr_dev_ip = "10.28.77.69";
   &hr_dev_uid = "psftp";
   &hr_dev_passwd = "q7jpwo7x";
   &hr_prod_ip = "10.28.78.37";
   &hr_prod_uid = "psftp";
   &hr_prod_passwd = "h8necs8k";
   
   /* FTP CODES */
   &ConnectionError = "Not connected.";
   
   &error_msg = "";
   
   /* GET THE DATABASE NAME */
   SQLExec("select dbname from ps.psdbowner", &dbname);
   
   &inst = Substring(&dbname, 2, 1);
   &env = Substring(&dbname, 7, 2);
   
   Evaluate &inst
   When = "P" /* PRODUCTION */
      Evaluate &env
      When = "HR"
         &remoteip = &fs_prod_ip;
         &userid = &fs_prod_uid;
         &password = &fs_prod_passwd;
         Break;
      When = "FN"
         &remoteip = &hr_prod_ip;
         &userid = &hr_prod_uid;
         &password = &hr_prod_passwd;
         Break;
      When-Other
         &error_msg = "INVALID environment: " | &env | ", must be either HR or FS";
         Break;
      End-Evaluate;
      Break;
   When = "D" /* DEVELOPMENT */
      Evaluate &env
      When = "HR"
         &remoteip = &fs_dev_ip;
         &userid = &fs_dev_uid;
         &password = &fs_dev_passwd;
         Break;
      When = "FN"
         &remoteip = &hr_dev_ip;
         &userid = &hr_dev_uid;
         &password = &hr_dev_passwd;
         Break;
      When-Other
         &error_msg = "INVALID environment: " | &env | ", must be either HR or FS";
         Break;
      End-Evaluate;
      Break;
   When-Other
      &error_msg = "INVALID instance: " | &inst | ", must be either PROD or DEV";
      Break;
   End-Evaluate;
   
   MessageBox(0, "", 0, 0, "Database: " | &dbname | ", Remote IP: " | &remoteip);
   MessageBox(0, "", 0, 0, "sourcefile: " | &srcfile | ", destfile: " | &dstfile);
   
   If &error_msg = "" Then
      &error_stat = 1; /* SUCCESSFUL */
      
      /* CREATE THE COMMAND LINES FOR UNIX AND FTP */
      &cmdfile = "bny_ftp_" | &prcs_instance;
      &ftpfile = &path_ftp | "temp" | "_" | &prcs_instance | ".ftp";
      &errfile = &path_ftp | "temp" | "_" | &prcs_instance | ".err";
      &donefile = Left(&dstfile, Find(".", &dstfile)) | "done";
      &copyline = "cp " | &path | &srcfile | " " | &path_ftp | &srcfile;
      &ftpline = "ftp -n -i " | &remoteip | "< " | &ftpfile | "> " | &errfile;
      &deleteline = "rm " | &path_ftp | "*" | &prcs_instance | "*";
      &doneline = "touch " | &path_ftp | &donefile;
      &deletedone = "rm " | &path_ftp | &donefile;
      &home_path = "lcd " | &path_ftp;
      &usrline = "user " | &userid | " " | &password;
      &getput = Lower(&getput) | " ";
      &gpline = &getput | &srcfile | " " | &dstfile;
      &putdone = &getput | &donefile | " " | &donefile;
      
      /* WRITE THE UNIX COMMAND TO THE EXECUTABLE FILE */
      &FTP_CMDfile = GetFile(&path_ftp | &cmdfile, "W", %FilePath_Absolute);
      If &FTP_CMDfile.IsOpen Then
         &FTP_CMDfile.WriteLine(&copyline);
         MessageBox(0, "", 0, 0, &copyline);
         &FTP_CMDfile.WriteLine(&doneline);
         MessageBox(0, "", 0, 0, &doneline);
         &FTP_CMDfile.WriteLine(&ftpline);
         MessageBox(0, "", 0, 0, &ftpline);
         &FTP_CMDfile.WriteLine(&deletedone);
         MessageBox(0, "", 0, 0, &deletedone);
         &FTP_CMDfile.Close();
         
         /* CHANGE PERMISSIONS OF EXECUTABLE FILE */
         /* SHOULD CHECK FOR THE FILE FIRST AND IF DOESN'T EXIST, SEND ERROR MESSAGE */
         /* STATING THAT IT SHOULD BE CREATED AND INCLUDE THE FOLLOWING: */
         /* chmod 755 /psoft/pshradm/psfiles/bny_ftp* */
         
         &chmod_command = "../psfiles/" | "bny_exe";
         &unix_exec = Exec(&chmod_command);
         delay();
         MessageBox(0, "", 0, 0, "Unix exec of CHMOD, process ID: " | &unix_exec | ".");
      End-If;
      
      /* WRITE THE FTP COMMANDS TO A FILE WHICH WILL FEED INTO THE UNIX COMMAND */
      &FTP_file = GetFile(&ftpfile, "W", %FilePath_Absolute);
      If &FTP_file.IsOpen Then
         &FTP_file.WriteLine(&usrline);
         &FTP_file.WriteLine(&home_path);
         &FTP_file.WriteLine(&gpline);
         &FTP_file.WriteLine(&putdone);
         &FTP_file.WriteLine("close");
         &FTP_file.WriteLine("bye");
         &FTP_file.Close();
      End-If;
      
      /* EXECUTE THE FTP COMMAND IN UNIX */
      &ftp_command = "../psfiles/" | &cmdfile;
      &unix_exec = Exec(&ftp_command);
      delay();
      MessageBox(0, "", 0, 0, "Unix exec of FTP, process ID: " | &unix_exec | ".");
      
      /* CHECK FOR FTP ERRORS */
      &FTPerrorFile = GetFile(&errfile, "R", %FilePath_Absolute);
      If &FTPerrorFile.IsOpen Then
         &ftp_status = 1; /* initially assume success */
         If &FTPerrorFile.readline(&errorLine) Then
            If &errorLine = &ConnectionError Then
               &ftp_status = 0;
               MessageBox(0, "", 0, 0, "Connection ERROR: " | &errorLine | " Check IP: " | &remoteip);
            Else
               While &FTPerrorFile.readline(&errorLine)
                  If Left(&errorLine, 1) = "4" Or
                        Left(&errorLine, 1) = "5" Or
                        Left(&errorLine, 1) = "?" Or
                        Find("Permission denied", &errorLine) <> 0 Then
                     &ftp_status = 0;
                     MessageBox(0, "", 0, 0, "FTP ERROR: " | &errorLine);
                  End-If;
               End-While;
            End-If;
            &FTPerrorFile.Close();
         End-If;
      End-If; /* read from FTP error file */
      &run_status = &ftp_status;
      
      If &ftp_status = 1 Then
         /* SUCCESSFUL FTP, SO CAN DELETE ALL TEMP FILES AND CREATE .DONE FILE */
         &FTP_CMDfile = GetFile(&path_ftp | &cmdfile, "W", %FilePath_Absolute);
         If &FTP_CMDfile.IsOpen Then
            &FTP_CMDfile.WriteLine(&deleteline);
            MessageBox(0, "", 0, 0, &deleteline);
            &FTP_CMDfile.Close();
            
            &delete_command = "../psfiles/" | &cmdfile;
            &unix_exec = Exec(&delete_command);
            MessageBox(0, "", 0, 0, "Unix exec of DELETE, process ID: " | &unix_exec | ".");
         End-If;
      Else
         MessageBox(0, "", 0, 0, "Files were NOT deleted for process instance: " | &prcs_instance);
      End-If;
      
   Else /* ERROR IN DBNAME */
      MessageBox(0, "", 0, 0, "ERRORS were found in DBNAME !");
      &run_status = 0;
   End-If;
   
   Return &run_status;
   
End-Function; /* RunFTP */



/*******************************************************************************/
/*  RUNFTP:  Creates and Calls NDM Script Between PS and Mainframe             */
/*******************************************************************************/
/* Tomasz Gujda, IBM, 12/17/2002                                               */
/*******************************************************************************/
Function RunNDM(&path, &processname) Returns number;
   Local string &filename;
   &filename = &processname | ".txt";
   &begin_dttm = %Datetime;
   /* &end_dttm = AddToDateTime(&begin_dttm, 0, 0, 0, 1, 0, 0);  */
   &end_dttm = AddToDateTime(&begin_dttm, 0, 0, 0, 0, 10, 0);
   &set_diff_dttm = AddToDateTime(&begin_dttm, 0, 0, 0, 0, 5, 0);
   
   MessageBox(0, "", 0, 0, " Show funclib_ae begin_dttm   :" | %Datetime);
   MessageBox(0, "", 0, 0, " Show funclib_ae end_dttm   :" | &end_dttm);
   MessageBox(0, "", 0, 0, " Show funclib_ae set_diff_dttm   :" | &set_diff_dttm);
   MessageBox(0, "", 0, 0, " Show funclib_ae process name   :" | &processname);
   
   
   /* File will hold the value to be ftp'd to the server*/
   &Holdvalue = "OutputFilename.txt";
   
   /* TPR HR0001217 Lana Ganzman 08/13/2004 */
   /* To avoid ndm select incorrect file program will wait untill
      file deleted by previous bn_ndm_o sqr program */
   
   &FILE_IN = &path | &Holdvalue;
   MessageBox(0, "", 0, 0, " Show file path for output  :" | &FILE_IN);
   
   If ( Not FileExists(&FILE_IN, %FilePath_Absolute)) Then
      MessageBox(0, "", 0, 0, "File does not exist: " | &FILE_IN);
   End-If;
   
   
   
   
   While 1 = 1
      If ( Not FileExists(&FILE_IN, %FilePath_Absolute)) Or
            (%Datetime > &end_dttm) Then
         Break; /*and do processing after loop */
      Else
         If %Datetime = &set_diff_dttm Then
            MessageBox(0, "", 0, 0, "File Exists/Other ndm is running");
            
            &set_diff_dttm = AddToDateTime(&set_diff_dttm, 0, 0, 0, 0, 5, 0);
            
         End-If
      End-If;
      
   End-While;
   /* end-of-changes */
   
   /* Update sequence number to zero or highest process number, depending on processing criteria set at record level in resendcontent field*/
   If &RESEND = "Y" Then
      /* Find Max Processing Number */
      SQLExec("select Max(PROC_SEQ_NUM)+1 FROM PS_BNY_NDM_OUTPUT", &MaxProcNum);
      &NewSeq = &MaxProcNum;
   Else
      &NewSeq = 0; /* Take process out of the processing cycle */
   End-If;
   
   SQLExec("UPDATE PS_BNY_NDM_OUTPUT SET DATE = :1,PROC_SEQ_NUM = :2,FLAG = :3 WHERE FILENAME = :4", %Date, &NewSeq, "N", &filename);
   
   
   /*  Fire off sqr that will read the flat file and call the ndm  */
   
   &RQST = CreateProcessRequest();
   
   &RQST.ProcessType = "PSJob";
   &RQST.JobName = "NDMOUT";
   &RQST.RunControlID = "HRNDMOUT";
   &RQST.RunLocation = "PSUNX";
   &RQST.OutDestType = "6";
   &RQST.OutDestformat = "5";
   &RQST.OutDest = &path;
   &RQST.RunDateTime = %Datetime;
   &RQST.TimeZone = %ServerTimeZone;
   
   &RQST.Schedule();
   &PRCSSTATUS = &RQST.Status;
   
   If &PRCSSTATUS = 0 Then
      /* Scheduling successful. */
      &PRCSINSTANCE = &RQST.ProcessInstance;
      MessageBox(0, "", 0, 0, "NDM job scheduled under process instance: " | &PRCSINSTANCE);
      
      &OUTFILE = GetFile(&path | &Holdvalue, "W", %FilePath_Absolute);
      If &OUTFILE.IsOpen Then
         &prcs_line = &processname | "*" | &PRCSINSTANCE;
         MessageBox(0, "", 0, 0, "prcs_line: " | &prcs_line);
         &OUTFILE.WriteLine(&prcs_line);
         &OUTFILE.Close();
      End-If;
      &return_val = 1;
   Else
      MessageBox(0, "", 0, 0, "ERROR: Did not schedule the NDM Job.");
      &return_val = 0;
   End-If;
   Return &return_val;
   
End-Function; /* RunNDM */


/*******************************************************************************/
/*******************************************************************************/
/*******************************************************************************/
/*  Lalji Paul 6/22/2004 , complete rewrite for correct exec call with Sync Mode */
/*******************************************************************************/
/*******************************************************************************/

Function BnyExecuteUnixCommands(&InCommand As string);
   Local integer &UnixReturnValue;
   
   &UnixReturnValue = Exec(&InCommand, %Exec_Synchronous + %FilePath_Absolute);
   
   If All(&UnixReturnValue) Then
      MessageBox(0, "", 0, 0, "Unix Command :" | &InCommand | " - failed with return value " | &UnixReturnValue);
   End-If;
End-Function;

Function RunBKUP(&getput, &InSourcefileName, &InDestfile, &prcs_instance);
   Local string &yyyymmdd_date, &SourcePath, &DestPath, &SourceFullFileNameWtihPath, &DestFile;
   
   
   /* Convert Current Date to YYYYMMDD format */
   &yyyymmdd_date = NumberToString("%04", Year(%Date), 4) | NumberToString("%02", Month(%Date), 2) | NumberToString("%02", Day(%Date), 2);
   
   /* Set the Path */
   &SourcePath = external_input_output();
   &DestPath = &SourcePath | "ndm_backup/";
   
   /* Set the Source File Name and Destination File Name */
   &SourceFullFileNameWtihPath = &SourcePath | &InSourcefileName;
   &DestFile = &DestPath | &InDestfile | "_" | &yyyymmdd_date | ".dat";;
   
   
   BnyExecuteUnixCommands("/usr/bin/mv -f " | &SourceFullFileNameWtihPath | " " | &DestFile);
   BnyExecuteUnixCommands("/usr/bin/rm -f " | &SourcePath | &InDestfile | ".done");
   
   
End-Function; /* RunBKUP */

/*******************************************************************************/
/* TPR HR0001269 Lyndon Black 1/31/2005                                        */
/* Create Function to Backup file with Process Instance as 2nd qualifier       */
/*******************************************************************************/

Function RunBKUPInst(&getput, &InSourcefileName, &InDestfile, &prcs_instance);
   Local string &SourcePath, &DestPath, &SourceFullFileNameWtihPath, &DestFile;
   
   /* Set the Path */
   &SourcePath = external_input_output();
   &DestPath = &SourcePath | "ndm_backup/";
   
   /* Set the Source File Name and Destination File Name */
   &SourceFullFileNameWtihPath = &SourcePath | &InSourcefileName;
   &DestFile = &DestPath | &InDestfile | "_" | &prcs_instance | ".dat";;
   
   
   BnyExecuteUnixCommands("/usr/bin/mv -f " | &SourceFullFileNameWtihPath | " " | &DestFile);
   BnyExecuteUnixCommands("/usr/bin/rm -f " | &SourcePath | &InDestfile | ".done");
   
   
End-Function; /* RunBKUPInst */

/* --------------------- TPR HR0001269 ---------------------------------------- */

/*--------------------------------------------------------------------------------------------*/
/**********************************************************************************************/
/* Lyndon Black 10/24/2006                                                                    */
/* Create Function to FTP file from HRDEV to HRPROD                                           */
/**********************************************************************************************/
Function FTPDEVPRD(&getput, &srcfile, &dstfile, &prcs_instance) Returns number;
   Local string &path, &path_ftp;
   Local string &hr_dev_ip, &hr_dev_uid, &hr_dev_passwd;
   Local string &hr_prod_ip, &hr_prod_uid, &hr_prod_passwd, &ConnectionError, &error_msg;
   
   &path = external_input_output(); /* /psoft/pshradm/files/ */
   &path_ftp = ftp_input_output(); /* /psoft/pshradm/psfiles/ */
   
   /* Path when running in Production: "/psoft/pshradm/files/" */
   /* Path when running in Development: "/psoft/pshr88/files/" */
   /*--------------------------------------------------------------------------------------------*/
   &hr_dev_ip = "10.28.77.69";
   &hr_dev_uid = "psftp";
   &hr_dev_passwd = "q7jpwo7x";
   &hr_prod_ip = "10.28.78.37";
   &hr_prod_uid = "psftp";
   &hr_prod_passwd = "h8necs8k";
   
   /* FTP CODES */
   &ConnectionError = "Not connected.";
   
   &error_msg = "";
   
   /* GET THE DATABASE NAME */
   SQLExec("select dbname from ps.psdbowner", &dbname);
   
   &inst = Substring(&dbname, 2, 1);
   &env = Substring(&dbname, 7, 2);
   
   Evaluate &inst
   When = "P" /* PRODUCTION */
      Evaluate &env
      When = "HR"
      When-Other
         &error_msg = "INVALID environment: " | &env | ", must be HR Development";
         Break;
      End-Evaluate;
      Break;
   When = "D" /* DEVELOPMENT */
      Evaluate &env
      When = "HR"
         /*--------------------------------------------------------------------------------------------*/
         &remoteip = &hr_prod_ip;
         &userid = &hr_prod_uid;
         &password = &hr_prod_passwd;
         /*--------------------------------------------------------------------------------------------*/
         /*  These lines are for testing only remove when App moved to production  */
         /*         &remoteip = &hr_dev_ip;
         &userid = &hr_dev_uid;
         &password = &hr_dev_passwd; */
         /*  These lines are for testing only remove when App moved to production  */
         /*--------------------------------------------------------------------------------------------*/
         Break;
      When-Other
         &error_msg = "INVALID environment: " | &env | ", must be either HR Only";
         Break;
      End-Evaluate;
      Break;
   When-Other
      &error_msg = "INVALID instance: " | &inst | ", must be either PROD or DEV";
      Break;
   End-Evaluate;
   
   MessageBox(0, "", 0, 0, "Database: " | &dbname | ", Remote IP: " | &remoteip);
   MessageBox(0, "", 0, 0, "sourcefile: " | &srcfile | ", destfile: " | &dstfile);
   
   If &error_msg = "" Then
      &error_stat = 1; /* SUCCESSFUL */
      
      /* CREATE THE COMMAND LINES FOR UNIX AND FTP */
      &cmdfile = "bny_ftp_" | &prcs_instance;
      &ftpfile = &path_ftp | "temp" | "_" | &prcs_instance | ".ftp";
      &errfile = &path_ftp | "temp" | "_" | &prcs_instance | ".err";
      &donefile = Left(&dstfile, Find(".", &dstfile)) | "done";
      &copyline = "cp " | &path | &srcfile | " " | &path_ftp | &srcfile;
      &ftpline = "ftp -n -i " | &remoteip | "< " | &ftpfile | "> " | &errfile;
      &deleteline = "rm " | &path_ftp | "*" | &prcs_instance | "*";
      &doneline = "touch " | &path_ftp | &donefile;
      &deletedone = "rm " | &path_ftp | &donefile;
      &home_path = "lcd " | &path_ftp;
      &usrline = "user " | &userid | " " | &password;
      &getput = Lower(&getput) | " ";
      &gpline = &getput | &srcfile | " " | &dstfile;
      &putdone = &getput | &donefile | " " | &donefile;
      
      /* WRITE THE UNIX COMMAND TO THE EXECUTABLE FILE */
      &FTP_CMDfile = GetFile(&path_ftp | &cmdfile, "W", %FilePath_Absolute);
      If &FTP_CMDfile.IsOpen Then
         &FTP_CMDfile.WriteLine(&copyline);
         MessageBox(0, "", 0, 0, &copyline);
         &FTP_CMDfile.WriteLine(&doneline);
         MessageBox(0, "", 0, 0, &doneline);
         &FTP_CMDfile.WriteLine(&ftpline);
         MessageBox(0, "", 0, 0, &ftpline);
         &FTP_CMDfile.WriteLine(&deletedone);
         MessageBox(0, "", 0, 0, &deletedone);
         &FTP_CMDfile.Close();
         
         /* CHANGE PERMISSIONS OF EXECUTABLE FILE */
         /* SHOULD CHECK FOR THE FILE FIRST AND IF DOESN'T EXIST, SEND ERROR MESSAGE */
         /* STATING THAT IT SHOULD BE CREATED AND INCLUDE THE FOLLOWING: */
         /* chmod 755 /psoft/pshradm/psfiles/bny_ftp* */
         
         &chmod_command = "../psfiles/" | "bny_exe";
         
         MessageBox(0, "", 0, 0, "Unix chmod_command: " | &chmod_command);
         
         &unix_exec = Exec(&chmod_command);
         delay();
         MessageBox(0, "", 0, 0, "Unix exec of CHMOD, process ID: " | &unix_exec | ".");
      End-If;
      
      /* WRITE THE FTP COMMANDS TO A FILE WHICH WILL FEED INTO THE UNIX COMMAND */
      &FTP_file = GetFile(&ftpfile, "W", %FilePath_Absolute);
      If &FTP_file.IsOpen Then
         &FTP_file.WriteLine(&usrline);
         &FTP_file.WriteLine(&home_path);
         &FTP_file.WriteLine(&gpline);
         &FTP_file.WriteLine(&putdone);
         &FTP_file.WriteLine("close");
         &FTP_file.WriteLine("bye");
         &FTP_file.Close();
      End-If;
      
      /* EXECUTE THE FTP COMMAND IN UNIX */
      /*      &ftp_command = "../psfiles/" | &cmdfile;  */
      &ftp_command = "../psfiles/" | &cmdfile;
      &unix_exec = Exec(&ftp_command);
      delay();
      MessageBox(0, "", 0, 0, "Unix exec of FTP, process ID: " | &unix_exec | ".");
      
      /* CHECK FOR FTP ERRORS */
      &FTPerrorFile = GetFile(&errfile, "R", %FilePath_Absolute);
      If &FTPerrorFile.IsOpen Then
         &ftp_status = 1; /* initially assume success */
         If &FTPerrorFile.readline(&errorLine) Then
            If &errorLine = &ConnectionError Then
               &ftp_status = 0;
               MessageBox(0, "", 0, 0, "Connection ERROR: " | &errorLine | " Check IP: " | &remoteip);
            Else
               While &FTPerrorFile.readline(&errorLine)
                  If Left(&errorLine, 1) = "4" Or
                        Left(&errorLine, 1) = "5" Or
                        Left(&errorLine, 1) = "?" Or
                        Find("Permission denied", &errorLine) <> 0 Then
                     &ftp_status = 0;
                     MessageBox(0, "", 0, 0, "FTP ERROR: " | &errorLine);
                  End-If;
               End-While;
            End-If;
            &FTPerrorFile.Close();
         End-If;
      End-If; /* read from FTP error file */
      &run_status = &ftp_status;
      
      If &ftp_status = 1 Then
         /* SUCCESSFUL FTP, SO CAN DELETE ALL TEMP FILES AND CREATE .DONE FILE */
         &FTP_CMDfile = GetFile(&path_ftp | &cmdfile, "W", %FilePath_Absolute);
         If &FTP_CMDfile.IsOpen Then
            &FTP_CMDfile.WriteLine(&deleteline);
            MessageBox(0, "", 0, 0, &deleteline);
            &FTP_CMDfile.Close();
            
            /*            &delete_command = "../psfiles/" | &cmdfile;  */
            &delete_command = "../psfiles/" | &cmdfile;
            &unix_exec = Exec(&delete_command);
            MessageBox(0, "", 0, 0, "Unix exec of DELETE, process ID: " | &unix_exec | ".");
         End-If;
      Else
         MessageBox(0, "", 0, 0, "Files were NOT deleted for process instance: " | &prcs_instance);
      End-If;
      
   Else /* ERROR IN DBNAME */
      MessageBox(0, "", 0, 0, "ERRORS were found in DBNAME !");
      &run_status = 0;
   End-If;
   
   Return &run_status;
   
End-Function; /* FTPDEVPRD */


/********************************************************************/
/* BNY Customized                                                   */
/********************************************************************/
/* Modification Log:                                                */
/* Date:       Author:            BNY Mod No. - Desription          */
/* ----------  -----------------  ----------------------------------*/
/* 03/18/2002  M. Eagan, PwC      Added unstring_name procedure     */
/*                                to be called from App Engine      */
/*                                Programs.                         */
/* 07/22/2002  T. Gujda, PwC      Added return_name_spaced function */
/*                                to be called from App Engine      */
/*                                Programs.                         */
/* 11/01/2002  T. Gujda, IBM      Added StripCommaFromLastName func */
/*                                to be called from App Engine      */
/*                                Programs.                         */
/*                                                                  */
/********************************************************************/
Function unstring_name(&delimited_name) Returns string;
   &start_position = 1;
   &comma_found = False;
   
   &name_length = Len(&delimited_name);
   For &i = 1 To &name_length
      
      &letter = Substring(&delimited_name, &start_position, 1);
      
      If Not &comma_found Then
         If &letter = "," Then
            &comma_found = True;
         Else
            &last = &last | &letter;
         End-If;
      Else
         &first = &first | &letter;
      End-If;
      
      &start_position = &start_position + 1;
      
   End-For;
   
   &unstrung_name = &first | " " | &last;
   Return &unstrung_name;
   
End-Function;

/***** TPR HR0001126 -  09/10/2004 - Lana Ganzman - 
For BNHRS043/BNHRS042 process change format of 
the name to extract only one character of Middle name ***********/
Function return_name_spaced(&first_name, &middle_name, &last_name) Returns string;
   
   &first_name10 = Substring(&first_name, 1, 10);
   &num_spaces = 10 - Len(&first_name10);
   While (&num_spaces <> 0)
      &first_name10 = &first_name10 | " ";
      &num_spaces = &num_spaces - 1;
   End-While;
   
   &middle_init2 = Substring(&middle_name, 1, 1) | " ";
   
   /* &middle_init2 = Substring(&middle_name, 1, 2);
   If Len(&middle_init2) < 2 Then
      &middle_init2 = &middle_init2 | " ";
   End-If; */
   
   Return &first_name10 | &middle_init2 | Substring(&last_name, 1, 18);
End-Function;

Function StripCommaFromLastName(&name) Returns string;
   &comma_count = 0;
   &comma_position = 1;
   
   While &comma_position <> 0
      &comma_position = Find(",", &name, &comma_position);
      If &comma_position <> 0 Then
         &comma_count = &comma_count + 1;
         &comma_position = &comma_position + 1;
      End-If;
   End-While;
   
   For &i = 1 To &comma_count - 1
      &comma_position = Find(",", &name, &comma_position + 1);
      &name = Replace(&name, &comma_position, 1, " ");
   End-For;
   
   Return &name;
End-Function;

/*******************BNY 03/18/2002 - End Modification*****************/
/********************************************************************/
/* BNY Customized                                                   */
/********************************************************************/
/* Modification Log:                                                */
/* Date:       Author:            BNY Mod No. - Desription          */
/* ----------  -----------------  ----------------------------------*/
/* 04/01/2002  M. Eagan, PwC      Added Format Number procedure     */
/*                                to be called from App Engine      */
/*                                Programs.                         */
/*                                                                  */
/********************************************************************/
Function TrimDecimalPtPadZeros(&number, &length_of_output, &show_dec_pos) Returns string
   
   /*Initialize the position*/
   &decimal_pos = 0;
   /*Convert number to string*/
   &number_str = String(&number);
   &length = Len(&number_str);
   /*Find location of decimal, if any*/
   &decimal_pos = Find(".", &number_str);
   
   Evaluate &decimal_pos
   When = 0
      /*No decimal exists i.e. (12)*/
      &number_str = &number_str | "00";
      Break;
   When = (&length - 1)
      /*Decimal exists with 1 decimal position i.e. (12.7)*/
      &number_str = &number_str | "0";
      &number_str = Replace(&number_str, &decimal_pos, 1, "");
      Break;
   When = (&length - 2)
      /*Decimal exists with 2 decimal positions i.e. (12.73)*/
      &number_str = Replace(&number_str, &decimal_pos, 1, "");
      Break;
   End-Evaluate;
   
   /*Determine new string length*/
   &length = Len(&number_str);
   If RTrim(&show_dec_pos) <> "" Then
      &number_str = Substring(&number_str, 1, (&length - 2));
      /*reinitialize flag*/
      &show_dec_pos = "";
      /*Get the new length for for loop*/
      &length = Len(&number_str);
   End-If;
   
   /*Loop through and pad Zeroes until the string length is equal to required length*/
   For &i = 1 To (&length_of_output - &length)
      &number_str = "0" | &number_str;
   End-For;
   
   Return &number_str;
   
   
End-Function;

Function TrimDecimalPtPadZeros4(&number, &length_of_output, &show_dec_pos) Returns string
   
   /*Initialize the position*/
   &decimal_pos = 0;
   /*Convert number to string*/
   &number_str = String(&number);
   &length = Len(&number_str);
   /*Find location of decimal, if any*/
   &decimal_pos = Find(".", &number_str);
   
   Evaluate &decimal_pos
   When = 0
      /*No decimal exists i.e. (12)*/
      &number_str = &number_str | "0000";
      Break;
   When = (&length - 1)
      /*Decimal exists with 1 decimal position i.e. (12.7)*/
      &number_str = &number_str | "000";
      &number_str = Replace(&number_str, &decimal_pos, 1, "");
      Break;
   When = (&length - 2)
      /*Decimal exists with 2 decimal positions i.e. (12.73)*/
      &number_str = &number_str | "00";
      &number_str = Replace(&number_str, &decimal_pos, 1, "");
      Break;
   When = (&length - 3)
      /*Decimal exists with 3 decimal positions i.e. (12.734)*/
      &number_str = &number_str | "0";
      &number_str = Replace(&number_str, &decimal_pos, 1, "");
      Break;
   When = (&length - 4)
      /*Decimal exists with 4 decimal positions i.e. (12.7345)*/
      &number_str = Replace(&number_str, &decimal_pos, 1, "");
      Break;
   End-Evaluate;
   
   /*Determine new string length*/
   &length = Len(&number_str);
   If RTrim(&show_dec_pos) <> "" Then
      &number_str = Substring(&number_str, 1, (&length - 4));
      /*reinitialize flag*/
      &show_dec_pos = "";
      /*Get the new length for for loop*/
      &length = Len(&number_str);
   End-If;
   
   /*Loop through and pad Zeroes until the string length is equal to required length*/
   For &i = 1 To (&length_of_output - &length)
      &number_str = "0" | &number_str;
   End-For;
   
   Return &number_str;
   
   
End-Function;


Function format_number(&number_var, &num_len, &drop_decimal) Returns string
   
   If &drop_decimal = "Y" Then
      &temp_nbr = &number_var * 100;
      &nbr_string = String(&temp_nbr);
      &nbr_string = RTrim(RTrim(&nbr_string, "0"), ".");
      &nbr_string = "000000000000000" | &nbr_string;
      &nbr_string = Right(&nbr_string, &num_len);
   Else
      &temp_nbr = &number_var;
      &nbr_string = String(&temp_nbr);
      &nbr_string = "000000000000000" | &nbr_string;
      &nbr_string = Right(&nbr_string, &num_len);
   End-If;
   Return &nbr_string;
   
End-Function;

/*******************BNY 04/01/2002 - End Modification*****************/

/********************************************************************/
/* BNY Customized                                                   */
/********************************************************************/
/* Modification Log:                                                */
/* Date:       Author:            BNY Mod No. - Desription          */
/* ----------  -----------------  ----------------------------------*/
/* 04/03/2002  M. Eagan, PwC      Added Format Number procedure     */
/*                                to be called from App Engine      */
/*                                Programs.                         */
/*                                                                  */
/********************************************************************/
Function format_counter(&number_var, &num_len) Returns string
   
   &number_var_string = String(&number_var);
   &number_var_string = RTrim(RTrim(&number_var_string, "0"), ".");
   &number_var_string = "00000000000000000000" | &number_var_string;
   &number_var_string = Right(&number_var_string, &num_len);
   Return &number_var_string;
   
End-Function;

/*******************BNY 04/03/2002 - End Modification*****************/

Function Printcounter(&EXTRACT_DATA)
   &line = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444" | "555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888889";
   &EXTRACT_DATA.WriteLine(&line);
   &line = "0000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999" | "000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999990";
   &EXTRACT_DATA.WriteLine(&line);
   &line = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789" | "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789001234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
   &EXTRACT_DATA.WriteLine(&line);
End-Function;

/***********************************************************************/
/* BNY Customized                                                      */
/***********************************************************************/
/* Modification Log:                                                   */
/* Date:       Author:               BNY Mod No. - Desription          */
/* ----------  --------------------  ----------------------------------*/
/* 09/25/2002  Tomasz P. Gujda, PwC  Added Process Date procedure to   */
/*                                   be called from App Engine Prgrms. */
/***********************************************************************/

Function ProcessDate(&date, &format, &delimit) Returns string;
   If String(&date) <> "" Then
      &YrFourDigit = Substring(String(Year(&date)), 1, 4);
      &YrTwoDigit = Substring(String(Year(&date)), 3, 4);
      &MonthStr = Right(String("0" | Month(&date)), 2);
      &DayStr = Right(String("0" | Day(&date)), 2);
      Evaluate &format
      When = "CCYYMMDD"
         &return_date = &YrFourDigit | &delimit | &MonthStr | &delimit | &DayStr;
         Break;
      When = "MMDDCCYY"
         &return_date = &MonthStr | &delimit | &DayStr | &delimit | &YrFourDigit;
         Break;
      When = "YYMMDD"
         &return_date = &YrTwoDigit | &delimit | &MonthStr | &delimit | &DayStr;
         Break;
      When = "MMDDYY"
         &return_date = &MonthStr | &delimit | &DayStr | &delimit | &YrTwoDigit;
         Break;
      When-Other
         &return_date = String(&date);
         Break;
      End-Evaluate;
   Else
      &return_date = "";
   End-If;
   Return &return_date;
End-Function;

/* This function will put the value into decimal format with appropriate amount  */
Function formatDecimal(&FieldValue, &NumericLen, &DecimalLen) Returns string
   &Modified = String(&FieldValue);
   &OrigLen = Len(&Modified);
   &NewLen = &NumericLen + &DecimalLen + 1; /* +1 for decimal point */
   
   &DecimalPos = Find(".", &Modified);
   &NegPos = Find("-", &Modified);
   
   If &DecimalPos = 0 And
         &DecimalLen > 0 Then
      &Modified = &Modified | "." | Rept("0", &DecimalLen);
   Else
      If &DecimalPos > 0 Then
         &BeforeDecimal = Left(&Modified, &DecimalPos);
         &AfterDecimal = Right(&Modified, &OrigLen - &DecimalPos);
         &Modified = &BeforeDecimal | Left(&AfterDecimal | Rept("0", &DecimalLen), &DecimalLen);
      End-If;
   End-If;
   
   &NewLen = &NewLen - &NegPos;
   &Modified = Left(&Modified, &NegPos) | Right(Rept("0", &NumericLen) | Substring(&Modified, &NegPos + 1, Len(&Modified) + 1), &NewLen);
   Return &Modified;
End-Function;


Function decimalToString(&DedNum) Returns string;
   &DedStr = String(&DedNum);
   &DedStrLength = Len(&DedStr);
   &DecimalPos = Find(".", &DedStr);
   
   If &DecimalPos > 0 Then
      &DedMFStr = Substitute(&DedStr, ".", "") | Rept("0", 2 - (&DedStrLength - &DecimalPos))
   Else
      &DedDecimal = &DedNum * (100);
      &DedMFStr = String(&DedDecimal);
   End-If;
   
   Return &DedMFStr;
   
End-Function;

/* ------------------- TPR HR0001489 ---------------------------------------*/
/* TPR HR0001489 Lyndon Black 2/1/2005                                      */
/* Correct Convertion of Negative numbers                                   */
/* -------------------------------------------------------------------------*/
Function convertLastChar(&Amount, &id) Returns string;
   
   If &id = 1 Then
      /*** CONVERT LAST CHARACTER FROM REGULAR FORMAT TO MAINFRAME FORMAT ***/
      If &Amount >= 0 Then
         &DedOrig = decimalToString(&Amount);
         &LastDigit = Substring(&DedOrig, Len(&DedOrig), 1);
         &DedOrig = Substring(&DedOrig, 1, Len(&DedOrig) - 1);
         
         Evaluate &LastDigit
         When = "0"
            &LastDigit = "{";
            Break;
         When = "1"
            &LastDigit = "A";
            Break;
         When = "2"
            &LastDigit = "B";
            Break;
         When = "3"
            &LastDigit = "C";
            Break;
         When = "4"
            &LastDigit = "D";
            Break;
         When = "5"
            &LastDigit = "E";
            Break;
         When = "6"
            &LastDigit = "F";
            Break;
         When = "7"
            &LastDigit = "G";
            Break;
         When = "8"
            &LastDigit = "H";
            Break;
         When = "9"
            &LastDigit = "I";
            Break;
         When-Other
            Break;
         End-Evaluate;
      Else
         &DedOrig = decimalToString(&Amount * ( - 1));
         &LastDigit = Substring(&DedOrig, Len(&DedOrig), 1);
         /* ------------------- TPR HR0001489 ---------------------------------------*/
         &DedOrig = Substring(&DedOrig, 1, Len(&DedOrig) - 1);
         /* ------------------- TPR HR0001489 ---------------------------------------*/
         
         Evaluate &LastDigit
         When = "0"
            &LastDigit = "}";
            Break;
         When = "1"
            &LastDigit = "J";
            Break;
         When = "2"
            &LastDigit = "K";
            Break;
         When = "3"
            &LastDigit = "L";
            Break;
         When = "4"
            &LastDigit = "M";
            Break;
         When = "5"
            &LastDigit = "N";
            Break;
         When = "6"
            &LastDigit = "O";
            Break;
         When = "7"
            &LastDigit = "P";
            Break;
         When = "8"
            &LastDigit = "Q";
            Break;
         When = "9"
            &LastDigit = "R";
            Break;
         When-Other
            Break;
         End-Evaluate;
      End-If;
      
      &return_val = &DedOrig | &LastDigit;
   Else
      /*** CONVERT LAST CHARACTER FROM MAINFRAME FORMAT TO REGULAR FORMAT ***/
      If &id = 2 Then
         &LastDigitValue = Substring(&Amount, Len(&Amount), 1);
         &DedOrig = Substring(&Amount, 1, Len(&Amount) - 1);
         
         Evaluate &LastDigitValue
         When = "{"
            &LastDigitValue = "0";
            Break;
         When = "A"
            &LastDigitValue = "1";
            Break;
         When = "B"
            &LastDigitValue = "2";
            Break;
         When = "C"
            &LastDigitValue = "3";
            Break;
         When = "D"
            &LastDigitValue = "4";
            Break;
         When = "E"
            &LastDigitValue = "5";
            Break;
         When = "F"
            &LastDigitValue = "6";
            Break;
         When = "G"
            &LastDigitValue = "7";
            Break;
         When = "H"
            &LastDigitValue = "8";
            Break;
         When = "I"
            &LastDigitValue = "9";
            Break;
         When = "}"
            &LastDigitValue = "-0";
            Break;
         When = "J"
            &LastDigitValue = "-1";
            Break;
         When = "K"
            &LastDigitValue = "-2";
            Break;
         When = "L"
            &LastDigitValue = "-3";
            Break;
         When = "M"
            &LastDigitValue = "-4";
            Break;
         When = "N"
            &LastDigitValue = "-5";
            Break;
         When = "O"
            &LastDigitValue = "-6";
            Break;
         When = "P"
            &LastDigitValue = "-7";
            Break;
         When = "Q"
            &LastDigitValue = "-8";
            Break;
         When = "R"
            &LastDigitValue = "-9";
            Break;
         When-Other
            Break;
         End-Evaluate;
         
         If (Find("-", &LastDigitValue)) <> 0 Then
            &sign = "-";
            &LastDigitValue = Right(&LastDigitValue, 1);
         Else
            &sign = "";
         End-If;
         &return_val = &sign | &DedOrig | &LastDigitValue;
      End-If;
   End-If;
   Return &return_val;
End-Function;

/******************* BNY 09/25/2002 - End Modification *****************/

/******** BNY MAK ************/
/***** COMMON FUNCTIONS ********/

/* Function used to return a NDM command line */
Function ndm_commandline(&BARCODE) Returns string
   Return "/prod/ndm/bin/ndmauto -bar " | &BARCODE;
End-Function;

Function Wait(&MINUTES)
   
   /* Wait for time specied in the WAIT_TIME variable. Call java routine to wait.    */
   
   &java_wait = CreateJavaObject("com.peoplesoft.epm.pf.epmwait");
   &java_message = &java_wait.waitTime(&MINUTES * 60 * 1000); /* 1 second = 1000 millisecond */
   /*Rgarelick 03/15/2005 Begin customization*/
   /*The original code is actually creating hours worth of time instead of minutes*/
   /*&java_message = &java_wait.waitTime(&MINUTES * 1000);*/ /* 1 second = 1000 millisecond */
   /*end customization*/
   &java_wait = Null;
   
End-Function;


Function Wait_MultiPer(&MINUTES)
   
   /* Wait for time specied in the WAIT_TIME variable. Call java routine to wait.    */
   
   &java_wait = CreateJavaObject("com.peoplesoft.epm.pf.epmwait");
   /*&java_message = &java_wait.waitTime(&MINUTES * 60 * 1000);*/ /* 1 second = 1000 millisecond */
   /*Rgarelick 03/28/2005 Begin customization*/
   /*Rgarelick 01/24/2006 Add five minutes*/
   /*The original code is actually creating hours worth of time instead of minutes*/
   &java_message = &java_wait.waitTime(&MINUTES * 1000 * 5); /* 1 second = 1000 millisecond */
   /*end customization*/
   &java_wait = Null;
   
End-Function;



Function Spawn(&PRCSTYPE As string, &APPLID As string, &RUNCNTLID As string, &RUNLOC As string, &Process_Instance As number) Returns number
   
   Local ProcessRequest &RQST;
   
   &RQST = CreateProcessRequest();
   &RQST.ProcessType = &PRCSTYPE;
   &RQST.ProcessName = &APPLID;
   &RQST.RunControlID = &RUNCNTLID;
   &RQST.RunLocation = &RUNLOC;
   &RQST.RunDateTime = %Datetime;
   &RQST.TimeZone = %ServerTimeZone;
   &RQST.Schedule();
   If &RQST.Status = 0 Then
      &Process_Instance = &RQST.ProcessInstance;
   Else
      &Process_Instance = 0;
   End-If;
   Return &RQST.Status;
   
End-Function;

Function Restart_Spawn(&Process_Instance As number) Returns number
   
   Local ProcessRequest &RQST;
   
   &RQST = CreateProcessRequest();
   &RQST.ProcessInstance = &Process_Instance;
   &RQST.RunStatus = "5"; /* Queued */
   &RQST.UpdateRunStatus();
   Return &RQST.Status;
   
End-Function;

Function Clear_All_Suites()
   
   Local Record &State_Rec;
   
   &State_Rec = CreateRecord(Record.PF_CLRSUIT_AET);
   &State_Rec.PF_CLEAR_ALL.Value = "Y";
   CallAppEngine("PF_CLEARSUIT", &State_Rec);
   
End-Function;

Function Clear_Last_Suite(&Pins As number, &Rctl As string, &Jobstream As string)
   
   Local Record &State_Rec;
   &State_Rec = CreateRecord(Record.PF_CLRSUIT_AET);
   &State_Rec.LAST_PRCS_INSTANCE.Value = &Pins;
   &State_Rec.RUN_CNTL_ID.Value = &Rctl;
   &State_Rec.JOBSTREAM_ID.Value = &Jobstream;
   &State_Rec.PF_CLEAR_ONE.Value = "Y";
   
   CallAppEngine("PF_CLEARSUIT", &State_Rec);
   
End-Function;

Declare Function ndm_commandline PeopleCode BNY_FUNCLIB.FUNCLIB FieldFormula;

Local string &cmd, &CrwHome, &CrwLog, &LogFileName, &LogName, &CurDateTime;

&CurDateTime = String(%Datetime);
&CurDateTime = Substring(&CurDateTime, 1, 10);

SQLExec("SELECT RTRIM(LTRIM(BNY_NDM_BATCH_NO)) FROM PS_FRR_NDM WHERE oprid =:1 and RUN_CNTL_ID = :2", %OperatorId, BNY_NDM_AET.RUN_CNTL_ID, &NDM);

MessageBox(0, " ", 0, 0, "NDM Trigger is about to kick off, for " | BNY_NDM_AET.RUN_CNTL_ID | " NDM # " | &NDM);
SQLExec("COMMIT");
&cmd = ndm_commandline(&NDM);
MessageBox(0, " ", 0, 0, " Trigger script is : " | &cmd);
SQLExec("COMMIT");

&ExitCode = Exec(&cmd, %Exec_Asynchronous + %FilePath_Absolute);

MessageBox(0, " ", 0, 0, "NDM Trigger has been kicked off..");


MessageBox(0, " ", 0, 0, " %Exec_Asynchronous: " | %Exec_Asynchronous);
MessageBox(0, " ", 0, 0, " %FilePath_Absolute: " | %FilePath_Absolute);
SQLExec("COMMIT");

--Z_PP_PRJ
import PT_PRCS:API:*;

Local PT_PRCS:API:PrcsApi &api = create PT_PRCS:API:PrcsApi();
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("my.custom.logger");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.PatternLayout", "%-4r %d [%t] %-5p %c [%x] - %m%n");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.ConsoleAppender", &layout);

&appender.setLayout(&layout);
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
&logger.debug("Hello from a PeopleCode configured logger.");
&logger.debug("Logger created");

&strl_WindowMsg = &strl_WindowMsg | "<br />Step 1/5: PP's Custom AE starting. (" | DateTimeToLocalizedString(%Datetime, "HH:mm:ss") | ")";
&nret = &api.notifyToWindow(Z_AE_REN_AET.PROCESS_INSTANCE, &strl_WindowMsg);
rem &logFile = GetFile(GetEnv("PSPRCSLOGDIR") | "\logFile.txt", "W", %FilePath_Absolute);
MessageBox(0, "", 0, 0, "Return Code " | &nret);

&logger.info("Process completed successfully");


import PS_PT:Integration:ISend;

class SendHandler implements PS_PT:Integration:ISend
   method SendHandler();
   method OnRequestSend(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method SendHandler
end-method;

method OnRequestSend
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:ISend.OnRequestSend +/
   /* Variable Declaration */
   Local any &tempNode;
   Local any &rootNode;
   Local any &xmlDoc;
   Local any &msg;
   Local boolean &yo;
   Local string &filename, &filepath;
   Local array of XmlNode &modNode;
   Local number &f;
   
   &msg = &_MSG;
   &xmlDoc = &msg.GetXmlDoc();
   /* Add a node to the doc to prove that we can edit it in this event. */
   &rootNode = &xmlDoc.DocumentElement;
   &tempNode = &rootNode.AddElement("OnSend");
   &tempNode.NodeValue = "If you see this, then the Sync OnSend PCode has altered the message";
   &modNode = &xmlDoc.GetElementsByTagName("NewNode");
   rem MessageBox(0, "", 0, 0, "Len " | &modNode.Len);
   For &f = 1 To &modNode.Len
      rem MessageBox(0, "", 0, 0, "Node Value " | &modNode [1]);
   End-For;
   /* and write the data back into the message */
   &yo = &msg.IBInfo.LoadConnectorPropFromNode("TARGETNODE");
   /* Needs to be mentioned */
   &msg.IBInfo.ConnectorOverride = True;
   /* User Defined FileName */
   rem &UPD_DATE = DatePart(%Datetime) | " " | Substitute(Substring(String(TimePart(%Datetime)), 1, 8), ".", ":");
   
   &filename = "PPS_NEW_" | %Datetime | ".xml";
   /* User Defined FilePath */
   &filepath = "C:\temp\NEW";
   /* Override Selected/All properties */
   &yo = &msg.IBInfo.IBConnectorInfo.AddConnectorProperties("FileName", &filename, %Property);
   &yo = &msg.IBInfo.IBConnectorInfo.AddConnectorProperties("FilePath", &filepath, %Property);
   &msg.SetXmlDoc(&xmlDoc);
   Return (&msg);
end-method;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*~~~~~OnRouteSend is called before OnSend~~~~~*/
/* Implement the OnRouteSend method for outbound */
/* synchronous and asynchronous service operations */
/* to specify to what node PeopleSoft Integration */
/* Broker routes a message */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
import PS_PT:Integration:IRouter;

class TestRoute implements PS_PT:Integration:IRouter
   /* array of nodes to route the operation to */
   property array of any destinationNodes;
   method TestRoute();
   method OnRouteSend(&_MSG As Message) Returns integer;
   method OnError(&_MSG As Message);
end-class;

/* constructor */
method TestRoute
end-method;

/** Determine the nodes to send to
  * @param   MSG          Message object containing the operation instance to be routed
  * @return  integer      %IntBroker_ROUTE_NONE = Do not send this operation to any of the possible nodes
                          %IntBroker_ROUTE_SOME = Send this operation to a selected list of nodes (an array of strings in the property "destinationNodes")
                          %IntBroker_ROUTE_ALL = Send this operation to all nodes that have a valid routing
 **/
method OnRouteSend
   /+ &_MSG as Message +/
   /+ Returns Integer +/
   /+ Extends/implements PS_PT:Integration:IRouter.OnRouteSend +/
   Local any &tempNode;
   Local any &rootNode;
   Local any &xmlDoc;
   Local array of XmlNode &modNode;
   Local Message &message = &_MSG;
   Local array of any &nodeList = CreateArray();
   Local number &ipp;
   Local string &ORB_Cd_status;
   
   &xmlDoc = &message.GetXmlDoc();
   /* Add a node to the doc to prove that we can edit it in this event. */
   &rootNode = &xmlDoc.DocumentElement;
   &tempNode = &rootNode.AddElement("OnRouteSend");
   &tempNode.NodeValue = "If you see this, then the Sync OnRouteSend PCode has altered the message";
   &modNode = &xmlDoc.GetElementsByTagName("NewNode");
   &message.SetXmlDoc(&xmlDoc);
   /*Retrieve Node Value */
   If &modNode.Len <> 0 Then
      For &ipp = 1 To &modNode.Len
         &ORB_Cd_status = &modNode [&ipp].NodeValue;
      End-For;
   End-If;
   /* Populate Node Array */
   rem &nodeList [1] = "TARGETNODE";
   rem &nodeList [2] = "NEWNODE";
   
   Evaluate &ORB_Cd_status
   When "Prashant Srivastava."
      &nodeList [1] = "TARGETNODE";
      %This.destinationNodes = &nodeList;
      Break;
   When-Other
      &nodeList [1] = "NEWNODE";
      %This.destinationNodes = &nodeList;
      Break;
   End-Evaluate;
   Return (%IntBroker_ROUTE_SOME);
end-method;

method OnError
   /+ &_MSG as Message +/
   /+ Extends/implements PS_PT:Integration:IRouter.OnError +/
   
   rem Return &MSG.IBException.DefaultText;
end-method;

REMARK OnRequest PeopleCode for PS Web Service INBOUND;

import PS_PT:Integration:IRequestHandler;

class INBOUND implements PS_PT:Integration:IRequestHandler
   method INBOUND();
   method OnRequest(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method INBOUND
end-method;

method OnRequest
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   /* Variable Declaration */
   
   Local any &msg;
   Local Rowset &rs, &msgRowset;
   Local number &m;
   Local string &new_descr, &descr;
   Local XmlDoc &xml_doc;
   &msg = &_MSG;
   &xml_doc = &msg.getXmldoc();
   &msgRowset = &msg.GetRowset();
   For &m = 1 To &msgRowset.RowCount;
      &descr = &msgRowset(&m).GetRecord(Record.INBOUND).DESCR2000.Value;
   End-For;
   &msg = CreateMessage(Message.OUTBOUND);
   &new_descr = Upper(&descr);
   
   Local File &NewFile = GetFile("C:\Temp\OnRequest_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &NewFile.WriteString(&xml_doc.GenFormattedXmlString());
   &NewFile.Close();
   Return &msg;
end-method;

class SMS
   method SMS();
   method AssignConnInfo();
   method IBInfoMethods();
   method IBInfoIBConnectorMethods();
   method WriteRequest();
   method WriteResponse();
   method CreateSOAPDocument();
   
   property Message req;
   property Message res;
   property boolean b;
   property string url;
   property string UserName;
   property string Str_Process;
   property string Str_TransID;
   property string Str_SourceNode;
   property string Str_ReqNodeName;
   property string Str_ReqNodeDescr;
   property string Str_ConnectorClass;
   property string Str_ConnectorName;
   property string Str_PathInfo;
   
end-class;

/* Constructor */
method SMS
   %This.CreateSOAPDocument();
end-method;

method IBInfoMethods
   
   &UserName = &req.IBInfo.OrigUser;
   &Str_Process = &req.IBInfo.OrigProcess;
   &Str_TransID = &req.IBInfo.TransactionID;
   &Str_SourceNode = &req.IBInfo.SourceNode;
   &Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
   rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
   
end-method;

method IBInfoIBConnectorMethods
   
   &Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
   &Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
   &Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
   
end-method;

method WriteRequest
   
   /*
   Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile1.WriteString(&xml.GenFormattedXmlString());
   &ppfile1.Close();
   */
   
end-method;

method WriteResponse
   
   /*
   Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile.WriteString(&xml.GenFormattedXmlString());
   &ppfile.Close();
   */
   
end-method;

method AssignConnInfo
   
   &req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
   /* Specifies OutBound Request */
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic cHJhc2hhbnQ6cHJha2FzaA==", %Header);
   /* End Point */
   rem &url = "http://webservices.daelab.net/datesservice/datesservice.wso";
   &url = GetURL(URL.XMETHODS_MONTH);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
   
end-method;

method CreateSOAPDocument
   
   REMARK ENDPOINT = "http://ws.strikeiron.com/StrikeIron/globalsmspro2_5/SMSTextMessaging";
   
   Local SOAPDoc &soap;
   Local XmlDoc &xml;
   Local integer &i;
   Local XmlNode &node;
   Local number &num, &FromNum, &Tonum;
   Local array of XmlNode &nodes;
   Local string &msgtext, &email;
   Local string &soapstr, &mynumstr, &tonumstr;
   
   &req = CreateMessage(Operation.SENDMESSAGE, %IntBroker_Request);
   &soap = CreateSOAPDoc();
   
   &email = String("prashant.prakash1@gmail.com");
   &Tonum = STRIKEIRON.DESCR120.Value;
   &msgtext = String(STRIKEIRON.DESCR150_MIXED.Value);
   &FromNum = 919818551401;
   &mynumstr = NumberToString("%+", &FromNum);
   &tonumstr = NumberToString("%+", &Tonum);
   
   rem &soapstr = GetHTMLText(HTML.STRIKEIRON_SMS_REQUEST, &email, &tonumstr, &mynumstr, &msgtext);
   /* SOAP 1.1 */
   &soapstr = GetHTMLText(HTML.STRIKEIRON_SMS_REQUEST);
   try
      Local boolean &bool = &soap.ParseXmlString(&soapstr);
      &xml = &soap.XmlDoc;
      %This.WriteRequest();
      /* Assign the Request to a Page Field */
      STRIKEIRON.AUC_COMMENTS_2000.Value = &xml.GenFormattedXmlString();
      /* Assign Connector and relevant Properties */
      rem %This.AssignConnInfo();
      /* Assign the XML Object to a Message Object */
      &req.SetXmlDoc(&xml);
      /*IBInfo Methods */
      %This.IBInfoMethods();
      /* IBConnectorInfo Methods */
      %This.IBInfoIBConnectorMethods();
      /* SyncRequest */
      &res = %IntBroker.SyncRequest(&req);
      /* retrieve the response */
      If &res.ResponseStatus = 0 Then
         &xml = &res.GetXmlDoc();
         STRIKEIRON.AUC_EMAIL_TEXT.Value = &xml.GenFormattedXmlString();
         %This.WriteResponse();
      End-If;
   catch Exception &esoap
      MessageBox(0, "", 0, 0, "Error " | &esoap.ToString());
   end-try;
end-method;

import PT_IB_UDDI:UDDIException;

class XMETHODS
   method XMETHODS();
   method AssignConnInfo();
   method IBInfoMethods();
   method IBInfoIBConnectorMethods();
   method WriteRequest(&ReqXML As XmlDoc);
   method WriteResponse(&ResXML As XmlDoc);
   /**
	* Helper function to throw appropriate exeception whenever ConnectorRequest returns null response.
	*/
   method HandleNullSoapResponse(&soapMs As XmlDoc, &ul As string);
   method HandleSoapFault(&soapReq As XmlDoc, &soapFaultNode As XmlNode);
   method CreateSOAPDocument();
   
   property Message req;
   property Message res;
   property boolean b;
   property string url;
   property string UserName;
   property string Str_Process;
   property string Str_TransID;
   property string Str_SourceNode;
   property string Str_ReqNodeName;
   property string Str_ReqNodeDescr;
   property string Str_ConnectorClass;
   property string Str_ConnectorName;
   property string Str_PathInfo;
private
   rem Constant &NULL_SOAP_RESPONSE = 15301;
   Constant &NULL_SOAP_RESPONSE = 16022;
   Constant &BAD_RESPONSE_STATUS = 15303;
   Constant &NON_XML_RESPONSE = 15304;
   
end-class;

/* Constructor */
method XMETHODS
   %This.CreateSOAPDocument();
end-method;

method IBInfoMethods
   
   &UserName = &req.IBInfo.OrigUser;
   &Str_Process = &req.IBInfo.OrigProcess;
   &Str_TransID = &req.IBInfo.TransactionID;
   &Str_SourceNode = &req.IBInfo.SourceNode;
   &Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
   rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
   
end-method;

method IBInfoIBConnectorMethods
   
   &Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
   &Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
   &Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
   
end-method;

method WriteRequest
   /+ &ReqXML as XmlDoc +/
   
   Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile1.WriteString(&ReqXML.GenFormattedXmlString());
   &ppfile1.Close();
   
end-method;

method WriteResponse
   /+ &ResXML as XmlDoc +/
   
   /*
   Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile.WriteString(&xml.GenFormattedXmlString());
   &ppfile.Close();
   */
   
end-method;

method HandleNullSoapResponse
   /+ &soapMs as XmlDoc, +/
   /+ &ul as String +/
   Local PT_IB_UDDI:UDDIException &ex = create PT_IB_UDDI:UDDIException(&NULL_SOAP_RESPONSE);
   &ex.DefaultText = "There is no reply from the Web server hosting the Web Service at '%1'.";
   &ex.SetSubstitution(1, &ul);
   &ex.SoapRequest = &soapMs.GenFormattedXmlString();
   throw &ex;
end-method;

method HandleSoapFault
   /+ &soapReq as XmlDoc, +/
   /+ &soapFaultNode as XmlNode +/
   
   Local PT_IB_UDDI:UDDIException &ex = create PT_IB_UDDI:UDDIException(0);
   &ex.SoapRequest = &soapReq.GenFormattedXmlString();
   &ex.InitFromSoapFault(&soapFaultNode);
   throw &ex;
end-method;

method AssignConnInfo
   
   &req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
   /* Specifies OutBound Request */
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic cHJhc2hhbnQ6cHJha2FzaA==", %Header);
   /* End Point */
   &url = "http://webservices.daelab.net/datesservice/datesservice.wso";
   rem &url = GetURL(URL.XMETHODS_MONTH);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
   
end-method;

method CreateSOAPDocument
   
   REMARK ENDPOINT = "http://webservices.daelab.net/datesservice/datesservice.wso";
   
   rem Local Message &req, &res;
   Local SOAPDoc &soap;
   Local XmlDoc &xml;
   rem Local boolean &b;
   Local integer &i;
   Local XmlNode &node;
   Local number &num;
   rem Local string &UserName;
   rem Local string &Str_Process, &Str_SourceNode, &Str_ReqNodeName;
   rem Local string &Str_ConnectorClass, &Str_ConnectorName;
   rem Local string &Str_PathInfo;
   Local array of XmlNode &nodes;
   
   &req = CreateMessage(Operation.XMETHODS, %IntBroker_Request);
   &soap = CreateSOAPDoc();
   /* set the Month Number */
   &num = Z_EXAMPLE_WRK.ACCESS_ID.Value;
   If &num <= 0 Or
         None(&num) Or
         &num >= 13 Then
      &num = 1;
   End-If;
   Local string &soapstr = GetHTMLText(HTML.XMETHODS, &num); /* SOAP 1.1 */
   rem Local string &soapstr = GetHTMLText(HTML.XMETHODS_12, &num); /* SOAP 1.2 */
   Local boolean &bool = &soap.ParseXmlString(&soapstr);
   &xml = &soap.XmlDoc;
   /**
    * Test Whether we can send a PSNONXML format for SOAP Requests - AND YES WE CAN SEND THAT 
    **/
   Local string &encoded = Substitute(&xml.GenXmlString(), "<?xml version=""1.0""?>", "<?xml version=""1.0"" encoding=""UTF-8""?>");
   /* Encode the XML as a PSNONXML String and create the XML again */
   Local string &nonXmlData = "<?xml version=""1.0""?><data psnonxml=""yes""><![CDATA[" | &encoded | "]]></data>";
   rem %This.WriteRequest(&xml);
   /* Assign the Request to a Page Field */
   Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
   /* Assign Connector and relevant Properties */
   %This.AssignConnInfo();
   /* Assign the XML Object to a Message Object */
   &xml = CreateXmlDoc(&nonXmlData);
   rem Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
   rem %This.WriteRequest(&xml);
   &req.SetXmlDoc(&xml);
   /*IBInfo Methods */
   %This.IBInfoMethods();
   /* IBConnectorInfo Methods */
   %This.IBInfoIBConnectorMethods();
   rem &res = CreateMessage(Operation.XMETHODS_RESP, %IntBroker_Response);
   &res = %IntBroker.ConnectorRequest(&req);
   /* Additional Error Handling */
   If &res = Null Then /* Throw exception */
      %This.HandleNullSoapResponse(&xml, &url);
   End-If;
   /* Check for soap faults */
   &xml = &res.GetXmlDoc();
   
   /*--
    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	  <soap:Body>
		<soap:Fault>
   --*/
   If &xml <> Null Then
      Local array of XmlNode &faultNodes = &xml.DocumentElement.GetElementsByTagNameNS("http://schemas.xmlsoap.org/soap/envelope/", "Fault");
      
      If &faultNodes <> Null And
            &faultNodes.Len > 0 Then
         %This.HandleSoapFault(&xml, &faultNodes [1]);
      End-If;
   End-If;
   /* Check response Status */
   If &res.ResponseStatus <> 0 Then
      Local PT_IB_UDDI:UDDIException &ex1 = create PT_IB_UDDI:UDDIException(&BAD_RESPONSE_STATUS);
      &ex1.SetSubstitution(1, NumberToString("", &res.ResponseStatus));
      &ex1.SoapRequest = &xml.GenFormattedXmlString();
      throw &ex1;
   End-If;
   
   If &xml = Null Then
      /* Some error in returned object. Does not look like valid Xml */
      Local PT_IB_UDDI:UDDIException &ex2 = create PT_IB_UDDI:UDDIException(&NON_XML_RESPONSE);
      &ex2.SoapRequest = &xml.GenFormattedXmlString();
      throw &ex2;
   End-If;
   
   /* retrieve the response */
   &xml = &res.GetXmlDoc();
   Z_EXAMPLE_WRK.XMLLINKDTD.Value = &xml.GenFormattedXmlString();
   %This.WriteResponse(&xml);
   
end-method;

<* It was not possible to fully convert this code, correct manually to use this as a handler;
import PS_PT:Integration:IRequestHandler;

class RequestHandler implements PS_PT:Integration:IRequestHandler
   method RequestHandler();
   method OnRequest(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method RequestHandler
end-method;

method OnRequest
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   /* Variable Declaration */
   MessageBox(0, "", 0, 0, "Hiii!!!");
   rem Return &_MSG;
end-method;
*>
MessageBox(0, "", 0, 0, "Hiii!!!");

&Str = GetHTMLText(HTML.USERJS, "user_function1()");
GetLevel0()(1).Z_EXAMPLE_WRK.DC_AUTHORS.Value = &Str;

Local Message &msg, &response;
Local XmlDoc &xmlDoc, &res_XML_Doc;
Local string &Str;
Local File &Out_File;

rem SetTracePC(2048);
rem SetTraceSQL(3);
&msg = CreateMessage(Operation.EXAMPLE_SERVICE_OPR);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
&rootNode = &xmlDoc.DocumentElement;
&descNode = &rootNode.AddElement("TestNode");
&descNode.NodeValue = "This message was written to a file.";
&TestNode = &rootNode.AddElement("NewNode");
&TestNode.NodeValue = "Prashant Prakash.";
/* put the XML in the request... */
&msg.SetXmlDoc(&xmlDoc);
/* ...and send */
&response = %IntBroker.SyncRequest(&msg);
&res_XML_Doc = &response.GetXmlDoc();
&Str = &res_XML_Doc.GenFormattedXmlString();
&Out_File = GetFile("C:\Temp\Out_" | %Datetime | "_Put.out", "w", %FilePath_Absolute);
&Out_File.WriteString(&Str);
&Out_File.Close();

<*
&msg = CreateMessage(Operation.EXAMPLE_SERVICE_OPR);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
/* put the XML in the message */
&msg.setxmldoc(&xmlDoc);


/* send the request */
&response = %IntBroker.SyncRequest(&msg);
/* display the results */
&xmlDoc = &response.getxmldoc();
MessageBox(0, "", 0, 0, &xmlDoc.genxmlstring());
*>
Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local array of XmlNode &nodes;

rem &req = CreateMessage(Message.PRASHANT_MESSAGE);
&req = CreateMessage(Operation.PRASHANT_MESSAGE, %IntBroker_Request);

&soap = CreateSOAPDoc();
&Str = GetHTMLText(HTML.Z_PPMI_HTML_12, "1.0"); /* sending a SOAP 1.2 message */
&bool = &soap.ParseXmlString(&Str);
<*
&soap.AddEnvelope(0);
&soap.AddHeader();
&soap.AddBody();
&soap.AddMethod("notifyAgentStateChange", 1);
&soap.AddParm("agentID", &agents);
&soap.AddParm("systemID", &system);

&node = &soap.HeaderNode;
&node = &node.AddElement("omiHeader");
&node = &node.AddElement("version");
&node = &node.AddText("1.0");
*>
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\PRASHANT_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.AM_APPSTART_HTML.Value = &xml.GenFormattedXmlString();
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
SQLExec("SELECT URL FROM PSURLDEFN WHERE URL_ID = :1", "PPM_PPMI", &url);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);

&req.SetXmlDoc(&xml);

&res = %IntBroker.ConnectorRequest(&req);
&xml = &res.GetXmlDoc();
Z_EXAMPLE_WRK.APPSTART_HTML.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\PRASHANT_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
&nodes = &xml.DocumentElement.GetElementsByTagName("message");
MessageBox(0, "", 0, 0, "Node Value " | &nodes.Len);
/*
If (&nodes.Len <> 0) Then
   MessageBox(0, MsgGetText(209, 571, "Error"), - 1, - 1, &nodes [1].NodeValue);
End-If;
*/

import XMETHODS:*;

Local XMETHODS:XMETHODS &UM = create XMETHODS:XMETHODS();
/*
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("my.custom.logger");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.PatternLayout", "%-4r %d [%t] %-5p %c [%x] - %m%n");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.ConsoleAppender", &layout);

&appender.setLayout(&layout);
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
&logger.debug("Hello from a PeopleCode configured logger.");
*/
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("PP's.email.debugger");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.HTMLLayout");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.net.SMTPAppender");
&appender.setSMTPHost("localhost");
&appender.setFrom("PeopleSoft@peoplesoft.com");
&appender.setTo("prashant.prakash1@gmail.com");
&appender.setSubject("PeopleCode debug log");
&appender.setBufferSize(1);
&appender.setLayout(&layout);
&appender.activateOptions();
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
&logger.fatal("Hello from PeopleCode!");
&logger.debug("Yeh mera code hain!");
<*
REMARK ENDPOINT = "http://webservices.daelab.net/datesservice/datesservice.wso";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local number &num;
Local string &url, &UserName;
Local array of XmlNode &nodes;

&req = CreateMessage(Operation.XMETHODS, %IntBroker_Request);
&soap = CreateSOAPDoc();

&num = Z_EXAMPLE_WRK.ACCESS_ID.Value;
If &num <= 0 Or
      None(&num) Or
      &num >= 13 Then
   &num = 1;
End-If;
Local string &soapstr = GetHTMLText(HTML.XMETHODS, &num);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
/* Assign Connector and relevant Properties */
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
/* Specifies OutBound Request */
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
/* End Point */
&url = "http://webservices.daelab.net/datesservice/datesservice.wso";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
/* Assign the XML Object to a Message Object */
&req.SetXmlDoc(&xml);
/*IBInfo Methods */
/* retrieve the User Name of the person that fired the Sv Op */
&UserName = &req.IBInfo.OrigUser;
&Str_Process = &req.IBInfo.OrigProcess;
&Str_TransID = &req.IBInfo.TransactionID;
&Str_SourceNode = &req.IBInfo.SourceNode;
&Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
/* IBConnectorInfo Methods */
&Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
&Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
&Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
rem MessageBox(0, "", 0, 0, "IBConnectorInfo " | &Str_ConnectorClass | " , " | &Str_ConnectorName | " , " | &Str_PathInfo);
rem MessageBox(0, "", 0, 0, "IBInfo " | &Str_TransID | " , " | &Str_ReqNodeName);
rem &res = CreateMessage(Operation.XMETHODS_RESP, %IntBroker_Response);
&res = %IntBroker.ConnectorRequest(&req);
/* retrieve the response */
&xml = &res.GetXmlDoc();
Z_EXAMPLE_WRK.XMLLINKDTD.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
*>

Local Field &HTMLField;

&HTMLField = GetField();
rem &Str = GetHTMLText(HTML.MD5_JAVASCRIPT);
rem &Str = %Response.WriteLine("<script src= " | %Response.GetJavaScriptURL(HTML.MD5_JAVASCRIPT) | "></script>");
rem MessageBox(0, "", 0, 0, "&Str " | &Str);
&Str = GetHTMLText(HTML.PRINT);
&HTMLField.Value = &Str;

<*/**
*
* MD5 (Message-Digest Algorithm)
* http://www.webtoolkit.info/
*
**/

var MD5 = function (string) {

    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    }

    function AddUnsigned(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }

    function F(x,y,z) { return (x & y) | ((~x) & z); }
    function G(x,y,z) { return (x & z) | (y & (~z)); }
    function H(x,y,z) { return (x ^ y ^ z); }
    function I(x,y,z) { return (y ^ (x | (~z))); }

    function FF(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function GG(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function HH(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function II(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    function WordToHex(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    function Utf8Encode(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    string = Utf8Encode(string);

    x = ConvertToWordArray(string);

    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toLowerCase();
}*>
REMARK ENDPOINT = "http://localhost:8280/PSIGW/PeopleSoftServiceListeningConnector/INBOUND.1.wsdl";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local string &url, &Text;
Local array of XmlNode &nodes;

&req = CreateMessage(Operation.INBOUND, %IntBroker_Request);
&soap = CreateSOAPDoc();

&Text = Z_EXAMPLE_WRK.XML_TESTI.Value;
Local string &soapstr = GetHTMLText(HTML.INBOUND_REQUEST, &Text);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.WORDER_LEGEND.Value = &xml.GenFormattedXmlString();
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
&url = "http://localhost:8280/PSIGW/PeopleSoftServiceListeningConnector/INBOUND.1.wsdl";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);

rem &req.SetXmlDoc(&xml);
rem &res = CreateMessage(Message.OUTBOUND);
&res = %IntBroker.ConnectorRequest(&req);
&xml = &res.GetXmlDoc();
Z_EXAMPLE_WRK.WORKER_SUMMARY.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
Local Message &msg, &response;
Local XmlDoc &xmlDoc, &res_XML_Doc;
Local string &Str;
Local File &Out_File;

&msg = CreateMessage(Operation.FSCM_CRM);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
&rootNode = &xmlDoc.DocumentElement;
&descNode = &rootNode.AddElement("TestNode");
&descNode.NodeValue = "This message was sent to CRM 9.0.";
&TestNode = &rootNode.AddElement("Author");
/* retrieve Author Value */
&TestNode.NodeValue = Z_FSCM2CRM_WRK.ACCOUNT_NAME.Value;
/* Assign the Request XML/SOAP to Page Field */
Z_FSCM2CRM_WRK.PV_MINIMIZE_WL.Value = &xmlDoc.GenFormattedXmlString();
/* put the XML in the request... */
&msg.SetXmlDoc(&xmlDoc);
/* It doesn't include the size of the XML tags */
rem MessageBox(0, "", 0, 0, "Size " | &msg.Size);
/* Put it in a try-catch Block */
/* ...and send */
try
   &response = %IntBroker.SyncRequest(&msg); /* Send the Request to CRM */
   /* check the response status; 0 means OK */
   If (&response.ResponseStatus = 0) Then
      &res_XML_Doc = &response.GetXmlDoc();
      &Str = &res_XML_Doc.GenFormattedXmlString();
      /* Assign the Response XML/SOAP to Page Field */
      Z_FSCM2CRM_WRK.PV_MODAL.Value = &Str;
      <*
      &Out_File = GetFile("C:\Temp\FSCM_CRM_" | %Datetime | "_Put.out", "w", %FilePath_Absolute);
      &Out_File.WriteString(&Str);
      &Out_File.Close();
      *>
   End-If;
catch Exception &estring
   MessageBox(0, "", 0, 0, "Error " | &estring.ToString());
end-try;

REMARK TRADER WEBSERVICE EXAMPLE - SELL;

Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local string &Country, &Str, &Strxml;
Local number &Shares;
Local SOAPDoc &SOAPReq, &SOAPRes;
rem Local XmlDoc &XMLReq, &XMLRes;
Local boolean &bool;

/* Retrieve input from Page/User */
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.Z_PP_WRK);
&Country = &LVL0REC.INPUT_01.Value;
&Shares = &LVL0REC.NBR_DAYS.Value;

/* Assign (Page) Input to SOAP (1.1) Message - Using both GetHTMLText() an ValidateSOAPDoc()*/
&SOAPReq = CreateSOAPDoc();
&Str = GetHTMLText(HTML.Z_TRADER_SOAP12_SELL, &Country, &Shares); /* sending a SOAP 1.2 message */
&bool = &SOAPReq.ParseXmlString(&Str);

&LVL0REC.LONGJOBNAME2.Value = &Str;
/* Convert SOAP (1.1) to XML and send message */
&XMLReq = &SOAPReq.XmlDoc;
&message = CreateMessage(Operation.TRADERWEBSERVICE, %IntBroker_Request);
&message.SetXMLDoc(&XMLReq);
&XMLRes = %IntBroker.SyncRequest(&message, Node.THIRDPARTY);
&XMLRes_XML = &XMLRes.GetXmlDoc();

/* Retrieve XML and Convert to SOAP (1.1) */
&SOAPRes = CreateSOAPDoc();
&SOAPRes.XmlDoc = &XMLRes_XML;

/* Assign Returned SOAP (1.1) to the RESPONSE */
Local XmlNode &FindNode = &XMLRes_XML.DocumentElement.FindNode("numberTraded");
/* If Response is Null then Node.IsNull will be set to TRUE */
rem MessageBox(0, "", 0, 0, "&FindNode " | &FindNode.IsNull);
&fieldList = &XMLRes_XML.GetElementsByTagName("numberTraded");
For &ipp = 1 To &fieldList.len
   &country_node = &fieldList.Get(&ipp);
End-For;
&country_node_value = &country_node.NodeValue;

&fieldList_2 = &XMLRes_XML.GetElementsByTagName("stockSymbol");
For &ip = 1 To &fieldList_2.len
   &country_node_2 = &fieldList_2.Get(&ip);
End-For;
&country_node_value_2 = &country_node_2.NodeValue;

&LVL0REC.OUTPUT_DIRECTORY.Value = &country_node_value | " | " | &country_node_value_2;
/* Assign Result to the OUTPUT on Page */
&Strxml = &XMLRes_XML.GenFormattedXmlString();
&LVL0REC.AE_STMT.Value = &SOAPRes.GenFormattedXmlString();

rem MessageBox(0, "", 0, 0, "Welcome to PP's Web Service Utility!!!!");

REMARK TRADER WEBSERVICE EXAMPLE - BUY;

Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local string &Country, &Str, &Strxml;
Local number &Shares;
Local SOAPDoc &SOAPReq, &SOAPRes;
rem Local XmlDoc &XMLReq, &XMLRes;
Local boolean &bool;

/* Retrieve input from Page/User */
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.Z_PP_WRK);
&Country = &LVL0REC.INPUT_01.Value;
&Shares = &LVL0REC.NBR_DAYS.Value;

/* Assign (Page) Input to SOAP (1.1) Message - Using both GetHTMLText() and ValidateSOAPDoc()*/
&SOAPReq = CreateSOAPDoc();
&Str = GetHTMLText(HTML.Z_TRADER_SOAP12, &Country, &Shares); /* sending a SOAP 1.2 message */
&bool = &SOAPReq.ParseXmlString(&Str);
&Fault = &SOAPReq.FaultCode;
rem MessageBox(0, "", 0, 0, "&SOAPReq " | &Fault);
&HdrNode = &SOAPReq.HeaderNode;
&HdrName = &HdrNode.NodeName;
rem MessageBox(0, "", 0, 0, "&HdrName " | &HdrName);
/*
&Return = &SOAPReq.ValidateSOAPDoc();
If &Return <> 0 Then
   MessageBox(0, "", 0, 0, "&Return " | &Return);
End-If;
*/
&LVL0REC.LONGJOBNAME2.Value = &Str;
/* Convert SOAP (1.1) to XML and send message */
&XMLReq = &SOAPReq.XmlDoc;
&message = CreateMessage(Operation.TRADERWEBSERVICE, %IntBroker_Request);
rem &message.LOADXMLSTRING(&Str);
&message.SetXMLDoc(&XMLReq);
&XMLRes = %IntBroker.SyncRequest(&message, Node.THIRDPARTY);
rem &XMLRes = SyncRequestXmlDoc(&XMLReq, Message.W_OUTBOUND_MSG, Node.THIRDPARTY);
&XMLRes_XML = &XMLRes.GetXmlDoc();

/* Retrieve XML and Convert to SOAP (1.1) */
&SOAPRes = CreateSOAPDoc();
&SOAPRes.XmlDoc = &XMLRes_XML;

/* Assign Returned SOAP (1.1) to the RESPONSE */

Local XmlNode &FindNode = &XMLRes_XML.DocumentElement.FindNode("numberTraded");
/* If Response is Null then Node.IsNull will be set to TRUE */
rem MessageBox(0, "", 0, 0, "&FindNode " | &FindNode.IsNull);
&fieldList = &XMLRes_XML.GetElementsByTagName("numberTraded");
For &ipp = 1 To &fieldList.len
   rem MessageBox(0, "", 0, 0, "Array Len = " | &fieldList.len);
   rem MessageBox(0, "", 0, 0, "Field Value " | &fieldList [&ipp].NodeValue);
   &country_node = &fieldList.Get(&ipp);
End-For;
&country_node_value = &country_node.NodeValue;

&fieldList_2 = &XMLRes_XML.GetElementsByTagName("stockSymbol");
For &ip = 1 To &fieldList_2.len
   &country_node_2 = &fieldList_2.Get(&ip);
End-For;
&country_node_value_2 = &country_node_2.NodeValue;

&LVL0REC.OUTPUT_DIRECTORY.Value = "Selling " | &country_node_value | " shares of " | &country_node_value_2;
/* Assign Result to the OUTPUT on Page */
&Strxml = &XMLRes_XML.GenFormattedXmlString();
&LVL0REC.AE_STMT.Value = &SOAPRes.GenFormattedXmlString();
/* Write to file */
/*
Local File &PPFILE = GetFile("C:\Temp\Out_" | %Datetime | "_Put.out", "W", %FilePath_Absolute);
&PPFILE.WriteString(&SOAPRes.GenFormattedXmlString());
&PPFILE.Close();
*/
!!!--Z_TRADER_SOAP12_SELL
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://www.w3.org/2003/05/soap-encoding/" xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope/">
	<SOAP-ENV:Body>
		<ns1:sell xmlns:ns1="http://www.bea.com/examples/Trader">
			<string xsi:type="partns:string">%BIND(:1)</string>
			<intVal xsi:type="partns:int">%BIND(:2)</intVal>
		</ns1:sell>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

!!Z_TRADER_SOAP12
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:SOAP-ENC="http://www.w3.org/2003/05/soap-encoding/" 
                   xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope/">
	<SOAP-ENV:Body>
		<ns1:buy xmlns:ns1="http://www.bea.com/examples/Trader">
			<string xsi:type="partns:string">%BIND(:1)</string>
			<intVal xsi:type="partns:int">%BIND(:2)</intVal>
		</ns1:buy>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--Z_TRADER_SOAP11
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
	<SOAP-ENV:Body>
		<ns1:buy xmlns:ns1="http://www.bea.com/examples/Trader">
			<string xsi:type="partns:string">%BIND(:1)</string>
			<intVal xsi:type="partns:int">%BIND(:2)</intVal>
		</ns1:buy>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--Z_PPMI_SOAP12
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://www.w3.org/2003/05/soap-encoding/"
                   xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope/">                   
  <SOAP-ENV:Header>
    <omiHeader>
      <version>%BIND(:1)</version>
    </omiHeader>
  </SOAP-ENV:Header>
  <SOAP-ENV:Body>
    <notifyAgentStateChange>
      <agentID>*</agentID>
      <systemID>2b5c2364-5ce3-11dc-88ab-e7f11ff3b0eb</systemID>
    </notifyAgentStateChange>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>


--Z_PPMI_HTML
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
                   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">                   
  <SOAP-ENV:Header>
    <omiHeader>
      <version>%BIND(:1)</version>
    </omiHeader>
  </SOAP-ENV:Header>
  <SOAP-ENV:Body>
    <notifyAgentStateChange>
      <agentID/>
      <systemID/>
    </notifyAgentStateChange>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--XMETHODS_12
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope/"
xmlns:dat="http://webservices.daelab.net/dateservice">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <dat:MonthName>
         <dat:iLanguage></dat:iLanguage>
         <dat:iMonth>%BIND(:1)</dat:iMonth>
         <dat:bAbbreviated></dat:bAbbreviated>
      </dat:MonthName>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--XMETHODS
<?xml version="1.0"  encoding="UTF-16"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:dat="http://webservices.daelab.net/dateservice">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <dat:MonthName>
         <dat:iLanguage></dat:iLanguage>
         <dat:iMonth>%BIND(:1)</dat:iMonth>
         <dat:bAbbreviated></dat:bAbbreviated>
      </dat:MonthName>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--Print
<html>
<head>
<body>
<input type=button value=Print OnClick="window.print();">
</body>
</head>
</html>

XL Project!!XLTE_PP_0308_PTA_MOD
XLPP_TE_PTA_SBR.XFR_FLG.SaveEdit
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       PeopleCode to display error message 
													   if the Expense Report submitted with
												       Expense Type 'AIR' or/and 'HTL' and 
													   Pre Approved check box is checked and 
													   PTA Auditor# is not entered.
**********************************************************************************/
/*********XL Capital BEGIN 03/25/08 **************/
If %Component = Component.TE_EXPENSE_SHEET2 Then
   &rownum = CurrentRowNumber();
   REM THIS CODE SHOULD ONLY FIRE FOR EXPENSE TYPE 'AIR' or/and 'HTL';
   &sheet_rs = GetLevel0();
   &Row_Line = GetRow();
   &rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
   Local Rowset &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
   &line_rec = &line_rs(1).GetRecord(Record.EX_SHEET_LINE);
   &line_wrk_rec = &line_rs(1).GetRecord(Record.EX_LINE_WRK);
   /* Retreieve Expense Type Value */
   &ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
   If (&ExpTypeEdit = "AIR") Or
         (&ExpTypeEdit = "HTL") Then
      If (&line_wrk_rec.XFR_FLG.Value = "Y") Then
         If None(&line_wrk_rec.EXT_REF_NBR.Value) Then
            SetCursorPos(Page.EX_SHEET_ENTRY, EX_LINE_WRK.EXT_REF_NBR, &rownum);
            Error (MsgGet(30000, 2, "Pre-Trip Auditor# is required for Pre-Approved Transactions - Line %1", &rownum));
         End-If;
      Else
         If None(&line_wrk_rec.ACTION_PLAN_DESCR.Value) Then
            SetCursorPos(Page.EX_SHEET_ENTRY, EX_LINE_WRK.ACTION_PLAN_DESCR, &rownum);
            Error (MsgGet(30000, 3, "Comment/Reason is required for entering Unapproved Transactions - Line %1", &rownum));
         End-If;
      End-If;
   End-If;
End-If;
/*********XL Capital END 03/25/08 **************/
XLPP_TE_PTA_SBR.XFR_FLG.FieldEdit
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       Added code to Hide/Unhide columns
                                                       based on user Inputs  
**********************************************************************************/
/******** XL Capital BEGIN 25/03/08 ************/
Function XL_display_line(&row_num)
   
   If EX_LINE_WRK.XFR_FLG = "Y" Then
      EX_LINE_WRK.EXT_REF_NBR.Visible = True;
      EX_LINE_WRK.EXT_REF_NBR.ShowRequiredFieldCue = True;
      EX_LINE_WRK.ACTION_PLAN_DESCR.ShowRequiredFieldCue = False;
      EX_LINE_WRK.ACTION_PLAN_DESCR.Visible = False;
      &GridColumn = &Grid.GetColumn("ACTION_PLAN_DESCR");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PRE_TRIP_AUDITOR");
      &GridColumn.Visible = True;
   Else
      EX_LINE_WRK.EXT_REF_NBR.Visible = False;
      EX_LINE_WRK.ACTION_PLAN_DESCR.Visible = True;
      EX_LINE_WRK.ACTION_PLAN_DESCR.ShowRequiredFieldCue = True;
      EX_LINE_WRK.EXT_REF_NBR.ShowRequiredFieldCue = False;
      &GridColumn = &Grid.GetColumn("PRE_TRIP_AUDITOR");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("ACTION_PLAN_DESCR");
      &GridColumn.Visible = True;
   End-If;
End-Function;

&Grid = GetGrid(Page.EX_SHEET_ENTRY, "EX_SHEET_LINE");
&rownum = GetRow().RowNumber;

If &rownum > 0 Then
   XL_display_line(&rownum)
Else
   For &nRow = 1 To ActiveRowCount(Record.EX_SHEET_LINE)
      XL_display_line(&nRow)
   End-For;
End-If;
/******** XL Capital END 25/03/08 ************/
EX_SHEET_LINE.TRANS_DT.FieldChange
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              03/31/08           PPRAKASH       PeopleCode to reset PTA related
													   info for lines with Expense Type 
													   'AIR' or/and 'HTL' if the Expense 
												       Date is changed.
**********************************************************************************/

Declare Function Rate_Calc_Main PeopleCode FUNCLIB_EX.AUTO_RATE FieldFormula;
Declare Function dflt_exchng_rt PeopleCode EX_SHEET_LINE.RT_TYPE FieldChange;
Declare Function DefaultDates PeopleCode FUNCLIB_EX.WIZARD FieldFormula;
Declare Function SaveChangedLine PeopleCode EX_RCPTSPLT_WRK.CANCEL_BTN FieldChange;
Declare Function calc_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;
Declare Function DoExVatCalc PeopleCode EX_LINE_WRK.VAT_CALC_PB FieldFormula;
Declare Function SetVATRowDefaults PeopleCode FUNCLIB_VAT.DEFAULT_FUNCTIONS FieldFormula;
Declare Function UpdateVATRowDefaults PeopleCode FUNCLIB_VAT.DEFAULT_FUNCTIONS FieldFormula;
Declare Function ShowVatFieldsExpLine PeopleCode EX_SHEET_LINE.TXN_LOCATION FieldChange;
Declare Function ExpenseItemInitExchange PeopleCode FUNCLIB_EX.SHEET_LINE_DTL FieldFormula;
Declare Function get_per_diem_row PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function get_auth_amt_varient PeopleCode FUNCLIB_EX.EE_LOCAMT_COMMENT FieldFormula;
Declare Function deduct_for_meals_provided PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function SH_PER_DIEM_RANGE PeopleCode EX_SHEET_LINE.EXPENSE_TYPE FieldChange;

Component number &rownum;
Component array of string &Transport_ID_Array, &Tot_Dist_Flag_Array, &Transport_ID_Calc_Array;
Component array of number &Tot_Distance_Array, &Calendar_Array;
Component array of number &Tot_Distance_Calc_Array;
Component string &Dist_Array_Flag, &Prior_Trans_Id, &Prior_Flag;
Component number &prior_distance, &Prior_Transp_ID_Dist;
Component date &DefTransDate;
Local Rowset &pnlbuf, &rsSheetLine, &pd_rs;
Local Row &sheet_line_rs;
Local Record &sheet_line_rec, &transport_rec;
Local number &numDistance;

Function CalcSheetFromThru();
   &LINECOUNT = ActiveRowCount(Record.EX_SHEET_LINE);
   EX_HDR_WRK.FROM_DT = FetchValue(EX_SHEET_LINE.TRANS_DT, 1);
   EX_HDR_WRK.THRU_DATE = FetchValue(EX_SHEET_LINE.TRANS_DT, 1);
   For &ROW = 2 To &LINECOUNT
      &THEDATE = FetchValue(EX_SHEET_LINE.TRANS_DT, &ROW);
      If &THEDATE < EX_HDR_WRK.FROM_DT Then
         EX_HDR_WRK.FROM_DT = &THEDATE;
      Else
         If &THEDATE > EX_HDR_WRK.THRU_DATE Then
            EX_HDR_WRK.THRU_DATE = &THEDATE;
         End-If;
      End-If;
   End-For;
End-Function;

Function Retrieve_Merchant()
   If %Component = "EX_SHEET_APPR" Or
         %Component = "TE_EXP_SHEET_INQ" Or
         %Component = "TE_EXPENSE_SHEET" Or
         %Component = "TE_EXPENSE_SHEET2" Or
         %Component = "TE_UNPOSTED_SHEET" Or
         %Component = "TE_VERIFY_EXP_RCPT" Then
      EX_LINE_WRK.EFFDT = EX_SHEET_LINE.TRANS_DT;
   End-If;
End-Function;


/** If Trans_dt changed, then reapply auto rate in case it changed **/

&sheet_line_rs = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE)(&rownum);
&sheet_line_rec = &sheet_line_rs.GetRecord(Record.EX_SHEET_LINE);
&TRANSPORT_ID = &sheet_line_rec.TRANSPORT_ID.Value;

&transport_rec = &sheet_line_rs.GetRecord(Record.EX_EE_TRANSPORT);
&TRANSPORT_TYPE = &transport_rec.TRANSPORT_TYPE.Value;
&EMPLID = FetchValue(EX_SHEET_HDR.EMPLID);
&COUNTRY = FetchValue(BUS_UNIT_TBL_EX.COUNTRY);
&SETID = GetSetId("BUSINESS_UNIT", EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_AUTO_RT_DTL", "");
&EXPENSE_TYPE = FetchValue(EX_SHEET_LINE.EXPENSE_TYPE, &rownum);
&CURRENCY_CD = FetchValue(BUS_UNIT_TBL_EX.BASE_CURRENCY);
&CUR_CD_TO = EX_SHEET_LINE.TXN_CURRENCY_CD;
&RT_TYPE = EX_SHEET_LINE.RT_TYPE;
&TRANS_DT = FetchValue(EX_SHEET_LINE.TRANS_DT, &rownum);
If None(&TRANS_DT) Then
   &TRANS_DT = %Date;
End-If;

&Rate_Rec_Wrk = "EX_LINE_WRK";
&Rate_Rec = "EX_SHEET_LINE";

If EX_TYPES_TBL.EXPENSE_TYPE_EDIT = "AUT" Then
   &numDistance = &sheet_line_rs.EX_LINE_WRK.MILES.Value;
   If None(&numDistance) Then
      &numDistance = &sheet_line_rs.EX_LINE_WRK.KILOMETERS.Value;
   End-If;
   &Prior_Transp_ID_Dist = 0;
   &Prior_Trans_Id = "";
   
   Rate_Calc_Main(&rownum, &Rate_Rec_Wrk, &Rate_Rec, &Transport_ID_Array, &Tot_Distance_Array, &Tot_Dist_Flag_Array, &Transport_ID_Calc_Array, &Tot_Distance_Calc_Array, &Dist_Array_Flag, &numDistance, &Prior_Transp_ID_Dist, &Prior_Trans_Id, &TRANSPORT_ID, &TRANSPORT_TYPE, &EMPLID, &COUNTRY, &SETID, &EXPENSE_TYPE, &CURRENCY_CD, &TRANS_DT, &Prior_Flag, &DISTANCE_TYPE, &Calendar_Array, &RT_TYPE, &CUR_CD_TO);
End-If;

/** ------------ Get Julian day for Transaction Date------------- **/

&pnlbuf = GetLevel0();
&rsSheetLine = &pnlbuf(1).GetRowset(Scroll.EX_SHEET_LINE);

If All(EX_SHEET_LINE.TRANS_DT.Value) Then
   EX_SHEET_LINE.TRANS_DT_JULIAN = Abs(Days(EX_SHEET_LINE.TRANS_DT) - Days(Date(Substring(String(EX_SHEET_LINE.TRANS_DT), 1, 4) | "-01-01"))) + 1;
End-If;

/* Clean up per diem deductions and recalculate amts if the new trans dt refers to a new eff dt in per diem setup */

If &rsSheetLine(CurrentRowNumber()).EX_TYPES_TBL.EXPENSE_TYPE_EDIT.Value = "PDM" Then
   &pd_rs = GetRowset(Record.EX_SHEET_LN_PD);
   If All(&pd_rs.GetRow(1).GetRecord(Record.EX_SHEET_LN_PD).GetField(Field.EXPENSE_TYPE1).Value) Then
      &SETID = GetSetId("BUSINESS_UNIT", EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_TYPE_PERDIEM", "");
      &exp_type = &sheet_line_rec.EXPENSE_TYPE.Value;
      &sheet_id = &sheet_line_rec.SHEET_ID.Value;
      &line_nbr = &sheet_line_rec.LINE_NBR.Value;
      &TRANS_DT = &sheet_line_rec.TRANS_DT.Value;
      &Sql = CreateSQL("select A.EXPENSE_TYPE1, A.DEDUCT_PERCENT from PS_EX_TYPE_PERDIEM A where A.SETID = :1 and A.EXPENSE_TYPE = :2 and A.EFFDT = (select max(B.EFFDT) from PS_EX_TYPE_PERDIEM B where B.SETID = A.SETID and B.EXPENSE_TYPE = A.EXPENSE_TYPE and B.EFFDT <= %DateIn(:3)) and A.DEDUCT_PERCENT > 0", &SETID, &exp_type, &TRANS_DT);
      While (&Sql.fetch(&exp_type1, &ded_perc))
         &bFound = False;
         For &i = 1 To &pd_rs.ActiveRowCount
            If &pd_rs(&i).EX_SHEET_LN_PD.EXPENSE_TYPE1.Value = &exp_type1 And
                  &pd_rs(&i).EX_SHEET_LN_PD.DEDUCT_PERCENT.Value = &ded_perc Then
               &bFound = True;
               Break;
            End-If;
         End-For;
         If Not &bFound Then
            &pd_rs.Flush();
            EX_SHEET_LINE.TXN_AMOUNT = deduct_for_meals_provided("EX_LINE_WRK", "EX_SHEET_LN_PD");
            &PRIOR_VAL = EX_SHEET_LINE.MONETARY_AMOUNT;
            calc_base_amt(&PRIOR_VAL, "Y");
            Break;
         End-If;
      End-While;
      &Sql.Close();
   End-If;
End-If;

/* populate first line of Per Diem so it won't be blank */

If &rownum = 1 And
      &rsSheetLine(1).EX_TYPES_TBL.EXPENSE_TYPE_EDIT.Value = "PDM" And
      All(&rsSheetLine(1).EX_SHEET_LINE.TRANS_DT.Value) And
      None(&rsSheetLine(1).EX_SHEET_LINE.TXN_AMOUNT.Value) Then
   
   &SETID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_PER_DIEM_DTL", "");
   &per_diem_amt = get_per_diem_row(&SETID, "EX_SHEET_LINE", &txn_amount, 1);
   &AUTH_AMT_VARIENT = get_auth_amt_varient(&per_diem_amt);
   &per_diem_amt = &per_diem_amt + &AUTH_AMT_VARIENT;
   &rsSheetLine(1).EX_SHEET_LINE.TXN_AMOUNT.Value = &per_diem_amt;
   &monetary_amount = &rsSheetLine(1).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
   If &per_diem_amt <> &monetary_amount Then
      &PRIOR_VAL = &monetary_amount;
      calc_base_amt(&PRIOR_VAL, "Y");
   End-If;
End-If;


/* Requery the default rate for the new effective date */
/* If we're using a custom rate, the actual rate used  */
/* is not updated, however, the default rate in effect */
/* on the expense date is refreshed to allow for       */
/* variance checking                                   */
ExpenseItemInitExchange(GetRow());

/* Derive Monetary amount (same as Transaction currency) and update totals and dists */
/* This should occur after the exchange rate has been reset */
&PRIOR_VAL = @(&Rate_Rec | ".MONETARY_AMOUNT");
calc_base_amt(&PRIOR_VAL, "Y");

/* Call VAT Defaults and Calculation Functions DoExVatCalc */
/* ONLY If VAT Default has been previously set in the Expense Line */

If &rsSheetLine(&rownum).EX_SHEET_LINE.VAT_DFLT_DONE_FLG.Value = "Y" Then
   If All(&rsSheetLine(&rownum).EX_SHEET_LINE.COUNTRY.Value) Then
      &rsSheetLine(&rownum).EX_SHEET_LINE.VAT_NRCVR_PRO_FLG.Value = "";
      &rsSheetLine(&rownum).EX_SHEET_LINE.VAT_AMT.Value = 0;
      &rsSheetLine(&rownum).EX_SHEET_LINE.VAT_AMT_BSE.Value = 0;
      UpdateVATRowDefaults("ExpenseSheet", GetRow(), Null);
      ShowVatFieldsExpLine(&rownum);
      If All(&rsSheetLine(&rownum).EX_SHEET_LINE.VAT_TREATMENT.Value) And
            &rsSheetLine(&rownum).EX_SHEET_LINE.VAT_TREATMENT.Value <> "NONE" Then
         DoExVatCalc(&rownum);
      End-If;
   End-If;
End-If;

/** ------------ Recalc From and Thru Dates     ------------- **/
EX_LINE_WRK.TRANS_DT = EX_SHEET_LINE.TRANS_DT;
CalcSheetFromThru();

DefaultDates(EX_SHEET_LINE.TRANS_DT);
&DefTransDate = EX_SHEET_LINE.TRANS_DT;

Retrieve_Merchant();

SH_PER_DIEM_RANGE();
/*********XL Capital BEGIN 03/31/08 **************/
&rowLine = GetRow();
&recLineWrk = &rowLine.EX_LINE_WRK;
If &rowLine.RowNumber > 1 Then
   &recPrior_WRK = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_LINE_WRK;
   REM PTA Info should not be copied for all lines if the Expense Date changes;
   &DATE_PRIOR_TRANS_DT = PriorValue(EX_SHEET_LINE.TRANS_DT, CurrentRowNumber());
   If (&DefTransDate <> &DATE_PRIOR_TRANS_DT) Then
      &recLineWrk.XFR_FLG.SetDefault();
      &recLineWrk.EXT_REF_NBR.SetDefault();
      &recLineWrk.ACTION_PLAN_DESCR.SetDefault();
   End-If;
End-If;
/*********XL Capital END 03/31/08 **************/
EX_SHEET_LINE.EXPENSE_TYPE.FieldChange
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              03/31/08           PPRAKASH       PeopleCode to copy PTA related
													   info for lines with Expense Type 
													   'AIR' or/and 'HTL' if the Expense 
												       Date is same.
**********************************************************************************/
import EX_UI:UserDefaults:*;

Declare Function GetQuoteMethod PeopleCode EXCH_RT_WRK.RATE_DIRECT FieldChange;
Declare Function Rate_Calculation_Type PeopleCode FUNCLIB_EX.AUTO_RATE FieldFormula;
Declare Function UpdateTotals PeopleCode EX_SHEET_LINE.EXPEND_MTHD FieldChange;
Declare Function amount_due_display PeopleCode EX_HDR_WRK.TOTAL_SHEET_AMT RowInit;
Declare Function display_cc_select PeopleCode EX_ICLIENT_WRK.CREDIT_CARD_SELECT RowInit;
Declare Function fetch_dflt_grp_flg PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;
Declare Function sheet_split_save PeopleCode FUNCLIB_EX.REIMBURSEMENT_AMT FieldFormula;
Declare Function txn_fields_dsply PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;
Declare Function calc_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;
Declare Function calc_split_line_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;
Declare Function BackOutExpense PeopleCode EX_SHEET_LINE.LINE_NBR RowDelete;
Declare Function display_line_fields PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function SetRequiredFieldLabels PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function get_per_diem PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function get_per_diem_lodging PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function get_type_dflt_accts PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;
Declare Function get_cat_dflt_accts PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;

Component number &rownum;
Component EX_UI:UserDefaults:ExpensePref &c_objEmpDefaults;
Component string &pd_refresh, &Prior_Dist_Init_Flag;
Component number &split_rownum;
Component Rowset &pnlbuf;
Local Rowset &sheet_rs, &line_rs, &dist_data, &trans_data;
Local Record &line_rec;
Local string &expense_type_descr;
Local boolean &bErrorFound;

/*
   Function SetLineDefaults sets the values of the expense report line based on user defaults.
   It should be called when either the expense type was changed or new lines were added through
   the Use a Template/Add Multiple Expenses pages.
*/
Function SetLineDefaults(&rowLine As Row);
   Local EX_UI:UserDefaults:ExpTypePref &objExpTypeDefaults;
   Local Record &recSheetHdr, &recHdrWrk, &recSheetLine, &recLineWrk, &recPrior, &recVATLineWrk;
   Local string &PriorPymntType, &DfltStr, &strExpTypeEdit, &SetID, &RateCalcType, &DistanceType;
   Local boolean &bHaveDefaults, &LocReqd, &OrigLocReqd, &TranspReqd, &MrchntReqd;
   
   &recSheetHdr = GetLevel0()(1).EX_SHEET_HDR;
   &recHdrWrk = GetLevel0()(1).EX_HDR_WRK;
   &recSheetLine = &rowLine.EX_SHEET_LINE;
   &recLineWrk = &rowLine.EX_LINE_WRK;
   &recVATLineWrk = &rowLine.VAT_FIELDS_WRK;
   
   /*
      Initialize fields back to blank/zero or to the values from the prior row before applying
      any user defaults.
   */
   If &rowLine.RowNumber > 1 Then
      &recPrior = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_SHEET_LINE;
      /*********XL Capital BEGIN 03/31/08 **************/
      &recPrior_WRK = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_LINE_WRK;
      /*********XL Capital END 03/31/08 **************/
      &recSheetLine.TRANS_DT.Value = &recPrior.TRANS_DT.Value;
      &recSheetLine.TRANS_DT_JULIAN.Value = &recPrior.TRANS_DT_JULIAN.Value;
      /*********XL Capital BEGIN 03/31/08 **************/
      REM PTA Info should be copied for all lines with same Expense Date;
      &ExpTypeEdit = &recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
      If (&ExpTypeEdit = "AIR") Or
            (&ExpTypeEdit = "HTL") Then
         &recLineWrk.XFR_FLG.Value = &recPrior_WRK.XFR_FLG.Value;
         If (&recLineWrk.XFR_FLG.Value = "Y") Then
            &recLineWrk.EXT_REF_NBR.Value = &recPrior_WRK.EXT_REF_NBR.Value;
         Else
            &recLineWrk.ACTION_PLAN_DESCR.Value = &recPrior_WRK.ACTION_PLAN_DESCR.Value;
         End-If;
      End-If;
      /*********XL Capital END 03/31/08 **************/
   Else
      &recSheetLine.TRANS_DT.SetDefault();
      &recSheetLine.TRANS_DT_JULIAN.SetDefault();
      /*********XL Capital BEGIN 03/31/08 **************/
      &recLineWrk.XFR_FLG.SetDefault();
      &recLineWrk.EXT_REF_NBR.SetDefault();
      &recLineWrk.ACTION_PLAN_DESCR.SetDefault();
      /*********XL Capital END 03/31/08 **************/
   End-If;
   
   &recSheetHdr.VAT_RECEIPT.SetDefault();
   
   &recSheetLine.COUNTRY.Value = BUS_UNIT_TBL_EX.COUNTRY;
   
   &recSheetLine.TXN_AMOUNT.SetDefault();
   &recSheetLine.MONETARY_AMOUNT.SetDefault();
   
   &recSheetLine.TXN_CURRENCY_CD.Value = &recSheetLine.CURRENCY_CD.Value;
   &recSheetLine.TXN_CURRENCY_CD1.Value = &recSheetLine.CURRENCY_CD.Value;
   &recSheetLine.CURRENCY_CD1.Value = &recSheetLine.CURRENCY_CD.Value;
   &recLineWrk.TXN_CURRENCY_CD.Value = &recSheetLine.CURRENCY_CD.Value;
   &recLineWrk.CURRENCY_CD.Value = &recSheetLine.CURRENCY_CD.Value;
   
   &recLineWrk.VISUAL_RATE_CUR.Value = 1;
   /* &recLineWrk.VISUAL_RATE_CUR.Enabled = False; */
   &recLineWrk.VISUAL_RATE_CUR.Enabled = True;
   &recSheetLine.RT_TYPE.SetDefault();
   &recSheetLine.RATE_MULT.Value = 1;
   &recSheetLine.RATE_DIV.Value = 1;
   GetQuoteMethod(&recSheetLine.TXN_CURRENCY_CD.Value, &recSheetLine.CURRENCY_CD.Value);
   
   &recSheetLine.GROSSUP.Value = "N";
   &recSheetLine.GROSS_UP_EST_AMT.SetDefault();
   
   &recSheetLine.DESCR254.SetDefault();
   &recSheetLine.PERSONAL_EXPENSE.Value = "N";
   &recSheetLine.NO_RECEIPT_FLG.Value = "N";
   &recSheetLine.SHEET_RCPT_NUM.SetDefault();
   &recSheetLine.SHEET_RCPT_TOTAL.SetDefault();
   &recSheetLine.TRAVEL_AUTH_ID.SetDefault();
   
   &recSheetLine.MERCHANT_CD.SetDefault();
   &recSheetLine.MERCHANT.SetDefault();
   &recSheetLine.PREF_MRCHNT_FLG.Value = "N";
   
   &recSheetLine.AIRFARE_RCPT_NBR.SetDefault();
   
   &recSheetLine.OUT_OF_POLICY.Value = "N";
   &recSheetLine.PREF_MRCH_NOT_USED.Value = "N";
   &recSheetLine.DUPLICATES_EXIST.Value = "N";
   &recSheetLine.CC_FEED_FLG.Value = "N";
   &recSheetLine.CRDMEM_ACCT_NBR.SetDefault();
   &recLineWrk.CHECKOUT_DATE_FLAG.Value = "N";
   
   &recSheetLine.EE_LOCAMT_COMMENT.SetDefault();
   &recSheetLine.EE_NORCPT_COMMENT.SetDefault();
   &recSheetLine.EE_PRFMRC_COMMENT.SetDefault();
   &recSheetLine.EE_DPLCAT_COMMENT.SetDefault();
   &recSheetLine.EX_CREDIT_REF.SetDefault();
   
   &recSheetLine.VAT_DFLT_DONE_FLG.Value = "N";
   &recLineWrk.VAT_BASIS_AMT.SetDefault();
   &recLineWrk.VAT_CALC_AMT.SetDefault();
   &recLineWrk.VAT_CALC_PB.SetDefault();
   &recSheetLine.VAT_ENTRD_AMT.SetDefault();
   If Len(%CompIntfcName) = 0 Then
      &recSheetLine.VAT_AUTO_CALC_FLG.Value = "Y";
   End-If;
   &recSheetLine.VAT_RECEIPT.Value = "N";
   &recSheetLine.PHYSICAL_NATURE.SetDefault();
   &recSheetLine.TAX_CD_VAT.SetDefault();
   &recSheetLine.TAX_CD_VAT_PCT.SetDefault();
   &recSheetLine.VAT_AMT.SetDefault();
   &recSheetLine.VAT_AMT_BSE.SetDefault();
   &recSheetLine.VAT_APPLICABILITY.SetDefault();
   &recSheetLine.VAT_NRCVR_ALL_FLG.SetDefault();
   &recSheetLine.VAT_NRCVR_PRO_FLG.SetDefault();
   &recSheetLine.VAT_RECLAIM_PCT.SetDefault();
   &recSheetLine.VAT_RCLM_AMT.SetDefault();
   &recSheetLine.VAT_RCLM_AMT_BSE.SetDefault();
   &recSheetLine.VAT_ROUND_RULE.SetDefault();
   &recSheetLine.VAT_TREATMENT.SetDefault();
   &recSheetLine.VAT_TXN_TYPE_CD.SetDefault();
   &recSheetLine.VAT_USE_ID.SetDefault();
   For &i = 1 To &recVATLineWrk.FieldCount
      &recVATLineWrk.GetField(&i).SetDefault();
   End-For;
   
   
   &recLineWrk.VALIDATE_FLG.Value = "N";
   &recLineWrk.ERROR_PB.Visible = False;
   &rowLine.GetRowset(Scroll.EX_SHEET_ERROR).Flush();
   
   &recSheetLine.OVRRIDE_SPLT_SW.Value = "N";
   
   &rowLine.GetRowset(Scroll.EX_SHEET_DIST).Flush();
   &rowLine.GetRowset(Scroll.EX_SHEET_ATT).Flush();
   
   /* Fetch user defaults if not already done so. */
   
   If &c_objEmpDefaults = Null Then
      &c_objEmpDefaults = create EX_UI:UserDefaults:ExpensePref(1);
   End-If;
   
   If &c_objEmpDefaults.IsLoaded = False Then
      &bHaveDefaults = &c_objEmpDefaults.LoadForEmployee(&recSheetHdr.EMPLID.Value, "S");
   End-If;
   
   /*
      Apply user defaults to the expense line.  Note that we will always overwrite any previously
      defaulted values or values entered by the user.  Save off the current payment type for use
      later in setting the reimbursement code.
   */
   &PriorPymntType = &recSheetLine.EXPEND_MTHD.Value;
   &recSheetLine.EXPEND_MTHD.Value = &c_objEmpDefaults.ExpendMethod;
   
   &recSheetLine.BILL_CODE_EX.Value = &c_objEmpDefaults.ExpenseBillCode;
   If None(&recSheetLine.BILL_CODE_EX.Value) Then
      If &rowLine.RowNumber > 1 Then
         &recPrior = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_SHEET_LINE;
         &recSheetLine.BILL_CODE_EX.Value = &recPrior.BILL_CODE_EX.Value;
      Else
         &recSheetLine.BILL_CODE_EX.Value = &recHdrWrk.BILL_CODE_EX.Value;
      End-If;
   End-If;
   
   &LocReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.LOC_REQD_FLG).Value = "Y");
   If &LocReqd Then
      &recSheetLine.TXN_LOCATION.Value = &recSheetHdr.TXN_LOCATION.Value;
      
      If None(&recSheetLine.TXN_LOCATION.Value) Then
         &recSheetLine.TXN_LOCATION.Value = &c_objEmpDefaults.ExpenseLocation;
      End-If;
      
      If None(&recSheetLine.TXN_LOCATION.Value) And
            &rowLine.RowNumber > 1 Then
         &recPrior = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_SHEET_LINE;
         &recSheetLine.TXN_LOCATION.Value = &recPrior.TXN_LOCATION.Value;
      End-If;
   Else
      &recSheetLine.TXN_LOCATION.SetDefault();
   End-If;
   
   &OrigLocReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.TRAVEL_FROM_FLG).Value = "Y");
   If &OrigLocReqd Then
      &recSheetLine.TRAVEL_FROM.Value = &c_objEmpDefaults.TravelFrom;
   Else
      &recSheetLine.TRAVEL_FROM.SetDefault();
   End-If;
   
   &strExpTypeEdit = &recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
   
   If &strExpTypeEdit = "AUT" Then
      &TranspReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.TRANSPORT_TYPE_FLG).Value = "Y");
      If &TranspReqd Then
         &recSheetLine.TRANSPORT_ID.Value = &c_objEmpDefaults.TransportID;
         &recSheetLine.TRANSPORT_TYPE.Value = &recSheetLine.TRANSPORT_ID.GetRelated(EX_EE_TRANSPORT.TRANSPORT_TYPE).Value;
         If &recSheetLine.TRANSPORT_ID.Value <> "" Then
            &Prior_Dist_Init_Flag = "Y";
         End-If;
      Else
         &SetID = GetSetId(Field.BUSINESS_UNIT_GL, &recSheetHdr.BUSINESS_UNIT_GL.Value, Record.EX_AUTO_RT_TBL, "");
         
         Rate_Calculation_Type(&SetID, &recSheetLine.EXPENSE_TYPE.Value, &recSheetHdr.COUNTRY.Value, %Date, &RateCalcType, &DistanceType);
         
         If &RateCalcType = "V" Then
            &recSheetLine.TRANSPORT_ID.Value = &c_objEmpDefaults.TransportID;
            &recSheetLine.TRANSPORT_TYPE.Value = &recSheetLine.TRANSPORT_ID.GetRelated(EX_EE_TRANSPORT.TRANSPORT_TYPE).Value;
            If &recSheetLine.TRANSPORT_ID.Value <> "" Then
               &Prior_Dist_Init_Flag = "Y";
            End-If;
         Else
            &recSheetLine.TRANSPORT_ID.SetDefault();
            &recSheetLine.TRANSPORT_TYPE.SetDefault();
         End-If;
      End-If;
   Else
      &recSheetLine.TRANSPORT_ID.SetDefault();
      &recSheetLine.TRANSPORT_TYPE.SetDefault();
   End-If;
   
   &recSheetLine.DISTANCE_TYPE.SetDefault();
   &recSheetLine.DISTANCE_RT.SetDefault();
   &recLineWrk.DISTANCE_RT.SetDefault();
   &recSheetLine.DISTANCE.SetDefault();
   &recLineWrk.KILOMETERS.SetDefault();
   &recLineWrk.MILES.SetDefault();
   &recSheetLine.NBR_PASSENGERS.SetDefault();
   /*   &recSheetLine.NBR_DAYS.SetDefault(); */
   If &strExpTypeEdit = "HTL" Then
      &recSheetLine.NBR_NIGHTS.Value = &c_objEmpDefaults.NumberNights;
   Else
      &recSheetLine.NBR_NIGHTS.SetDefault();
   End-If;
   
   If &strExpTypeEdit = "PDM" Then
      &DfltStr = &c_objEmpDefaults.RangeID;
      If &DfltStr <> &recSheetLine.RANGE_SEQ.Value Then
         &recSheetLine.RANGE_SEQ.Value = &DfltStr;
         &pd_refresh = "Y";
      End-If;
   Else
      &recSheetLine.RANGE_SEQ.SetDefault();
   End-If;
   &recSheetLine.STARTTM_PERDIEM.Value = TimeValue("00:00:00 AM");
   &recSheetLine.ENDTM_PERDIEM.Value = TimeValue("23:59:59 PM");
   &rowLine.GetRowset(Scroll.EX_SHEET_LN_PD).Flush();
   
   /*
      Apply defaults set up (if any) for the particular expense type (i.e. merchant, payment
      type, and billing action).
   */
   &objExpTypeDefaults = &c_objEmpDefaults.ExpTypePrefs.Find(&recSheetLine.EXPENSE_TYPE.Value);
   
   If &objExpTypeDefaults <> Null Then
      &MrchntReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.MERCHANT_REQD_FLG).Value = "Y");
      If &MrchntReqd Then
         &recSheetLine.MERCHANT_CD.Value = &objExpTypeDefaults.MerchantCode;
         &recSheetLine.MERCHANT.Value = &objExpTypeDefaults.Merchant;
         &recSheetLine.PREF_MRCHNT_FLG.Value = &objExpTypeDefaults.UsePreferredMerchant;
      End-If;
      
      &DfltStr = &objExpTypeDefaults.PaymentMethod;
      If All(&DfltStr) Then
         &recSheetLine.EXPEND_MTHD.Value = &DfltStr;
      End-If;
      
      &DfltStr = &objExpTypeDefaults.BillingAction;
      If All(&DfltStr) Then
         &recSheetLine.BILL_CODE_EX.Value = &DfltStr;
      End-If;
   End-If;
   
   &recSheetLine.BILLING_ACTION.Value = &recSheetLine.BILL_CODE_EX.GetRelated(EX_BILL_CD_TBL.BILLING_ACTION).Value;
   
   If &recSheetLine.EXPEND_MTHD.Value <> &PriorPymntType Then
      &recLineWrk.EXPEND_MTHD.Value = &recSheetLine.EXPEND_MTHD.Value;
      &recLineWrk.EXPEND_MTHD_EDIT.Value = &recSheetLine.EXPEND_MTHD.GetRelated(EX_EXP_MTHD_TBL.EXPEND_MTHD_EDIT).Value;
      
      /* Set the reimbursement code based on the payment type edit. */
      If &recLineWrk.EXPEND_MTHD_EDIT.Value = "PPD" Or
            &recLineWrk.EXPEND_MTHD_EDIT.Value = "PPA" Or
            &recLineWrk.EXPEND_MTHD_EDIT.Value = "PPH" Then
         
         &recSheetLine.PERSONAL_EXPENSE.Enabled = False;
         &recSheetLine.REIMBURSEMENT_CD.Value = "P";
      Else
         &recSheetLine.PERSONAL_EXPENSE.Enabled = True;
         &recSheetLine.REIMBURSEMENT_CD.Value = "R";
      End-If;
      
      /* Display the credit card select icon if reimbursement recipient is the vendor. */
      display_cc_select();
   End-If;
   
   /* Reset field styles back to the default in case there were errors on the line. */
   &recSheetLine.TRANS_DT.Style = "";
   &recSheetLine.TXN_AMOUNT.Style = "";
   &recSheetLine.EXPEND_MTHD.Style = "";
   &recSheetLine.DESCR254.Style = "";
   &rowLine.EX_LOCATION_VW.DESCR.Style = "";
   &rowLine.EX_LOCATION_VW5.DESCR.Style = "";
   &recSheetLine.MERCHANT_CD.Style = "";
   &recSheetLine.AIRFARE_RCPT_NBR.Style = "";
   &recSheetLine.NBR_NIGHTS.Style = "";
   &recSheetLine.TRANSPORT_ID.Style = "";
   &recLineWrk.KILOMETERS.Style = "";
   &recLineWrk.MILES.Style = "";
   &recSheetLine.NBR_PASSENGERS.Style = "";
   &recSheetLine.RANGE_SEQ.Style = "";
   &recSheetLine.STARTTM_PERDIEM.Style = "";
   &recSheetLine.ENDTM_PERDIEM.Style = "";
   &recSheetLine.VAT_ENTRD_AMT.Style = "";
   &recLineWrk.VISUAL_RATE_CUR.Style = "";
End-Function;

/** if chart field values are present on the expense type/group, **/
/** then use the expense type/group chartfields as the defaults.  **/
Function dflt_dists(&rownum)
   
   /* If Wizard, use the newly generated line. */
   If %Page = Page.TE_WIZARD_FINISH Then
      &rownum = &line_rs.ActiveRowCount;
   End-If;
   
   sheet_split_save(&rownum, "SHEET");
End-Function;

/* Get the account and alt-account and then update the distribution records when the ovrride-splt-sw = "Y" */
Function dflt_accts(&rownum)
   &sheet_rs = GetLevel0();
   &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
   
   
   &expense_type = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.Value;
   &expense_type_group = &line_rs(&rownum).EX_TYPES_TBL.EXPENSE_TYPE_GROUP.Value;
   &bill_code_ex = &line_rs(&rownum).EX_SHEET_LINE.BILL_CODE_EX.Value;
   &dflt_frm_grp_flg = fetch_dflt_grp_flg(&sheet_rs(1).EX_SHEET_HDR.BUSINESS_UNIT_GL.Value, &expense_type, &bill_code_ex, "N");
   If &dflt_frm_grp_flg = "Y" Then
      get_cat_dflt_accts(&expense_type_group, &bill_code_ex, "N", "SHEET", &EXP_ACCT, &EXP_ALTACCT);
   Else
      get_type_dflt_accts(&expense_type, &bill_code_ex, "N", "SHEET", &EXP_ACCT, &EXP_ALTACCT);
   End-If;
   For &i = 1 To ActiveRowCount(Record.EX_SHEET_LINE, &rownum, Record.EX_SHEET_DIST);
      &line_rs(&rownum).GetRowset(Scroll.EX_SHEET_DIST)(&i).EX_SHEET_DIST.ACCOUNT.Value = &EXP_ACCT;
      &line_rs(&rownum).GetRowset(Scroll.EX_SHEET_DIST)(&i).EX_SHEET_DIST.ALTACCT.Value = &EXP_ALTACCT;
      
   End-For;
End-Function;

Function expense_processing(&rownum)
   
   &sheet_rs = GetLevel0();
   &rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
   &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
   
   If Len(%CompIntfcName) > 0 Then
      &rownum = CurrentRowNumber();
   End-If;
   &line_rec = &line_rs(&rownum).GetRecord(Record.EX_SHEET_LINE);
   &line_wrk_rec = &line_rs(&rownum).GetRecord(Record.EX_LINE_WRK);
   &dist_data = &line_rs(&rownum).GetRowset(Scroll.EX_SHEET_DIST);
   
   &line_wrk_rec.EXPENSE_TYPE.Value = &line_rec.EXPENSE_TYPE.Value;
   &line_rec.DISTANCE_TYPE.Value = &line_wrk_rec.DISTANCE_TYPE.Value;
   &line_rec.GROSSUP.Value = &line_rs(&rownum).EX_TYPES_TBL.GROSSUP.Value;
   
   /*
      Initialize VAT_DFLT_DONE_FLG to "N" so that VAT defaulting/calculations are performed for
      the expense line and associated distribution lines.  Also initialize other VAT fields as
      appropriate.
   */
   &line_rec.VAT_DFLT_DONE_FLG.Value = "N";
   &line_wrk_rec.VAT_CALC_AMT.SetDefault();
   If Len(%CompIntfcName) = 0 Then
      &line_rec.VAT_ENTRD_AMT.SetDefault();
      &line_rec.VAT_AUTO_CALC_FLG.Value = "Y";
   End-If;
   
   &expense_type_edit = &line_rs(&rownum).EX_TYPES_TBL.EXPENSE_TYPE_EDIT.Value;
   txn_fields_dsply(&expense_type_edit, &rownum, "SHEET");
   
   /* Type Edit */
   &line_rs(&rownum).EX_LINE_WRK.TOLERANCE_FLG.Visible = False;
   &loc_reqd_flg = &line_rs(&rownum).EX_TYPES_TBL.LOC_REQD_FLG.Value;
   If &loc_reqd_flg = "N" Then
      &line_rs(&rownum).EX_SHEET_LINE.TXN_LOCATION.Value = "";
   End-If;
   
   &MERCHANT_REQD_FLG = &line_rs(&rownum).EX_TYPES_TBL.MERCHANT_REQD_FLG.Value;
   If &MERCHANT_REQD_FLG = "N" Then
      &line_rs(&rownum).EX_SHEET_LINE.MERCHANT_CD.Value = "";
      &line_rs(&rownum).EX_SHEET_LINE.MERCHANT.Value = "";
   End-If;
   
   If Len(%CompIntfcName) = 0 Then
      If &expense_type_edit = "PDM" Then
         &txn_amount = &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value;
         &expense_type = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.Value;
         &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_PER_DIEM_DTL", "");
         &per_diem_amt = get_per_diem(&SetID, "EX_SHEET_LINE", &txn_amount);
         &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &per_diem_amt;
         &line_rs(&rownum).EX_LINE_WRK.PER_DIEM_AMT.Value = &per_diem_amt;
         &monetary_amount = &line_rs(&rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
         If &per_diem_amt <> &monetary_amount Then
            &prior_val = &monetary_amount;
            calc_base_amt(&prior_val, "N");
            If %Page = Page.TE_RCPT_SPLIT Then
               If &split_rownum = &rownum Then
                  &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value = &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value + &per_diem_amt;
                  &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value = &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value - &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value;
                  &expense_type_descr = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.DESCR).Value;
                  &page_title = MsgGetText(10504, 258, "Message Not Found", &expense_type_descr) | " " | &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  If &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value <> 0 Then
                     &page_title = &page_title | ", " | MsgGetText(10504, 271, "Message Not Found") | " " | &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  End-If;
               Else
                  &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value - &per_diem_amt;
                  &prior_val = &line_rs(&split_rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
                  calc_split_line_base_amt(&prior_val, "N");
               End-If;
            End-If;
         End-If;
      Else
         &line_rs(&rownum).EX_SHEET_LINE.BREAKFAST_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.LUNCH_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.DINNER_FLG.SetDefault();
      End-If;
   End-If;
   
   If Len(%CompIntfcName) = 0 Then
      If &expense_type_edit = "PDL" Then
         &txn_amount = &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value;
         &expense_type = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.Value;
         &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_PER_DIEM_DTL", "");
         &per_diem_amt = get_per_diem_lodging(&SetID, "EX_SHEET_LINE", &txn_amount);
         &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &per_diem_amt;
         &line_rs(&rownum).EX_LINE_WRK.PER_DIEM_AMT.Value = &per_diem_amt;
         &monetary_amount = &line_rs(&rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
         If &per_diem_amt <> &monetary_amount Then
            &prior_val = &monetary_amount;
            calc_base_amt(&prior_val, "N");
            If %Page = Page.TE_RCPT_SPLIT Then
               If &split_rownum = &rownum Then
                  &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value = &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value + &per_diem_amt;
                  &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value = &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value - &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value;
                  &expense_type_descr = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.DESCR).Value;
                  &page_title = MsgGetText(10504, 258, "Message Not Found", &expense_type_descr) | " " | &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  If &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value <> 0 Then
                     &page_title = &page_title | ", " | MsgGetText(10504, 271, "Message Not Found") | " " | &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  End-If;
               Else
                  &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value - &per_diem_amt;
                  &prior_val = &line_rs(&split_rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
                  calc_split_line_base_amt(&prior_val, "N");
               End-If;
            End-If;
         End-If;
      Else
         &line_rs(&rownum).EX_SHEET_LINE.BREAKFAST_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.LUNCH_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.DINNER_FLG.SetDefault();
      End-If;
   End-If;
   
   If &line_rs(&rownum).EX_SHEET_LINE.OVRRIDE_SPLT_SW.Value = "N" Then
      dflt_dists(&rownum);
   Else
      dflt_accts(&rownum);
   End-If;
   
   &txn_location = &line_rec.TXN_LOCATION.Value;
   If &txn_location = "" Then
      &line_rec.TXN_LOCATION.GetRelated(EX_LOCATION_VW.DESCR).Value = EX_LOCATION_VW2.DESCR;
   End-If;
End-Function;

Function SH_PER_DIEM_RANGE;
   Local string &PER_DIEM_TBL_FLG;
   Local string &SETID_EX_TYPE;
   
   &SETID_EX_TYPE = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_TYPES_TBL", "");
   
   &PER_DIEM_TBL_FLG = " ";
   
   If Not None(EX_SHEET_LINE.TRANS_DT) Then
      SQLExec("SELECT A.PER_DIEM_TBL_FLG FROM PS_EX_TYPES_TBL A WHERE A.SETID = :1 AND A.EXPENSE_TYPE = :2 AND A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_EX_TYPES_TBL B WHERE B.SETID = A.SETID AND B.EXPENSE_TYPE = A.EXPENSE_TYPE AND B.EFFDT <= %DATEIN(:3)) AND A.EFF_STATUS = 'A'", &SETID_EX_TYPE, EX_SHEET_LINE.EXPENSE_TYPE, EX_SHEET_LINE.TRANS_DT, &PER_DIEM_TBL_FLG);
   End-If;
   
   If None(&PER_DIEM_TBL_FLG) Or
         &PER_DIEM_TBL_FLG = "L" Then
      Hide(EX_SHEET_LINE.RANGE_SEQ);
   Else
      UnHide(EX_SHEET_LINE.RANGE_SEQ);
   End-If;
End-Function;

/*------------------ Begin of Main Code ------------------*/
&bErrorFound = False;

If Len(%CompIntfcName) = 0 Then
   If Not GetRow().IsNew Then
      EX_SHEET_LINE.EXPENSE_TYPE.Value = PriorValue(EX_SHEET_LINE.EXPENSE_TYPE);
      MessageBox(%MsgStyle_OK, "", 10502, 206, "This expense has already been saved; expense type cannot be changed.");
      &bErrorFound = True;
   Else
      If None(EX_SHEET_LINE.EXPENSE_TYPE) Then
         EX_SHEET_LINE.EXPENSE_TYPE.Value = PriorValue(EX_SHEET_LINE.EXPENSE_TYPE);
         MessageBox(%MsgStyle_OK, "", 10502, 87, "Expense type is required; delete the expense line if it is no longer needed.");
         &bErrorFound = True;
      End-If;
   End-If;
   
   If Not &bErrorFound Then
      &trans_data = &pnlbuf.GetRow(1).GetRowset(Scroll.EX_TRANS);
      &recLine = GetRow().GetRecord(Record.EX_SHEET_LINE);
      For &i = 1 To &trans_data.ActiveRowCount
         &sheet_ID = &trans_data(&i).EX_TRANS.SHEET_ID.Value;
         &line_nbr = &trans_data(&i).EX_TRANS.LINE_NBR.Value;
         If &sheet_ID = &recLine.SHEET_ID.Value And
               &line_nbr = &recLine.LINE_NBR.Value Then
            EX_SHEET_LINE.EXPENSE_TYPE.Value = PriorValue(EX_SHEET_LINE.EXPENSE_TYPE);
            MessageBox(%MsgStyle_OK, "", 10502, 373, "This is an expense populated from My Wallet; expense type cannot be changed.");
            &bErrorFound = True;
         End-If;
      End-For;
   End-If;
   
End-If;

If Not &bErrorFound Then
   BackOutExpense( False, PriorValue(EX_SHEET_LINE.EXPENSE_TYPE), GetRow());
   
   &rownum = GetRow().RowNumber;
   If Len(%CompIntfcName) = 0 Then
      SetLineDefaults(GetRow());
   End-If;
   expense_processing(&rownum);
   display_line_fields(&rownum);
   SetRequiredFieldLabels();
   
   /* Expense report entry has started; hide the creation option hyperlinks. */
   EX_ICLIENT_WRK.START_DROPDOWN.Visible = False;
   EX_ICLIENT_WRK.GO_PB2.Visible = False;
   
   SetCursorPos(Page.EX_SHEET_ENTRY, EX_SHEET_LINE.TRANS_DT, &rownum);
End-If;

SH_PER_DIEM_RANGE();
EX_LINE_WRK.EXPENSE_TYPE.FieldChange
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       Added code to Hide/Unhide columns
                                                       based on user Inputs  
**********************************************************************************/

import EX_UI:ApproveTransactions:ProfileAttributes:ProfileAttributes;

Declare Function Rate_Calculation_Type PeopleCode FUNCLIB_EX.AUTO_RATE FieldFormula;
Declare Function get_per_diem_type PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function standard_dist_rt PeopleCode FUNCLIB_EX.AUTO_RATE FieldFormula;
Declare Function cc_count PeopleCode FUNCLIB_EX.CRDMEM_ACCT_NBR FieldFormula;
Declare Function ShowVatFieldsExpLine PeopleCode EX_SHEET_LINE.TXN_LOCATION FieldChange;
Declare Function IsHideAllRoleVATOptions PeopleCode EX_SHEET_LINE.TXN_LOCATION FieldChange;

Component number &rownum;

Component Rowset &comp_line_rs;
Component array of number &RequiredFieldCountArray;
Component string &country, &c_strAcctDisplay, &c_strExEntryMethod;
Component boolean &BUIsVatEnabled;
Component string &ReturnPageEX;
Component EX_UI:ApproveTransactions:ProfileAttributes:ProfileAttributes &ProfileAttr;

Local Row &line_row;
Local Record &line_rec, &line_rec_wrk, &line_rec_icon;
Local string &PaymentTypeEdit;
Local number &MinRcptAmt, &CreditCardCount;


/*
   The following function "backs out" all required fields that were last specified for the expense
   line.  Note that the fields processed are only those that may or may not be required based on
   the expense type edit, and if the ShowRequiredFieldCue is true for the field, the function sets
   it back to false and decrements the appropriate array element.  (See the chart below for the
   mapping between array element and field).

   This function should be called when an expense line is deleted (EX_SHEET_LINE.LINE_NBR RowDelete),
   when expense type is changed (EX_SHEET_LINE.EXPENSE_TYPE FieldChange, through function call to
   display_line_fields), and from function display_line below (which is used to hide/unhide the
   appropriate fields for the expense line based on the expense type edit).  An assumption here is
   that function display_line_fields or display_line is always called for each expense line at some
   point prior to the display of the expense entry pages.

   Array Element      Field
   =============      =====
   1                  DESCR254 (description)
   2                  EX_LOCATION_VW.DESCR (location)
   3                  EX_LOCATION_VW5.DESCR (originating location)
   4                  EX_LABELS_WRK.MERCHANT (merchant)
   5                  AIRFARE_RCPT_NBR (airfare ticket number)
   6                  NBR_NIGHTS (hotel number of nights)
   7                  TRANSPORT_ID (transport ID)
   8                  EX_LINE_WRK.KILOMETERS (distance in kilometers)
   9                  EX_LINE_WRK.MILES (distance in miles)
   10                 NBR_PASSENGERS (number of passengers)
   11                 RANGE_SEQ (per diem range)
   12                 STARTTM_PERDIEM/ENDTM_PERDIEM (per diem start and end times)

   The above array keeps track of the number of expense lines where the particular field is
   required.  If the array element is > 0, then we know we have to turn on the required field
   cue (i.e. put an asterisk in front of the grid column label).
*/
Function BackOutRequiredFields(&Row_Line As Row);
   Local Record &Rec_Line;
   
   &Rec_Line = &Row_Line.EX_SHEET_LINE;
   
   If &Rec_Line.DESCR254.ShowRequiredFieldCue Then
      &Rec_Line.DESCR254.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [1] = &RequiredFieldCountArray [1] - 1;
   End-If;
   
   If &Row_Line.EX_LOCATION_VW.DESCR.ShowRequiredFieldCue Then
      &Row_Line.EX_LOCATION_VW.DESCR.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [2] = &RequiredFieldCountArray [2] - 1;
   End-If;
   
   If &Row_Line.EX_LOCATION_VW5.DESCR.ShowRequiredFieldCue Then
      &Row_Line.EX_LOCATION_VW5.DESCR.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [3] = &RequiredFieldCountArray [3] - 1;
   End-If;
   
   If &Row_Line.EX_LABELS_WRK.MERCHANT.ShowRequiredFieldCue Then
      &Row_Line.EX_LABELS_WRK.MERCHANT.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [4] = &RequiredFieldCountArray [4] - 1;
   End-If;
   
   If &Rec_Line.AIRFARE_RCPT_NBR.ShowRequiredFieldCue Then
      &Rec_Line.AIRFARE_RCPT_NBR.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [5] = &RequiredFieldCountArray [5] - 1;
   End-If;
   
   If &Rec_Line.NBR_NIGHTS.ShowRequiredFieldCue Then
      &Rec_Line.NBR_NIGHTS.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [6] = &RequiredFieldCountArray [6] - 1;
   End-If;
   
   If &Rec_Line.TRANSPORT_ID.ShowRequiredFieldCue Then
      &Rec_Line.TRANSPORT_ID.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [7] = &RequiredFieldCountArray [7] - 1;
   End-If;
   
   If &Row_Line.EX_LINE_WRK.KILOMETERS.ShowRequiredFieldCue Then
      &Row_Line.EX_LINE_WRK.KILOMETERS.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [8] = &RequiredFieldCountArray [8] - 1;
   End-If;
   
   If &Row_Line.EX_LINE_WRK.MILES.ShowRequiredFieldCue Then
      &Row_Line.EX_LINE_WRK.MILES.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [9] = &RequiredFieldCountArray [9] - 1;
   End-If;
   
   If &Rec_Line.NBR_PASSENGERS.ShowRequiredFieldCue Then
      &Rec_Line.NBR_PASSENGERS.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [10] = &RequiredFieldCountArray [10] - 1;
   End-If;
   
   If &Rec_Line.RANGE_SEQ.ShowRequiredFieldCue Then
      &Rec_Line.RANGE_SEQ.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [11] = &RequiredFieldCountArray [11] - 1;
   End-If;
   
   If &Rec_Line.STARTTM_PERDIEM.ShowRequiredFieldCue Then
      &Rec_Line.STARTTM_PERDIEM.ShowRequiredFieldCue = False;
      &Rec_Line.ENDTM_PERDIEM.ShowRequiredFieldCue = False;
      &RequiredFieldCountArray [12] = &RequiredFieldCountArray [12] - 1;
   End-If;
End-Function;

/*
   Set the grid column labels based on whether the field is required on at least one expense line.
   If it is, the label should have an asterisk at the beginning; if not, no required field indicator
   should be present in the label.  To accomplish this, perform the following for each element in
   the component array (i.e. for each possibly required field):

   1.  If the array element is > 0 and ShowRequiredFieldCue is false for the first row in the
       grid, then we need to change the label to have an asterisk at the beginning (if there
       already isn't one).
   2.  If the array element is > 0 and ShowRequiredFieldCue is true for the first row, or the
       array element = 0, then just set the grid column label to the corresponding field label
       from the first row.

   Note that we look at the first row in the grid because Tools automatically puts an asterisk
   in the column label if the corresponding field in the first row has ShowRequiredFieldCue set
   to true.  We want to avoid putting a second asterisk in the column label if Tools is already
   doing it.

   Also, if at least one field is required within a particular grid tab, the corresponding grid
   tab label is updated by prefixing it with an asterisk.

   This function is called from EX_SHEET_ENTRY Page Activate, EX_HDR_WRK.PB_DELETE_LN FieldChange,
   and EX_SHEET_LINE.EXPENSE_TYPE FieldChange, basically any place where the grid labels may need
   to be reset.
*/
Function SetRequiredFieldLabels();
   Local Row &Row_First;
   Local Record &Rec_First;
   Local Grid &Grid;
   Local GridColumn &GridColumn;
   
   &Grid = GetGrid(Page.EX_SHEET_ENTRY, "EX_SHEET_LINE");
   &Row_First = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE)(1);
   &Rec_First = &Row_First.EX_SHEET_LINE;
   
   /* Set column label for description. */
   
   &GridColumn = &Grid.GetColumn("DESCR");
   If &RequiredFieldCountArray [1] > 0 And
         Not &Rec_First.DESCR254.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.DESCR254.Label;
   End-If;
   
   /* Set column label for location. */
   
   &GridColumn = &Grid.GetColumn("LOCATION");
   If &RequiredFieldCountArray [2] > 0 And
         Not &Row_First.EX_LOCATION_VW.DESCR.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Row_First.EX_LOCATION_VW.DESCR.Label;
   End-If;
   
   /* Set column label for originating location. */
   
   &GridColumn = &Grid.GetColumn("ORIG_LOCATION");
   If &RequiredFieldCountArray [3] > 0 And
         Not &Row_First.EX_LOCATION_VW5.DESCR.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
         
         &GridColumn = &Grid.GetColumn("TRAVEL_FROM_LOC");
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Row_First.EX_LOCATION_VW5.DESCR.Label;
      
      &GridColumn = &Grid.GetColumn("TRAVEL_FROM_LOC");
      &GridColumn.Label = &Row_First.EX_LOCATION_VW5.DESCR.Label;
   End-If;
   
   
   /* Set column label for airfare ticket number. */
   
   &GridColumn = &Grid.GetColumn("TICKET_NBR");
   If &RequiredFieldCountArray [5] > 0 And
         Not &Rec_First.AIRFARE_RCPT_NBR.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.AIRFARE_RCPT_NBR.Label;
   End-If;
   
   /* Set column label for hotel number of nights. */
   
   &GridColumn = &Grid.GetColumn("NBR_NIGHTS");
   If &RequiredFieldCountArray [6] > 0 And
         Not &Rec_First.NBR_NIGHTS.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.NBR_NIGHTS.Label;
   End-If;
   
   /* Set column label for transport ID. */
   
   &GridColumn = &Grid.GetColumn("TRANSPORT_ID");
   If &RequiredFieldCountArray [7] > 0 And
         Not &Rec_First.TRANSPORT_ID.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.TRANSPORT_ID.Label;
   End-If;
   
   /* Set column label for distance in kilometers. */
   
   &GridColumn = &Grid.GetColumn("KILOMETERS");
   If &RequiredFieldCountArray [8] > 0 And
         Not &Row_First.EX_LINE_WRK.KILOMETERS.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Row_First.EX_LINE_WRK.KILOMETERS.Label;
   End-If;
   
   /* Set column label for distance in miles. */
   
   &GridColumn = &Grid.GetColumn("MILES");
   If &RequiredFieldCountArray [9] > 0 And
         Not &Row_First.EX_LINE_WRK.MILES.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Row_First.EX_LINE_WRK.MILES.Label;
   End-If;
   
   /* Set column label for number of passengers. */
   
   &GridColumn = &Grid.GetColumn("NBR_PASSENGERS");
   If &RequiredFieldCountArray [10] > 0 And
         Not &Rec_First.NBR_PASSENGERS.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.NBR_PASSENGERS.Label;
   End-If;
   
   /* Set column label for per diem range. */
   
   &GridColumn = &Grid.GetColumn("PERDIEM_RANGE");
   If &RequiredFieldCountArray [11] > 0 And
         Not &Rec_First.RANGE_SEQ.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.RANGE_SEQ.Label;
   End-If;
   
   /* Set column labels for per diem start and end times. */
   
   &GridColumn = &Grid.GetColumn("PERDIEM_STARTTM");
   If &RequiredFieldCountArray [12] > 0 And
         Not &Rec_First.STARTTM_PERDIEM.ShowRequiredFieldCue Then
      If Substring(&GridColumn.Label, 1, 1) <> "*" Then
         &GridColumn.Label = "*" | &GridColumn.Label;
         
         &GridColumn = &Grid.GetColumn("PERDIEM_ENDTM");
         &GridColumn.Label = "*" | &GridColumn.Label;
      End-If;
   Else
      &GridColumn.Label = &Rec_First.STARTTM_PERDIEM.Label;
      
      &GridColumn = &Grid.GetColumn("PERDIEM_ENDTM");
      &GridColumn.Label = &Rec_First.ENDTM_PERDIEM.Label;
   End-If;
   
   /*
      If at least one field within a grid tab is required, put an asterisk in front of the
      corresponding grid tab label.
   */
   &GridColumn = &Grid.GetColumn("OVERVIEW_GRIDTAB");
   &GridColumn.Label = "*" | MsgGetText(10504, 427, "Overview");
   
   &GridColumn = &Grid.GetColumn("EXPDTL_GRIDTAB");
   If &RequiredFieldCountArray [1] > 0 Then
      &GridColumn.Label = "*" | MsgGetText(10504, 40, "Detail");
   Else
      &GridColumn.Label = MsgGetText(10504, 40, "Detail");
   End-If;
   
   &GridColumn = &Grid.GetColumn("LOCATION_GRIDTAB");
   If &RequiredFieldCountArray [2] > 0 Or
         &RequiredFieldCountArray [3] > 0 Then
      &GridColumn.Label = "*" | MsgGetText(10501, 83, "Location");
   Else
      &GridColumn.Label = MsgGetText(10501, 83, "Location");
   End-If;
   
   &GridColumn = &Grid.GetColumn("MERCHANT_GRIDTAB");
   If &RequiredFieldCountArray [4] > 0 Then
      &GridColumn.Label = "*" | MsgGetText(10504, 170, "Merchant");
   Else
      &GridColumn.Label = MsgGetText(10504, 170, "Merchant");
   End-If;
   
   &GridColumn = &Grid.GetColumn("AIRHOTEL_GRIDTAB");
   If &RequiredFieldCountArray [5] > 0 Or
         &RequiredFieldCountArray [6] > 0 Then
      &GridColumn.Label = "*" | MsgGetText(10504, 291, "Air/Hotel");
      /******** XL Capital BEGIN 03/31/08 ************/
      &GridColumn_PTA = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
      &GridColumn_PTA.Label = "*" | "Pre-Trip Auditor";
      /******** XL Capital END 03/31/08 ************/
   Else
      &GridColumn.Label = MsgGetText(10504, 291, "Air/Hotel");
      /******** XL Capital BEGIN 03/31/08 ************/
      &GridColumn_PTA = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
      &GridColumn_PTA.Label = "Pre-Trip Auditor";
      /******** XL Capital END 03/31/08 ************/
   End-If;
   
   &GridColumn = &Grid.GetColumn("MILEAGE_GRIDTAB");
   If &RequiredFieldCountArray [7] > 0 Or
         &RequiredFieldCountArray [8] > 0 Or
         &RequiredFieldCountArray [9] > 0 Or
         &RequiredFieldCountArray [10] > 0 Then
      &GridColumn.Label = "*" | MsgGetText(10504, 295, "Mileage");
   Else
      &GridColumn.Label = MsgGetText(10504, 295, "Mileage");
   End-If;
   
   &GridColumn = &Grid.GetColumn("PERDIEM_GRIDTAB");
   If &RequiredFieldCountArray [11] > 0 Or
         &RequiredFieldCountArray [12] > 0 Then
      &GridColumn.Label = "*" | MsgGetText(10504, 331, "Per Diem");
   Else
      &GridColumn.Label = MsgGetText(10504, 331, "Per Diem");
   End-If;
   
   &GridColumn = &Grid.GetColumn("CURRENCY_GRIDTAB");
   &GridColumn.Label = "*" | MsgGetText(10504, 89, "Currency");
End-Function;

/*
   The following function sets the project fields/hyperlinks on the Expense Report Summary page.
   If more than one PC business unit was specified for an expense line on the Accounting Detail
   page (TE_SHEET_DIST), the hyperlink "Multiple" is displayed; otherwise, the actual PC business
   unit is shown.  This is then repeated for the project and activity fields.
*/
Function set_project_links(&Row_Line As Row);
   Local Rowset &RS_Dist;
   Local Record &Rec_Dist;
   Local string &PCBU, &ProjectID, &ActivityID;
   Local number &I;
   Local boolean &MultPCBU, &MultProj, &MultActv;
   
   &RS_Dist = &Row_Line.GetRowset(Scroll.EX_SHEET_DIST);
   &I = 0;
   
   &MultPCBU = False;
   &MultProj = False;
   &MultActv = False;
   
   While ( Not &MultPCBU Or
         Not &MultProj Or
         Not &MultActv) And
         &I < &RS_Dist.ActiveRowCount
      
      &I = &I + 1;
      &Rec_Dist = &RS_Dist(&I).EX_SHEET_DIST;
      
      If &Rec_Dist.BUSINESS_UNIT_PC.Value <> &PCBU Then
         If None(&PCBU) Then
            &PCBU = &Rec_Dist.BUSINESS_UNIT_PC.Value;
         Else
            &MultPCBU = True;
         End-If;
      End-If;
      
      If &Rec_Dist.PROJECT_ID.Value <> &ProjectID Then
         If None(&ProjectID) Then
            &ProjectID = &Rec_Dist.PROJECT_ID.Value;
         Else
            &MultProj = True;
         End-If;
      End-If;
      
      If &Rec_Dist.ACTIVITY_ID.Value <> &ActivityID Then
         If None(&ActivityID) Then
            &ActivityID = &Rec_Dist.ACTIVITY_ID.Value;
         Else
            &MultActv = True;
         End-If;
      End-If;
   End-While;
   
   If &MultPCBU Then
      &Row_Line.EX_LINE_WRK.BUSINESS_UNIT_PC.Label = MsgGetText(10504, 402, "Multiple");
      &Row_Line.EX_LINE_WRK.BUSINESS_UNIT_PC.Enabled = True;
   Else
      If All(&PCBU) Then
         &Row_Line.EX_LINE_WRK.BUSINESS_UNIT_PC.Label = &PCBU;
      Else
         &Row_Line.EX_LINE_WRK.BUSINESS_UNIT_PC.Label = " ";
      End-If;
      &Row_Line.EX_LINE_WRK.BUSINESS_UNIT_PC.Enabled = False;
   End-If;
   
   If &MultProj Then
      &Row_Line.EX_LINE_WRK.PROJECT_ID.Label = MsgGetText(10504, 402, "Multiple");
      &Row_Line.EX_LINE_WRK.PROJECT_ID.Enabled = True;
   Else
      If All(&ProjectID) Then
         &Row_Line.EX_LINE_WRK.PROJECT_ID.Label = &ProjectID;
      Else
         &Row_Line.EX_LINE_WRK.PROJECT_ID.Label = " ";
      End-If;
      &Row_Line.EX_LINE_WRK.PROJECT_ID.Enabled = False;
   End-If;
   
   If &MultActv Then
      &Row_Line.EX_LINE_WRK.ACTIVITY_ID.Label = MsgGetText(10504, 402, "Multiple");
      &Row_Line.EX_LINE_WRK.ACTIVITY_ID.Enabled = True;
   Else
      If All(&ActivityID) Then
         &Row_Line.EX_LINE_WRK.ACTIVITY_ID.Label = &ActivityID;
      Else
         &Row_Line.EX_LINE_WRK.ACTIVITY_ID.Label = " ";
      End-If;
      &Row_Line.EX_LINE_WRK.ACTIVITY_ID.Enabled = False;
   End-If;
End-Function;

Function display_line(&I)
   Local Record &recAttendee;
   Local Field &fldName;
   Local string &sSetID, &sEmployeeID, &sExpenseType, &sExpenseTypeEdit, &sMerchant, &sMerchantCode, &sTxnLocation, &sDescrLng, &sMsgText;
   Local string &sPaymentMethod, &sPaymentMethodDesc, &sBillCd, &sBillCdDesc;
   Local date &dTxnDate, &dEffDt;
   Local boolean &bSplitLine;
   
   &line_row = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE)(&I);
   &line_rec = &line_row.GetRecord(Record.EX_SHEET_LINE);
   &line_rec_wrk = &line_row.GetRecord(Record.EX_LINE_WRK);
   &line_rec_icon = &line_row.GetRecord(Record.EX_ICLIENT_WRK);
   &line_rec_bill = &line_row.GetRecord(Record.EX_REPORT_WRK);
   
   &sSetID = FetchValue(EX_SHEET_HDR.SETID);
   &sEmployeeID = FetchValue(EX_SHEET_HDR.EMPLID);
   &sExpenseType = FetchValue(EX_SHEET_LINE.EXPENSE_TYPE, &I);
   &sMerchant = FetchValue(EX_SHEET_LINE.MERCHANT, &I);
   &sMerchantCode = FetchValue(EX_SHEET_LINE.MERCHANT_CD, &I);
   &sTxnLocation = FetchValue(EX_SHEET_LINE.TXN_LOCATION, &I);
   If None(&line_rec.TRANS_DT.Value) Then
      &dTxnDate = %Date;
   Else
      &dTxnDate = &line_rec.TRANS_DT.Value;
   End-If;
   &sExpenseTypeEdit = FetchValue(EX_TYPES_TBL.EXPENSE_TYPE_EDIT, &I);
   &LOC_REQD_FLG = FetchValue(EX_TYPES_TBL.LOC_REQD_FLG, &I);
   &DESCR_REQD_FLG = FetchValue(EX_TYPES_TBL.DESCR_REQD_FLG, &I);
   &MERCHANT_REQD_FLG = FetchValue(EX_TYPES_TBL.MERCHANT_REQD_FLG, &I);
   &TAX_IMPL_FLG = FetchValue(EX_TYPES_TBL.TAX_IMPLICATIONS, &I);
   &TRAVEL_FROM_FLG = FetchValue(EX_TYPES_TBL.TRAVEL_FROM_FLG, &I);
   &NBR_PASSENG_FLG = FetchValue(EX_TYPES_TBL.NBR_PASSENGER_FLG, &I);
   &TRANSP_TYPE_FLG = FetchValue(EX_TYPES_TBL.TRANSPORT_TYPE_FLG, &I);
   &PHYSICAL_NATURE = FetchValue(EX_TYPES_TBL.PHYSICAL_NATURE, &I);
   If None(&PHYSICAL_NATURE) Then
      &PHYSICAL_NATURE = BUS_UNIT_TBL_EX.PHYSICAL_NATURE.Value;
   End-If;
   &TRANSPORT_ID = FetchValue(EX_SHEET_LINE.TRANSPORT_ID, &I);
   &DISTANCE = FetchValue(EX_SHEET_LINE.DISTANCE, &I);
   &DISTANCE_RT = FetchValue(EX_SHEET_LINE.DISTANCE_RT, &I);
   &DISTANCE_TYPE = FetchValue(EX_SHEET_LINE.DISTANCE_TYPE, &I);
   &TRANSPORT_TYPE = FetchValue(EX_EE_TRANSPORT.TRANSPORT_TYPE, &I);
   &country = FetchValue(BUS_UNIT_TBL_EX.COUNTRY);
   &CURRENCY_CD = FetchValue(BUS_UNIT_TBL_EX.BASE_CURRENCY);
   &RANGE_SEQ = FetchValue(EX_SHEET_LINE.RANGE_SEQ, &I);
   &sPaymentMethod = &line_rec.EXPEND_MTHD.Value;
   &sBillCd = &line_rec.BILL_CODE_EX.Value;
   
   /** Hide everything, then unhide based on expense type edit **/
   Hide(EX_SHEET_LINE.TXN_LOCATION, &I);
   Hide(EX_LOCATION_VW.DESCR, &I);
   Hide(EX_SHEET_LINE.TRAVEL_FROM, &I);
   Hide(EX_LOCATION_VW5.DESCR, &I);
   Hide(EX_SHEET_LINE.NBR_NIGHTS, &I);
   Hide(EX_SHEET_LINE.AIRFARE_RCPT_NBR, &I);
   Hide(EX_LABELS_WRK.MERCHANT, &I);
   Hide(EX_SHEET_LINE.MERCHANT, &I);
   Hide(EX_SHEET_LINE.MERCHANT_CD, &I);
   Hide(EX_SHEET_LINE.STARTTM_PERDIEM, &I);
   Hide(EX_SHEET_LINE.ENDTM_PERDIEM, &I);
   Hide(EX_ICLIENT_WRK.PER_DIEM_REFRESH, &I);
   Hide(EX_LINE_WRK.PB_ATTENDEES, &I);
   Hide(EX_LINE_WRK.PB_PER_DIEM, &I);
   Hide(EX_SHEET_LINE.RANGE_SEQ, &I);
   &line_row.UI_WRK1.WIZARD_PB.Visible = False;
   Hide(EX_ICLIENT_WRK.CRED_REF_COMMENT, &I);
   Hide(EX_LINE_WRK.MILES, &I);
   Hide(EX_LINE_WRK.KILOMETERS, &I);
   Hide(EX_LINE_WRK.DISTANCE_RT, &I);
   Hide(EX_LINE_WRK.CALCULATE_PB, &I);
   Hide(EX_SHEET_LINE.NBR_PASSENGERS, &I);
   Hide(EX_EE_TRANSPORT.TRANSPORT_TYPE, &I);
   Hide(EX_SHEET_LINE.TRANSPORT_ID, &I);
   
   /******** XL Capital BEGIN 03/25/08 ************/
   Hide(EX_LINE_WRK.XFR_FLG, &I);
   rem Hide(EX_LINE_WRK.EXT_REF_NBR, &I);
   Gray(EX_LINE_WRK.EXT_REF_NBR);
   Hide(EX_LINE_WRK.ACTION_PLAN_DESCR, &I);
   /******** XL Capital END 03/25/08 ************/
   
   /* Initialize the required field count array if not yet done so. */
   If None(&RequiredFieldCountArray) Then
      &RequiredFieldCountArray = CreateArrayRept(0, 12);
   End-If;
   
   /* Set the required field cue for fields that are always required. */
   &line_rec.EXPENSE_TYPE.ShowRequiredFieldCue = True;
   &line_rec.TRANS_DT.ShowRequiredFieldCue = True;
   &line_rec.TXN_AMOUNT.ShowRequiredFieldCue = True;
   &line_rec.EXPEND_MTHD.ShowRequiredFieldCue = True;
   &line_rec_wrk.VISUAL_RATE_CUR.ShowRequiredFieldCue = True;
   
   /*
      If an expense type is specified, (1) back out the current required fields (the new
      required fields will be determined later in this function), (2) determine whether the
      payment type field should be enabled, (3) check to see whether the expense type is
      still active (if not, fetch the most recent information regardless of status), (4)
      hide/unhide the Accounting Detail icon based on whether the user has access, (5)
      unhide icons that should be displayed for most lines, and (6) display VAT fields
      if the user's GL business unit is VAT-enabled.
   */
   If All(&sExpenseType) Then
      BackOutRequiredFields(&line_row);
      
      /* Disable the payment type field if the expense line is from a credit card feed. */
      If &line_rec.CC_FEED_FLG.Value = "Y" Then
         &line_rec.EXPEND_MTHD.Enabled = False;
      End-If;
      
      /*
         Assign work field DESCR50 to the expense type description.  If it's blank due to
         the expense type being inactivated, fetch the most recent expense type information
         regardless of status.
      */
      &line_rec_wrk.DESCR50.Value = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.DESCR).Value;
      
      If None(&line_rec_wrk.DESCR50.Value) Then
         SQLExec("select %DateOut(EFFDT), DESCR, EXPENSE_TYPE_EDIT, DESCR_REQD_FLG, LOC_REQD_FLG, MERCHANT_REQD_FLG, TRANSPORT_TYPE_FLG, TRAVEL_FROM_FLG, NBR_PASSENGER_FLG, TAX_IMPLICATIONS, PHYSICAL_NATURE from PS_EX_TYPES_TBL where SETID = :1 and EXPENSE_TYPE = :2 and EFFDT = (select max(EFFDT) from PS_EX_TYPES_TBL A where A.SETID = :3 and A.EXPENSE_TYPE = :4 and A.EFFDT <= %CurrentDateIn)", &sSetID, &sExpenseType, &sSetID, &sExpenseType, &dEffDt, &line_rec_wrk.DESCR50.Value, &sExpenseTypeEdit, &DESCR_REQD_FLG, &LOC_REQD_FLG, &MERCHANT_REQD_FLG, &TRANSP_TYPE_FLG, &TRAVEL_FROM_FLG, &NBR_PASSENG_FLG, &TAX_IMPL_FLG, &PHYSICAL_NATURE);
         
         If None(&PHYSICAL_NATURE) Then
            &PHYSICAL_NATURE = BUS_UNIT_TBL_EX.PHYSICAL_NATURE.Value;
         End-If;
         
         /* If current language is different from the base, fetch the appropriate description. */
         If %Language <> %Language_Base Then
            SQLExec("select DESCR from PS_EX_TYPES_LNG where SETID = :1 and EXPENSE_TYPE = :2 and EFFDT = %DateIn(:3) and LANGUAGE_CD = :4", &sSetID, &sExpenseType, &dEffDt, %Language, &sDescrLng);
            
            If All(&sDescrLng) Then
               &line_rec_wrk.DESCR50.Value = &sDescrLng;
            End-If;
         End-If;
      End-If;
      
      /*
         Assign work field EX_CLIENT_WRK.DECSR to the payment type description.  If it's blank due 
		 to the payment type being inactivated, fetch the most recent payment type information
         regardless of status.
      */
      &line_rec_icon.DESCR.Value = &line_rec.EXPEND_MTHD.GetRelated(EX_EXP_MTHD_TBL.DESCR).Value;
      
      If None(&line_rec_icon.DESCR.Value) Then
         SQLExec("select %DateOut(EFFDT), DESCR from PS_EX_EXP_MTHD_TBL where SETID = :1 and EXPEND_MTHD = :2 and EFFDT = (select max(EFFDT) from PS_EX_EXP_MTHD_TBL A where A.SETID = :3 and A.EXPEND_MTHD = :4 and A.EFFDT <= %CurrentDateIn)", &sSetID, &sPaymentMethod, &sSetID, &sPaymentMethod, &dEffDt, &line_rec_icon.DESCR.Value);
         
         /* If current language is different from the base, fetch the appropriate description. */
         If %Language <> %Language_Base Then
            SQLExec("select DESCR from PS_EX_TYPES_LNG where SETID = :1 and EXPENSE_TYPE = :2 and EFFDT = %DateIn(:3) and LANGUAGE_CD = :4", &sSetID, &sPaymentMethod, &dEffDt, %Language, &sPaymentMethodDesc);
            
            If &sPaytmentMethodDesc <> "" Then
               &line_rec_icon.DESCR.Value = &sPaymentMethodDesc;
            End-If;
         End-If;
      End-If;
      
      /*
         Assign work field EX_REPORT_WRK.DESCR to the billing code description.  If it's blank due 
		 to the billing code being inactivated, fetch the most recent billing code information
         regardless of status.
      */
      &line_rec_bill.DESCR.Value = &line_rec.BILL_CODE_EX.GetRelated(EX_BILL_CD_TBL.DESCR).Value;
      
      If None(&line_rec_bill.DESCR.Value) Then
         SQLExec("select %DateOut(EFFDT), DESCR from PS_EX_BILL_CD_TBL where SETID = :1 and BILL_CODE_EX = :2 and EFFDT = (select max(EFFDT) from PS_EX_BILL_CD_TBL A where A.SETID = :3 and A.BILL_CODE_EX = :4 and A.EFFDT <= %CurrentDateIn)", &sSetID, &sBillCd, &sSetID, &sBillCd, &dEffDt, &line_rec_bill.DESCR.Value);
         
         /* If current language is different from the base, fetch the appropriate description. */
         If %Language <> %Language_Base Then
            SQLExec("select DESCR from PS_EX_BILL_CD_LNG where SETID = :1 and BILL_CODE_EX = :2 and EFFDT = %DateIn(:3) and LANGUAGE_CD = :4", &sSetID, &sBillCd, &dEffDt, %Language, &sBillCdDesc);
            
            If &sBillCdDesc <> "" Then
               &line_rec_bill.DESCR.Value = &sBillCdDesc;
            End-If;
         End-If;
      End-If;
      
      
      /* Check to see if employee has access to accounting information. */
      If &c_strAcctDisplay = "H" Then
         &line_rec_wrk.PB_ACCTING_DETAIL.Visible = False;
      Else
         &line_rec_wrk.PB_ACCTING_DETAIL.Visible = True;
      End-If;
      
      /* Unhide the various fields and icons. */
      &line_rec_wrk.LINE_SELECT_CB.Visible = True;
      &line_rec.TRANS_DT.Visible = True;
      &line_rec.TXN_AMOUNT.Visible = True;
      &line_rec.TXN_CURRENCY_CD.Visible = True;
      &line_rec.EXPEND_MTHD.Visible = True;
      &line_rec.BILL_CODE_EX.Visible = True;
      &line_rec.DESCR254.Visible = True;
      &line_rec.PERSONAL_EXPENSE.Visible = True;
      &line_rec.NO_RECEIPT_FLG.Visible = True;
      &line_rec_wrk.VISUAL_RATE_CUR.Visible = True;
      &line_rec.MONETARY_AMOUNT.Visible = True;
      &line_rec.CURRENCY_CD.Visible = True;
      &line_rec_wrk.CHK_SYSTEM_RATE.Visible = True;
      &line_rec_wrk.RESET_RATE_PB.Visible = True;
      
      &line_rec_wrk.DETAIL_PB.Visible = True;
      &line_row.UI_WRK1.RCPTSPLIT_PB.Visible = True;
      &line_rec_wrk.PB_EXCH_RT_DTL.Visible = True;
      &line_rec_icon.DYNAMIC_PB_1.Visible = True;
      &line_rec_icon.DYNAMIC_PB_2.Visible = True;
      &line_rec_icon.DYNAMIC_PB_3.Visible = True;
      &line_rec_icon.DYNAMIC_PB_4.Visible = True;
      &line_rec_icon.DYNAMIC_PB_5.Visible = True;
      &line_rec_icon.DYNAMIC_PB_6.Visible = True;
      &line_rec_icon.DYNAMIC_PB_7.Visible = True;
      &line_rec_icon.DYNAMIC_PB_8.Visible = True;
      &line_rec_icon.DYNAMIC_PB_9.Visible = True;
      /******** XL Capital BEGIN 03/31/08 ************/
      &line_rec_icon.DYNAMIC_PB_10.Visible = True;
      /******** XL Capital END 03/31/08 ************/
      /* Display the VAT fields if the GL business unit is VAT-enabled; otherwise hide them. */
      If &BUIsVatEnabled Then
         &line_rec_wrk.VAT_CALC_AMT.Visible = True;
         &line_rec_wrk.VAT_CALC_PB.Visible = True;
         &line_rec.VAT_ENTRD_AMT.Visible = True;
         &line_rec.TXN_CURRENCY_CD1.Visible = True;
         &line_rec.VAT_RECEIPT.Visible = True;
         If IsHideAllRoleVATOptions("VAT_FIELDS_WRK") Then
            &line_rec_wrk.PB_VAT_DETAIL.Visible = False;
         Else
            &line_rec_wrk.PB_VAT_DETAIL.Visible = True
         End-If;
         &line_rec_wrk.TXN_CURRENCY_CD1.Visible = True;
         &line_rec_wrk.TXN_CURRENCY_CD2.Visible = True;
         
         /* Apply role VAT security for the VAT fields displayed on the Expense Report Entry page. */
         ShowVatFieldsExpLine(&I);
      Else
         &line_rec_wrk.VAT_CALC_AMT.Visible = False;
         &line_rec_wrk.VAT_CALC_PB.Visible = False;
         &line_rec.VAT_ENTRD_AMT.Visible = False;
         &line_rec.TXN_CURRENCY_CD1.Visible = False;
         &line_rec.VAT_RECEIPT.Visible = False;
         &line_rec_wrk.PB_VAT_DETAIL.Visible = False;
         &line_rec_wrk.TXN_CURRENCY_CD1.Visible = False;
         &line_rec_wrk.TXN_CURRENCY_CD2.Visible = False;
      End-If;
   Else
      /* Hide all fields and icons if expense type hasn't been entered. */
      &line_rec_wrk.LINE_SELECT_CB.Visible = False;
      &line_rec.TRANS_DT.Visible = False;
      &line_rec.TXN_AMOUNT.Visible = False;
      &line_rec.TXN_CURRENCY_CD.Visible = False;
      &line_rec.EXPEND_MTHD.Visible = False;
      &line_rec.BILL_CODE_EX.Visible = False;
      &line_rec.DESCR254.Visible = False;
      &line_rec.PERSONAL_EXPENSE.Visible = False;
      &line_rec.NO_RECEIPT_FLG.Visible = False;
      &line_rec_wrk.VISUAL_RATE_CUR.Visible = False;
      &line_rec.MONETARY_AMOUNT.Visible = False;
      &line_rec.CURRENCY_CD.Visible = False;
      &line_rec_wrk.CHK_SYSTEM_RATE.Visible = False;
      &line_rec_wrk.RESET_RATE_PB.Visible = False;
      
      &line_rec_wrk.DETAIL_PB.Visible = False;
      &line_rec_wrk.PB_ACCTING_DETAIL.Visible = False;
      &line_row.UI_WRK1.RCPTSPLIT_PB.Visible = False;
      &line_rec_wrk.PB_EXCH_RT_DTL.Visible = False;
      &line_rec_icon.DYNAMIC_PB_1.Visible = False;
      &line_rec_icon.DYNAMIC_PB_2.Visible = False;
      &line_rec_icon.DYNAMIC_PB_3.Visible = False;
      &line_rec_icon.DYNAMIC_PB_4.Visible = False;
      &line_rec_icon.DYNAMIC_PB_5.Visible = False;
      &line_rec_icon.DYNAMIC_PB_6.Visible = False;
      &line_rec_icon.DYNAMIC_PB_7.Visible = False;
      &line_rec_icon.DYNAMIC_PB_8.Visible = False;
      &line_rec_icon.DYNAMIC_PB_9.Visible = False;
      /******** XL Capital BEGIN 03/31/08 ************/
      &line_rec_icon.DYNAMIC_PB_10.Visible = False;
      /******** XL Capital END 03/31/08 ************/
      
      &line_rec_wrk.VAT_CALC_AMT.Visible = False;
      &line_rec_wrk.VAT_CALC_PB.Visible = False;
      &line_rec.VAT_ENTRD_AMT.Visible = False;
      &line_rec.TXN_CURRENCY_CD1.Visible = False;
      &line_rec.VAT_RECEIPT.Visible = False;
      &line_rec_wrk.PB_VAT_DETAIL.Visible = False;
      
      &line_rec_wrk.PB_EXCEPTIONS.Visible = False;
      &line_rec.RECEIPT_VERIFIED.Enabled = False;
      &line_rec_wrk.APPROVE_FLAG.Enabled = False;
      &line_rec.REIMB_ACTION.DisplayOnly = True;
   End-If;
   
   
   UpdateValue(EX_SHEET_LINE.TAX_IMPLICATIONS, &I, &TAX_IMPL_FLG);
   
   
   If &DESCR_REQD_FLG = "Y" Then
      UnHide(EX_SHEET_LINE.DESCR254, &I);
      
      &line_rec.GetField(Field.DESCR254).ShowRequiredFieldCue = True;
      &RequiredFieldCountArray [1] = &RequiredFieldCountArray [1] + 1;
   End-If;
   
   If &LOC_REQD_FLG = "Y" Then
      UnHide(EX_LOCATION_VW.DESCR, &I);
      If &sExpenseTypeEdit = "AUT" Then
         &tempText = MsgGetText(10502, 148, "Destination Location");
         SetLabel(EX_LOCATION_VW.DESCR, &I, &tempText);
      End-If;
      
      If All(EX_SHEET_HDR.TXN_LOCATION) And
            None(&sTxnLocation) Then
         UpdateValue(EX_SHEET_LINE.TXN_LOCATION, &I, EX_SHEET_HDR.TXN_LOCATION);
      End-If;
      
      &line_row.EX_LOCATION_VW.DESCR.ShowRequiredFieldCue = True;
      &RequiredFieldCountArray [2] = &RequiredFieldCountArray [2] + 1;
   End-If;
   
   If &TRAVEL_FROM_FLG = "Y" Then
      UnHide(EX_LOCATION_VW5.DESCR, &I);
      
      &line_row.EX_LOCATION_VW5.DESCR.ShowRequiredFieldCue = True;
      &RequiredFieldCountArray [3] = &RequiredFieldCountArray [3] + 1;
   End-If;
   
   If &MERCHANT_REQD_FLG = "Y" Then
      UnHide(EX_LABELS_WRK.MERCHANT, &I);
      UnHide(EX_SHEET_LINE.MERCHANT, &I);
      UnHide(EX_SHEET_LINE.MERCHANT_CD, &I);
      
      &line_row.EX_LABELS_WRK.MERCHANT.ShowRequiredFieldCue = True;
      &RequiredFieldCountArray [4] = &RequiredFieldCountArray [4] + 1;
   End-If;
   
   UpdateValue(EX_SHEET_LINE.PHYSICAL_NATURE, &I, &PHYSICAL_NATURE);
   
   Evaluate &sExpenseTypeEdit
   When "AIR"
      UnHide(EX_SHEET_LINE.AIRFARE_RCPT_NBR, &I);
      
      /******** XL Capital BEGIN 03/25/08 ************/
      UnHide(EX_LINE_WRK.XFR_FLG, &I);
      UnGray(EX_LINE_WRK.EXT_REF_NBR);
      UnHide(EX_LINE_WRK.ACTION_PLAN_DESCR, &I);
      /******** XL Capital END 03/25/08 ************/
      
      &line_rec.GetField(Field.AIRFARE_RCPT_NBR).ShowRequiredFieldCue = True;
      &RequiredFieldCountArray [5] = &RequiredFieldCountArray [5] + 1;
      Break;
      
   When "ATT"
      UnHide(EX_LINE_WRK.PB_ATTENDEES, &I);
      
      &recAttendee = &line_row.GetRowset(Scroll.EX_SHEET_ATT)(1).GetRecord(Record.EX_SHEET_ATT);
      &fldName = &recAttendee.GetField(Field.NAME);
      
      If None(&fldName.Value) Then
         &fldName.Value = EX_SHEET_HDR.EMPLID.GetRelated(PERSONAL_DATA.NAME).Value;
         &recAttendee.ATTENDEE_COMPANY.Value = EX_SHEET_HDR.BUSINESS_UNIT_GL.GetRelated(BUS_UNIT_TBL_FS.DESCR).Value;
      End-If;
      Break;
      
   When "AUT"
      &line_row.UI_WRK1.RCPTSPLIT_PB.Visible = False;
      
      Rate_Calculation_Type(&sSetID, &sExpenseType, &country, &dTxnDate, &RATE_CALC_TYPE, &DISTANCE_TYPE);
      
      If %Component = Component.TE_EXPENSE_SHEET Or
            %Component = Component.TE_EXPENSE_SHEET2 Or
            (%Component = Component.EX_SHEET_APPR And
               (&ProfileAttr.ModifyLinesInfo Or
                  &ProfileAttr.ChangeAllLinesInfo Or
                  &ProfileAttr.AddLinesInfo)) Then
         
         Gray(EX_SHEET_LINE.TXN_AMOUNT, &I);
         Gray(EX_SHEET_LINE.TXN_CURRENCY_CD, &I);
         
         If &RATE_CALC_TYPE = "S" Then
            /* If Rate Calculation Type is Standard then run this function. */
            standard_dist_rt(&sSetID, &sExpenseType, &country, &dTxnDate, &DISTANCE_RT, &EXISTS);
         Else
            UnHide(EX_LINE_WRK.CALCULATE_PB, &I);
         End-If;
         
         UpdateValue(EX_SHEET_LINE.DISTANCE_TYPE, &I, &DISTANCE_TYPE);
         If &line_rec.TXN_CURRENCY_CD.Value = &line_rec.CURRENCY_CD.Value Or
               None(&line_rec.DISTANCE_RT.Value) Then
            UpdateValue(EX_SHEET_LINE.DISTANCE_RT, &I, &DISTANCE_RT);
         End-If;
      End-If;
      
      If &line_rec.TXN_CURRENCY_CD.Value = &line_rec.CURRENCY_CD.Value Or
            None(&line_rec.DISTANCE_RT.Value) Then
         UpdateValue(EX_LINE_WRK.DISTANCE_RT, &I, &DISTANCE_RT);
      Else
         UpdateValue(EX_LINE_WRK.DISTANCE_RT, &I, &line_rec.DISTANCE_RT.Value);
      End-If;
      
      UnHide(EX_LINE_WRK.DISTANCE_RT, &I);
      
      If &RATE_CALC_TYPE = "S" Then
         Hide(EX_SHEET_LINE.TRANSPORT_ID, &I);
         Hide(EX_EE_TRANSPORT.TRANSPORT_TYPE, &I);
      Else
         UnHide(EX_EE_TRANSPORT.TRANSPORT_TYPE, &I);
         UnHide(EX_SHEET_LINE.TRANSPORT_ID, &I);
         
         &line_rec.TRANSPORT_ID.ShowRequiredFieldCue = True;
         &RequiredFieldCountArray [7] = &RequiredFieldCountArray [7] + 1;
      End-If;
      
      If &DISTANCE_TYPE = "M" Then
         UpdateValue(EX_LINE_WRK.MILES, &I, &DISTANCE);
         UnHide(EX_LINE_WRK.MILES, &I);
         
         &line_rec_wrk.GetField(Field.MILES).ShowRequiredFieldCue = True;
         &RequiredFieldCountArray [9] = &RequiredFieldCountArray [9] + 1;
      Else
         UpdateValue(EX_LINE_WRK.KILOMETERS, &I, &DISTANCE);
         UnHide(EX_LINE_WRK.KILOMETERS, &I);
         
         &line_rec_wrk.GetField(Field.KILOMETERS).ShowRequiredFieldCue = True;
         &RequiredFieldCountArray [8] = &RequiredFieldCountArray [8] + 1;
      End-If;
      
      If &NBR_PASSENG_FLG = "Y" Then
         UnHide(EX_SHEET_LINE.NBR_PASSENGERS, &I);
         
         &line_rec.NBR_PASSENGERS.ShowRequiredFieldCue = True;
         &RequiredFieldCountArray [10] = &RequiredFieldCountArray [10] + 1;
      End-If;
      Break;
      
   When "HTL"
      &line_rec.NBR_NIGHTS.Visible = True;
      &line_row.UI_WRK1.WIZARD_PB.Visible = True;
      
      /******** XL Capital BEGIN 03/25/08 ************/
      UnHide(EX_LINE_WRK.XFR_FLG, &I);
      UnGray(EX_LINE_WRK.EXT_REF_NBR);
      UnHide(EX_LINE_WRK.ACTION_PLAN_DESCR, &I);
      /******** XL Capital END 03/25/08 ************/
      
      &line_rec.NBR_NIGHTS.ShowRequiredFieldCue = True;
      &RequiredFieldCountArray [6] = &RequiredFieldCountArray [6] + 1;
      Break;
      
   When "PDL"
      Hide(EX_SHEET_LINE.STARTTM_PERDIEM, &I);
      Hide(EX_SHEET_LINE.ENDTM_PERDIEM, &I);
      UnHide(EX_LINE_WRK.PB_PER_DIEM, &I);
      UnHide(EX_ICLIENT_WRK.PER_DIEM_REFRESH, &I);
      Hide(EX_SHEET_LINE.NBR_NIGHTS, &I);
      Break;
      
   When "PDM"
      &pdedit = get_per_diem_type(EX_SHEET_HDR.SETID, EX_SHEET_HDR.BUSINESS_UNIT_GL, &dTxnDate, &country);
      UnHide(EX_LINE_WRK.PB_PER_DIEM, &I);
      UnHide(EX_ICLIENT_WRK.PER_DIEM_REFRESH, &I);
      If &pdedit = "D" Then /** Daily */
         UnHide(EX_SHEET_LINE.RANGE_SEQ, &I);
         &RANGE_SEQ = &line_rec.GetField(Field.RANGE_SEQ);
         &sSetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_RANGE_DTL", "");
         /* Retrieve Values for Dropdown List and Build DropDown List */
         SQLExec("Select FROM_VALUE_1, TO_VALUE_1, FROM_VALUE_2, TO_VALUE_2, FROM_VALUE_3, TO_VALUE_3, FROM_VALUE_4, TO_VALUE_4 from PS_EX_DUR_VW  where SETID = :1 and COUNTRY = :2", &sSetID, EX_SHEET_HDR.COUNTRY, &fr_1, &to_1, &fr_2, &to_2, &fr_3, &to_3, &fr_4, &to_4);
         &sMsgText = MsgGetText(10504, 310, "Days");
         
         &RANGE_SEQ.ClearDropDownList();
         If &fr_1 <> 0 Or
               &to_1 <> 0 Then
            If Len(&fr_1) = 1 Then
               &fr_1 = " " | &fr_1;
            End-If;
            &value1 = String(&fr_1) | " - " | String(&to_1) | "  " | &sMsgText;
            &RANGE_SEQ.AddDropDownItem(1, &value1);
         End-If;
         
         If &fr_2 <> 0 Or
               &to_2 <> 0 Then
            If Len(&fr_2) = 1 Then
               &fr_2 = " " | &fr_2;
            End-If;
            &value2 = String(&fr_2) | " - " | String(&to_2) | "  " | &sMsgText;
            &RANGE_SEQ.AddDropDownItem(2, &value2);
         End-If;
         
         If &fr_3 <> 0 Or
               &to_3 <> 0 Then
            If Len(&fr_3) = 1 Then
               &fr_3 = " " | &fr_3;
            End-If;
            &value3 = String(&fr_3) | " - " | String(&to_3) | "  " | &sMsgText;
            &RANGE_SEQ.AddDropDownItem(3, &value3);
         End-If;
         
         If &fr_4 <> 0 Or
               &to_4 <> 0 Then
            If Len(&fr_4) = 1 Then
               &fr_4 = " " | &fr_4;
            End-If;
            &value4 = String(&fr_4) | " - " | String(&to_4) | "  " | &sMsgText;
            &RANGE_SEQ.AddDropDownItem(4, &value4);
         End-If;
         
         Hide(EX_SHEET_LINE.STARTTM_PERDIEM, &I);
         Hide(EX_SHEET_LINE.ENDTM_PERDIEM, &I);
         
         &line_rec.RANGE_SEQ.ShowRequiredFieldCue = True;
         &RequiredFieldCountArray [11] = &RequiredFieldCountArray [11] + 1;
      Else
         UnHide(EX_SHEET_LINE.STARTTM_PERDIEM, &I);
         UnHide(EX_SHEET_LINE.ENDTM_PERDIEM, &I);
         Hide(EX_SHEET_LINE.RANGE_SEQ);
         
         &line_rec.STARTTM_PERDIEM.ShowRequiredFieldCue = True;
         &line_rec.ENDTM_PERDIEM.ShowRequiredFieldCue = True;
         &RequiredFieldCountArray [12] = &RequiredFieldCountArray [12] + 1;
      End-If;
      Break;
      
   End-Evaluate;
   
   /*
      For expenses created from credit card transactions, the transaction details must be
      protected from change by the end user.  Perform this last to avoid the expense type
      conditions overriding these settings.
   */
   &bSplitLine = (&line_rec.SHEET_RCPT_NUM.Value <> "");
   If &line_rec.CC_FEED_FLG.Value = "Y" Then
      REM If &bSplitLine = False Then;
      If %Page = Page.TE_RCPT_SPLIT Then
         &line_rec.TXN_AMOUNT.Enabled = True;
      Else
         &line_rec.TXN_AMOUNT.Enabled = False;
      End-If;
      &line_rec.EXPEND_MTHD.Enabled = False;
      REM End-If;
      &line_rec.TRANS_DT.Enabled = False;
      &line_rec.CRDMEM_ACCT_NBR.Enabled = False;
      &line_rec_wrk.CUSTOM_RATE.Enabled = False;
      &line_rec_wrk.VISUAL_RATE_CUR.Enabled = False;
      &line_rec_wrk.RESET_RATE_PB.Enabled = False;
      &line_rec_wrk.PB_EXCH_RT_DTL.Enabled = False;
      &line_rec.TXN_CURRENCY_CD.Enabled = False;
      &line_rec.SHEET_RCPT_TOTAL.DisplayOnly = True;
   End-If;
   &line_rec_wrk.CHK_SYSTEM_RATE.Value = "Y";
   If (&line_rec.RATE_USR_DFN.Value <> "S") Then
      &line_rec_wrk.CHK_SYSTEM_RATE.Value = "N";
   End-If;
   
   /*
      Hide/unhide the applicable icons for exception comments and credit card selection.
   */
   If &line_rec.OUT_OF_POLICY.Value = "Y" Then
      &line_rec_icon.LOC_AMT_COMMENT.Visible = True;
   Else
      &line_rec_icon.LOC_AMT_COMMENT.Visible = False;
   End-If;
   
   If &line_rec.NO_RECEIPT_FLG.Value = "Y" Then
      &MinRcptAmt = EX_SHEET_HDR.BUSINESS_UNIT_GL.GetRelated(BUS_UNIT_TBL_EX.MIN_RCPT_AMT).Value;
      
      If &line_rec.MONETARY_AMOUNT.Value > &MinRcptAmt Then
         &line_rec_icon.NO_RECEIPT_COMMENT.Visible = True;
      Else
         &line_rec_icon.NO_RECEIPT_COMMENT.Visible = False;
      End-If;
   Else
      &line_rec_icon.NO_RECEIPT_COMMENT.Visible = False;
   End-If;
   
   If &line_rec.PREF_MRCH_NOT_USED.Value = "Y" Then
      &line_rec_icon.NON_PREF_MRCH_COMM.Visible = True;
   Else
      &line_rec_icon.NON_PREF_MRCH_COMM.Visible = False;
   End-If;
   
   &line_rec_icon.CREDIT_CARD_SELECT.Visible = False;
   
   If All(&line_rec.EXPEND_MTHD.Value) Then
      &PaymentTypeEdit = &line_rec.EXPEND_MTHD.GetRelated(EX_EXP_MTHD_TBL.EXPEND_MTHD_EDIT).Value;
      
      If &PaymentTypeEdit = "VND" Then
         cc_count(&sEmployeeID, &line_rec.EXPEND_MTHD.Value, &CreditCardCount);
         
         If All(&CreditCardCount) And
               (%Component = Component.EX_SHEET_APPR And
                  (&ProfileAttr.ModifyLinesInfo Or
                     &ProfileAttr.ChangeAllLinesInfo Or
                     &ProfileAttr.AddLinesInfo)) Then
            &line_rec_icon.CREDIT_CARD_SELECT.Visible = True;
         End-If;
      End-If;
      
      /* If this is a prepaid expense, disable the non-reimbursable checkbox. */
      If &PaymentTypeEdit = "PPD" Or
            &PaymentTypeEdit = "PPA" Or
            &PaymentTypeEdit = "PPH" Then
         &line_rec.PERSONAL_EXPENSE.Value = "N";
         &line_rec.PERSONAL_EXPENSE.Enabled = False;
         &line_rec.REIMBURSEMENT_CD.Value = "P";
      Else
         &line_rec.PERSONAL_EXPENSE.Enabled = True;
      End-If;
   End-If;
   
   If &line_rec.MONETARY_AMOUNT.Value < 0 Then
      &line_rec_icon.CRED_REF_COMMENT.Visible = True;
   Else
      &line_rec_icon.CRED_REF_COMMENT.Visible = False;
   End-If;
   
   /*
      Set the project hyperlinks based on the expense lines's accounting detail.  If no expense
      type is specified, just blank out and disable the links.
   */
   If INSTALLATION.PC = "Y" Then
      If All(&line_rec.EXPENSE_TYPE.Value) Then
         set_project_links(&line_row);
      Else
         &line_rec_wrk.BUSINESS_UNIT_PC.Label = " ";
         &line_rec_wrk.BUSINESS_UNIT_PC.Enabled = False;
         &line_rec_wrk.PROJECT_ID.Label = " ";
         &line_rec_wrk.PROJECT_ID.Enabled = False;
         &line_rec_wrk.ACTIVITY_ID.Label = " ";
         &line_rec_wrk.ACTIVITY_ID.Enabled = False;
      End-If;
   End-If;
   
   /*  Set the label for DETAIL_PB for Occasional User to *Detail... if there are required entry fields on the Detail Page, else set it to Detail... */
   If &c_strExEntryMethod = "O" Then
      If &sExpenseTypeEdit <> "NON" Or
            &MERCHANT_REQD_FLG = "Y" Or
            &LOC_REQD_FLG = "Y" Or
            &DESCR_REQD_FLG = "Y" Or
            &TRAVEL_FROM_FLG = "Y" Then
         &line_rec_wrk.DETAIL_PB.Label = &line_rec_wrk.DETAIL_PB.GetLongLabel("DETAILS_REQD");
      Else
         &line_rec_wrk.DETAIL_PB.Label = &line_rec_wrk.DETAIL_PB.GetLongLabel("DETAILS");
      End-If;
   End-If;
   
   /* Allow Txn Ccy changes only when there is no amt entered to avoid decimal digits issues */
   If All(&line_rec.TXN_AMOUNT.Value) Then;
      &line_rec.TXN_CURRENCY_CD.Enabled = False;
   Else
      &line_rec.TXN_CURRENCY_CD.Enabled = True;
   End-If;
   
End-Function;

Function display_line_fields(&rownum)
   Local string &sSetID;
   Local number &nRow;
   
   &sSetID = GetSetId("BUSINESS_UNIT", EX_SHEET_HDR.BUSINESS_UNIT_GL, "BUS_UNIT_TBL_EX", "");
   If &rownum > 0 Then
      display_line(&rownum)
   Else
      For &nRow = 1 To ActiveRowCount(Record.EX_SHEET_LINE)
         display_line(&nRow)
      End-For;
   End-If;
End-Function;

EX_ICLIENT_WRK.SAVE_PB.SavePostChange
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       Added PC to save custom PTA fields
**********************************************************************************/

Declare Function WalletApplyFilter PeopleCode FUNCLIB_EX.WALLET_FN FieldFormula;
Declare Function label_detail PeopleCode EX_TXN_LIST_WRK.PB_FETCH FieldChange;

Component boolean &RunningBudgetCheck;
Local Rowset &pnlbuf;

/* The value for &RunningBudgetCheck is set in EX_HDR_WRK.PB_EXCPTN1_EX1.FieldChange */
/* Record PeopleCode only when budget checking. Value is False by default.           */

&pnlbuf = GetLevel0();

If Len(%CompIntfcName) = 0 Or
      %CompIntfcName = CompIntfc.TE_TIME_ENTRY_WO Then
   If %Component = Component.TE_EXPENSE_SHEET Or
         %Component = Component.TE_EXPENSE_SHEET2 Or
         %Component = Component.TE_TRAVEL_AUTH Or
         %Component = Component.TE_TRAVEL_AUTH2 Or
         %Component = Component.TE_ADVANCE Or
         %Component = Component.TE_ADVANCE2 Or
         %Component = Component.TE_TIME_ENTRY Or
         %Component = Component.TE_TIME_ENTRY2 Then
      
      If %Component = Component.TE_EXPENSE_SHEET Or
            %Component = Component.TE_EXPENSE_SHEET2 Then
         &travel_auth_id = &pnlbuf(1).EX_SHEET_HDR.TRAVEL_AUTH_ID.Value;
         
         /*********XL Capital BEGIN 03/25/08 **************/
         REM THIS PIECE OF CODE SHOULD ONLY FIRE FOR EXPENSE_TYPE_EDIT = 'AIR' or 'HTL';
         &sheet_rs = GetLevel0();
         &Row_Line = GetRow();
         &rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
         Local Rowset &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
         &line_rec = &line_rs(1).GetRecord(Record.EX_SHEET_LINE);
         &line_wrk_rec = &line_rs(1).GetRecord(Record.EX_LINE_WRK);
         /* Retreieve Expense Type Value */
         &ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
         If (&ExpTypeEdit = "AIR") Or
               (&ExpTypeEdit = "HTL") Then
            &STRSheetID = &pnlbuf(1).EX_SHEET_HDR.SHEET_ID.Value;
            remark Update XLPP_TE_EXSLINE;
            Local Rowset &RECLineRec = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE);
            &NBRLineNBR = &RECLineRec(1).EX_SHEET_LINE.LINE_NBR.Value;
            rem Retrieve the PTA Auditor Values;
            &line_rs = GetLevel0().GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
            For &NBRline = 1 To &line_rs.ActiveRowCount
               &RECLineWrkRec = &line_rs(&NBRline).GetRecord(Record.EX_LINE_WRK);
               &STRPTAAuditorFlag = &RECLineWrkRec.XFR_FLG.Value;
               &NBRExtRefNbr = &RECLineWrkRec.EXT_REF_NBR.Value;
               &STRActionPlan = &RECLineWrkRec.ACTION_PLAN_DESCR.Value;
               Local SQL &Update_FLG_SQL = CreateSQL("UPDATE %Table(XLPP_TE_EXSLINE) SET XFR_FLG = 'Y', EXT_REF_NBR = :1 WHERE SHEET_ID = :2 AND LINE_NBR = :3");
               &Update_FLG_SQL.ReuseCursor = True;
               Local SQL &Update_NOFLG_SQL = CreateSQL("UPDATE %Table(XLPP_TE_EXSLINE) SET XFR_FLG = 'N', ACTION_PLAN_DESCR = :1 WHERE SHEET_ID = :2 AND LINE_NBR = :3");
               &Update_NOFLG_SQL.ReuseCursor = True;
               Local SQL &INSERT_FLG_SQL;
               &INSERT_FLG_SQL = CreateSQL("INSERT INTO %Table(XLPP_TE_EXSLINE) (SHEET_ID,LINE_NBR, XFR_FLG,EXT_REF_NBR, ACTION_PLAN_DESCR) VALUES (:1, :2, 'Y', :3, :4)");
               &INSERT_FLG_SQL.BulkMode = True;
               &INSERT_NOFLG_SQL = CreateSQL("INSERT INTO %Table(XLPP_TE_EXSLINE) (SHEET_ID,LINE_NBR, XFR_FLG,EXT_REF_NBR, ACTION_PLAN_DESCR) VALUES (:1, :2, 'N', :3, :4)");
               &INSERT_NOFLG_SQL.BulkMode = True;
               
               If %Mode = "A" And
                     All(&STRSheetID) Then
                  If (&STRPTAAuditorFlag = "Y") Then
                     &INSERT_FLG_SQL.Execute(&STRSheetID, &NBRline, &NBRExtRefNbr, " ");
                  Else
                     &INSERT_NOFLG_SQL.Execute(&STRSheetID, &NBRline, 0, &STRActionPlan);
                  End-If;
               Else /* User has not submitted the Expense Report */
                  If (&STRPTAAuditorFlag = "Y") Then
                     &Update_FLG_SQL.Execute(&NBRExtRefNbr, &STRSheetID, &NBRline);
                  Else
                     &Update_NOFLG_SQL.Execute(&STRActionPlan, &STRSheetID, &NBRline);
                  End-If;
               End-If;
            End-For;
            &INSERT_NOFLG_SQL.Close();
            &INSERT_FLG_SQL.Close();
            &Update_FLG_SQL.Close();
            &Update_NOFLG_SQL.Close();
         End-If;
         
         /* Code to make sure that latest entries are captured in XLPP_TE_EXSLINE before submitting */
         Local Record &EXPeer, &EXRec;
         Local number &A;
         
         &A = CurrentRowNumber();
         &Row = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE).GetRow(&A);
         &EXRec = &Row.GetRecord(Record.EX_SHEET_LINE);
         If &Row.IsChanged Then
            If (&ExpTypeEdit = "AIR") Or
                  (&ExpTypeEdit = "HTL") Then
            Else /**/
               
            End-If;
         End-If;
         /*********XL Capital END 03/25/08 **************/
         If %Mode = "A" And
               All(&travel_auth_id) Then
            SQLExec("update ps_ex_tauth_hdr set copy_travel_auth = 'Y' where travel_auth_id = :1", &travel_auth_id);
         End-If;
      End-If;
      
      If &RunningBudgetCheck = False Then
         /*  skip if cash advance adjustment */
         If &isAdjustCash = False Then
            TransferPanel(Page.TE_SAVE_CONFIRM);
         End-If;
         
      End-If;
      
   Else
      /**/
      /* For My Wallet Transactions - bypass the confirmation & transfer page */
      /**/
      If %Component <> Component.TE_MY_WALLET And
            %Component <> Component.TE_MY_WALLET_RST Then
         
         If %Component = Component.TE_DEL_SHEET Or
               %Component = Component.TE_DEL_ADV Or
               %Component = Component.TE_DEL_TIME Or
               %Component = Component.TE_DEL_TAUTH Then
            TransferPage(Page.TE_DEL_CONFIRM);
         Else
            
            If &RunningBudgetCheck = False And
                  %Component <> Component.EX_SHEET_APPR And
                  %Component <> Component.EX_TAUTH_APPR Then
               TransferPanel(Page.TE_SAVE_CONFIRM);
            End-If;
         End-If;
      Else
         If &RunningBudgetCheck = False And
               %Page = Page.TE_MY_WALLET Then
            WalletApplyFilter(EX_TINQ_SRCH_VW.EMPLID);
            label_detail();
         End-If;
      End-If;
   End-If;
End-If;
EX_ICLIENT_WRK.DYNAMIC_PB_9
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              31/03/08           PPRAKASH       Guide the user by clicking the
													   Green Arrow to fill in all required
													   fields for a particular Expense Type
**********************************************************************************/
Local Row &Row_Line;
Local Record &Rec_LineWrk;

&Row_Line = GetRow();
&Rec_LineWrk = &Row_Line.EX_LINE_WRK;

/*********XL Capital BEGIN 03/31/08 **************/
&Rec_Line = &Row_Line.EX_SHEET_LINE;
&ExpTypeEdit = &Rec_Line.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;

Evaluate &ExpTypeEdit
When = "AIR"
When = "HTL"
   SetCursorPos(%Page, Scroll.EX_SHEET_LINE, &Row_Line.RowNumber, EX_LINE_WRK.XFR_FLG);
   Break;
When-Other;
   SetCursorPos(%Page, Scroll.EX_SHEET_LINE, &Row_Line.RowNumber, EX_SHEET_LINE.TXN_AMOUNT);
   Break;
End-Evaluate;
rem SetCursorPos(%Page, Scroll.EX_SHEET_LINE, &Row_Line.RowNumber, EX_SHEET_LINE.TXN_AMOUNT);
/*********XL Capital END 03/31/08 **************/
EX_ICLIENT_WRK.DYNAMIC_PB_10
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              31/03/08           PPRAKASH       Guide the user by clicking the
													   Green Arrow to fill in all required
													   fields for a particular Expense Type
**********************************************************************************/
/*********XL Capital BEGIN 03/31/08 **************/
Local Row &Row_Line;
Local Record &Rec_Line, &Rec_LineWrk;
Local string &ExpTypeEdit;

&Row_Line = GetRow();
&Rec_Line = &Row_Line.EX_SHEET_LINE;
&Rec_LineWrk = &Row_Line.EX_LINE_WRK;

SetCursorPos(%Page, Scroll.EX_SHEET_LINE, &Row_Line.RowNumber, EX_SHEET_LINE.TXN_AMOUNT);
/*********XL Capital END 03/31/08 **************/
EX_HDR_WRK.PB_DELETE_LN.FieldChange
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       XLPP_TE_EXSLINE should be in
                                                       sync if a line is deleted with 
												       an Expense Type 'AIR' or/and 'HTL'
**********************************************************************************/

Declare Function SetRequiredFieldLabels PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function calc_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;

Component boolean &Adj_Round;
Component number &rownum;
Local Rowset &pnlbuf, &line_data;
Local Record &line_wrk;
Local string &PageTitle;
Local number &RC, &I, &nTxnAmount, &nLineNbr, &L, &LINE_NBR2, &TXN_AMOUNT2;
Local number &nDelLineNbr, &nCounter;
Local string &EXPENSE_TYPE2, &TXN_CURRENCY_CD2;
Local string &sExpenseType, &sTxnCurrencyCd, &sSheetId, &sEmplId;
Local date &dTransDt, &TRANS_DT2;

&PageTitle = EX_ICLIENT_WRK.PAGE_TITLE_60.Value;

&RC = DoModal(Page.TE_DELETE_CONFIRM, " ", - 1, - 1, 0);

If &RC = 1 Then
   EX_ICLIENT_WRK.PAGE_TITLE_60.Value = &PageTitle; /* restore page title */
   
   &pnlbuf = GetLevel0();
   &line_data = &pnlbuf(1).GetRowset(Scroll.EX_SHEET_LINE);
   
   &recalc = False;
   For &I = &line_data.ActiveRowCount To 1 Step - 1
      If &line_data(&I).EX_LINE_WRK.LINE_SELECT_CB.Value = "Y" Then
         If (&line_data(&I).EX_SHEET_LINE.TXN_CURRENCY_CD.Value <> &line_data(&I).EX_SHEET_LINE.CURRENCY_CD.Value) And
               &line_data(&I).EX_SHEET_LINE.MONETARY_AMOUNT.Value <> 0 And
               &recalc <> True Then
            &recalc = True;
         End-If;
         
         /*  Loops through looking for lines that have been deleted within the rowset for the current SHEET ID. We then see if there's a duplicate line saved in the database--if so, we will update the line and by deleting the comment and changing the DUPLICATES_EXIST flag to "Y".  Later in EX_SHEET_HDR.DUPLICATE_EXISTS.SavePreChange, we will delete any lines with a different SHEET ID. */
         
         &sExpenseType = &line_data(&I).EX_SHEET_LINE.EXPENSE_TYPE.Value;
         &dTransDt = &line_data(&I).EX_SHEET_LINE.TRANS_DT.Value;
         &nTxnAmount = &line_data(&I).EX_SHEET_LINE.TXN_AMOUNT.Value;
         &sTxnCurrencyCd = &line_data(&I).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
         &nLineNbr = &line_data(&I).EX_SHEET_LINE.LINE_NBR.Value;
         
         /*find duplicate line */
         For &L = 1 To &line_data.ActiveRowCount
            &EXPENSE_TYPE2 = FetchValue(EX_SHEET_LINE.EXPENSE_TYPE, &L);
            &LINE_NBR2 = &line_data(&L).EX_SHEET_LINE.LINE_NBR.Value;
            &TRANS_DT2 = &line_data(&L).EX_SHEET_LINE.TRANS_DT.Value;
            &TXN_AMOUNT2 = &line_data(&L).EX_SHEET_LINE.TXN_AMOUNT.Value;
            &TXN_CURRENCY_CD2 = &line_data(&L).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
            If &sExpenseType = &EXPENSE_TYPE2 And
                  &dTransDt = &TRANS_DT2 And
                  &nTxnAmount = &TXN_AMOUNT2 And
                  &sTxnCurrencyCd = &TXN_CURRENCY_CD2 And
                  &L <> &I Then
               &nCounter = &nCounter + 1;
               &nDelLineNbr = &L;
            End-If;
         End-For;
         /* Delete comment and set Flag to 'N' only if find 1 duplicate line in rowset--otherwise, keep flag to 'Y' and comment */
         If &nCounter = 1 Then
            &L = &nDelLineNbr;
            UpdateValue(EX_SHEET_LINE.DUPLICATES_EXIST, &L, "N");
            UpdateValue(EX_SHEET_LINE.EE_DPLCAT_COMMENT, &L, "");
            UpdateValue(EX_SHEET_HDR.DUPLICATES_EXIST, "N");
         End-If;
         
         /* Delete row */
         /*********XL Capital BEGIN 03/31/08 **************/
         REM MAKE SURE THAT THE XL CUSTOM TABLE XLPP_TE_EXSLINE is also in sync;
         &line_rec = &line_data(1).GetRecord(Record.EX_SHEET_LINE);
         &line_wrk_rec = &line_data(1).GetRecord(Record.EX_LINE_WRK);
         /* Retreieve Expense Type Value */
         &ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
         If (&ExpTypeEdit = "AIR") Or
               (&ExpTypeEdit = "HTL") Then
            &STR_SHEET_ID = FetchValue(EX_SHEET_LINE.SHEET_ID, &I);
            SQLExec("DELETE FROM %Table(XLPP_TE_EXSLINE) WHERE SHEET_ID = :1 and LINE_NBR = :2", &STR_SHEET_ID, &I);
         End-If;
         /*********XL Capital END 03/31/08 **************/
         &line_data.DeleteRow(&I);
         SetRequiredFieldLabels();
         
      End-If;
   End-For;
   
   If %Component = Component.EX_SHEET_APPR Then
      If &line_data.ActiveRowCount = 1 And
            &line_data(1).EX_SHEET_LINE.EXPENSE_TYPE.Value = "" Then
         &line_data(1).EX_SHEET_LINE.LINE_NBR.Value = EX_HDR_WRK.MAX_LINE_NUMBER;
      End-If;
   End-If;
   
   /* Re-calculate monetary amounts that will be actually paid considering rounding differences */
   If &recalc Then
      &actual_rownum = &rownum;
      &Adj_Round = True;
      For &count = 1 To &line_data.ActiveRowCount
         &rownum = &count;
         If &line_data(&count).EX_SHEET_LINE.TXN_CURRENCY_CD.Value <> &line_data(&count).EX_SHEET_LINE.CURRENCY_CD.Value Then
            calc_base_amt(&line_data(&count).EX_SHEET_LINE.MONETARY_AMOUNT.Value, "N");
         End-If;
      End-For;
      &rownum = &actual_rownum;
      &Adj_Round = False;
   End-If;
   
End-If;
EX_SHEET_ENTRY.Activate
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       Added PC to display custom Tab separator for PTA
**********************************************************************************/

import EX_UI:ApproveTransactions:ProfileAttributes:ProfileAttributes;

Declare Function get_per_diem_type PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function SetRequiredFieldLabels PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function ReceiptIndexed PeopleCode FUNCLIB_EX.RECEIPT_IMAGE FieldFormula;
Declare Function IsReceiptImaging PeopleCode FUNCLIB_EX.RECEIPT_IMAGE FieldFormula;
Declare Function IsHideAllRoleVATOptions PeopleCode EX_SHEET_LINE.TXN_LOCATION FieldChange;

Global string &Disp_Exp_Hist_button;
Component Rowset &pnlbuf;
Component string &mode, &ReturnPanel, &c_strAcctDisplay, &c_strExEntryMethod;
Component number &GridMileageDisplay, &GridPerDiemDisplay, &c_nbrDeniedLines;
Component boolean &BUIsVatEnabled;
Component Rowset &rsRoleVat;
Component EX_UI:ApproveTransactions:ProfileAttributes:ProfileAttributes &ProfileAttr;
Local Rowset &line_data;
Local Record &line_rec, &line_wrk_rec;
Local boolean &LineFound;
Local GridColumn &GridColumn;

/*
   The following function determines whether certain grid columns and tabs (i.e. for Auto Mileage
   and Per Diem) should be displayed to the user.

   &GridMileageDisplay = -1 if all mileage fields should be hidden;
                       = +1 if mileage fields should be displayed and kilometers field used;
                       = +2 if mileage fields should be displayed and miles field used.
   &GridPerDiemDisplay = -1 if all per diem fields should be hidden;
                       = +1 if per diem fields should be displayed and range field used;
                       = +2 if per diem fields should be displayed and start/end times used.
*/
Function DetermineGridDisplay();
   Local SQL &SQL_ExpEdit;
   Local string &SetID, &ExpTypeEdit, &DistanceType, &PerDiemEdit;
   
   &GridMileageDisplay = - 1;
   &GridPerDiemDisplay = - 1;
   
   /* See if there are any expense types for auto mileage and per diem. */
   
   &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL.Value, Record.EX_TYPES_VW1, "");
   
   &SQL_ExpEdit = CreateSQL("select distinct EXPENSE_TYPE_EDIT from PS_EX_TYPES_VW1 where SETID = :1 and EXPENSE_TYPE_EDIT in ('AUT','PDL','PDM')", &SetID);
   
   While &SQL_ExpEdit.Fetch(&ExpTypeEdit)
      If &ExpTypeEdit = "AUT" Then
         &GridMileageDisplay = 1;
      Else
         &GridPerDiemDisplay = 1;
      End-If;
   End-While;
   &SQL_ExpEdit.Close();
   
   /* If auto mileage expenses exist, determine whether we should display miles or kilometers. */
   
   If &GridMileageDisplay = 1 Then
      &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL.Value, Record.EX_AUTO_RT_TBL, "");
      
      SQLExec("select DISTANCE_TYPE from PS_EX_AUTO_RT_TBL A where A.SETID = :1 and A.COUNTRY = :2 and EFFDT = (select max(A1.EFFDT) from PS_EX_AUTO_RT_TBL A1 where A1.SETID = :3 and A1.EXPENSE_TYPE = A.EXPENSE_TYPE and A1.COUNTRY = :4 and A1.EFFDT <= %CurrentDateIn) and A.EFF_STATUS = 'A'", &SetID, EX_SHEET_HDR.COUNTRY.Value, &SetID, EX_SHEET_HDR.COUNTRY.Value, &DistanceType);
      
      If &DistanceType = "M" Then
         &GridMileageDisplay = 2;
      End-If;
   End-If;
   
   /* If per diem expenses exist, determine whether we should display per diem range or time. */
   
   If &GridPerDiemDisplay = 1 Then
      &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL.Value, Record.EX_RANGE_TBL, "");
      
      &PerDiemEdit = get_per_diem_type(&SetID, EX_SHEET_HDR.BUSINESS_UNIT_GL.Value, %Date, EX_SHEET_HDR.COUNTRY.Value);
      
      If &PerDiemEdit = "H" Then
         &GridPerDiemDisplay = 2;
      End-If;
   End-If;
End-Function;


&ReturnPanel = "Page.EX_SHEET_ENTRY";

/* Transfer to the inquiry if Submit was pressed and confirmed. */
If EX_HDR_WRK.PB_SUBMIT.Value = "Y" Then
   If %Component = Component.TE_EXPENSE_SHEET Then
      Transfer( False, MenuName.ADMINISTER_EXPENSE_FUNCTIONS, BarName.INQUIRE, ItemName.TE_EXP_SHEET_INQ, Page.EX_SHEET_ENTRY, "U", EX_SHEET_HDR.SHEET_ID);
   Else
      Transfer( False, MenuName.AUDIT_EXPENSE_FUNCTIONS, BarName.INQUIRE, ItemName.TE_EXP_SHEET_INQ, Page.EX_SHEET_ENTRY, "U", EX_SHEET_HDR.SHEET_ID);
   End-If;
End-If;

/* Set the page title appropriately. */
If &mode = "Entry" Then
   EX_ICLIENT_WRK.PAGE_TITLE_60.Value = MsgGetText(10504, 377, "Expense Report Entry");
Else
   EX_ICLIENT_WRK.PAGE_TITLE_60.Value = MsgGetText(10504, 57, "Expense Report Detail");
End-If;

EX_HDR_WRK.SHEET_ID.Value = EX_SHEET_HDR.SHEET_ID.Value;
EX_ICLIENT_WRK.TRANSACTION_ID.Value = EX_SHEET_HDR.SHEET_ID.Value;

&pnlbuf = GetLevel0();
&line_data = &pnlbuf(1).GetRowset(Scroll.EX_SHEET_LINE);

/* Hide the creation method hyperlinks if at least one expense line already exists. */

If %Mode = "A" Then
   &LineFound = False;
   &I = 1;
   
   While Not &LineFound And
         &I <= &line_data.ActiveRowCount
      If All(&line_data(&I).EX_SHEET_LINE.EXPENSE_TYPE.Value) Then
         &LineFound = True;
      Else
         &I = &I + 1;
      End-If;
   End-While;
Else
   &LineFound = True;
End-If;

If &LineFound Then
   EX_ICLIENT_WRK.START_DROPDOWN.Visible = False;
   EX_ICLIENT_WRK.GO_PB2.Visible = False;
Else
   /* Reinitialize the population method if no lines were inserted into the expense report. */
   EX_HDR_WRK.POPULATE_MTHD = "K";
End-If;

/* Hide the travel authorization link if one hasn't been applied to the expense report. */
If &mode = "Entry" Then
   If All(EX_SHEET_HDR.TRAVEL_AUTH_ID.Value) Then
      EX_HDR_WRK.TRAVEL_AUTH_ID.Label = EX_SHEET_HDR.TRAVEL_AUTH_ID.Value;
      EX_HDR_WRK.TRAVEL_AUTH_ID.Visible = True;
      EX_SHEET_HDR.TRAVEL_AUTH_ID.Visible = True;
   Else
      EX_HDR_WRK.TRAVEL_AUTH_ID.Visible = False;
      EX_SHEET_HDR.TRAVEL_AUTH_ID.Visible = False;
   End-If;
End-If;

&Grid = GetGrid(Page.EX_SHEET_ENTRY, "EX_SHEET_LINE");

/*
   Allow expense lines to be added if in Entry, Approve with Change All flag, or Override mode.  Also,
   initialize the icon labels or hide the various icons in the grid based on the mode.
*/

If &mode = "Entry" Or
      (&mode = "Approve" And
         (&ProfileAttr.ChangeAll Or
            &ProfileAttr.ChangeAllLinesInfo Or
            &ProfileAttr.AddLinesInfo)) Then
   &line_data.InsertEnabled = True;
   
   /* Hide the expense type and payment type description column -- we want to display the dropdown here. */
   &GridColumn = &Grid.GetColumn("EXPENSE_TYPE_DESCR");
   &GridColumn.Visible = False;
   
   &GridColumn = &Grid.GetColumn("PYMNT_TYPE_DESCR");
   &GridColumn.Visible = False;
   
   &GridColumn = &Grid.GetColumn("BILL_CODE_DESCR");
   &GridColumn.Visible = False;
   
   
   /* Initialize column labels for the various icons. */
   If &c_strExEntryMethod <> "O" Then
      /* Avoid processing for Occasional users */
      &GridColumn = &Grid.GetColumn("RCPT_SPLIT_ICON");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("HOTEL_WIZARD_ICON");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("CALC_MILEAGE_ICON");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("CALC_PERDIEM_ICON");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("CALC_VAT_ICON");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("REFRESH_RATE_ICON");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON1");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON2");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON3");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON4");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON5");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON6");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON7");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON8");
      &GridColumn.Label = " ";
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON9");
      &GridColumn.Label = " ";
      /*********XL Capital BEGIN 03/31/08 **************/
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON10");
      &GridColumn.Label = " ";
      /*********XL Capital END 03/31/08 **************/
   End-If;
   
   &GridColumn = &Grid.GetColumn("DENIAL_REASON_VIEW");
   If &mode = "Entry" And
         &c_nbrDeniedLines > 0 Then
      &GridColumn.Visible = True;
   Else
      &GridColumn.Visible = False;
   End-If;
   
Else
   &line_data.InsertEnabled = False;
   If &mode = "Approve" Then
      If &ProfileAttr.AddLinesInfo Then
         &line_data.InsertEnabled = True;
         EX_HDR_WRK.PB_DELETE_LN.Visible = False;
      Else
         If &ProfileAttr.DeleteLinesInfo Then
            &line_data.InsertEnabled = False;
            EX_HDR_WRK.PB_DELETE_LN.Visible = True;
         End-If;
      End-If;
   End-If;
   
   
   /* Hide the expense type dropdown and set the column label appropriately for the description. */
   &GridColumn = &Grid.GetColumn("EXPENSE_TYPE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("EXPENSE_TYPE_DESCR");
   &GridColumn.Label = "*" | &line_data(1).EX_SHEET_LINE.EXPENSE_TYPE.GetLongLabel("EXPENSE_TYPE");
   &GridColumn = &Grid.GetColumn("PAYMENT_TYPE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PYMNT_TYPE_DESCR");
   &GridColumn.Visible = True;
   &GridColumn.Label = "*" | &line_data(1).EX_SHEET_LINE.EXPEND_MTHD.GetLongLabel("EXPEND_MTHD");
   
   &GridColumn = &Grid.GetColumn("BILL_CODE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("BILL_CODE_DESCR");
   &GridColumn.Visible = True;
   &GridColumn.Label = "*" | &line_data(1).EX_SHEET_LINE.BILL_CODE_EX.GetShortLabel("BILL_CODE_EX");
   
   
   /* Hide the columns that don't apply when not in Entry, Pre-Pay Audit, or Override mode. */
   &GridColumn = &Grid.GetColumn("SELECT_CB");
   &GridColumn.Visible = False;
   If &c_strExEntryMethod <> "O" Then
      /* Avoid processing for Occasional users */
      &GridColumn = &Grid.GetColumn("RCPT_SPLIT_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("HOTEL_WIZARD_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_MILEAGE_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_PERDIEM_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_VAT_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("REFRESH_RATE_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON1");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON2");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON3");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON4");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON5");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON6");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON7");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON8");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON9");
      &GridColumn.Visible = False;
   End-If;
   
   &GridColumn = &Grid.GetColumn("DENIAL_REASON_VIEW");
   If &mode = "Inquiry" And
         &c_nbrDeniedLines > 0 Then
      &GridColumn.Visible = True;
   Else
      &GridColumn.Visible = False;
   End-If;
   
End-If;

/* Hide Accounting Detail button if employee does not have access to accounting information. */
If &c_strExEntryMethod <> "O" Then
   /* Avoid processing for Occasional users */
   
   &GridColumn = &Grid.GetColumn("ACCTG_DTL_ICON");
   If &c_strAcctDisplay = "H" Then
      &GridColumn.Visible = False;
   Else
      &GridColumn.Label = " ";
   End-If;
End-If;

/* Hide grid column labels for the various buttons. */
&GridColumn = &Grid.GetColumn("ERROR_ICON");
&GridColumn.Label = " ";
If &c_strExEntryMethod <> "O" Then
   /* Avoid processing for Occasional users */
   &GridColumn = &Grid.GetColumn("ATTENDEE_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("NO_RECEIPT_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("CC_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("CREDIT_REF_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("LOC_AMT_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("NON_PREF_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("PERDIEM_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("VAT_DETAIL_ICON");
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("RATE_DETAIL_ICON");
   &GridColumn.Label = " ";
End-If;

/* If the user's GL business unit is not VAT-enabled, hide the VAT tab and fields. */
If Not &BUIsVatEnabled Or
      (&BUIsVatEnabled And
         IsHideAllRoleVATOptions("VAT_FIELDS_WRK")) Then
   /* AEA add function to detemrine if all of these VAT are hidden */
   If &c_strExEntryMethod <> "O" Then
      /* Avoid processing for Occasional users */
      &GridColumn = &Grid.GetColumn("VAT_GRIDTAB");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_VAT_AMT");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_VAT_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("OVERRIDE_VAT_AMT");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VAT_CURRENCY");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("NO_VAT_RECEIPT");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VAT_DETAIL_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON8");
      &GridColumn.Visible = False;
   End-If;
End-If;

/*
   If &GridMileageDisplay is 0, we haven't yet determined which grid columns to display for the
   Auto Mileage and Per Diem grid tabs.  Call function to fetch the appropriate information.
*/
If None(&GridMileageDisplay) Then
   If &c_strExEntryMethod <> "O" Then
      /* Avoid processing for Occasional users */
      DetermineGridDisplay();
   End-If;
End-If;

/* Based on the fetched information, hide the appropriate grid columns. */

If &c_strExEntryMethod <> "O" Then
   /* Avoid processing for Occasional users */
   If &GridMileageDisplay = - 1 Then
      /* No mileage expense types were found; hide the Mileage Detail tab and fields. */
      &GridColumn = &Grid.GetColumn("MILEAGE_GRIDTAB");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("TRANSPORT_ID");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("KILOMETERS");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("MILES");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("MILEAGE_RATE");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_MILEAGE_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("NBR_PASSENGERS");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("TRAVEL_FROM_LOC");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON6");
      &GridColumn.Visible = False;
   Else
      If &GridMileageDisplay = 1 Then
         /* Display the Kilometers field only (i.e. hide Miles). */
         &GridColumn = &Grid.GetColumn("KILOMETERS");
         &GridColumn.Visible = True;
         &GridColumn = &Grid.GetColumn("MILES");
         &GridColumn.Visible = False;
      Else
         /* Display the Miles field only (i.e. hide Kilometers). */
         &GridColumn = &Grid.GetColumn("MILES");
         &GridColumn.Visible = True;
         &GridColumn = &Grid.GetColumn("KILOMETERS");
         &GridColumn.Visible = False;
      End-If;
   End-If;
   
   If &GridPerDiemDisplay = - 1 Then
      /* No per diem expense types were found; hide the Per Diem Detail tab and fields. */
      &GridColumn = &Grid.GetColumn("PERDIEM_GRIDTAB");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PERDIEM_RANGE");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PERDIEM_STARTTM");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PERDIEM_ENDTM");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PERDIEM_AMT");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PERDIEM_CURRENCY");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("CALC_PERDIEM_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("PERDIEM_ICON");
      &GridColumn.Visible = False;
      &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON7");
      &GridColumn.Visible = False;
   Else
      If &GridPerDiemDisplay = 1 Then
         /* Display only the Per Diem Range (i.e. hide Start Time and End Time). */
         &GridColumn = &Grid.GetColumn("PERDIEM_STARTTM");
         &GridColumn.Visible = False;
         &GridColumn = &Grid.GetColumn("PERDIEM_ENDTM");
         &GridColumn.Visible = False;
      Else
         /* Display Start Time and End Time (i.e. hide Per Diem Range). */
         &GridColumn = &Grid.GetColumn("PERDIEM_RANGE");
         &GridColumn.Visible = False;
      End-If;
   End-If;
End-If;

/* Occasional User */
If &c_strExEntryMethod = "O" Then
   &GridColumn = &Grid.GetColumn("DETAIL_ICON");
   &GridColumn.Visible = True;
   &GridColumn.Label = " ";
   &GridColumn = &Grid.GetColumn("EXPDTL_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("DESCR");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERSONAL_EXPENSE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("NO_RECEIPT_FLG");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("NO_RECEIPT_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("RCPT_SPLIT_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CC_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CREDIT_REF_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("LOCATION_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TXN_LOCATION");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("LOCATION");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("LOC_AMT_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TRAVEL_FROM");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("ORIG_LOCATION");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MERCHANT_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MERCHANT_CD");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MERCHANT");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("NON_PREF_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("AIRHOTEL_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TICKET_NBR");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("NBR_NIGHTS");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("HOTEL_WIZARD_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MILEAGE_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MILEAGE_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TRANSPORT_ID");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("KILOMETERS");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MILES");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("MILEAGE_RATE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_MILEAGE_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("NBR_PASSENGERS");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TRAVEL_FROM_LOC");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON6");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_RANGE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_STARTTM");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_ENDTM");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_AMT");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_CURRENCY");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_PERDIEM_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("PERDIEM_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON7");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VAT_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_VAT_AMT");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_VAT_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("OVERRIDE_VAT_AMT");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VAT_CURRENCY");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("NO_VAT_RECEIPT");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VAT_DETAIL_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON8");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CURRENCY_GRIDTAB");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TRANS_AMT2");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("TXN_CUR_CD");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("EXCHANGE_RATE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CHK_SYSTEM_RATE");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("REFRESH_RATE_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("RATE_DETAIL_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("REIMB_AMOUNT");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CUR_CD");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("ACCTG_DTL_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("ATTENDEE_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("RCPT_SPLIT_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("HOTEL_WIZARD_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_MILEAGE_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_PERDIEM_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("CALC_VAT_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("REFRESH_RATE_ICON");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON1");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON2");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON3");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON4");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON5");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON6");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON7");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON8");
   &GridColumn.Visible = False;
   &GridColumn = &Grid.GetColumn("VIEWNEXT_ICON9");
   &GridColumn.Visible = False;
   
Else /* Frequent User */
   /* Determine the expense lines' required fields and update grid column labels accordingly. */
   SetRequiredFieldLabels();
   
   &GridColumn = &Grid.GetColumn("DETAIL_ICON");
   &GridColumn.Visible = False;
End-If;

/* Check to see if a Receipt Image Exists for Expense Report */
If ReceiptIndexed(EX_SHEET_HDR.SHEET_STATUS, EX_SHEET_HDR.RECEIPTS_RECEIVED) Then
   EX_SHEET_HDR.RECEIPTS_RECEIVED.Visible = True;
   EX_SHEET_HDR.RECEIPTS_RECEIVED.Enabled = False;
   EX_SHEET_HDR.RCPT_RECEIVED_DT.Visible = True;
   EX_ICLIENT_WRK.EX_VIEW_RECEIPTS.Visible = True;
Else
   EX_SHEET_HDR.RCPT_RECEIVED_DT.Visible = False;
   EX_ICLIENT_WRK.EX_VIEW_RECEIPTS.Visible = False;
End-If;

/* If Override or Receipt Verification Component, display hyperlinks to Pending and Exceptions Queues related to Expense Receipt Imaging */
If (%Component = Component.EX_SHEET_APPR And
      &ProfileAttr.OverrideTransaction) Or
      %Component = Component.TE_VERIFY_EXP_RCPT Then
   If IsReceiptImaging() Then
      EX_SHEET_HDR.RECEIPTS_RECEIVED.Visible = True;
      EX_SHEET_HDR.RECEIPTS_RECEIVED.Enabled = False;
      EX_SHEET_HDR.RCPT_RECEIVED_DT.Visible = True;
      EX_ICLIENT_WRK.EX_VIEW_EXCP.Visible = True;
      EX_ICLIENT_WRK.EX_VIEW_PEND.Visible = True;
   Else
      EX_ICLIENT_WRK.EX_VIEW_EXCP.Visible = False;
      EX_ICLIENT_WRK.EX_VIEW_PEND.Visible = False;
   End-If;
Else
   EX_ICLIENT_WRK.EX_VIEW_EXCP.Visible = False;
   EX_ICLIENT_WRK.EX_VIEW_PEND.Visible = False;
End-If;

/* Hide "Return to TIP Inquiry Page" hyperlink if not in an inquiry component. */
If %Component <> Component.TE_EXP_SHEET_INQ Then
   EX_HDR_WRK.PB_RETURN.Visible = False;
End-If;

If %Component = Component.EX_SHEET_APPR Then
   If &ProfileAttr.ViewUserDefaults Then
      EX_HDR_WRK.PB_USER_PREF.Visible = True;
   Else
      EX_HDR_WRK.PB_USER_PREF.Visible = False;
   End-If;
End-If;


/* Hide "Revise Report Button", this should changed to include to logic to only display 
if Inquiry as well submitter can still revise the doc */
/*If %Component <> Component.TE_EXP_SHEET_INQ  Then
   EX_ICLIENT_WRK.REVISE_REPORT.Visible = False;
End-If; */

/* Hide return to Review Exp Hist hyperlink when the page is not called from it */
If &Disp_Exp_Hist_button <> "Y" Then
   EX_ICLIENT_WRK.EX_MISC_PB.Visible = False;
Else
   &Disp_Exp_Hist_button = "N";
End-If;

EX_EFFDT_WRK.EFFDT = EX_SHEET_HDR.CREATION_DT;
/*********XL Capital BEGIN 03/25/08 **************/
&sheet_rs = GetLevel0();
&Row_Line = GetRow();
&rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
Local Rowset &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
&line_rec = &line_rs(1).GetRecord(Record.EX_SHEET_LINE);
&line_wrk_rec = &line_rs(1).GetRecord(Record.EX_LINE_WRK);

&ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
&STRXFRFLG = &line_wrk_rec.XFR_FLG.Value;
<*
If %Mode = "A" Then
   &GridColumn = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
   rem &GridColumn.Visible = False;
Else
   /* Check whether the Expense sheet being viewed/modified has an expense type edit of 'AIR' or 'HTL'*/
   If (&ExpTypeEdit = "AIR") Or
         (&ExpTypeEdit = "HTL") Then
      If (&STRXFRFLG = "Y") Then
         &GridColumn = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
         rem &GridColumn.Visible = True;
         Gray(EX_LINE_WRK.ACTION_PLAN_DESCR);
      Else
         &GridColumn = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
         rem &GridColumn.Visible = True;
         Gray(EX_LINE_WRK.EXT_REF_NBR);
      End-If;
   Else
      &GridColumn = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
      &GridColumn.Visible = False;
   End-If;
End-If;
*>
If Len(%CompIntfcName) > 0 Then
   &rownum = CurrentRowNumber();
End-If;

Rem Retrieve the PTA Auditor fields;
&STRSHEET_ID = &rEXP_HDR.SHEET_ID.Value;

For &NBRline = 1 To &line_rs.ActiveRowCount
   &RECLineWrkRec = &line_rs(&NBRline).GetRecord(Record.EX_LINE_WRK);
   SQLExec("SELECT XFR_FLG, EXT_REF_NBR, ACTION_PLAN_DESCR FROM PS_XLPP_TE_EXSLINE WHERE SHEET_ID = :1 AND LINE_NBR = :2", &STRSHEET_ID, &NBRline, &STRXFRFLG, &NBRREFNBR, &STRACTION);
   REM CHECK THE SHEET STATUS;
   &STR_SHEET_STATUS = &rEXP_HDR.SHEET_STATUS.Value;
   If (&STR_SHEET_STATUS = "PND") Then
      If (&STRXFRFLG = "N") Then
         Hide(EX_LINE_WRK.EXT_REF_NBR, &NBRline);
         &RECLineWrkRec.XFR_FLG.Value = &STRXFRFLG;
         rem &RECLineWrkRec.EXT_REF_NBR.Value = &NBRREFNBR;
         &RECLineWrkRec.ACTION_PLAN_DESCR.Value = &STRACTION;
         &RECLineWrkRec.XFR_FLG.ShowRequiredFieldCue = True;
         &RECLineWrkRec.ACTION_PLAN_DESCR.ShowRequiredFieldCue = True;
      Else
         Hide(EX_LINE_WRK.ACTION_PLAN_DESCR, &NBRline);
         &RECLineWrkRec.XFR_FLG.Value = &STRXFRFLG;
         &RECLineWrkRec.EXT_REF_NBR.Value = &NBRREFNBR;
         &RECLineWrkRec.XFR_FLG.ShowRequiredFieldCue = True;
         &RECLineWrkRec.EXT_REF_NBR.ShowRequiredFieldCue = True;
      End-If;
   End-If;
End-For;
/*********XL Capital END 03/25/08 **************/
TE_EXPENSE_SHEET2.GBL.EX_SHEET_LINE.EXPENSE_TYPE.FieldChange
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       Added PC to control display of custom Tab for PTA
**********************************************************************************/
/*********XL Capital BEGIN 03/25/08 **************/
&Grid = GetGrid(Page.EX_SHEET_ENTRY, "EX_SHEET_LINE");
rem &strExpTypeEdit = &recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;

If (EX_TYPES_TBL.EXPENSE_TYPE_EDIT.Value = "AIR") Or
      (EX_TYPES_TBL.EXPENSE_TYPE_EDIT.Value = "HTL") Then
   &GridColumn = &Grid.GetColumn("PTA_AUDIT_GRIDTAB");
   &GridColumn.Visible = True;
   rem EX_LINE_WRK.EXT_REF_NBR.Visible = True;
   EX_LINE_WRK.EXT_REF_NBR.ShowRequiredFieldCue = True;
   EX_LINE_WRK.ACTION_PLAN_DESCR.ShowRequiredFieldCue = False;
   EX_LINE_WRK.ACTION_PLAN_DESCR.Visible = False;
End-If;

/*********XL Capital END 03/25/08 **************/
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       XLPP_TE_EXSLINE should be in
                                                       sync if a line is deleted with 
												       an Expense Type 'AIR' or/and 'HTL'
**********************************************************************************/

Declare Function SetRequiredFieldLabels PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function calc_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;

Component boolean &Adj_Round;
Component number &rownum;
Local Rowset &pnlbuf, &line_data;
Local Record &line_wrk;
Local string &PageTitle;
Local number &RC, &I, &nTxnAmount, &nLineNbr, &L, &LINE_NBR2, &TXN_AMOUNT2;
Local number &nDelLineNbr, &nCounter;
Local string &EXPENSE_TYPE2, &TXN_CURRENCY_CD2;
Local string &sExpenseType, &sTxnCurrencyCd, &sSheetId, &sEmplId;
Local date &dTransDt, &TRANS_DT2;

&PageTitle = EX_ICLIENT_WRK.PAGE_TITLE_60.Value;

&RC = DoModal(Page.TE_DELETE_CONFIRM, " ", - 1, - 1, 0);

If &RC = 1 Then
   EX_ICLIENT_WRK.PAGE_TITLE_60.Value = &PageTitle; /* restore page title */
   
   &pnlbuf = GetLevel0();
   &line_data = &pnlbuf(1).GetRowset(Scroll.EX_SHEET_LINE);
   
   &recalc = False;
   For &I = &line_data.ActiveRowCount To 1 Step - 1
      If &line_data(&I).EX_LINE_WRK.LINE_SELECT_CB.Value = "Y" Then
         If (&line_data(&I).EX_SHEET_LINE.TXN_CURRENCY_CD.Value <> &line_data(&I).EX_SHEET_LINE.CURRENCY_CD.Value) And
               &line_data(&I).EX_SHEET_LINE.MONETARY_AMOUNT.Value <> 0 And
               &recalc <> True Then
            &recalc = True;
         End-If;
         
         /*  Loops through looking for lines that have been deleted within the rowset for the current SHEET ID. We then see if there's a duplicate line saved in the database--if so, we will update the line and by deleting the comment and changing the DUPLICATES_EXIST flag to "Y".  Later in EX_SHEET_HDR.DUPLICATE_EXISTS.SavePreChange, we will delete any lines with a different SHEET ID. */
         
         &sExpenseType = &line_data(&I).EX_SHEET_LINE.EXPENSE_TYPE.Value;
         &dTransDt = &line_data(&I).EX_SHEET_LINE.TRANS_DT.Value;
         &nTxnAmount = &line_data(&I).EX_SHEET_LINE.TXN_AMOUNT.Value;
         &sTxnCurrencyCd = &line_data(&I).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
         &nLineNbr = &line_data(&I).EX_SHEET_LINE.LINE_NBR.Value;
         
         /*find duplicate line */
         For &L = 1 To &line_data.ActiveRowCount
            &EXPENSE_TYPE2 = FetchValue(EX_SHEET_LINE.EXPENSE_TYPE, &L);
            &LINE_NBR2 = &line_data(&L).EX_SHEET_LINE.LINE_NBR.Value;
            &TRANS_DT2 = &line_data(&L).EX_SHEET_LINE.TRANS_DT.Value;
            &TXN_AMOUNT2 = &line_data(&L).EX_SHEET_LINE.TXN_AMOUNT.Value;
            &TXN_CURRENCY_CD2 = &line_data(&L).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
            If &sExpenseType = &EXPENSE_TYPE2 And
                  &dTransDt = &TRANS_DT2 And
                  &nTxnAmount = &TXN_AMOUNT2 And
                  &sTxnCurrencyCd = &TXN_CURRENCY_CD2 And
                  &L <> &I Then
               &nCounter = &nCounter + 1;
               &nDelLineNbr = &L;
            End-If;
         End-For;
         /* Delete comment and set Flag to 'N' only if find 1 duplicate line in rowset--otherwise, keep flag to 'Y' and comment */
         If &nCounter = 1 Then
            &L = &nDelLineNbr;
            UpdateValue(EX_SHEET_LINE.DUPLICATES_EXIST, &L, "N");
            UpdateValue(EX_SHEET_LINE.EE_DPLCAT_COMMENT, &L, "");
            UpdateValue(EX_SHEET_HDR.DUPLICATES_EXIST, "N");
         End-If;
         
         /* Delete row */
         /*********XL Capital BEGIN 03/31/08 **************/
         REM MAKE SURE THAT THE XL CUSTOM TABLE XLPP_TE_EXSLINE is also in sync;
         &line_rec = &line_data(1).GetRecord(Record.EX_SHEET_LINE);
         &line_wrk_rec = &line_data(1).GetRecord(Record.EX_LINE_WRK);
         /* Retreieve Expense Type Value */
         &ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
         MessageBox(0, "", 0, 0, "Delete");
         Local Rowset &line_rs = GetLevel0().GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
         /* Retrieve the Line Number from EX_SHEET_LINE */
         &NBR_Orig_Line_nbr = &line_rs(&I).GetRecord(Record.EX_SHEET_LINE).GetField(Field.LINE_NBR).Value;
         If (&ExpTypeEdit = "AIR") Or
               (&ExpTypeEdit = "HTL") Then
            &STR_SHEET_ID = FetchValue(EX_SHEET_LINE.SHEET_ID, &I);
            MessageBox(0, "", 0, 0, "SHEET_+ID " | &STR_SHEET_ID | ", " | &I);
            MessageBox(0, "", 0, 0, "&NBR_Orig_Line_nbr " | &NBR_Orig_Line_nbr);
            SQLExec("DELETE FROM %Table(XLPP_TE_EXSLINE) WHERE SHEET_ID = :1 and LINE_NBR = :2", &STR_SHEET_ID, &NBR_Orig_Line_nbr);
         End-If;
         /*********XL Capital END 03/31/08 **************/
         &line_data.DeleteRow(&I);
         SetRequiredFieldLabels();
         
      End-If;
   End-For;
   
   If %Component = Component.EX_SHEET_APPR Then
      If &line_data.ActiveRowCount = 1 And
            &line_data(1).EX_SHEET_LINE.EXPENSE_TYPE.Value = "" Then
         &line_data(1).EX_SHEET_LINE.LINE_NBR.Value = EX_HDR_WRK.MAX_LINE_NUMBER;
      End-If;
   End-If;
   
   /* Re-calculate monetary amounts that will be actually paid considering rounding differences */
   If &recalc Then
      &actual_rownum = &rownum;
      &Adj_Round = True;
      For &count = 1 To &line_data.ActiveRowCount
         &rownum = &count;
         If &line_data(&count).EX_SHEET_LINE.TXN_CURRENCY_CD.Value <> &line_data(&count).EX_SHEET_LINE.CURRENCY_CD.Value Then
            calc_base_amt(&line_data(&count).EX_SHEET_LINE.MONETARY_AMOUNT.Value, "N");
         End-If;
      End-For;
      &rownum = &actual_rownum;
      &Adj_Round = False;
   End-If;
   
End-If;
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              25/03/08           PPRAKASH       Added PC to save custom PTA fields
**********************************************************************************/

Declare Function WalletApplyFilter PeopleCode FUNCLIB_EX.WALLET_FN FieldFormula;
Declare Function label_detail PeopleCode EX_TXN_LIST_WRK.PB_FETCH FieldChange;

Component boolean &RunningBudgetCheck;
Component number &rownum;
Local Rowset &pnlbuf;

/* The value for &RunningBudgetCheck is set in EX_HDR_WRK.PB_EXCPTN1_EX1.FieldChange */
/* Record PeopleCode only when budget checking. Value is False by default.           */

&pnlbuf = GetLevel0();

If Len(%CompIntfcName) = 0 Or
      %CompIntfcName = CompIntfc.TE_TIME_ENTRY_WO Then
   If %Component = Component.TE_EXPENSE_SHEET Or
         %Component = Component.TE_EXPENSE_SHEET2 Or
         %Component = Component.TE_TRAVEL_AUTH Or
         %Component = Component.TE_TRAVEL_AUTH2 Or
         %Component = Component.TE_ADVANCE Or
         %Component = Component.TE_ADVANCE2 Or
         %Component = Component.TE_TIME_ENTRY Or
         %Component = Component.TE_TIME_ENTRY2 Then
      
      If %Component = Component.TE_EXPENSE_SHEET Or
            %Component = Component.TE_EXPENSE_SHEET2 Then
         &travel_auth_id = &pnlbuf(1).EX_SHEET_HDR.TRAVEL_AUTH_ID.Value;
         
         /*********XL Capital BEGIN 03/25/08 **************/
         REM THIS PIECE OF CODE SHOULD ONLY FIRE FOR EXPENSE_TYPE_EDIT = 'AIR' or 'HTL';
         &sheet_rs = GetLevel0();
         &Row_Line = GetRow();
         &rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
         Local Rowset &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
         &line_rec = &line_rs(&rownum).GetRecord(Record.EX_SHEET_LINE);
         &line_wrk_rec = &line_rs(&rownum).GetRecord(Record.EX_LINE_WRK);
         /* Retreieve Expense Type Value */
         &EXP_TYPE_EDIT = FetchValue(EX_TYPES_TBL.EXPENSE_TYPE_EDIT, &rownum);
         
         &A = CurrentRowNumber();
         &Row = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE).GetRow(&A);
         &EXRec = &Row.GetRecord(Record.EX_SHEET_LINE);
         
         
         For &NBRline = 1 To &line_rs.ActiveRowCount
            /* Retrieve the Line Number from EX_SHEET_LINE */
            &NBR_Orig_Line_nbr = &line_rs(&NBRline).GetRecord(Record.EX_SHEET_LINE).GetField(Field.LINE_NBR).Value;
            &line_rec = &line_rs(&NBRline).GetRecord(Record.EX_SHEET_LINE);
            &ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
            MessageBox(0, "", 0, 0, "&ExpTypeEdit " | &ExpTypeEdit);
            If (&ExpTypeEdit = "AIR") Or
                  (&ExpTypeEdit = "HTL") Then
               &STRSheetID = &pnlbuf(1).EX_SHEET_HDR.SHEET_ID.Value;
               remark Update XLPP_TE_EXSLINE;
               Local Rowset &RECLineRec = GetLevel0()(1).GetRowset(Scroll.EX_SHEET_LINE);
               &NBRLineNBR = &RECLineRec(1).EX_SHEET_LINE.LINE_NBR.Value;
               rem Retrieve the PTA Auditor Values;
               &line_rs = GetLevel0().GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
               
               &RECLineWrkRec = &line_rs(&NBRline).GetRecord(Record.EX_LINE_WRK);
               &STRPTAAuditorFlag = &RECLineWrkRec.XFR_FLG.Value;
               &NBRExtRefNbr = &RECLineWrkRec.EXT_REF_NBR.Value;
               &STRActionPlan = &RECLineWrkRec.ACTION_PLAN_DESCR.Value;
               Local SQL &Update_FLG_SQL = CreateSQL("UPDATE %Table(XLPP_TE_EXSLINE) SET XFR_FLG = 'Y', EXT_REF_NBR = :1 WHERE SHEET_ID = :2 AND LINE_NBR = :3");
               &Update_FLG_SQL.ReuseCursor = True;
               Local SQL &Update_NOFLG_SQL = CreateSQL("UPDATE %Table(XLPP_TE_EXSLINE) SET XFR_FLG = 'N', ACTION_PLAN_DESCR = :1 WHERE SHEET_ID = :2 AND LINE_NBR = :3");
               &Update_NOFLG_SQL.ReuseCursor = True;
               Local SQL &INSERT_FLG_SQL;
               &INSERT_FLG_SQL = CreateSQL("INSERT INTO %Table(XLPP_TE_EXSLINE) (SHEET_ID,LINE_NBR, XFR_FLG,EXT_REF_NBR, ACTION_PLAN_DESCR) VALUES (:1, :2, 'Y', :3, :4)");
               &INSERT_FLG_SQL.BulkMode = True;
               &INSERT_NOFLG_SQL = CreateSQL("INSERT INTO %Table(XLPP_TE_EXSLINE) (SHEET_ID,LINE_NBR, XFR_FLG,EXT_REF_NBR, ACTION_PLAN_DESCR) VALUES (:1, :2, 'N', :3, :4)");
               &INSERT_NOFLG_SQL.BulkMode = True;
               
               If %Mode = "A" And
                     All(&STRSheetID) Then
                  MessageBox(0, "", 0, 0, "inside add mode");
                  If (&STRPTAAuditorFlag = "Y") Then
                     &INSERT_FLG_SQL.Execute(&STRSheetID, &NBR_Orig_Line_nbr, &NBRExtRefNbr, " ");
                  Else
                     &INSERT_NOFLG_SQL.Execute(&STRSheetID, &NBR_Orig_Line_nbr, 0, &STRActionPlan);
                  End-If;
               Else /* User has not submitted the Expense Report */
                  MessageBox(0, "", 0, 0, "inside add else mode");
                  If (&STRPTAAuditorFlag = "Y") Then
                     If &Row.IsChanged And
                           Not &Row.IsNew Then
                        If &line_rec.IsChanged Then
                           /* User is modifying the existing row(s) */
                           Local boolean &BOOL_UPD_VAL_Y = &Update_FLG_SQL.Execute(&NBRExtRefNbr, &STRSheetID, &NBR_Orig_Line_nbr);
                           MessageBox(0, "", 0, 0, "&BOOL_UPD_VAL_Y " | &BOOL_UPD_VAL_Y);
                           If Not &BOOL_UPD_VAL_Y Then
                              &BOOL_INS_VAL_Y = &INSERT_FLG_SQL.Execute(&STRSheetID, &NBR_Orig_Line_nbr, &NBRExtRefNbr, " ");
                           End-If;
                        Else
                           MessageBox(0, "", 0, 0, "New Cond");
                        End-If;
                     Else
                        /* User is/has adding/added a new row */
                        If &Row.IsChanged And
                              &Row.IsDeleted Then
                           MessageBox(0, "", 0, 0, "Row Deleted");
                        Else
                           &BOOL_INS_VAL_Y = &INSERT_FLG_SQL.Execute(&STRSheetID, &NBR_Orig_Line_nbr, &NBRExtRefNbr, " ");
                           MessageBox(0, "", 0, 0, "&BOOL_INS_VAL_Y " | &BOOL_INS_VAL_Y);
                        End-If;
                     End-If;
                  Else
                     If &Row.IsChanged And
                           Not &Row.IsNew Then
                        If &line_rec.IsChanged Then
                           /* User is modifying the existing row(s) */
                           Local boolean &BOOL_UPD_VAL_N = &Update_NOFLG_SQL.Execute(&STRActionPlan, &STRSheetID, &NBR_Orig_Line_nbr);
                           MessageBox(0, "", 0, 0, "&BOOL_UPD_VAL_N " | &BOOL_UPD_VAL_N);
                           If Not &BOOL_UPD_VAL_N Then
                              Local boolean &BOOL_INS_VAL_N = &INSERT_NOFLG_SQL.Execute(&STRSheetID, &NBR_Orig_Line_nbr, 0, &STRActionPlan);
                           End-If;
                        End-If;
                     Else
                        /* User is/has adding/added a new row */
                        If &Row.IsChanged And
                              &Row.IsDeleted Then
                           MessageBox(0, "", 0, 0, "Row Deleted");
                        Else
                           &BOOL_INS_VAL_N = &INSERT_NOFLG_SQL.Execute(&STRSheetID, &NBR_Orig_Line_nbr, 0, &STRActionPlan);
                           MessageBox(0, "", 0, 0, "&BOOL_INS_VAL_N " | &BOOL_INS_VAL_N);
                        End-If;
                     End-If;
                  End-If;
               End-If;
               &INSERT_NOFLG_SQL.Close();
               &INSERT_FLG_SQL.Close();
               &Update_FLG_SQL.Close();
               &Update_NOFLG_SQL.Close();
            End-If;
            
         End-For;
         
         
         /*********XL Capital END 03/25/08 **************/
         If %Mode = "A" And
               All(&travel_auth_id) Then
            SQLExec("update ps_ex_tauth_hdr set copy_travel_auth = 'Y' where travel_auth_id = :1", &travel_auth_id);
         End-If;
      End-If;
      
      If &RunningBudgetCheck = False Then
         /*  skip if cash advance adjustment */
         If &isAdjustCash = False Then
            TransferPanel(Page.TE_SAVE_CONFIRM);
         End-If;
         
      End-If;
      
   Else
      /**/
      /* For My Wallet Transactions - bypass the confirmation & transfer page */
      /**/
      If %Component <> Component.TE_MY_WALLET And
            %Component <> Component.TE_MY_WALLET_RST Then
         
         If %Component = Component.TE_DEL_SHEET Or
               %Component = Component.TE_DEL_ADV Or
               %Component = Component.TE_DEL_TIME Or
               %Component = Component.TE_DEL_TAUTH Then
            TransferPage(Page.TE_DEL_CONFIRM);
         Else
            
            If &RunningBudgetCheck = False And
                  %Component <> Component.EX_SHEET_APPR And
                  %Component <> Component.EX_TAUTH_APPR Then
               TransferPanel(Page.TE_SAVE_CONFIRM);
            End-If;
         End-If;
      Else
         If &RunningBudgetCheck = False And
               %Page = Page.TE_MY_WALLET Then
            WalletApplyFilter(EX_TINQ_SRCH_VW.EMPLID);
            label_detail();
         End-If;
      End-If;
   End-If;
End-If;
/**********************************************************************************
XL Capital Modification
Ref #                Date               Who            Description
-------              -----              -------        -------------------
TE-C-04              03/31/08           PPRAKASH       PeopleCode to copy PTA related
													   info for lines with Expense Type 
													   'AIR' or/and 'HTL' if the Expense 
												       Date is same.
**********************************************************************************/
import EX_UI:UserDefaults:*;

Declare Function GetQuoteMethod PeopleCode EXCH_RT_WRK.RATE_DIRECT FieldChange;
Declare Function Rate_Calculation_Type PeopleCode FUNCLIB_EX.AUTO_RATE FieldFormula;
Declare Function UpdateTotals PeopleCode EX_SHEET_LINE.EXPEND_MTHD FieldChange;
Declare Function amount_due_display PeopleCode EX_HDR_WRK.TOTAL_SHEET_AMT RowInit;
Declare Function display_cc_select PeopleCode EX_ICLIENT_WRK.CREDIT_CARD_SELECT RowInit;
Declare Function fetch_dflt_grp_flg PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;
Declare Function sheet_split_save PeopleCode FUNCLIB_EX.REIMBURSEMENT_AMT FieldFormula;
Declare Function txn_fields_dsply PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;
Declare Function calc_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;
Declare Function calc_split_line_base_amt PeopleCode EX_SHEET_LINE.TXN_AMOUNT FieldChange;
Declare Function BackOutExpense PeopleCode EX_SHEET_LINE.LINE_NBR RowDelete;
Declare Function display_line_fields PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function SetRequiredFieldLabels PeopleCode EX_LINE_WRK.EXPENSE_TYPE FieldChange;
Declare Function get_per_diem PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function get_per_diem_lodging PeopleCode FUNCLIB_EX.PER_DIEM_AMT FieldFormula;
Declare Function get_type_dflt_accts PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;
Declare Function get_cat_dflt_accts PeopleCode FUNCLIB_EX.EXPENSE_TYPE_GROUP FieldFormula;

Component number &rownum;
Component EX_UI:UserDefaults:ExpensePref &c_objEmpDefaults;
Component string &pd_refresh, &Prior_Dist_Init_Flag;
Component number &split_rownum;
Component Rowset &pnlbuf;
Local Rowset &sheet_rs, &line_rs, &dist_data, &trans_data;
Local Record &line_rec;
Local string &expense_type_descr;
Local boolean &bErrorFound;

/*
   Function SetLineDefaults sets the values of the expense report line based on user defaults.
   It should be called when either the expense type was changed or new lines were added through
   the Use a Template/Add Multiple Expenses pages.
*/
Function SetLineDefaults(&rowLine As Row);
   Local EX_UI:UserDefaults:ExpTypePref &objExpTypeDefaults;
   Local Record &recSheetHdr, &recHdrWrk, &recSheetLine, &recLineWrk, &recPrior, &recVATLineWrk;
   Local string &PriorPymntType, &DfltStr, &strExpTypeEdit, &SetID, &RateCalcType, &DistanceType;
   Local boolean &bHaveDefaults, &LocReqd, &OrigLocReqd, &TranspReqd, &MrchntReqd;
   
   &recSheetHdr = GetLevel0()(1).EX_SHEET_HDR;
   &recHdrWrk = GetLevel0()(1).EX_HDR_WRK;
   &recSheetLine = &rowLine.EX_SHEET_LINE;
   &recLineWrk = &rowLine.EX_LINE_WRK;
   &recVATLineWrk = &rowLine.VAT_FIELDS_WRK;
   
   /*
      Initialize fields back to blank/zero or to the values from the prior row before applying
      any user defaults.
   */
   If &rowLine.RowNumber > 1 Then
      &recPrior = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_SHEET_LINE;
      /*********XL Capital BEGIN 03/31/08 **************/
      /* Check whether (&rowLine.RowNumber - n) has Expense Type Edit of 'AIR' or/and 'HTL' */
      &recPrior_WRK = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_LINE_WRK;
      /*********XL Capital END 03/31/08 **************/
      &recSheetLine.TRANS_DT.Value = &recPrior.TRANS_DT.Value;
      &recSheetLine.TRANS_DT_JULIAN.Value = &recPrior.TRANS_DT_JULIAN.Value;
      /*********XL Capital BEGIN 03/31/08 **************/
      REM PTA Info should be copied for all lines with same Expense Date;
      &ExpTypeEdit = &recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
      If (&ExpTypeEdit = "AIR") Or
            (&ExpTypeEdit = "HTL") Then
         &recLineWrk.XFR_FLG.Value = &recPrior_WRK.XFR_FLG.Value;
         If (&recLineWrk.XFR_FLG.Value = "Y") Then
            &recLineWrk.EXT_REF_NBR.Value = &recPrior_WRK.EXT_REF_NBR.Value;
         Else
            &recLineWrk.ACTION_PLAN_DESCR.Value = &recPrior_WRK.ACTION_PLAN_DESCR.Value;
         End-If;
      End-If;
      /*********XL Capital END 03/31/08 **************/
   Else
      &recSheetLine.TRANS_DT.SetDefault();
      &recSheetLine.TRANS_DT_JULIAN.SetDefault();
      /*********XL Capital BEGIN 03/31/08 **************/
      &recLineWrk.XFR_FLG.SetDefault();
      &recLineWrk.EXT_REF_NBR.SetDefault();
      &recLineWrk.ACTION_PLAN_DESCR.SetDefault();
      /*********XL Capital END 03/31/08 **************/
   End-If;
   
   &recSheetHdr.VAT_RECEIPT.SetDefault();
   
   &recSheetLine.COUNTRY.Value = BUS_UNIT_TBL_EX.COUNTRY;
   
   &recSheetLine.TXN_AMOUNT.SetDefault();
   &recSheetLine.MONETARY_AMOUNT.SetDefault();
   
   &recSheetLine.TXN_CURRENCY_CD.Value = &recSheetLine.CURRENCY_CD.Value;
   &recSheetLine.TXN_CURRENCY_CD1.Value = &recSheetLine.CURRENCY_CD.Value;
   &recSheetLine.CURRENCY_CD1.Value = &recSheetLine.CURRENCY_CD.Value;
   &recLineWrk.TXN_CURRENCY_CD.Value = &recSheetLine.CURRENCY_CD.Value;
   &recLineWrk.CURRENCY_CD.Value = &recSheetLine.CURRENCY_CD.Value;
   
   &recLineWrk.VISUAL_RATE_CUR.Value = 1;
   /* &recLineWrk.VISUAL_RATE_CUR.Enabled = False; */
   &recLineWrk.VISUAL_RATE_CUR.Enabled = True;
   &recSheetLine.RT_TYPE.SetDefault();
   &recSheetLine.RATE_MULT.Value = 1;
   &recSheetLine.RATE_DIV.Value = 1;
   GetQuoteMethod(&recSheetLine.TXN_CURRENCY_CD.Value, &recSheetLine.CURRENCY_CD.Value);
   
   &recSheetLine.GROSSUP.Value = "N";
   &recSheetLine.GROSS_UP_EST_AMT.SetDefault();
   
   &recSheetLine.DESCR254.SetDefault();
   &recSheetLine.PERSONAL_EXPENSE.Value = "N";
   &recSheetLine.NO_RECEIPT_FLG.Value = "N";
   &recSheetLine.SHEET_RCPT_NUM.SetDefault();
   &recSheetLine.SHEET_RCPT_TOTAL.SetDefault();
   &recSheetLine.TRAVEL_AUTH_ID.SetDefault();
   
   &recSheetLine.MERCHANT_CD.SetDefault();
   &recSheetLine.MERCHANT.SetDefault();
   &recSheetLine.PREF_MRCHNT_FLG.Value = "N";
   
   &recSheetLine.AIRFARE_RCPT_NBR.SetDefault();
   
   &recSheetLine.OUT_OF_POLICY.Value = "N";
   &recSheetLine.PREF_MRCH_NOT_USED.Value = "N";
   &recSheetLine.DUPLICATES_EXIST.Value = "N";
   &recSheetLine.CC_FEED_FLG.Value = "N";
   &recSheetLine.CRDMEM_ACCT_NBR.SetDefault();
   &recLineWrk.CHECKOUT_DATE_FLAG.Value = "N";
   
   &recSheetLine.EE_LOCAMT_COMMENT.SetDefault();
   &recSheetLine.EE_NORCPT_COMMENT.SetDefault();
   &recSheetLine.EE_PRFMRC_COMMENT.SetDefault();
   &recSheetLine.EE_DPLCAT_COMMENT.SetDefault();
   &recSheetLine.EX_CREDIT_REF.SetDefault();
   
   &recSheetLine.VAT_DFLT_DONE_FLG.Value = "N";
   &recLineWrk.VAT_BASIS_AMT.SetDefault();
   &recLineWrk.VAT_CALC_AMT.SetDefault();
   &recLineWrk.VAT_CALC_PB.SetDefault();
   &recSheetLine.VAT_ENTRD_AMT.SetDefault();
   If Len(%CompIntfcName) = 0 Then
      &recSheetLine.VAT_AUTO_CALC_FLG.Value = "Y";
   End-If;
   &recSheetLine.VAT_RECEIPT.Value = "N";
   &recSheetLine.PHYSICAL_NATURE.SetDefault();
   &recSheetLine.TAX_CD_VAT.SetDefault();
   &recSheetLine.TAX_CD_VAT_PCT.SetDefault();
   &recSheetLine.VAT_AMT.SetDefault();
   &recSheetLine.VAT_AMT_BSE.SetDefault();
   &recSheetLine.VAT_APPLICABILITY.SetDefault();
   &recSheetLine.VAT_NRCVR_ALL_FLG.SetDefault();
   &recSheetLine.VAT_NRCVR_PRO_FLG.SetDefault();
   &recSheetLine.VAT_RECLAIM_PCT.SetDefault();
   &recSheetLine.VAT_RCLM_AMT.SetDefault();
   &recSheetLine.VAT_RCLM_AMT_BSE.SetDefault();
   &recSheetLine.VAT_ROUND_RULE.SetDefault();
   &recSheetLine.VAT_TREATMENT.SetDefault();
   &recSheetLine.VAT_TXN_TYPE_CD.SetDefault();
   &recSheetLine.VAT_USE_ID.SetDefault();
   For &i = 1 To &recVATLineWrk.FieldCount
      &recVATLineWrk.GetField(&i).SetDefault();
   End-For;
   
   
   &recLineWrk.VALIDATE_FLG.Value = "N";
   &recLineWrk.ERROR_PB.Visible = False;
   &rowLine.GetRowset(Scroll.EX_SHEET_ERROR).Flush();
   
   &recSheetLine.OVRRIDE_SPLT_SW.Value = "N";
   
   &rowLine.GetRowset(Scroll.EX_SHEET_DIST).Flush();
   &rowLine.GetRowset(Scroll.EX_SHEET_ATT).Flush();
   
   /* Fetch user defaults if not already done so. */
   
   If &c_objEmpDefaults = Null Then
      &c_objEmpDefaults = create EX_UI:UserDefaults:ExpensePref(1);
   End-If;
   
   If &c_objEmpDefaults.IsLoaded = False Then
      &bHaveDefaults = &c_objEmpDefaults.LoadForEmployee(&recSheetHdr.EMPLID.Value, "S");
   End-If;
   
   /*
      Apply user defaults to the expense line.  Note that we will always overwrite any previously
      defaulted values or values entered by the user.  Save off the current payment type for use
      later in setting the reimbursement code.
   */
   &PriorPymntType = &recSheetLine.EXPEND_MTHD.Value;
   &recSheetLine.EXPEND_MTHD.Value = &c_objEmpDefaults.ExpendMethod;
   
   &recSheetLine.BILL_CODE_EX.Value = &c_objEmpDefaults.ExpenseBillCode;
   If None(&recSheetLine.BILL_CODE_EX.Value) Then
      If &rowLine.RowNumber > 1 Then
         &recPrior = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_SHEET_LINE;
         &recSheetLine.BILL_CODE_EX.Value = &recPrior.BILL_CODE_EX.Value;
      Else
         &recSheetLine.BILL_CODE_EX.Value = &recHdrWrk.BILL_CODE_EX.Value;
      End-If;
   End-If;
   
   &LocReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.LOC_REQD_FLG).Value = "Y");
   If &LocReqd Then
      &recSheetLine.TXN_LOCATION.Value = &recSheetHdr.TXN_LOCATION.Value;
      
      If None(&recSheetLine.TXN_LOCATION.Value) Then
         &recSheetLine.TXN_LOCATION.Value = &c_objEmpDefaults.ExpenseLocation;
      End-If;
      
      If None(&recSheetLine.TXN_LOCATION.Value) And
            &rowLine.RowNumber > 1 Then
         &recPrior = &rowLine.ParentRowset.GetRow(&rowLine.RowNumber - 1).EX_SHEET_LINE;
         &recSheetLine.TXN_LOCATION.Value = &recPrior.TXN_LOCATION.Value;
      End-If;
   Else
      &recSheetLine.TXN_LOCATION.SetDefault();
   End-If;
   
   &OrigLocReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.TRAVEL_FROM_FLG).Value = "Y");
   If &OrigLocReqd Then
      &recSheetLine.TRAVEL_FROM.Value = &c_objEmpDefaults.TravelFrom;
   Else
      &recSheetLine.TRAVEL_FROM.SetDefault();
   End-If;
   
   &strExpTypeEdit = &recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
   
   If &strExpTypeEdit = "AUT" Then
      &TranspReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.TRANSPORT_TYPE_FLG).Value = "Y");
      If &TranspReqd Then
         &recSheetLine.TRANSPORT_ID.Value = &c_objEmpDefaults.TransportID;
         &recSheetLine.TRANSPORT_TYPE.Value = &recSheetLine.TRANSPORT_ID.GetRelated(EX_EE_TRANSPORT.TRANSPORT_TYPE).Value;
         If &recSheetLine.TRANSPORT_ID.Value <> "" Then
            &Prior_Dist_Init_Flag = "Y";
         End-If;
      Else
         &SetID = GetSetId(Field.BUSINESS_UNIT_GL, &recSheetHdr.BUSINESS_UNIT_GL.Value, Record.EX_AUTO_RT_TBL, "");
         
         Rate_Calculation_Type(&SetID, &recSheetLine.EXPENSE_TYPE.Value, &recSheetHdr.COUNTRY.Value, %Date, &RateCalcType, &DistanceType);
         
         If &RateCalcType = "V" Then
            &recSheetLine.TRANSPORT_ID.Value = &c_objEmpDefaults.TransportID;
            &recSheetLine.TRANSPORT_TYPE.Value = &recSheetLine.TRANSPORT_ID.GetRelated(EX_EE_TRANSPORT.TRANSPORT_TYPE).Value;
            If &recSheetLine.TRANSPORT_ID.Value <> "" Then
               &Prior_Dist_Init_Flag = "Y";
            End-If;
         Else
            &recSheetLine.TRANSPORT_ID.SetDefault();
            &recSheetLine.TRANSPORT_TYPE.SetDefault();
         End-If;
      End-If;
   Else
      &recSheetLine.TRANSPORT_ID.SetDefault();
      &recSheetLine.TRANSPORT_TYPE.SetDefault();
   End-If;
   
   &recSheetLine.DISTANCE_TYPE.SetDefault();
   &recSheetLine.DISTANCE_RT.SetDefault();
   &recLineWrk.DISTANCE_RT.SetDefault();
   &recSheetLine.DISTANCE.SetDefault();
   &recLineWrk.KILOMETERS.SetDefault();
   &recLineWrk.MILES.SetDefault();
   &recSheetLine.NBR_PASSENGERS.SetDefault();
   /*   &recSheetLine.NBR_DAYS.SetDefault(); */
   If &strExpTypeEdit = "HTL" Then
      &recSheetLine.NBR_NIGHTS.Value = &c_objEmpDefaults.NumberNights;
   Else
      &recSheetLine.NBR_NIGHTS.SetDefault();
   End-If;
   
   If &strExpTypeEdit = "PDM" Then
      &DfltStr = &c_objEmpDefaults.RangeID;
      If &DfltStr <> &recSheetLine.RANGE_SEQ.Value Then
         &recSheetLine.RANGE_SEQ.Value = &DfltStr;
         &pd_refresh = "Y";
      End-If;
   Else
      &recSheetLine.RANGE_SEQ.SetDefault();
   End-If;
   &recSheetLine.STARTTM_PERDIEM.Value = TimeValue("00:00:00 AM");
   &recSheetLine.ENDTM_PERDIEM.Value = TimeValue("23:59:59 PM");
   &rowLine.GetRowset(Scroll.EX_SHEET_LN_PD).Flush();
   
   /*
      Apply defaults set up (if any) for the particular expense type (i.e. merchant, payment
      type, and billing action).
   */
   &objExpTypeDefaults = &c_objEmpDefaults.ExpTypePrefs.Find(&recSheetLine.EXPENSE_TYPE.Value);
   
   If &objExpTypeDefaults <> Null Then
      &MrchntReqd = (&recSheetLine.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.MERCHANT_REQD_FLG).Value = "Y");
      If &MrchntReqd Then
         &recSheetLine.MERCHANT_CD.Value = &objExpTypeDefaults.MerchantCode;
         &recSheetLine.MERCHANT.Value = &objExpTypeDefaults.Merchant;
         &recSheetLine.PREF_MRCHNT_FLG.Value = &objExpTypeDefaults.UsePreferredMerchant;
      End-If;
      
      &DfltStr = &objExpTypeDefaults.PaymentMethod;
      If All(&DfltStr) Then
         &recSheetLine.EXPEND_MTHD.Value = &DfltStr;
      End-If;
      
      &DfltStr = &objExpTypeDefaults.BillingAction;
      If All(&DfltStr) Then
         &recSheetLine.BILL_CODE_EX.Value = &DfltStr;
      End-If;
   End-If;
   
   &recSheetLine.BILLING_ACTION.Value = &recSheetLine.BILL_CODE_EX.GetRelated(EX_BILL_CD_TBL.BILLING_ACTION).Value;
   
   If &recSheetLine.EXPEND_MTHD.Value <> &PriorPymntType Then
      &recLineWrk.EXPEND_MTHD.Value = &recSheetLine.EXPEND_MTHD.Value;
      &recLineWrk.EXPEND_MTHD_EDIT.Value = &recSheetLine.EXPEND_MTHD.GetRelated(EX_EXP_MTHD_TBL.EXPEND_MTHD_EDIT).Value;
      
      /* Set the reimbursement code based on the payment type edit. */
      If &recLineWrk.EXPEND_MTHD_EDIT.Value = "PPD" Or
            &recLineWrk.EXPEND_MTHD_EDIT.Value = "PPA" Or
            &recLineWrk.EXPEND_MTHD_EDIT.Value = "PPH" Then
         
         &recSheetLine.PERSONAL_EXPENSE.Enabled = False;
         &recSheetLine.REIMBURSEMENT_CD.Value = "P";
      Else
         &recSheetLine.PERSONAL_EXPENSE.Enabled = True;
         &recSheetLine.REIMBURSEMENT_CD.Value = "R";
      End-If;
      
      /* Display the credit card select icon if reimbursement recipient is the vendor. */
      display_cc_select();
   End-If;
   
   /* Reset field styles back to the default in case there were errors on the line. */
   &recSheetLine.TRANS_DT.Style = "";
   &recSheetLine.TXN_AMOUNT.Style = "";
   &recSheetLine.EXPEND_MTHD.Style = "";
   &recSheetLine.DESCR254.Style = "";
   &rowLine.EX_LOCATION_VW.DESCR.Style = "";
   &rowLine.EX_LOCATION_VW5.DESCR.Style = "";
   &recSheetLine.MERCHANT_CD.Style = "";
   &recSheetLine.AIRFARE_RCPT_NBR.Style = "";
   &recSheetLine.NBR_NIGHTS.Style = "";
   &recSheetLine.TRANSPORT_ID.Style = "";
   &recLineWrk.KILOMETERS.Style = "";
   &recLineWrk.MILES.Style = "";
   &recSheetLine.NBR_PASSENGERS.Style = "";
   &recSheetLine.RANGE_SEQ.Style = "";
   &recSheetLine.STARTTM_PERDIEM.Style = "";
   &recSheetLine.ENDTM_PERDIEM.Style = "";
   &recSheetLine.VAT_ENTRD_AMT.Style = "";
   &recLineWrk.VISUAL_RATE_CUR.Style = "";
End-Function;

/** if chart field values are present on the expense type/group, **/
/** then use the expense type/group chartfields as the defaults.  **/
Function dflt_dists(&rownum)
   
   /* If Wizard, use the newly generated line. */
   If %Page = Page.TE_WIZARD_FINISH Then
      &rownum = &line_rs.ActiveRowCount;
   End-If;
   
   sheet_split_save(&rownum, "SHEET");
End-Function;

/* Get the account and alt-account and then update the distribution records when the ovrride-splt-sw = "Y" */
Function dflt_accts(&rownum)
   &sheet_rs = GetLevel0();
   &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
   
   
   &expense_type = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.Value;
   &expense_type_group = &line_rs(&rownum).EX_TYPES_TBL.EXPENSE_TYPE_GROUP.Value;
   &bill_code_ex = &line_rs(&rownum).EX_SHEET_LINE.BILL_CODE_EX.Value;
   &dflt_frm_grp_flg = fetch_dflt_grp_flg(&sheet_rs(1).EX_SHEET_HDR.BUSINESS_UNIT_GL.Value, &expense_type, &bill_code_ex, "N");
   If &dflt_frm_grp_flg = "Y" Then
      get_cat_dflt_accts(&expense_type_group, &bill_code_ex, "N", "SHEET", &EXP_ACCT, &EXP_ALTACCT);
   Else
      get_type_dflt_accts(&expense_type, &bill_code_ex, "N", "SHEET", &EXP_ACCT, &EXP_ALTACCT);
   End-If;
   For &i = 1 To ActiveRowCount(Record.EX_SHEET_LINE, &rownum, Record.EX_SHEET_DIST);
      &line_rs(&rownum).GetRowset(Scroll.EX_SHEET_DIST)(&i).EX_SHEET_DIST.ACCOUNT.Value = &EXP_ACCT;
      &line_rs(&rownum).GetRowset(Scroll.EX_SHEET_DIST)(&i).EX_SHEET_DIST.ALTACCT.Value = &EXP_ALTACCT;
      
   End-For;
End-Function;

Function expense_processing(&rownum)
   
   &sheet_rs = GetLevel0();
   &rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
   &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
   
   If Len(%CompIntfcName) > 0 Then
      &rownum = CurrentRowNumber();
   End-If;
   &line_rec = &line_rs(&rownum).GetRecord(Record.EX_SHEET_LINE);
   &line_wrk_rec = &line_rs(&rownum).GetRecord(Record.EX_LINE_WRK);
   &dist_data = &line_rs(&rownum).GetRowset(Scroll.EX_SHEET_DIST);
   
   &line_wrk_rec.EXPENSE_TYPE.Value = &line_rec.EXPENSE_TYPE.Value;
   &line_rec.DISTANCE_TYPE.Value = &line_wrk_rec.DISTANCE_TYPE.Value;
   &line_rec.GROSSUP.Value = &line_rs(&rownum).EX_TYPES_TBL.GROSSUP.Value;
   
   /*
      Initialize VAT_DFLT_DONE_FLG to "N" so that VAT defaulting/calculations are performed for
      the expense line and associated distribution lines.  Also initialize other VAT fields as
      appropriate.
   */
   &line_rec.VAT_DFLT_DONE_FLG.Value = "N";
   &line_wrk_rec.VAT_CALC_AMT.SetDefault();
   If Len(%CompIntfcName) = 0 Then
      &line_rec.VAT_ENTRD_AMT.SetDefault();
      &line_rec.VAT_AUTO_CALC_FLG.Value = "Y";
   End-If;
   
   &expense_type_edit = &line_rs(&rownum).EX_TYPES_TBL.EXPENSE_TYPE_EDIT.Value;
   txn_fields_dsply(&expense_type_edit, &rownum, "SHEET");
   
   /* Type Edit */
   &line_rs(&rownum).EX_LINE_WRK.TOLERANCE_FLG.Visible = False;
   &loc_reqd_flg = &line_rs(&rownum).EX_TYPES_TBL.LOC_REQD_FLG.Value;
   If &loc_reqd_flg = "N" Then
      &line_rs(&rownum).EX_SHEET_LINE.TXN_LOCATION.Value = "";
   End-If;
   
   &MERCHANT_REQD_FLG = &line_rs(&rownum).EX_TYPES_TBL.MERCHANT_REQD_FLG.Value;
   If &MERCHANT_REQD_FLG = "N" Then
      &line_rs(&rownum).EX_SHEET_LINE.MERCHANT_CD.Value = "";
      &line_rs(&rownum).EX_SHEET_LINE.MERCHANT.Value = "";
   End-If;
   
   If Len(%CompIntfcName) = 0 Then
      If &expense_type_edit = "PDM" Then
         &txn_amount = &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value;
         &expense_type = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.Value;
         &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_PER_DIEM_DTL", "");
         &per_diem_amt = get_per_diem(&SetID, "EX_SHEET_LINE", &txn_amount);
         &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &per_diem_amt;
         &line_rs(&rownum).EX_LINE_WRK.PER_DIEM_AMT.Value = &per_diem_amt;
         &monetary_amount = &line_rs(&rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
         If &per_diem_amt <> &monetary_amount Then
            &prior_val = &monetary_amount;
            calc_base_amt(&prior_val, "N");
            If %Page = Page.TE_RCPT_SPLIT Then
               If &split_rownum = &rownum Then
                  &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value = &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value + &per_diem_amt;
                  &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value = &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value - &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value;
                  &expense_type_descr = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.DESCR).Value;
                  &page_title = MsgGetText(10504, 258, "Message Not Found", &expense_type_descr) | " " | &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  If &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value <> 0 Then
                     &page_title = &page_title | ", " | MsgGetText(10504, 271, "Message Not Found") | " " | &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  End-If;
               Else
                  &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value - &per_diem_amt;
                  &prior_val = &line_rs(&split_rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
                  calc_split_line_base_amt(&prior_val, "N");
               End-If;
            End-If;
         End-If;
      Else
         &line_rs(&rownum).EX_SHEET_LINE.BREAKFAST_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.LUNCH_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.DINNER_FLG.SetDefault();
      End-If;
   End-If;
   
   If Len(%CompIntfcName) = 0 Then
      If &expense_type_edit = "PDL" Then
         &txn_amount = &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value;
         &expense_type = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.Value;
         &SetID = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_PER_DIEM_DTL", "");
         &per_diem_amt = get_per_diem_lodging(&SetID, "EX_SHEET_LINE", &txn_amount);
         &line_rs(&rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &per_diem_amt;
         &line_rs(&rownum).EX_LINE_WRK.PER_DIEM_AMT.Value = &per_diem_amt;
         &monetary_amount = &line_rs(&rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
         If &per_diem_amt <> &monetary_amount Then
            &prior_val = &monetary_amount;
            calc_base_amt(&prior_val, "N");
            If %Page = Page.TE_RCPT_SPLIT Then
               If &split_rownum = &rownum Then
                  &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value = &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value + &per_diem_amt;
                  &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value = &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value - &sheet_rs(1).EX_RCPTSPLT_WRK.TOTAL_RCPT_AMT.Value;
                  &expense_type_descr = &line_rs(&rownum).EX_SHEET_LINE.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.DESCR).Value;
                  &page_title = MsgGetText(10504, 258, "Message Not Found", &expense_type_descr) | " " | &line_rs(&rownum).EX_SHEET_LINE.SHEET_RCPT_TOTAL.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  If &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value <> 0 Then
                     &page_title = &page_title | ", " | MsgGetText(10504, 271, "Message Not Found") | " " | &sheet_rs(1).EX_RCPTSPLT_WRK.BALANCE.Value | " " | &line_rs(&rownum).EX_SHEET_LINE.TXN_CURRENCY_CD.Value;
                  End-If;
               Else
                  &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value = &line_rs(&split_rownum).EX_SHEET_LINE.TXN_AMOUNT.Value - &per_diem_amt;
                  &prior_val = &line_rs(&split_rownum).EX_SHEET_LINE.MONETARY_AMOUNT.Value;
                  calc_split_line_base_amt(&prior_val, "N");
               End-If;
            End-If;
         End-If;
      Else
         &line_rs(&rownum).EX_SHEET_LINE.BREAKFAST_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.LUNCH_FLG.SetDefault();
         &line_rs(&rownum).EX_SHEET_LINE.DINNER_FLG.SetDefault();
      End-If;
   End-If;
   
   If &line_rs(&rownum).EX_SHEET_LINE.OVRRIDE_SPLT_SW.Value = "N" Then
      dflt_dists(&rownum);
   Else
      dflt_accts(&rownum);
   End-If;
   
   &txn_location = &line_rec.TXN_LOCATION.Value;
   If &txn_location = "" Then
      &line_rec.TXN_LOCATION.GetRelated(EX_LOCATION_VW.DESCR).Value = EX_LOCATION_VW2.DESCR;
   End-If;
End-Function;

Function SH_PER_DIEM_RANGE;
   Local string &PER_DIEM_TBL_FLG;
   Local string &SETID_EX_TYPE;
   
   &SETID_EX_TYPE = GetSetId(Field.BUSINESS_UNIT_GL, EX_SHEET_HDR.BUSINESS_UNIT_GL, "EX_TYPES_TBL", "");
   
   &PER_DIEM_TBL_FLG = " ";
   
   If Not None(EX_SHEET_LINE.TRANS_DT) Then
      SQLExec("SELECT A.PER_DIEM_TBL_FLG FROM PS_EX_TYPES_TBL A WHERE A.SETID = :1 AND A.EXPENSE_TYPE = :2 AND A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_EX_TYPES_TBL B WHERE B.SETID = A.SETID AND B.EXPENSE_TYPE = A.EXPENSE_TYPE AND B.EFFDT <= %DATEIN(:3)) AND A.EFF_STATUS = 'A'", &SETID_EX_TYPE, EX_SHEET_LINE.EXPENSE_TYPE, EX_SHEET_LINE.TRANS_DT, &PER_DIEM_TBL_FLG);
   End-If;
   
   If None(&PER_DIEM_TBL_FLG) Or
         &PER_DIEM_TBL_FLG = "L" Then
      Hide(EX_SHEET_LINE.RANGE_SEQ);
   Else
      UnHide(EX_SHEET_LINE.RANGE_SEQ);
   End-If;
End-Function;

/*------------------ Begin of Main Code ------------------*/
&bErrorFound = False;

If Len(%CompIntfcName) = 0 Then
   If Not GetRow().IsNew Then
      EX_SHEET_LINE.EXPENSE_TYPE.Value = PriorValue(EX_SHEET_LINE.EXPENSE_TYPE);
      MessageBox(%MsgStyle_OK, "", 10502, 206, "This expense has already been saved; expense type cannot be changed.");
      &bErrorFound = True;
   Else
      If None(EX_SHEET_LINE.EXPENSE_TYPE) Then
         EX_SHEET_LINE.EXPENSE_TYPE.Value = PriorValue(EX_SHEET_LINE.EXPENSE_TYPE);
         MessageBox(%MsgStyle_OK, "", 10502, 87, "Expense type is required; delete the expense line if it is no longer needed.");
         &bErrorFound = True;
      End-If;
   End-If;
   
   If Not &bErrorFound Then
      &trans_data = &pnlbuf.GetRow(1).GetRowset(Scroll.EX_TRANS);
      &recLine = GetRow().GetRecord(Record.EX_SHEET_LINE);
      For &i = 1 To &trans_data.ActiveRowCount
         &sheet_ID = &trans_data(&i).EX_TRANS.SHEET_ID.Value;
         &line_nbr = &trans_data(&i).EX_TRANS.LINE_NBR.Value;
         If &sheet_ID = &recLine.SHEET_ID.Value And
               &line_nbr = &recLine.LINE_NBR.Value Then
            EX_SHEET_LINE.EXPENSE_TYPE.Value = PriorValue(EX_SHEET_LINE.EXPENSE_TYPE);
            MessageBox(%MsgStyle_OK, "", 10502, 373, "This is an expense populated from My Wallet; expense type cannot be changed.");
            &bErrorFound = True;
         End-If;
      End-For;
   End-If;
   
End-If;

If Not &bErrorFound Then
   BackOutExpense( False, PriorValue(EX_SHEET_LINE.EXPENSE_TYPE), GetRow());
   
   &rownum = GetRow().RowNumber;
   If Len(%CompIntfcName) = 0 Then
      SetLineDefaults(GetRow());
   End-If;
   expense_processing(&rownum);
   display_line_fields(&rownum);
   SetRequiredFieldLabels();
   
   /* Expense report entry has started; hide the creation option hyperlinks. */
   EX_ICLIENT_WRK.START_DROPDOWN.Visible = False;
   EX_ICLIENT_WRK.GO_PB2.Visible = False;
   
   SetCursorPos(Page.EX_SHEET_ENTRY, EX_SHEET_LINE.TRANS_DT, &rownum);
End-If;

SH_PER_DIEM_RANGE();
/*********XL Capital BEGIN 03/25/08 **************/
&sheet_rs = GetLevel0();
&Row_Line = GetRow();
&rEXP_HDR = &sheet_rs.GetRow(1).GetRecord(Record.EX_SHEET_HDR);
Local Rowset &line_rs = &sheet_rs.GetRow(1).GetRowset(Scroll.EX_SHEET_LINE);
&line_rec = &line_rs(1).GetRecord(Record.EX_SHEET_LINE);
&line_wrk_rec = &line_rs(1).GetRecord(Record.EX_LINE_WRK);

&ExpTypeEdit = &line_rec.EXPENSE_TYPE.GetRelated(EX_TYPES_TBL.EXPENSE_TYPE_EDIT).Value;
&STRXFRFLG = &line_wrk_rec.XFR_FLG.Value;
If Len(%CompIntfcName) > 0 Then
   &rownum = CurrentRowNumber();
End-If;

Rem Retrieve the PTA Auditor fields;
&STRSHEET_ID = &rEXP_HDR.SHEET_ID.Value;

For &NBRline = 1 To &line_rs.ActiveRowCount
   &RECLineWrkRec = &line_rs(&NBRline).GetRecord(Record.EX_LINE_WRK);
   &NBR_Orig_Line_nbr = &line_rs(&NBRline).GetRecord(Record.EX_SHEET_LINE).GetField(Field.LINE_NBR).Value;
   SQLExec("SELECT XFR_FLG, EXT_REF_NBR, ACTION_PLAN_DESCR FROM PS_XLPP_TE_EXSLINE WHERE SHEET_ID = :1 AND LINE_NBR = :2", &STRSHEET_ID, &NBR_Orig_Line_nbr, &STRXFRFLG, &NBRREFNBR, &STRACTION);
   REM CHECK THE SHEET STATUS;
   &STR_SHEET_STATUS = &rEXP_HDR.SHEET_STATUS.Value;
   If (&mode = "Entry") Then;
      If (&STRXFRFLG = "N") Then
         Hide(EX_LINE_WRK.EXT_REF_NBR, &NBRline);
         &RECLineWrkRec.XFR_FLG.Value = &STRXFRFLG;
         rem &RECLineWrkRec.EXT_REF_NBR.Value = &NBRREFNBR;
         &RECLineWrkRec.ACTION_PLAN_DESCR.Value = &STRACTION;
         &RECLineWrkRec.XFR_FLG.ShowRequiredFieldCue = True;
         &RECLineWrkRec.ACTION_PLAN_DESCR.ShowRequiredFieldCue = True;
      Else
         rem MessageBox(0, "", 0, 0, "Line " | &NBRline);
         Hide(EX_LINE_WRK.ACTION_PLAN_DESCR, &NBRline);
         &RECLineWrkRec.XFR_FLG.Value = &STRXFRFLG;
         &RECLineWrkRec.EXT_REF_NBR.Value = &NBRREFNBR;
         &RECLineWrkRec.XFR_FLG.ShowRequiredFieldCue = True;
         &RECLineWrkRec.EXT_REF_NBR.ShowRequiredFieldCue = True;
      End-If;
   Else /* PTA fields should be display only for mode other than Entry */
      If (&STRXFRFLG = "N") Then
         Hide(EX_LINE_WRK.EXT_REF_NBR, &NBRline);
         &RECLineWrkRec.XFR_FLG.Value = &STRXFRFLG;
         rem &RECLineWrkRec.EXT_REF_NBR.Value = &NBRREFNBR;
         &RECLineWrkRec.ACTION_PLAN_DESCR.Value = &STRACTION;
         &RECLineWrkRec.XFR_FLG.ShowRequiredFieldCue = True;
         &RECLineWrkRec.ACTION_PLAN_DESCR.ShowRequiredFieldCue = True;
         &RECLineWrkRec.XFR_FLG.Enabled = False;
         &RECLineWrkRec.ACTION_PLAN_DESCR.Enabled = False;
      Else
         Hide(EX_LINE_WRK.ACTION_PLAN_DESCR, &NBRline);
         &RECLineWrkRec.XFR_FLG.Value = &STRXFRFLG;
         &RECLineWrkRec.EXT_REF_NBR.Value = &NBRREFNBR;
         &RECLineWrkRec.XFR_FLG.ShowRequiredFieldCue = True;
         &RECLineWrkRec.EXT_REF_NBR.ShowRequiredFieldCue = True;
         &RECLineWrkRec.XFR_FLG.Enabled = False;
         &RECLineWrkRec.EXT_REF_NBR.Enabled = False;
      End-If;
   End-If;
End-For;
/*********XL Capital END 03/25/08 **************/
Local string &dbfile = "record://PSIBXML_ATT";
Local string &selectedfile;
Local File &F;
Local string &line, &str;
Local XmlDoc &xml;
Local boolean &b;

&r = AddAttachment(&dbfile, "", ".xml", &selectedfile, 0);

If &r <> %Attachment_Success Then
   Exit;
End-If;

rem IBTREE_WRK.IB_XMLFNAME = &selectedfile;

try
   &r = GetAttachment(&dbfile, &selectedfile, "IB_XML.TXT", "PS_FILEDIR");
catch Exception &error
   &r = GetAttachment(&dbfile, &selectedfile, "/files/" | "IB_XML.TXT", "PS_SERVDIR");
end-try;

If &r <> %Attachment_Success Then
   MessageBox(0, "", 158, 653, "Error retrieving file from database");
   Exit;
End-If;

&F = GetFile("IB_XML.TXT", "R");
If &F = Null Then
   MessageBox(0, "", 158, 653, "Error opening file from application server");
   Exit;
End-If;

While &F.ReadLine(&line)
   &str = &str | &line;
End-While;

&F.Delete();
&r = DeleteAttachment(&dbfile, &selectedfile);

/* Format XML using an XMLDoc object.*/
&xml = CreateXmlDoc("");
&b = &xml.ParseXmlString(&str);
If &b Then
   IBSCHEMA_WRK.IB_LONG1 = &xml.GenFormattedXmlString();
Else
   MessageBox(0, MsgGetText(158, 702, "Message"), 158, 715, "Invalid XML detected.  Unable to load XMLDoc object.");
   Exit;
End-If;

PPSJAAN
import SCM_UTILITIES:Encryption:Base64;
import SCM_UTILITIES:Encryption:PSCipher;
import SCM_UTILITIES:Integration:XMLCompressor;
import SCM_UTILITIES:Integration:XMLPoster;

Local string &enc_String, &dec_String;
Local string &Text2bEncoded, &rem_string, &Compressed_String, &DecompressedString_;
Local string &CompressedXML_, &MYFILESTRING_;
Local XmlDoc &XMLReq_;

Local SCM_UTILITIES:Encryption:Base64 &Base64_ = create SCM_UTILITIES:Encryption:Base64();
Local SCM_UTILITIES:Encryption:PSCipher &PSCipher_ = create SCM_UTILITIES:Encryption:PSCipher();
Local SCM_UTILITIES:Integration:XMLCompressor &XMLComp_ = create SCM_UTILITIES:Integration:XMLCompressor();
Local SCM_UTILITIES:Integration:XMLPoster &XMLPost_ = create SCM_UTILITIES:Integration:XMLPoster();

&Text2bEncoded = "Prashant Srivastava";
Rem This will not work...It will give the dreaded no overload was found with a parameter signature;
rem &enc_String = &Base64_.Encode(&Text2bEncoded);
rem MessageBox(0, "", 0, 0, "&enc_String " | &enc_String);
&enc_String = &PSCipher_.encodePassword(&Text2bEncoded);
MessageBox(0, "", 0, 0, "&enc_String " | &enc_String);
&rem_string = "{V1.1}Wsh6z0LM+4E="; /* VP1 */
&rem_string = "{V1.1}JEhU3QQBGFw="; /* PSADMIN */
&rem_string = "{V1.1}7m4OtVwXFNyLc1j6pZG69Q=="; /* password */
rem FS90DMO/VP1 - {V1.1}7loURXMqEQTSG7g8GtuYCg==;
&dec_String = &PSCipher_.decodePassword(&rem_string);
MessageBox(0, "", 0, 0, "&dec_String " | &dec_String);

/* Compress XML Documents */
&XMLReq_ = CreateXmlDoc();
Local boolean &bool = &XMLReq_.ParseXmlFromURL("C:\temp\XMLRequest_2008-03-20-11.11.11.000000.out");
rem MessageBox(0, "", 0, 0, "XML Doc " | &XMLReq_.GenFormattedXmlString());
&CompressedXML_ = &XMLComp_.Compress(&XMLReq_.GenFormattedXmlString());
MessageBox(0, "", 0, 0, "Compressed XML Doc " | &CompressedXML_);
/*
Local File &MYFILE = GetFile("C:\temp\CompressedXML.out", "R", %FilePath_Absolute);
deletes the File CompressedXML everytime u run this...interesting
&MYFILESTRING_ = &MYFILE.GetString( True);
*/
&String = "eJyzsa/IzVEoSy0qzszPs1Uy1DNQsrfj5bJxzs/LS00uyS8KSS0usbMBkX75Kal2IRmZxQq5qcXFiempCuWJxQrFqXklCmlF+bkKIfn5OcUKUQEhFiYWNvpwHTaOpSUZ+UV2AQHFNvpQto0+qvkABRcuhA==";
&DecompressedString_ = &XMLComp_.Decompress(&CompressedXML_);
MessageBox(0, "", 0, 0, "&DecompressedString_ " | &DecompressedString_);
/* SOAPPost */
rem Local string &TargetUrl_ = "http://www.nanonull.com/TimeService/TimeService.asmx";
rem Local string &SOAPAction_ = "http://www.Nanonull.com/TimeService/getCityTime";
Local string &TargetUrl_ = "http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso";
rem Local string &SOAPAction_ = "http://www.oorsprong.org/websamples.countryinfo";

rem Local string &soapstr = GetHTMLText(HTML.GETCITYTIME);
Local string &soapstr = GetHTMLText(HTML.GETCOUNTRYNAME);

rem Local string &SOAPResp_ = &XMLPost_.SOAPPost(&TargetUrl_, &SOAPAction_, &soapstr);
Local string &SOAPResp_ = &XMLPost_.XMLPost(&TargetUrl_, &soapstr);
MessageBox(0, "", 0, 0, "&SOAPResp_ " | &SOAPResp_);

/**
 * The Base64 class is used to encode and decode strings to and from Base64 using calls out to Java.
 * 
 * @author SCM Architecture
 */
class Base64
   method Base64();
   method Encode(&string As string) Returns string;
   method Decode(&string As string) Returns string;
   method DecodeMCFStoredAttachment(&string As string) Returns string;
private
   instance JavaObject &base64;
end-class;

method Base64
   %This.base64 = CreateJavaObject("com.peoplesoft.scm.co.encryption.Base64");
end-method;

/**
 * The Encode method is used to a string to Base64.
 * 
 * @param 				&string - string to be encoded.
 * @return            	string - the encoded string.
 */

method Encode
   /+ &string as String +/
   /+ Returns String +/
   Return %This.base64.encode(&string);
end-method;

/**
 * The Decode method is used to base64 decode a string using the server's default encoding.
 * 
 * @param 				&string - string to be decoded.
 * @return            	string - the decoded string.
 */

method Decode
   /+ &string as String +/
   /+ Returns String +/
   Return %This.base64.decodeToString(&string);
end-method;

/**
 * The .DecodeMCFStoredAttachment method is used to base64 decode strings returned by the Multi-Channel Framework when the ContentTypes property of an MCFInboundEmail
 * is overridden to include email parts of content-type "application/octet-stream;"  When this happens the MCF base64 encodes the attachment before making available via the API.
 * The class that does the encoding puts extra characters into the encoded string.  This method removes those characters before decoding.
 * 
 * @param 				&inStr - XML string to compress.
 * @return            	string - the compressed result string.
 */

method DecodeMCFStoredAttachment
   /+ &string as String +/
   /+ Returns String +/
   Return %This.base64.decodeToString(Substitute(Substitute(&string, Char(13), ""), Char(10), ""));
end-method;

/** Provides a PeopleCode interface to PSCipher.class.
 *  This class is intended for use in decrypting passwords encoded using the peopletools
 *  password encryption utility subpage.  For good measure, the encodePassword method
 *  is being included as well, since it is exposed in the same java class as the decode
 *  password method

 * @version 1.0
 * @author SCM Architecture
 */
class PSCipher
   method PSCipher();
   method encodePassword(&password As string) Returns string;
   method decodePassword(&password As string) Returns string;
private
   instance object &javaPSCipher_;
end-class;

method PSCipher
   &javaPSCipher_ = CreateJavaObject("psft.pt8.pshttp.PSCipher");
end-method;

method encodePassword
   /+ &password as String +/
   /+ Returns String +/
   Return &javaPSCipher_.encodePassword(&password);
end-method;

method decodePassword
   /+ &password as String +/
   /+ Returns String +/
   Return &javaPSCipher_.decodePassword(&password);
end-method;

/**
 * The XMLCompressor class is used to compress (and decompress) XML documents.  This class 
 * leverages a java object on the Application Server which in turn uses GZIP compression.
 * 
 * @author SCM Architecture
 */
class XMLCompressor
   method XMLCompressor();
   
   method Compress(&inStr As string) Returns string;
   method Decompress(&inStr As string) Returns string;
   
private
   
end-class;

/**
 * Constructor.
 * 
 * @param 			none.
 * @return			none.
 */
method XMLCompressor
   
end-method;

/**
 * The Compress method is used to compress an XML Document (as a string) using GZIP compression.
 * 
 * @param 				&inStr - XML string to compress.
 * @return            	string - the compressed result string.
 */
method Compress
   /+ &inStr as String +/
   /+ Returns String +/
   Local JavaObject &oGZip;
   Local string &ret;
   
   &oGZip = GetJavaClass("com.peoplesoft.scm.co.compress.GZIPUtils");
   
   &ret = &oGZip.compressAndB64Encode(&inStr);
   
   &oGZip = Null;
   
   Return &ret;
   
end-method;

/**
 * The Decompress method is used to decompress an XML Document (as a string) that was compressing using
 * the Compress method from this class.
 * 
 * @param 				&inStr - XML string to decompress.
 * @return            	string - the decompressed result string.
 */
method Decompress
   /+ &inStr as String +/
   /+ Returns String +/
   Local JavaObject &oGZip;
   Local string &ret;
   
   &oGZip = GetJavaClass("com.peoplesoft.scm.co.compress.GZIPUtils");
   
   &ret = &oGZip.decompressB64Encoded(&inStr);
   
   &oGZip = Null;
   
   Return &ret;
   
end-method;

/**
 * The XMLPoster class is used to perform request/reply web services with XML Documents.  This class 
 * leverages a java object on the Application Server.
 * 
 * @author SCM Architecture
 */
class XMLPoster
   method XMLPoster();
   method XMLPost(&targetURL As string, &inXml As string) Returns string;
   method SOAPPost(&targetURL As string, &inXml As string, &SOAPAction As string) Returns string;
   
private
   instance JavaObject &Poster;
end-class;

/**
 * Constructor.
 * 
 * @param 			none.
 * @return			none.
 */
method XMLPoster
   try
      Local string &sMethodName = "XMLPoster:CraeteJavaObject";
      %This.Poster = CreateJavaObject("com.peoplesoft.scm.co.xml.XMLPost");
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;


/**
 * The XMLPost method is used to send or "post" a request XML document (as a string)
 *  to a URL and return the resulting XML response document (as a string).
 * 
 * @param 				&targetURL  - URL to "post" XML data to (string).
 * @param 				&inXML 		- request XML to "post" (string).
 * @return            	string 		- response XML (string).
 */

method XMLPost
   /+ &targetURL as String, +/
   /+ &inXml as String +/
   /+ Returns String +/
   try
      Local string &sMethodName = "XMLPoster:XMLPost";
      Local string &response;
      If %This.Poster = Null Then
         %This.Poster = CreateJavaObject("com.peoplesoft.scm.co.xml.XMLPost");
      End-If;
      &response = %This.Poster.postStr(&targetURL, &inXml);
      %This.Poster = Null;
      Return &response;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;

/**
 * The SOAPPost method is used to send or "post" a request SOAP document (as a string)
 *  to a URL and return the resulting SOAP response document (as a string).
 * 
 * @param 				&targetURL  - URL to "post" SOAP data to (string).
 * @param 				&inXML 		- request SOAP docuement to "post" (string).
 * @param 				&SOAPAction - header SOAP Action (string).
 * @return            	string 		- response SOAP document (string).
 */

method SOAPPost
   /+ &targetURL as String, +/
   /+ &inXml as String, +/
   /+ &SOAPAction as String +/
   /+ Returns String +/
   try
      Local string &sMethodName = "XMLPoster:SOAPPost";
      Local string &response;
      If %This.Poster = Null Then
         %This.Poster = CreateJavaObject("com.peoplesoft.scm.co.xml.XMLPost");
      End-If;
      &response = %This.Poster.postSOAPStr(&targetURL, &inXml, &SOAPAction);
      MessageBox(0, "", 0, 0, "&response " | &response);
      %This.Poster = Null;
      Return &response;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;

import SCM_UTILITIES:EDI:File:EDI_File;

/**
 * The XMLTransformer class is used to perform XSLT transformation on XML Documents.  This class 
 * leverages a java object on the Application Server which in turn uses the XALAN processor to perform
 * the transformation.
 * 
 * @author SCM Architecture
 */
class XMLTransformer
   method XMLTransformer();
   method TransformString(&inXml As string, &inXSLT As string) Returns string;
   method TransformURL(&inXmlURL As string, &inXSLT As string) Returns string;
   method XMLtoFileLayout(&_inDoc As XmlDoc, &_msgName As string, &_msgVersion As string) Returns string;
   method TransformXML2PDF(&inXml As string, &inXSLFO As string, &FileName As string);
   
private
   instance JavaObject &Transformer;
   Constant &OperationDot = "Operation.";
   Constant &MessageDot = "Message.";
   Constant &FileLayoutDot = "FileLayout.";
   Constant &ediSuffix = ".edi";
   Constant &ReadMode = "R";
   Constant &WriteMode = "W";
   Constant &AppendMode = "A";
   Constant &UpdateMode = "U";
   Constant &NewWriteMode = "N";
   Constant &CharsetDefault = "A";
   Constant &CharsetASCII = "ASCII";
   Constant &CharsetUTF8 = "UTF8";
   Constant &CharsetUTF16 = "U";
   Constant &File = "File";
   Constant &#TxnNamePrefix = "EDI_TXN_";
end-class;

/**
 * Constructor.
 * 
 * @param 			none.
 * @return			none.
 */
method XMLTransformer
   
   try
      &Transformer = CreateJavaObject("com.peoplesoft.scm.co.xml.XMLTransformer");
   catch Exception &E
      &Transformer = Null;
   end-try;
   
end-method;


/**
 * The TransformString method is used to transform an XML Document (as a string) based 
 * on a XSLT transformation (as a string) to return the resulting XML Document (as a string).
 * 
 * @param 				&inXML - XML string to transform (string).
 * @param 				&inXSLT - XSLT transformation (string).
 * @return            	string - the resulting XML as a string.
 */

method TransformString
   /+ &inXml as String, +/
   /+ &inXSLT as String +/
   /+ Returns String +/
   
   try
      Return &Transformer.transformStr(&inXml, &inXSLT);
   catch Exception &E
      Return TransformEx(&inXml, &inXSLT);
   end-try;
   
end-method;

/**
 * The TransformURL method is used to transform a URL to an XML Document based 
 * on a XSLT transformation (as a string) to return the resulting XML Document (as a string).
 * 
 * @param 				&inXMLURL - URL to an XML document to transform (string).
 * @param 				&inXSLT - XSLT transformation (string).
 * @return            	string - the resulting XML as a string.
 */
method TransformURL
   /+ &inXmlURL as String, +/
   /+ &inXSLT as String +/
   /+ Returns String +/
   
   Return &Transformer.transformURL(&inXmlURL, &inXSLT);
   
end-method;

/** Convert data from an XML document to a string formatted in the manner specified in a file-layout definition named the same as the supplied message name.  The destination message must be structured or a container with a single structured part.
 *
 * @param      _inDoc              Name of the File Layout Definition to use in the transform
 * @param      _msgName            Name of message to be transformed
 * @param      _msgVersion         Version of message to be transformed.  Must be the default version if the message is a container.
 *
 * @return     string              The transformed data as a string if the transform was successfull, otherwise a blank string.
 */
method XMLtoFileLayout
   /+ &_inDoc as XmlDoc, +/
   /+ &_msgName as String, +/
   /+ &_msgVersion as String +/
   /+ Returns String +/
   Local string &messageName = &_msgName;
   Local string &messageVersion = "";
   Local string &returnString = "";
   Local Message &tempMsg;
   Local Rowset &tempRS;
   Local boolean &isEDImessage = (Left(&messageName, Len(&#TxnNamePrefix)) = &#TxnNamePrefix);
   
   If &messageName = "" Then
      throw CreateException(18130, 17209, "The destination message must be specified");
      Exit (1);
   End-If;
   
   &tempMsg = CreateMessage(@(&MessageDot | &messageName));
   If &_msgVersion = "" Then
      &messageVersion = &tempMsg.Version;
   Else
      &messageVersion = &_msgVersion;
   End-If;
   
   try
      &tempMsg.SetXmlDoc(&_inDoc);
   catch Exception &excp
      REM This is used to avoid the warning that this method should not be used with structured messages;
   end-try;
   
   REM Copy the source data into the destination rowset;
   If &tempMsg.IsStructure Then
      &tempRS = &tempMsg.GetRowset(&messageVersion);
   Else
      If &tempMsg.IsPartsStructured Then
         If &tempMsg.PartCount = 1 Then
            If &tempMsg.Version = &messageVersion Then
               &tempRS = &tempMsg.GetPartRowset(1);
            Else
               throw CreateException(18130, 17210, "The destination message (%1) must be the default version when the message contains parts", &messageName | "." | &messageVersion);
               Exit (1);
            End-If;
         Else
            throw CreateException(18130, 17204, "The destination message (%1) may only contain one structured part", &messageName | "." | &messageVersion);
            Exit (1);
         End-If;
      Else
         throw CreateException(18130, 17205, "The destination message (%1) must be structured or contain a structured part", &messageName | "." | &messageVersion);
         Exit (1);
      End-If;
   End-If;
   
   If &isEDImessage Then
      Local SCM_UTILITIES:EDI:File:EDI_File &ediFile = create SCM_UTILITIES:EDI:File:EDI_File();
      
      REM Set the file layout to use when writing the data;
      If Not &ediFile.SetFileLayout(@(&FileLayoutDot | &messageName)) Then
         throw CreateException(18130, 17211, "File.SetFileLayout(%1) failed", &FileLayoutDot | &messageName);
         Exit (1);
      End-If;
      
      REM Format the data into a string based on the file layout;
      &returnString = &ediFile.RowsetToString(&tempRS, False);
   Else
      Local File &tempFile = CreateObject("File");
      
      REM Open a temp file in the standard output directory;
      &tempFile.Open(&messageName | &ediSuffix, &WriteMode, &CharsetASCII);
      If Not &tempFile.IsOpen Then
         throw CreateException(18130, 17212, "Unable to open file %1", &messageName | &ediSuffix);
         Exit (1);
      End-If;
      
      REM Set the file layout to use when writing the data;
      If Not &tempFile.SetFileLayout(@(&FileLayoutDot | &messageName)) Then
         throw CreateException(18130, 17211, "File.SetFileLayout(%1) failed", &FileLayoutDot | &messageName);
         Exit (1);
      End-If;
      
      REM Write the data;
      &tempFile.WriteRowset(&tempRS, True);
      &tempFile.Close();
      
      REM Retrive the formatted data, and delete the file (automagically);
      &tempFile.Open(&messageName | &ediSuffix, &ReadMode, &CharsetASCII);
      If &tempFile.IsOpen Then
         &returnString = &tempFile.GetString();
         &tempFile.Close();
      End-If;
   End-If;
   
   Return &returnString;
end-method;

REMARK RESERVED FOR FUTURE;
/**
 * The TransformXML2PDF method is used to transform a XML Document based
 * on a XSL:FO transformation (as a string) to return a resulting PDF Document (as a filename string).
 * 
 * @param 				&inXML - An XML document to transform (string).
 * @param 				&inXSLFO - XSL:FO transformation (string).
 * @param 				&FileName - PDF FileName to create (string).
 */
method TransformXML2PDF
   /+ &inXml as String, +/
   /+ &inXSLFO as String, +/
   /+ &FileName as String +/
   
   &Transformer.transformXML2PDF(&inXml, &inXSLFO, &FileName);
   
end-method;

import SCM_UTILITIES:Integration:XMLTransformer;
import SCM_UTILITIES:PrintableDocument:Exceptions:XMLOnlyPrintAttempt;
import SCM_UTILITIES:PrintableDocument:Utils:printDocStateObj;
import SCM_UTILITIES:PrintableDocument:Exceptions:missingHTMLHeadTag;

/** The PrintableDocument class is used to create printable HTML documents from online PIA
 *  pages. This class displays a new pop-up browser window based on the data passed in 
 *  (via a Rowset, an XML Document, or a HTML String) and a stylesheet (an XSL Document).
 *
 *  NOTE: This class REQUIRES the use of the SAC_RPT_SUB subpage within your component!
 *
 *  The HTML is rendered by leveraging a java object on the Application Server which uses the
 *  XALAN processor to perform an XSL transformation in order to generate the HTML output.
 * 
 * @version 1.0
 * @author SCM Architecture
 */

class PrintableDocument
   method PrintableDocument();
   
   /** Method for showing when using the delivered subpage SAC_RPT_SUB */
   method Show();
   
   /** Method for printing when using the delivered subpage SAC_RPT_SUB */
   method Print();
   
   /** Populates the XSLDocument based on the Printable Document Framework meta-data */
   method SetStyle(&BU_Type As string, &BU As string, &Report_Type As string);
   
   method resolveMessageCatalogEntries_(&xsl As string) Returns string;
   
   method buildXSLDocument() Returns string;
   
   /** HTML document that will be display by Show & Print methods */
   property string HtmlString get set;
   /** Input data rowset */
   property Rowset RowsetData;
   /** XML Document based on .RowsetData property (can be directly input as well) */
   property XmlDoc XMLDocument;
   /** XSL Document based on SetStyle() method (can be directly input as well) */
   property string XSLDocument;
   
   /** Height (in pixels) for Popup Window when Show() method is called */
   property integer Height get set;
   /** Width (in pixels) for Popup Window when Show() method is called */
   property integer Width get set;
   /** Top (in pixels) for Popup Window when Show() method is called */
   property integer Top get set;
   /** Left (in pixels) for Popup Window when Show() method is called */
   property integer Left get set;
   /** Determines if Popup Window should display a Menu Bar when Show() method is called (0=No, 1=Yes) */
   property boolean MenuBar get set;
   /** Determines if Popup Window should be resizable when Show() method is called (0=No, 1=Yes) */
   property boolean Resizable get set;
   /** Determines if Popup Window should display Scrollbars when Show() method is called (0=No, 1=Yes) */
   property boolean ScrollBars get set;
   /** Determines if Popup Window should display a Status bar when Show() method is called (0=No, 1=Yes) */
   property boolean StatusBar get set;
   /** Determines if Popup Window should display a Tool bar when Show() method is called (0=No, 1=Yes) */
   property boolean ToolBar get set;
   /** showHTML returns the same html that Show() assigns to the HTMLArea in the delivered subpage.  Thus, showHTML allows you to use your own HTMLArea if you've already got one. */
   property string showHTML get;
   /** Alternative to the Print() method.  printHTML returns the same html that Print() assigns to the HTMLArea in the delivered subpage.  Thus, printHTML allows you to use your own HTMLArea if you've already got one. */
   property string printHTML get;
   
   /**Tells the PrintableDocument to make pre-built XSL templates available.  To be used with the properties of naming convention "pdXSLTmplt<TemplateName>*/
   method includeXSLTemplate(&templateName As string);
   /*The following properties are to be used with the includeXSLTemplate() method.  Using these properties ensures that incorrect template names are caught by the PeopleCode compiler*/
   property string pdXSLTmpltHeader get;
   property string pdXSLTmpltAddress get;
   
   
private
   instance SCM_UTILITIES:Integration:XMLTransformer &Transformer;
   instance string &pHtmlString;
   
   method Rowset2XML(&inRS As Rowset) Returns string;
   method BuildWindowParams() Returns string;
   method AddBooleanParam(&sParamName As string, &bParamValue As boolean) Returns string;
   method GetContent(&ContentID As string) Returns string;
   method insertXSLTemplates_(&xsl As string) Returns string;
   method insertStyleSheetRef_(&xsl As string) Returns string;
   
   instance integer &pHeight;
   instance integer &pWidth;
   instance integer &pTop;
   instance integer &pLeft;
   instance boolean &pMenuBar;
   instance boolean &pResizable;
   instance boolean &pScrollBars;
   instance boolean &pStatusBar;
   instance boolean &pToolBar;
   
   instance boolean &bUseHeight;
   instance boolean &bUseWidth;
   instance boolean &bUseTop;
   instance boolean &bUseLeft;
   instance boolean &bUseMenuBar;
   instance boolean &bUseResizable;
   instance boolean &bUseScrollBars;
   instance boolean &bUseStatusBar;
   instance boolean &bUseToolBar;
   
   instance string &weblibURL_;
   
   instance string &reportLogoURL;
   instance array of string &includedXSLTemplates;
   
   Constant &pdXSLTmpltAddress_ = "SAC_PD_ADDRESS_BLOCK_TEMPLATE";
   Constant &pdXSLTmpltHeader_ = "SAC_PD_REPORT_HEADER_TEMPLATE";
   
end-class;

Global SCM_UTILITIES:PrintableDocument:Utils:printDocStateObj &printDocStateObj;

/**
 * Constructor.
 * 
 * @param 			none.
 * @return			none.
 */
method PrintableDocument
   &Transformer = create SCM_UTILITIES:Integration:XMLTransformer();
   
   &bUseHeight = False;
   &bUseWidth = False;
   &bUseTop = False;
   &bUseLeft = False;
   &bUseMenuBar = False;
   &bUseResizable = False;
   &bUseScrollBars = False;
   &bUseStatusBar = False;
   &bUseToolBar = False;
   
   /*Initialize the included templates array*/
   %This.includedXSLTemplates = CreateArrayRept("", 0);
   /*Initialize the global state object*/
   %This.weblibURL_ = GenerateScriptContentURL(%Portal, %Node, Record.WEBLIB_SCM_UTIL, Field.HTMLAREA, "FieldFormula", "IScript_isPrintReady");
   &printDocStateObj = create SCM_UTILITIES:PrintableDocument:Utils:printDocStateObj();
end-method;

/**
 * HtmlString returns an HTML document (string) 
 * based on an XSL transformation (from the .XMLDocument & .XSLDocument properties).
 * 
 * @param 				none
 * @return              string - HTML document output 
 *
 */
get HtmlString
   /+ Returns String +/
   Local string &sXML;
   Local string &sXSL;
   Local number &i;
   
   Evaluate True
   When (&pHtmlString <> "")
      &sXML = "";
      Break;
   When (%This.XMLDocument <> Null)
      &sXML = %This.XMLDocument.GenXmlString();
      Break;
   When (%This.RowsetData <> Null)
      &sXML = %This.Rowset2XML(%This.RowsetData);
      Break;
   End-Evaluate;
   
   If %This.XSLDocument <> "" Then
      &sXSL = %This.buildXSLDocument();
   End-If;
   
   If All(&sXML) Then
      If All(&sXSL) Then
         &pHtmlString = &Transformer.TransformString(&sXML, &sXSL);
      Else
         &pHtmlString = &sXML;
      End-If;
   End-If;
   
   Return &pHtmlString;
end-get;

set HtmlString
   /+ &NewValue as String +/
   &pHtmlString = &NewValue;
end-set;

/**
 * Rowset2XML converts a rowset object into a formatted XML string. 
 * 
 * @param 				rowset
 * @return              string - formatted XML document 
 *
 */
method Rowset2XML
   /+ &inRS as Rowset +/
   /+ Returns String +/
   Local boolean &ret;
   Local XmlDoc &xmlDoc;
   Local string &XML_STRING;
   
   &xmlDoc = CreateXmlDoc("");
   &ret = &xmlDoc.CopyRowset(&inRS);
   Return &xmlDoc.GenFormattedXmlString();
end-method;

/**
 * Creates a popup window to show a printable document based on the input data and stylesheet.
 * 
 * @param 				none
 * @return              none
 *
 */
method Show
   Local string &showHTML = %This.showHTML;
   If All(&showHTML) Then
      GetLevel0()(1).SAC_PRNTDOC_WRK.HTMLAREA.Value = &showHTML;
   End-If;
end-method;

/**
 * Creates the HTML for a popup window to show a printable document based on the input data and stylesheet.

 */
get showHTML
   /+ Returns String +/
   Local string &returnHTML = "";
   Local string &sHtml;
   
   &sHtml = %This.HtmlString;
   If &sHtml <> "" Then
      &printDocStateObj.printString = &sHtml;
      &returnHTML = GetHTMLText(HTML.SCM_PRINTDOC_IFRAME, %This.weblibURL_ | "?windowParams=" | %This.BuildWindowParams() | "&method=show");
   End-If;
   Return &returnHTML;
end-get;

/**
 * Creates a print dialog to print a printable document based on the output of the getPrintHTML() method.
 * 
 * @param 				none
 * @return              none
 *
 */
method Print
   Local string &printHTML = %This.printHTML;
   If All(&printHTML) Then
      GetLevel0()(1).SAC_PRNTDOC_WRK.HTMLAREA.Value = &printHTML;
   End-If;
end-method;

/**
 * Generates the HTML for a printable document pop-up based on the input data and stylesheet.
 */
get printHTML
   /+ Returns String +/
   /*
 * First make sure there is an XSL document present.  If not throw an exception.
 * If there is no XSL document, then XML will be displayed in the pop-up window and
 * JavaScript does not have the ability to kick off a print of an XSL document.
*/
   If %This.XSLDocument = "" Then
      throw create SCM_UTILITIES:PrintableDocument:Exceptions:XMLOnlyPrintAttempt(18130, 17002, "Print() attempted without XSL document");
   End-If;
   
   Local string &returnHTML = "";
   Local string &sHtml;
   
   &sHtml = %This.HtmlString;
   If &sHtml <> "" Then
      &printDocStateObj.printString = &sHtml;
      
      %This.Left = 250;
      %This.Top = 150;
      %This.Width = 100;
      %This.Height = 100;
      %This.MenuBar = False;
      %This.ToolBar = False;
      %This.ScrollBars = False;
      %This.Resizable = False;
      %This.StatusBar = False;
      &returnHTML = GetHTMLText(HTML.SCM_PRINTDOC_IFRAME, %This.weblibURL_ | "?windowParams=" | %This.BuildWindowParams() | "&method=print");
   End-If;
   
   Return &returnHTML;
   
end-get;

/**
 * Sets the XSL Stylesheet property (.XSLDocument) from the Printable Document Framework pages.
 * 
 * @param &BU_Type		Business Unit Type (string) 
 * @param &BU			Business Unit
 * @param &Report_Type	Report Type ID 
 * @return              none
 *
 */
method SetStyle
   /+ &BU_Type as String, +/
   /+ &BU as String, +/
   /+ &Report_Type as String +/
   Local Record &recXSLT;
   
   &recXSLT = CreateRecord(Record.SAC_RPT_XSLT_BU);
   &recXSLT.BUS_UNIT_TYPE.Value = &BU_Type;
   &recXSLT.BUSINESS_UNIT.Value = &BU;
   &recXSLT.SCM_REP_TYPE.Value = &Report_Type;
   
   If &recXSLT.SelectByKey() Then
      %This.XSLDocument = GetHTMLText(@("HTML." | &recXSLT.CONTNAME.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_1.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_2.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_3.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_4.Value));
   Else
      &recXSLT = CreateRecord(Record.SAC_RPT_XSLT);
      &recXSLT.SCM_REP_TYPE.Value = &Report_Type;
      If &recXSLT.SelectByKey() Then
         %This.XSLDocument = GetHTMLText(@("HTML." | &recXSLT.CONTNAME.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_1.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_2.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_3.Value), %This.GetContent(&recXSLT.SUB_CONTNAME_4.Value));
      End-If;
   End-If;
   %This.reportLogoURL = %Response.GetImageURL(@("Image." | &recXSLT.SUB_CONTNAME_5.Value));
end-method;

method resolveMessageCatalogEntries_
   /+ &xsl as String +/
   /+ Returns String +/
   Local string &resolvedMsg;
   Local number &startPos = 0;
   Local number &endPos = 0;
   Local number &msgSetNbrStartPos;
   Local number &msgSetNbrEndPos;
   Local number &msgSetNbr;
   Local number &msgNbrStartPos;
   Local number &msgNbrEndPos;
   Local number &msgNbr;
   Local number &defaultTextStartPos;
   Local number &defaultTextEndPos;
   Local string &defaultText;
   
   try
      While Find("%MESSAGE(", Upper(&xsl), &startPos) <> 0
         &startPos = Find("%MESSAGE(", Upper(&xsl), &startPos);
         &endPos = Find(")", Upper(&xsl), &startPos + Len("%Message(")) + 1;
         /*Extract message set number*/
         &msgSetNbrStartPos = &startPos + Len("%Message(");
         &msgSetNbrEndPos = Find(",", &xsl, &msgSetNbrStartPos);
         &msgSetNbr = Value(LTrim(RTrim(Substring(&xsl, &msgSetNbrStartPos, &msgSetNbrEndPos - &msgSetNbrStartPos))));
         /*Extract message number*/
         &msgNbrStartPos = &msgSetNbrEndPos + 1;
         &msgNbrEndPos = Find(",", &xsl, &msgNbrStartPos);
         &msgNbr = Value(LTrim(RTrim(Substring(&xsl, &msgNbrStartPos, &msgNbrEndPos - &msgNbrStartPos))));
         /*Extract default text*/
         &defaultTextStartPos = &msgNbrEndPos + 1;
         &defaultTextEndPos = Find(")", &xsl, &defaultTextStartPos);
         &defaultText = LTrim(RTrim(Substring(&xsl, &defaultTextStartPos, &defaultTextEndPos - &defaultTextStartPos)));
         &resolvedMsg = MsgGetText(&msgSetNbr, &msgNbr, &defaultText);
         &xsl = Replace(&xsl, &startPos, &endPos - &startPos, &resolvedMsg);
      End-While;
      Return &xsl;
   catch Exception &e
      throw CreateException(18130, 17003, "Unrecognized message catalog entry");
   end-try;
end-method;

/**
 * Tells the PrintableDocument class to include standard XSL templates built by the architecture team. 
 * The list of available templates are always listed as public properties of the PrintableDocument class
 * with the naming convention pdXSLTmplt<TemplateName> where TemplateName is the name of
 * the template to include.
 * 
 * @param &BU_Type		Business Unit Type (string) 
 * @return              none
 *
 */
method includeXSLTemplate
   /+ &templateName as String +/
   If %This.includedXSLTemplates.Find(&templateName) = 0 Then;
      %This.includedXSLTemplates.Push(&templateName);
   End-If;
end-method;

/**
 * BuildWindowParams builds a string of popup window options based on 
 * %This objects window display settings. This string is then used in the 
 * Show method javascript to control popup window sizing, placement and attributes. 
 * 
 * @param 				none
 * @return              string 
 *
 */
method BuildWindowParams
   /+ Returns String +/
   Local string &sParams;
   
   Evaluate True
   When (&bUseHeight)
      &sParams = &sParams | "Height=" | %This.Height | ","
   When (&bUseWidth)
      &sParams = &sParams | "Width=" | %This.Width | ","
   When (&bUseTop)
      &sParams = &sParams | "Top=" | %This.Top | ","
   When (&bUseLeft)
      &sParams = &sParams | "Left=" | %This.Left | ","
   When (&bUseMenuBar)
      &sParams = &sParams | %This.AddBooleanParam("menubar", %This.MenuBar);
   When (&bUseStatusBar)
      &sParams = &sParams | %This.AddBooleanParam("status", %This.StatusBar);
   When (&bUseScrollBars)
      &sParams = &sParams | %This.AddBooleanParam("scrollbars", %This.ScrollBars);
   When (&bUseToolBar)
      &sParams = &sParams | %This.AddBooleanParam("toolbar", %This.ToolBar);
   When (&bUseResizable)
      &sParams = &sParams | %This.AddBooleanParam("resizable", %This.Resizable);
   End-Evaluate;
   
   Return &sParams;
   
end-method;

method AddBooleanParam
   /+ &sParamName as String, +/
   /+ &bParamValue as Boolean +/
   /+ Returns String +/
   If &bParamValue Then
      Return &sParamName | "=1,";
   Else
      Return &sParamName | "=0,";
   End-If;
   
end-method;

method GetContent
   /+ &ContentID as String +/
   /+ Returns String +/
   If All(&ContentID) Then
      Return GetHTMLText(@("HTML." | &ContentID));
   Else
      Return "";
   End-If;
end-method;

method insertXSLTemplates_
   /+ &xsl as String +/
   /+ Returns String +/
   Local XmlDoc &xslDoc = CreateXmlDoc(&xsl);
   Local XmlNode &xslRoot = &xslDoc.DocumentElement;
   Local XmlDoc &templateDoc;
   Local XmlNode &templateRootNode;
   Local XmlNode &templateNode;
   Local number &i, &j;
   For &i = 1 To %This.includedXSLTemplates.Len
      &templateDoc = CreateXmlDoc(GetHTMLText(@("HTML." | %This.includedXSLTemplates [&i])));
      &templateRootNode = &templateDoc.DocumentElement;
      For &j = 1 To &templateRootNode.ChildNodeCount
         &templateNode = &templateRootNode.GetChildNode(&j);
         &xslRoot.AddNode(&templateNode);
      End-For;
   End-For;
   
   Return &xslDoc.GenXmlString();
end-method;

/**
 * Inserts stylesheet html tag as a child of any <head> elements
 * 
 * @xsl 				string
 * @return              string 
 *
 */
method insertStyleSheetRef_
   /+ &xsl as String +/
   /+ Returns String +/
   Local number &i;
   Local XmlDoc &styleSheetDoc = CreateXmlDoc(GetHTMLText(HTML.SAC_PD_STYLESHEETREF_XML, %Response.GetStyleSheetURL(StyleSheet.SCMSTYLEDEF)));
   Local XmlNode &styleSheetNode = &styleSheetDoc.DocumentElement;
   Local XmlDoc &xslDoc = CreateXmlDoc(&xsl);
   Local XmlNode &xslNode = &xslDoc.DocumentElement;
   Local array of XmlNode &xslHeadNodes = &xslNode.GetElementsByTagName("head");
   If &xslHeadNodes.Len = 0 Then
      throw create SCM_UTILITIES:PrintableDocument:Exceptions:missingHTMLHeadTag();
   End-If;
   For &i = 1 To &xslHeadNodes.Len
      &xslHeadNodes [&i].AddNode(&styleSheetNode);
   End-For;
   Return &xslDoc.GenXmlString();
end-method;

method buildXSLDocument
   /+ Returns String +/
   Local string &sXSL;
   &sXSL = %This.insertXSLTemplates_(%This.XSLDocument);
   &sXSL = %This.insertStyleSheetRef_(&sXSL);
   /*Insert registered logo where appropriate*/
   &sXSL = Substitute(&sXSL, "%REPORT_LOGO", %This.reportLogoURL);
   &sXSL = %This.resolveMessageCatalogEntries_(&sXSL);
   Return &sXSL;
end-method;

get Height
   /+ Returns Integer +/
   Return &pHeight;
end-get;

set Height
   /+ &NewValue as Integer +/
   &bUseHeight = True;
   &pHeight = &NewValue;
end-set;

get Width
   /+ Returns Integer +/
   Return &pWidth;
end-get;

set Width
   /+ &NewValue as Integer +/
   &bUseWidth = True;
   &pWidth = &NewValue;
end-set;

get Top
   /+ Returns Integer +/
   Return &pTop;
end-get;

set Top
   /+ &NewValue as Integer +/
   &bUseTop = True;
   &pTop = &NewValue;
end-set;

get Left
   /+ Returns Integer +/
   Return &pLeft;
end-get;

set Left
   /+ &NewValue as Integer +/
   &bUseLeft = True;
   &pLeft = &NewValue;
end-set;

get MenuBar
   /+ Returns Boolean +/
   Return &pMenuBar;
end-get;

set MenuBar
   /+ &NewValue as Boolean +/
   &bUseMenuBar = True;
   &pMenuBar = &NewValue;
end-set;

get Resizable
   /+ Returns Boolean +/
   Return &pResizable;
end-get;

set Resizable
   /+ &NewValue as Boolean +/
   &bUseResizable = True;
   &pResizable = &NewValue;
end-set;

get ScrollBars
   /+ Returns Boolean +/
   Return &pScrollBars;
end-get;

set ScrollBars
   /+ &NewValue as Boolean +/
   &bUseScrollBars = True;
   &pScrollBars = &NewValue;
end-set;

get StatusBar
   /+ Returns Boolean +/
   Return &pStatusBar;
end-get;

set StatusBar
   /+ &NewValue as Boolean +/
   &bUseStatusBar = True;
   &pStatusBar = &NewValue;
end-set;

get ToolBar
   /+ Returns Boolean +/
   Return &pToolBar;
end-get;

set ToolBar
   /+ &NewValue as Boolean +/
   &bUseToolBar = True;
   &pToolBar = &NewValue;
end-set;

get pdXSLTmpltAddress
   /+ Returns String +/
   Return &pdXSLTmpltAddress_;
end-get;

get pdXSLTmpltHeader
   /+ Returns String +/
   /*Header template requires the address block template, so add that too.*/
   %This.includeXSLTemplate(%This.pdXSLTmpltAddress);
   Return &pdXSLTmpltHeader_;
end-get;

/* Below is code which decodes the Base64 encoded XML.  */
            /* The java class referred to here could not be delivered with the release */
            /* Refer to ICE 1451866003 */
            /*
      Local object &Base64;
      Local string &DecodedXML;
            &Base64 = GetJavaClass("Base64");
            &DecodedXML = &Base64.decodeToString(&XML);
            &XML = &DecodedXML;
			*/

Local any &msg;
Local Rowset &rs, &msgRowset;
Local number &m, &ipp;
Local string &new_descr, &descr, &nodes_status, &xmldata;
Local XmlDoc &xml_doc, &xmlDoc;
Local array of XmlNode &nodes;
Local XmlNode &rootNode, &descNode;

&msg = &_MSG;
&xml_doc = &msg.getXmldoc();
&nodes = &xml_doc.DocumentElement.GetElementsByTagName("Author");
If (&nodes.Len <> 0) Then
   For &ipp = 1 To &nodes.Len
      &nodes_status = &nodes [&ipp].NodeValue;
   End-For;
End-If;

/* Create Response message */
rem &msg = CreateMessage(Message.84817INBOUND);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
&rootNode = &xmlDoc.DocumentElement;
&descNode = &rootNode.AddElement("AuthorNode");
&descNode.NodeValue = "The Author was " | &nodes_status;
/* put the XML in the request... */
&msg.SetXmlDoc(&xmlDoc);

ReturnToServer(&msg);


Local JavaObject &jHttp = CreateJavaObject("org.apache.commons.httpclient.HttpClient");
REM Set http client specific info, such as timeout parameters, username/password, etc. ;
&jHttp.getHttpConnectionManager().getParams().setConnectionTimeout(5000);

Local string &sURL = "http://blog.greysparling.com/atom.xml";
Local JavaObject &jGet = CreateJavaObject("org.apache.commons.httpclient.methods.GetMethod", &sURL);
REM Set any method specific info, such as headers/cookies, following re-directs, etc. ;
&jGet.setFollowRedirects( True);

REM Should wrap this in try/catch;
&jHttp.executeMethod(&jGet);

REM Pull the output into a XMLDoc object;
Local XmlDoc &feed = CreateXmlDoc(&jGet.getResponseBodyAsString());

REM Dump out some data from the XML feed;
MessageBox(0, "", 0, 0, "There are " | &feed.DocumentElement.ChildNodeCount | " blog postings in this feed.");

REMARK ENDPOINT = "http://prasprak:8888/JavaWebService-GetDates-context-root/GetDatesWSSoapHttpPort";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local number &num;
Local string &url, &UserName;
Local array of XmlNode &nodes;

&req = CreateMessage(Message.GETDATESWS);
&soap = CreateSOAPDoc();

Local string &soapstr = GetHTMLText(HTML.GETDATESWS_REQ);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_TEST_WRK.EMAIL_ADDRESS.Value = &xml.GenFormattedXmlString();
/* Assign Connector and relevant Properties */
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
/* Specifies OutBound Request */
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
/* End Point */
&url = "http://prasprak:8888/JavaWebService-GetDates-context-root/GetDatesWSSoapHttpPort";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
/* Assign the XML Object to a Message Object */
&req.SetXmlDoc(&xml);
/*IBInfo Methods */
/* retrieve the User Name of the person that fired the Sv Op */
&UserName = &req.IBInfo.OrigUser;
&Str_Process = &req.IBInfo.OrigProcess;
&Str_TransID = &req.IBInfo.TransactionID;
&Str_SourceNode = &req.IBInfo.SourceNode;
&Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
/* IBConnectorInfo Methods */
&Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
&Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
&Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
rem MessageBox(0, "", 0, 0, "IBConnectorInfo " | &Str_ConnectorClass | " , " | &Str_ConnectorName | " , " | &Str_PathInfo);
rem MessageBox(0, "", 0, 0, "IBInfo " | &Str_TransID | " , " | &Str_ReqNodeName);

&res = ConnectorRequest(&req);
/* retrieve the response */
&xml = &res.GetXmlDoc();
rem MessageBox(0, "", 0, 0, "String " | &xml.GenFormattedXmlString());
Z_TEST_WRK.EMAIL_TEXTLONG.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/

REMARK "http://prasprak:8888/PPsJavaWebService-PPsGetDates_12-context-root/PPsGetDatesWSSoap12HttpPort?WSDL";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local number &num;
Local string &url, &UserName;
Local array of XmlNode &nodes;

&req = CreateMessage(Message.GETDATESWS);
&soap = CreateSOAPDoc();

rem Local string &soapstr = GetHTMLText(HTML.GETDATESWS_REQ);
Local string &soapstr = GetHTMLText(HTML.GETDATESWS_REQ_12);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_TEST_WRK.EMAIL_ADDRESS.Value = &xml.GenFormattedXmlString();
/* Assign Connector and relevant Properties */
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
/* Specifies OutBound Request */
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
rem &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
/* End Point */
&url = "http://prasprak:8888/PPsJavaWebService-PPsGetDates_12-context-root/PPsGetDatesWSSoap12HttpPort";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
/* Assign the XML Object to a Message Object */
&req.SetXmlDoc(&xml);
/*IBInfo Methods */
/* retrieve the User Name of the person that fired the Sv Op */
&UserName = &req.IBInfo.OrigUser;
&Str_Process = &req.IBInfo.OrigProcess;
&Str_TransID = &req.IBInfo.TransactionID;
&Str_SourceNode = &req.IBInfo.SourceNode;
&Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
/* IBConnectorInfo Methods */
&Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
&Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
&Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
rem MessageBox(0, "", 0, 0, "IBConnectorInfo " | &Str_ConnectorClass | " , " | &Str_ConnectorName | " , " | &Str_PathInfo);
rem MessageBox(0, "", 0, 0, "IBInfo " | &Str_TransID | " , " | &Str_ReqNodeName);

&res = ConnectorRequest(&req);
/* retrieve the response */
&xml = &res.GetXmlDoc();
rem MessageBox(0, "", 0, 0, "String " | &xml.GenFormattedXmlString());
Z_TEST_WRK.EMAIL_TEXTLONG.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
REMARK ENDPOINT = "http://prasprak:8888/JavaWebService-GetDates-context-root/GetDatesWSSoapHttpPort";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local number &num;
Local string &url, &UserName;
Local array of XmlNode &nodes;

&req = CreateMessage(Message.GETDATESWS);
&soap = CreateSOAPDoc();

Local string &soapstr = GetHTMLText(HTML.GETDATESWS_REQ);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_TEST_WRK.EMAIL_ADDRESS.Value = &xml.GenFormattedXmlString();
/* Assign Connector and relevant Properties */
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
/* Specifies OutBound Request */
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
/* End Point */
&url = "http://prasprak:8888/JavaWebService-GetDates-context-root/GetDatesWSSoapHttpPort";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
/* Assign the XML Object to a Message Object */
&req.SetXmlDoc(&xml);
/*IBInfo Methods */
/* retrieve the User Name of the person that fired the Sv Op */
&UserName = &req.IBInfo.OrigUser;
&Str_Process = &req.IBInfo.OrigProcess;
&Str_TransID = &req.IBInfo.TransactionID;
&Str_SourceNode = &req.IBInfo.SourceNode;
&Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
/* IBConnectorInfo Methods */
&Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
&Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
&Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
rem MessageBox(0, "", 0, 0, "IBConnectorInfo " | &Str_ConnectorClass | " , " | &Str_ConnectorName | " , " | &Str_PathInfo);
rem MessageBox(0, "", 0, 0, "IBInfo " | &Str_TransID | " , " | &Str_ReqNodeName);

&res = ConnectorRequest(&req);
/* retrieve the response */
&xml = &res.GetXmlDoc();
rem MessageBox(0, "", 0, 0, "String " | &xml.GenFormattedXmlString());
Z_TEST_WRK.EMAIL_TEXTLONG.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/

import PS_PT:Integration:IRequestHandler;

class FSCM_CRM implements PS_PT:Integration:IRequestHandler
   method FSCM_CRM();
   method OnRequest(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method FSCM_CRM
end-method;

method OnRequest
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   /* Variable Declaration */
   
   Local any &msg;
   Local Rowset &rs, &msgRowset;
   Local number &m, &ipp;
   Local string &new_descr, &descr, &nodes_status, &xmldata;
   Local XmlDoc &xml_doc, &xmlDoc;
   Local array of XmlNode &nodes;
   Local XmlNode &rootNode, &descNode;
   
   &msg = &_MSG;
   &xml_doc = &msg.getXmldoc();
   &nodes = &xml_doc.DocumentElement.GetElementsByTagName("Author");
   If (&nodes.Len <> 0) Then
      For &ipp = 1 To &nodes.Len
         &nodes_status = &nodes [&ipp].NodeValue;
      End-For;
   End-If;
   /* Write the Request XML to file */
   <*
   Local File &NewFile = GetFile("C:\Temp\OnRequest_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &NewFile.WriteString(&xml_doc.GenFormattedXmlString());
   &NewFile.Close();
   *>
   /* Create Response message */
   &msg = CreateMessage(Operation.FSCM_CRM);
   &xmldata = "<?xml version='1.0'?><ConnectorTest/>";
   /* create an XmlDoc */
   &xmlDoc = CreateXmlDoc(&xmldata);
   &rootNode = &xmlDoc.DocumentElement;
   &descNode = &rootNode.AddElement("AuthorNode");
   &descNode.NodeValue = "The Author was " | &nodes_status;
   /* put the XML in the request... */
   &msg.SetXmlDoc(&xmlDoc);
   
   Return &msg;
end-method;

import PSXP_RPTDEFNMANAGER:*;
import PT_MCF_MAIL:MCFOutboundEmail;

/**
* BI_XMLP: This object is used as a base class for invoking the PeopleTools APIs to 
*          generate an XML Publisher report.  This class can be extended for each Data Source.
*          Works for batch processing.
*
* @version 1.0 - Created in SCM 9.0
*    2006/01 - LIC - Created initial version of class
*
* @author SCM BI Development
*/
class BI_XMLP
   property PSXP_RPTDEFNMANAGER:ReportDefn RptDefn;
   
   method BI_XMLP();
   method GetRptDefn(&pReportID As string);
   method DoProcessReport(&pTemplateID As string, &pLanguageCd As string, &pAsOfDate As date, &pProcessInstance As number, &pEmailAddress As string, &pInvoice As string) Returns boolean;
   method SetDataSource();
end-class;

/*------------------ Constructor Method ------------------*/
/**
  *   This is the Constructor Method
  */
method BI_XMLP
   
end-method;

/**
  *   Get the report definition object.
  */
method GetRptDefn
   /+ &pReportID as String +/
   try
      %This.RptDefn = create PSXP_RPTDEFNMANAGER:ReportDefn(&pReportID);
      %This.RptDefn.Get();
      
      /* specify output destination when output type is file */
      If %OutDestType = 2 Then /* file */
         %This.RptDefn.OutDestination = %FilePath;
      End-If;
      
   catch Exception &Err
      
   end-try;
end-method;

/**
  *   Method to call Tools API to generate the XML Publisher report
  */
method DoProcessReport
   /+ &pTemplateID as String, +/
   /+ &pLanguageCd as String, +/
   /+ &pAsOfDate as Date, +/
   /+ &pProcessInstance as Number, +/
   /+ &pEmailAddress as String, +/
   /+ &pInvoice as String +/
   /+ Returns Boolean +/
   
   Local string &sFileName, &sFilePath;
   try
      /* If template is blank, then set template to the default template. */
      If None(&pTemplateID) Then
         Local PSXP_RPTDEFNMANAGER:TemplateDefn &template;
         &template = create PSXP_RPTDEFNMANAGER:TemplateDefn(" ");
         &template = %This.RptDefn.GetDefaultTemplate();
         &pTemplateID = &template.ID;
      End-If;
      
      %This.RptDefn.ProcessReport(&pTemplateID, &pLanguageCd, &pAsOfDate, %This.RptDefn.GetOutDestFormatString(%OutDestFormat));
      
      /* send output to destination */
      If None(&pEmailAddress) Then
         If %OutDestType = 6 Then /* Publish to report repository on web */
            %This.RptDefn.Publish("", "", "", &pProcessInstance);
         Else
            If %OutDestType = 3 Then /* Printer */
               %This.RptDefn.PrintOutput(%FilePath);
            End-If;
         End-If;
      Else
         /* Email the output */
         /* For now, hardcode the path until Tools exposes the path to the PDF.  This output path is only valid */
         /* after ProcessReport() completes and before calling Publish(), PrintOutput(), DisplayOutput(). */
         &sFileName = %This.RptDefn.ID | ".pdf";
         &sFilePath = %This.RptDefn.OutDestination | "/RptInst/" | &sFileName;
         
         Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
         &email.Recipients = &pEmailAddress;
         &email.Subject = MsgGetText(12505, 22, "Message Not Found", &pInvoice);
         &email.Text = MsgGetText(12505, 23, "Message Not Found", &pInvoice);
         &email.AddAttachment(&sFilePath, %FilePath_Absolute, &sFileName, "Invoice", "", "");
         
         Local integer &rcEmail;
         &rcEmail = &email.Send();
         If &rcEmail <> 1 Then
            /* error processing */
            MessageBox(0, " ", 12501, 174, "Message Not Found", &rcEmail);
         End-If;
         /* end email */
      End-If;
      
   catch Exception &Err
      WriteToLog(%ApplicationLogFence_Error, &Err.ToString());
      MessageBox(0, " ", 12501, 160, "Message Not Found", &Err.ToString());
      
      Return False;
   end-try;
   
   Return True;
end-method;

/**
  *   Abstract method to set the datasource.  Each subclass should implement its own method
  */
method SetDataSource
end-method;

class Zip
   method getZipEntries(&strFile As string) Returns array of string;
end-class;

method getZipEntries
   /+ &strFile as String +/
   /+ Returns Array of String +/
   
   Local JavaObject &oZipFile;
   Local JavaObject &oZipEntry;
   Local JavaObject &oEnum;
   Local array of string &arrContent;
   Local integer &iLoop;
   Local integer &iEntries;
   Local string &strName;
   
   &arrContent = CreateArrayRept("", 0);
   
   &oZipFile = CreateJavaObject("java.util.zip.ZipFile", &strFile);
   
   &iEntries = &oZipFile.size();
   &oEnum = &oZipFile.entries();
   
   For &iLoop = 1 To &iEntries
      
      &oZipEntry = &oEnum.nextElement();
      &strName = &oZipEntry.toString();
      &arrContent.Push(&strName);
      
   End-For;
   
   Return &arrContent;
   
end-method;

/*****
	This class accepts a number of seconds to wait and pauses processing accordingly.  
*****/

class Wait
   method WaitForNSeconds(&nSeconds As number);
   
end-class;

method WaitForNSeconds
   /+ &nSeconds as Number +/
   
   Local time &tCurTime;
   While AddToTime(&tCurTime, 0, 0, &nSeconds) > %Time
      /*stay in loop*/
   End-While;
   
end-method;

import TR_FORMAT:Miscellaneous:EquityQuotesFormatter;
import TR_MSG_PROCESSING:Subscription:*;
import TR_FORMAT:Common:TransformDoc;

class StockQuotes
   method StockQuotes(&strSymbols As string);
end-class;

method StockQuotes
   /+ &strSymbols as String +/
   
   Local TR_FORMAT:Miscellaneous:EquityQuotesFormatter &formatter = create TR_FORMAT:Miscellaneous:EquityQuotesFormatter();
   Local object &oFileContentProcessor = create TR_MSG_PROCESSING:Subscription:EquityQuotesLoad();
   Local Message &msgTxn;
   Local string &resultString, &strGroupID;
   Local TR_FORMAT:Common:TransformDoc &outputDoc = create TR_FORMAT:Common:TransformDoc();
   Local XmlDoc &returnDoc;
   
   /* Get the quotes from the exchange */
   &resultString = ConnectorRequestURL("http://quote.yahoo.com/d/quotes.csv?s=" | &strSymbols | "&d=t&f=sl");
   
   try
      &msgTxn = &formatter.format_str(&resultString, &strGroupID, "TRX_EQTY_QUOTE");
      &returnDoc = CreateXmlDoc(&msgTxn.GenXMLString());
      &outputDoc.LoadXmlDoc(&returnDoc);
   catch Exception &err
      &outputDoc.SetError(&err.MessageSetNumber, &err.MessageNumber, &err.ToString());
   end-try;
   
   &oFileContentProcessor.processImportMsg(&msgTxn);
   
end-method;

import TR:FileUtilities:FTP;

/*****
	This class provides helper methods for common Integration Broker functionality.  
*****/
class IBHelper
   method getNodeURL(&strNode As string) Returns string;
   
end-class;

/**
Name: getNodeURL
Description: This returns the URL property from the passed in node.
**/
method getNodeURL
   /+ &strNode as String +/
   /+ Returns String +/
   
   Local string &strURL;
   Local number &iLoop;
   Local Message &MSG;
   Local TR:FileUtilities:FTP &oFTPUtil = create TR:FileUtilities:FTP();
   
   If Not None(&strNode) Then
      
      &MSG = CreateMessage(Message.PAYMENT_DISPATCH);
      
      &oFTPUtil.PopulateFTPGetIBInfo(&MSG, &strNode);
      
      For &iLoop = 1 To &MSG.IBInfo.IBConnectorInfo.GetNumberOfConnectorProperties();
         If &MSG.IBInfo.IBConnectorInfo.GetConnectorPropertiesName(&iLoop) = "URL" Then
            &strURL = &MSG.IBInfo.IBConnectorInfo.GetConnectorPropertiesValue(&iLoop);
         End-If
      End-For;
      
      Return &strURL;
      
   End-If;
   
end-method;

class HideDummyRow
   method HideDummyRow(&gridrow As Row);
end-class;

method HideDummyRow
   /+ &gridrow as Row +/
   
   Local Record &rec;
   Local Field &field;
   Local number &i, &j;
   
   For &i = 1 To &gridrow.RecordCount
      &rec = &gridrow.GetRecord(&i);
      For &j = 1 To &rec.FieldCount
         &field = &rec.GetField(&j);
         If &field.IsInBuf Then
            If &field.Visible = True Then
               &field.Visible = False;
            End-If;
         End-If;
      End-For;
   End-For;
   
end-method;

class FieldEdit
   method FieldEdit();
   method findApostrophe(&strInput As string);
   
end-class;

/* constructor */
method FieldEdit
   
end-method;


method findApostrophe
   /+ &strInput as String +/
   
   Local number &nRetVal;
   
   &nRetVal = Find("'", &strInput);
   
   If &nRetVal > 0 Then
      Error MsgGet(13535, 6270, "Message not found.");
   End-If;
   
end-method;

class CalendarDate
   method PeriodEndDate(&sCalendarId As string, &nPeriods As number, &dAsofdate As date) Returns date;
   method PeriodBeginDate(&sCalendarId As string, &nPeriods As number, &dtEnd As date) Returns date;
   method endDate(&dAsofdate As date, &nmonth As number) Returns date;
end-class;

/* 
Method: PeriodEndDate
Description: Calculates the end date of any period given the calendar and number of periods
*/
method PeriodEndDate
   /+ &sCalendarId as String, +/
   /+ &nPeriods as Number, +/
   /+ &dAsofdate as Date +/
   /+ Returns Date +/
   /*Calculates the end of the period prior to the given AsofDate*/
   Local date &dtEnd;
   Local number &nYear, &nMonth, &nDay;
   
   Evaluate &nPeriods
   When = 1 /*Yearly calendar - closing period is the 12-31 of the previous year*/
      &dtEnd = Date(Value(Year(&dAsofdate) - 1 | "1231"));
      Break;
   When = 2 /*Semi annual calendar - closing period is the 12-31 of the previous year or 6-30*/
      If Month(&dAsofdate) > 6 Then
         &dtEnd = %This.endDate(&dAsofdate, 6);
      Else
         &dtEnd = %This.endDate(&dAsofdate, 0);
      End-If;
      Break;
   When = 4 /*Quarterly calendar*/
      Evaluate Month(&dAsofdate)
      When <= 3
         &dtEnd = %This.endDate(&dAsofdate, 0);
         Break;
      When <= 6
         &dtEnd = %This.endDate(&dAsofdate, 3);
         Break;
      When <= 9
         &dtEnd = %This.endDate(&dAsofdate, 6);
         Break;
      When <= 12
         &dtEnd = %This.endDate(&dAsofdate, 9);
         Break;
      End-Evaluate;
      Break;
   When = 6 /*Bi-monthly calendar*/
      Evaluate Month(&dAsofdate)
      When <= 2
         &dtEnd = %This.endDate(&dAsofdate, 0);
         Break;
      When <= 4
         &dtEnd = %This.endDate(&dAsofdate, 2);
         Break;
      When <= 6
         &dtEnd = %This.endDate(&dAsofdate, 4);
         Break;
      When <= 8
         &dtEnd = %This.endDate(&dAsofdate, 6);
         Break;
      When <= 10
         &dtEnd = %This.endDate(&dAsofdate, 8);
         Break;
      When <= 12
         &dtEnd = %This.endDate(&dAsofdate, 10);
         Break;
      End-Evaluate;
      Break;
   When = 12
      /*Monthly calendar*/
      &dtEnd = %This.endDate(&dAsofdate, Month(&dAsofdate) - 1);
      Break;
   When-Other /*Weekly or daily calendar - to be customized*/
      Break;
   End-Evaluate;
   Return &dtEnd;
end-method;

/*
Method: endDate
Description: Calculates the end date of any month
*/
method endDate
   /+ &dAsofdate as Date, +/
   /+ &nmonth as Number +/
   /+ Returns Date +/
   Local date &dtEnd;
   
   Evaluate &nmonth
   When = 0
      &dtEnd = Date(Value(Year(&dAsofdate) - 1 | "1231"));
      Break;
   When = 2
      If ((Year(&dAsofdate) / 4 = 0 And
            Year(&dAsofdate) / 100 <> 0) Or
            Year(&dAsofdate) / 400 = 0) Then
         &dtEnd = Date(Value(Year(&dAsofdate) | "0229"));
      Else
         &dtEnd = Date(Value(Year(&dAsofdate) | "0228"));
      End-If;
      Break;
   When = 1
   When = 3
   When = 5
   When = 7
   When = 8
      &dtEnd = Date(Value(Year(&dAsofdate) | "0" | &nmonth | "31"));
   When = 10
      &dtEnd = Date(Value(Year(&dAsofdate) | &nmonth | "31"));
      Break;
   When = 4
   When = 6
   When = 9
      &dtEnd = Date(Value(Year(&dAsofdate) | "0" | &nmonth | "30"));
   When = 11
      &dtEnd = Date(Value(Year(&dAsofdate) | &nmonth | "30"));
      Break;
   End-Evaluate;
   Return &dtEnd;
end-method;

/*
Method: PeriodBeginDate
Description: Calculates the beginning date of any period given the calendar, number of periods and end date of that period
*/
method PeriodBeginDate
   /+ &sCalendarId as String, +/
   /+ &nPeriods as Number, +/
   /+ &dtEnd as Date +/
   /+ Returns Date +/
   Local date &dtBegin;
   Evaluate &nPeriods
   When = 1 /*Yearly calendar*/
      &dtBegin = Date(Value(Year(&dtEnd) | "0101"));
      Break;
   When = 2 /*Semi annual calendar*/
      If Month(&dtEnd) > 6 Then
         &dtBegin = Date(Value(Year(&dtEnd) | "0601"));
      Else
         &dtBegin = Date(Value(Year(&dtEnd) | "0101"));
      End-If;
      Break;
   When = 4 /*Quarterly calendar*/
      Evaluate Month(&dtEnd)
      When <= 3
         &dtBegin = Date(Value(Year(&dtEnd) | "0101"));
         Break;
      When <= 6
         &dtBegin = Date(Value(Year(&dtEnd) | "0401"));
         Break;
      When <= 9
         &dtBegin = Date(Value(Year(&dtEnd) | "0701"));
         Break;
      When <= 12
         &dtBegin = Date(Value(Year(&dtEnd) | "1001"));
         Break;
      End-Evaluate;
      Break;
   When = 6 /*Bi-monthly calendar*/
      Evaluate Month(&dtEnd)
      When <= 2
         &dtBegin = Date(Value(Year(&dtEnd) | "0101"));
         Break;
      When <= 4
         &dtBegin = Date(Value(Year(&dtEnd) | "0301"));
         Break;
      When <= 6
         &dtBegin = Date(Value(Year(&dtEnd) | "0501"));
         Break;
      When <= 8
         &dtBegin = Date(Value(Year(&dtEnd) | "0701"));
         Break;
      When <= 10
         &dtBegin = Date(Value(Year(&dtEnd) | "0901"));
         Break;
      When <= 12
         &dtBegin = Date(Value(Year(&dtEnd) | "1101"));
         Break;
      End-Evaluate;
      Break;
   When = 12
      /*Monthly calendar*/
      If Month(&dtEnd) < 10 Then
         &dtBegin = Date(Value(Year(&dtEnd) | "0" | Month(&dtEnd) | "01"));
      Else
         &dtBegin = Date(Value(Year(&dtEnd) | Month(&dtEnd) | "01"));
      End-If;
      Break;
   When-Other /*Weekly or daily calendar - to be customized*/
      Break;
   End-Evaluate;
   Return &dtBegin
end-method;

class BusUnitTR
   method BusUnitTR();
   method addRow(&strBU As string) Returns boolean;
   
end-class;

/* constructor */
method BusUnitTR
   
end-method;

/* 
Method: addRow
Description: 
*/
method addRow
   /+ &strBU as String +/
   /+ Returns Boolean +/
   
   Local Record &recTemp;
   
   try
      &recTemp = CreateRecord(Record.BUS_UNIT_TBL_TR);
      &recTemp.SetDefault();
      &recTemp.BUSINESS_UNIT.Value = &strBU;
      &recTemp.Insert();
      
   catch Exception &err
      MessageBox(0, "", 13535, 6228, "Message Not Found", &err.ToString());
      Return False;
      
   end-try;
   
   Return True;
   
end-method;

class AverageDailyBalance
   method calculateAverageDailyBalance(&rsBal As Rowset, &recBal As string, &sAmountField As string, &sDateField As string, &dBeginDate As date, &dEndDate As date, &sCurrency As string) Returns number;
end-class;

/* 
Method: calculateAverageDailyBalance
Description: Calculates the average daily balance given the begin date and end date of any period and the rowset containing the amount
&rsBal is the rowset that contains the amount
   &recBal is the record in the rowset
   &sAmountField is the amount field
   &sDateField is the date field
   &dBeginDate is the begin date of the period
   &dEndDate is the end date of the period
   &sCurrency is the currency
   This method returns the average daily balance
*/
method calculateAverageDailyBalance
   /+ &rsBal as Rowset, +/
   /+ &recBal as String, +/
   /+ &sAmountField as String, +/
   /+ &sDateField as String, +/
   /+ &dBeginDate as Date, +/
   /+ &dEndDate as Date, +/
   /+ &sCurrency as String +/
   /+ Returns Number +/
   Local number &nAmt, &nAvgBal, &nDaysInPeriod, &j;
   Local date &dDate, &dAmtDate;
   Local string &sDate, &sRec, &sAmount;
   &nDaysInPeriod = Days365(&dBeginDate, &dEndDate);
   &nAmt = 0;
   &nAvgBal = 0;
   &sRec = "Record." | &recBal;
   &sDate = "Field." | &sDateField;
   &sAmount = "Field." | &sAmountField;
   
   /*Loop through rowset to obtain amounts and dates*/
   For &j = 1 To &rsBal.ActiveRowCount
      &dDate = &rsBal(&j).GetRecord(@&sRec).GetField(@&sDate).Value;
      If &dDate >= &dBeginDate And
            &dDate <= &dEndDate Then
         If &nAmt > 0 Then
            &nAvgBal = &nAvgBal + (&nAmt * ((&dDate - &dAmtDate) / &nDaysInPeriod));
         End-If;
         &nAmt = &rsBal(&j).GetRecord(@&sRec).GetField(@&sAmount).Value;
         &dAmtDate = &dDate;
      End-If;
   End-For;
   If &nAmt > 0 Then
      &nAvgBal = &nAvgBal + (&nAmt * ((&dEndDate - &dAmtDate) / &nDaysInPeriod));
      &nAvgBal = RoundCurrency(&nAvgBal, &sCurrency, &dEndDate);
   End-If;
   Return &nAvgBal;
end-method;


/*
   Local number &nBal, &nAvgBal, &nTotalBal, &ndays, &i, &j, &k;
   Local date &dDate;
   Local array of number &nArray;
   Local string &sDate, &sRec, &sAmount;
   &nArray = CreateArrayRept(&nBal, 0);
   &ndays = Days365(&dBeginDate, &dEndDate);
   &nBal = 0;
   &nAvgBal = 0;
   &nTotalBal = 0;
   &sRec = "Record." | &recBal;
   &sDate = "Field." | &sDateField;
   &sAmount = "Field." | &sAmountField;
   
   &dDate = &dBeginDate;
*/
/*Loop through rowset to match date of each row with balance date*/
/*   
For &j = 1 To &rsBal.ActiveRowCount
      If &rsBal(&j).GetRecord(@&sRec).GetField(@&sDate).Value = &dDate Then
         &nBal = &rsBal(&j).GetRecord(@&sRec).GetField(@&sAmount).Value;
         &nTotalBal = &nTotalBal + &nBal;
         &nArray.Push(&nBal);
         &dDate = AddToDate(&dDate, 0, 0, 1);
      Else
         If &rsBal(&j).GetRecord(@&sRec).GetField(@&sDate).Value > &dDate Then
            While &rsBal(&j).GetRecord(@&sRec).GetField(@&sDate).Value <> &dDate And
                  &dDate < &dEndDate
               &nTotalBal = &nTotalBal + &nBal;
               &nArray.Push(&nBal);
               &dDate = AddToDate(&dDate, 0, 0, 1);
            End-While;
            If &nBal = 0 Then
               &nBal = &rsBal(&j).GetRecord(@&sRec).GetField(@&sAmount).Value;
               &nTotalBal = &nTotalBal + &nBal;
               &nArray.Push(&nBal);
               &dDate = &rsBal(&j).GetRecord(@&sRec).GetField(@&sDate).Value;
            End-If;
         End-If;
      End-If;
   End-For;
   &nAvgBal = RoundCurrency(&nTotalBal / &ndays, &sCurrency, &dEndDate);
   Return &nAvgBal;
end-method;
*/

class Files
   method GetFileList(&strPath As string) Returns array of string;
   method FilePathUpdate(&strFileName As string, &strPathName As string) Returns string;
   method FileDelete(&strFilePath As string);
   method FileCopy(&strOldFileInfo As string, &strNewFilePath As string);
   method GetFileAsString(&oFile As File) Returns string;
   method CreateTempFile() Returns File;
   method CreateTempFileWithExtension(&sExtension As string) Returns File;
   method CreateTempFileWithString(&sFileString As string) Returns File;
   method LoadCleanFile(&oInFile As File) Returns string;
   
private
end-class;


/* Use the Java component to get the list of files and directories from the past path */
method GetFileList
   /+ &strPath as String +/
   /+ Returns Array of String +/
   
   /* Local variables */
   Local integer &iLoop;
   Local JavaObject &joFile;
   Local JavaObject &arrFiles;
   Local JavaObject &arrRef;
   Local array of string &arrFileNames;
   
   /* Initialize variables */
   &joFile = CreateJavaObject("java.io.File", &strPath);
   &arrFiles = &joFile.list();
   &arrFileNames = CreateArrayRept("", 0);
   &arrRef = GetJavaClass("java.lang.reflect.Array");
   
   If All(&arrFiles) Then
      
      /* Loop through each of the files returned & add to the string array */
      For &iLoop = 1 To &arrFiles.length;
         &arrFileNames.Push(&arrRef.get(&arrFiles, &iLoop - 1).toString());
      End-For;
      
   End-If;
   
   Return &arrFileNames;
   
end-method;

/** This method will update a file path based on a new filename passed in **/
method FilePathUpdate
   /+ &strFileName as String, +/
   /+ &strPathName as String +/
   /+ Returns String +/
   
   Local string &strPathSep;
   Local number &nPos, &nNewLen;
   
   If &strFileName = ".." Then
      &nPos = Find("\", &strPathName);
      While &nPos < Len(&strPathName) - 1;
         &nNewLen = &nPos;
         &nPos = Find("\", &strPathName, &nPos + 1);
      End-While;
      Return Left(BSP_IMPORT.FILE_PATH_NAME, &nNewLen);
      
   Else
      If Len(&strPathName) > 0 Then
         &strPathSep = Right(&strPathName, 1);
      Else
         &strPathSep = "\";
      End-If;
      
      Return BSP_IMPORT.FILE_PATH_NAME.Value | BSP_FILE_INFO.FILE_NAME.Value | &strPathSep;
      
   End-If;
   
end-method;


/** This method will delete a file **/
method FileDelete
   /+ &strFilePath as String +/
   
   Local File &oFile;
   
   &oFile = GetFile(&strFilePath, "W", "A", %FilePath_Absolute);
   &oFile.Delete();
   
end-method;


/** This method will copy a file to another location **/
method FileCopy
   /+ &strOldFileInfo as String, +/
   /+ &strNewFilePath as String +/
   
   Local File &oOldFile;
   Local File &oNewFile;
   Local string &strFileName;
   Local string &strData, &strSlash;
   Local integer &iPos, &iTempPos;
   
   &oOldFile = GetFile(&strOldFileInfo, "R", "A", %FilePath_Absolute);
   &strFileName = &oOldFile.Name;
   
   /* Determine the file path separator character. First check for backslash then forwardslash. */
   &iTempPos = Find("\", &strFileName);
   If &iTempPos = 0 Then
      &iTempPos = Find("/", &strFileName);
      &strSlash = "/";
   Else
      &strSlash = "\";
   End-If;
   
   While &iTempPos > 0 And
         &iTempPos < Len(&strFileName)
      &iPos = &iTempPos;
      &iTempPos = Find(&strSlash, &strFileName, &iTempPos + 1);
   End-While;
   &strFileName = Substring(&strFileName, &iPos + 1, Len(&strFileName));
   
   &oNewFile = GetFile(&strNewFilePath | &strFileName, "W", "A", %FilePath_Absolute);
   
   While &oOldFile.ReadLine(&strData);
      &oNewFile.WriteLine(&strData);
   End-While;
   
   &oOldFile.Close();
   &oNewFile.Close();
   
end-method;

/** This method takes a PS File object and reads the contents from disk exactly how it appears.
* File must be closed to release lock, then java inputstream reads file.
* File object is reopened in append mode after read.
*/
method GetFileAsString
   /+ &oFile as File +/
   /+ Returns String +/
   
   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;
   
   
   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");
   
   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();
   
   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
      
      /* for every 1500 reads turn buffer to string and add to file string, 
this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
   
   /*open up the file again so that addition things could be written to file */
   &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);
   
   Return &sFullFileContent;
   
end-method;

/** Create a file in the working directory of the appserver or process,
* scheduler,  in 
*PS_FILEDIR[\relative_path]
*PS_SERVDIR\Files[\relative_path]
*application server, the following environmental variables are valid, and are searched for in the following order: 
*PS_FILEDIR[\relative_path]
*PS_SERVDIR\Files[\relative_path]
*TEMP[\relative_path]

assumes extension is .txt - use CreateTempFileWithExtension to pass in an extension
*/

method CreateTempFile
   /+ Returns File +/
   
   Local string &tempFileName = "temp" | UuidGen() | ".txt";
   
   Return GetFile(&tempFileName, "W", %FilePath_Relative);
   
end-method;

/* same as CreateTempFile, but can pass in extension*/
method CreateTempFileWithExtension
   /+ &sExtension as String +/
   /+ Returns File +/
   
   Local string &tempFileName = "temp" | UuidGen() | "." | &sExtension;
   
   Return GetFile(&tempFileName, "W", %FilePath_Relative);
   
end-method;

/* creates a temp file from a string and returns a file in read mode */
method CreateTempFileWithString
   /+ &sFileString as String +/
   /+ Returns File +/
   
   Local File &fTempFile;
   Local string &sFileName;
   &fTempFile = %This.CreateTempFile();
   &fTempFile.WriteString(&sFileString);
   /* open the file in read mode of file to begin reading */
   &sFileName = &fTempFile.Name;
   &fTempFile.Close();
   &fTempFile = GetFile(&sFileName, "R", %FilePath_Absolute);
   
   Return &fTempFile;
   
end-method;

method LoadCleanFile
   /+ &oInFile as File +/
   /+ Returns String +/
   /* Loop through each line in the file and store in the &strCleanFile variable */
   Local string &strLine;
   Local string &strCleanFile;
   Local number &len = 0;
   Local array of string &arrLines = CreateArrayRept(&strLine, 0);
   While &oInFile.ReadLine(&strLine)
      &strLine = RTrim(Clean(&strLine));
      &strLine = Substitute(&strLine, Char(26), " "); /* Added this line to remove invalid characters */
      /* count the strings so we can give the join a size hint, increase perf dramatically */
      &len = &len + Len(&strLine) + 1;
      &arrLines.Push(&strLine);
   End-While;
   &strCleanFile = &arrLines.Join(Char(10), "", "", &len);
   Return &strCleanFile;
end-method;

import PT_BRANDING:HeaderLinkHP;
import PT_BRANDING:HeaderLinkPIA;
import PT_NAV:NavPortal;
import PT_NAV:NavTheme;

/**
  * BrandingBase is the base class to create Portal branding related objects.
  * Any new branding class needs to extend this class. 
  */

class BrandingBase
   method BrandingBase();
   method GetHPTabHTML(&Portal As ApiObject, &ActiveTabName As string, &PersHTML As string out, &TabHTML As string out);
   method GetPersLinkHTML(&Portal As ApiObject, &ActiveTabName As string, &ContentHREF As string out, &LayoutHREF As string out) Returns boolean;
   method GetModifySysTabHTML(&Portal As ApiObject, &ActiveTabName As string, &strSysContentURL As string out, &strSysLayoutURL As string out) Returns boolean;
   
   method GetUniHeaderHTML(&PersonalizeHTML As string, &Today As string, &Greeting As string, &homepageJS As string, &TabHTML As string) Returns string;
   method GetUniHeaderHTML_PIA(&PersonalizeHTML As string, &Today As string, &ContentURL As string, &strTitle As string) Returns string;
   
   
   method GetExpPasswordHdrHTML(&ContentURL As string) Returns string;
   method GetIScriptHPPoweredByFooterHTML() Returns string;
   method GetIScriptHPDefaultHdrHTML() Returns string;
   
   /**
     * methods to set Pagelet body styles and folder images.
     * called by PT_NAV:NavTheme
     */
   
   method GetNavstyleSheetURL() Returns string;
   method GetNavstyleSheetURLAlt() Returns string;
   method GetNavstyleBkGndColor() Returns string;
   method GetNavstyleBkGndColorPage() Returns string;
   method GetNavstyleSelFolderBK() Returns string;
   method GetNavstyleSelParentLink() Returns string;
   method GetNavstyleSelParentBkGnd() Returns string;
   method GetNavstyleSelParentEdge() Returns string;
   method GetNavstyleNavParentLink() Returns string;
   method GetNavstyleSelChildBkGnd() Returns string;
   method GetNavstyleSelChildLink() Returns string;
   method GetNavstyleUnSelChildLink() Returns string;
   method GetNavstyleSelChildEdgeLT() Returns string;
   method GetNavstyleSelChildEdgeDK() Returns string;
   method GetNavimgUrlClearDot() Returns string;
   method GetNavimgUrlNavBullet() Returns string;
   method GetNavimgUrlNavReverseBullet() Returns string;
   method GetNavimgUrlOpenFolder() Returns string;
   method GetNavimgUrlClosedFolder() Returns string;
   method GetNavimgUrlMenuOpen() Returns string;
   method GetNavimgUrlMenuClose() Returns string;
   method GetNavimgUrlSearchGo() Returns string;
   method GetHdrMenuTopPos() Returns string;
private
   instance string &styleSheetURL;
   instance string &styleBkGndColor;
   instance string &styleSelFolderBK;
   instance string &styleSelParentLink;
   instance string &styleSelParentBkGnd;
   instance string &styleSelParentEdge;
   instance string &styleNavParentLink;
   instance string &styleSelChildBkGnd;
   instance string &styleSelChildLink;
   instance string &styleUnSelChildLink;
   instance string &styleSelChildEdgeLT;
   instance string &styleSelChildEdgeDK;
   instance string &imgUrlClearDot;
   instance string &imgUrlNavBullet;
   instance string &imgUrlNavReverseBullet;
   instance string &imgUrlOpenFolder;
   instance string &imgUrlClosedFolder;
   instance string &imgUrlMenuOpen;
   instance string &imgUrlMenuClose;
   instance string &imgUrlSearchGo;
   instance string &strHdrMenuTopPos;
   instance string &homeURL;
   instance string &LogoutURL;
   instance string &startURL;
   instance string &srchURL;
   
   instance PT_NAV:NavPortal &navPortal;
   instance PT_NAV:NavTheme &navTheme;
   
end-class;


rem  --- same reference as WEBLIB_PORTAL.HOMEPAGE;

Declare Function PortalOpen PeopleCode FUNCLIB_PORTAL.PORTAL_GEN_FUNC FieldFormula;
Declare Function GetHomepaGetabURL PeopleCode WEBLIB_PORTAL.PORTAL_HEADER FieldFormula;
Declare Function GetRefreshHPJS PeopleCode FUNCLIB_PORTAL.TEMPLATE_FUNC FieldFormula;
Declare Function IsValidDate PeopleCode FUNCLIB_PORTAL.PORTAL_GEN_FUNC FieldFormula;

rem  --- same reference as WEBLIB_PORTAL.PORTAL_HEADER;
Declare Function DefineTabIndex PeopleCode WEBLIB_PORTAL.PORTAL_HEADER FieldFormula;
Declare Function GetPortalHomepageURL PeopleCode WEBLIB_PORTAL.PORTAL_HEADER FieldFormula;
Declare Function checkVisible PeopleCode WEBLIB_PORTAL.PORTAL_NAV FieldFormula;
Declare Function GetFormatedBreadcrumbs PeopleCode WEBLIB_PORTAL.PORTAL_NAV FieldFormula;
Declare Function GetMenuURL PeopleCode FUNCLIB_PORTAL.PORTAL_NAV FieldFormula;
Declare Function IsValid PeopleCode FUNCLIB_PORTAL.PORTAL_GEN_FUNC FieldFormula;
Declare Function GetDefaultTabName PeopleCode FUNCLIB_PORTAL.PORTAL_GEN_FUNC FieldFormula;
Declare Function SetDocDomainForPortal PeopleCode FUNCLIB_PORTAL.TEMPLATE_FUNC FieldFormula;

Declare Function PTGetStyleSheetURL PeopleCode FUNCLIB_PORTAL.PORTAL_GEN_FUNC FieldFormula;

/**
     * Constructor
     */
method BrandingBase
   rem SetTracePC(2048);
   rem SetTraceSQL(3);
end-method;

/**
     * generate HP header, called by WEBLIB_PORTAL.PORTAL_HOMEPAGE
     * IScript_HPDefaultHdr 
     */
method GetIScriptHPDefaultHdrHTML
   /+ Returns String +/;
   
   Local string &ActiveTab, &PersHTML, &TabHTML, &cookieJSURL, &refreshHPJSURL, &Today, &Greeting, &homepageJS, &EntHeaderHTML;
   
   Local ApiObject &Portal;
   
   REM Get the active tab;
   &ActiveTab = %Request.GetParameter("tab");
   
   &Portal = PortalOpen();
   %This.GetHPTabHTML(&Portal, &ActiveTab, &PersHTML, &TabHTML);
   &Greeting = &Portal.Homepage.Greeting;
   &Portal.Close();
   
   &cookieJSURL = %Response.GetJavaScriptURL(HTML.PORTAL_COOKIE);
   &refreshHPJSURL = %Response.GetJavaScriptURL(HTML.PORTAL_REFRESHPAGE);
   &homepageJS = GetHTMLText(HTML.PORTAL_HP_JS_INCLUDE, &cookieJSURL, &refreshHPJSURL);
   
   &Today = "";
   
   &EntHeaderHTML = %This.GetUniHeaderHTML(&PersHTML, &Today, &Greeting, &homepageJS, &TabHTML);
   
   Return &EntHeaderHTML;
end-method;

/**
     * generate HP Tab HTML, copy of WEBLIB_PORTAL.HOMEPAGE 
     * Function GetHPTabHTML
     */

method GetHPTabHTML
   /+ &Portal as ApiObject, +/
   /+ &ActiveTabName as String, +/
   /+ &PersHTML as String out, +/
   /+ &TabHTML as String out +/
   
   Local Response &Response;
   Local ApiObject &SysTabColl, &UserTabColl, &SysTab, &UserTab, &PersCref;
   Local string &FirstTDHTML, &TabLabel, &HelpID, &LayoutHREF, &ContentHREF, &refreshHomepage, &PersLinkHTML, &PersText, &LayoutText, &ContentText, &HelpText;
   Local number &ValidTabCount, &ColSpan;
   
   Local boolean &ExactMatch;
   
   &Response = %Response;
   &SysTabColl = &Portal.TabDefinitions;
   &UserTabColl = &Portal.Homepage.UserTabs;
   
   If &UserTabColl = Null Then
      &UserTabColl = &SysTabColl;
   End-If;
   
   REM The first tab (active or inactive) always has 1 less <td>;
   &FirstTDHTML = "";
   
   REM Can't use the system tab collection count because it includes expired tabs, future tabs;
   &ValidTabCount = 0;
   
   REM Build the tab HTML;
   &SysTab = &SysTabColl.First();
   While &SysTab <> Null
      If IsValidDate(&SysTab) Then
         REM If the user has personalized, use the user's tab label;
         REM If the tab doesn't allow renames, the user tab label will be same as the system tab label;
         &UserTab = &UserTabColl.ItemByName(&SysTab.Name);
         If &UserTab <> Null Then
            &TabLabel = &UserTab.Label;
         Else
            &TabLabel = &SysTab.Label;
         End-If;
         
         REM did we find the active tab;
         &ExactMatch = Exact(&ActiveTabName, &SysTab.Name);
         If &ExactMatch Then
            &TabHTML = &TabHTML | GetHTMLText(HTML.PORTAL_HP_ACTIVE_TAB, &TabLabel, &FirstTDHTML, &Response.GetImageURL(Image.PT_HOME_TAB_LINE), &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_LEFT));
            
            REM ICE 567782002;
            &TabHTML = &TabHTML | GetHTMLText(HTML.PORTAL_HPTABNAME_COOKIE, &ActiveTabName);
            
            REM Generate the Help HTML for the active tab;
            REM find Help ID set for the tab;
            REM if not found, find HelpURL set in configuration.properties;
            
            &HelpID = "";
            If None(&SysTab.HelpID) Then
               If %Request.GetHelpURL(&HelpID) <> "" Then
                  &HelpID = "DEFAULTHOMEPAGE";
               End-If;
            Else
               &HelpID = &SysTab.HelpID;
            End-If;
            
            If &HelpID <> "" Then
               &HelpText = MsgGetText(95, 410, "Message not found.");
            End-If;
            
         Else
            &TabHTML = &TabHTML | GetHTMLText(HTML.PORTAL_HP_INACTIVE_TAB, GetHomepaGetabURL(&SysTab.Name), &TabLabel, &FirstTDHTML, &Response.GetImageURL(Image.PT_HOME_TAB_LINE), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_LEFT));
         End-If;
         &ValidTabCount = &ValidTabCount + 1;
      End-If;
      &SysTab = &SysTabColl.Next();
      &FirstTDHTML = GetHTMLText(HTML.PORTAL_HP_TAB_EXTRA_TD, &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_RIGHT));
   End-While;
   
   If &ValidTabCount <= 1 Then
      &ColSpan = 2;
   Else
      &ColSpan = 2 + (2 * &ValidTabCount);
   End-If;
   
   REM Make sure the user is authorized to see the personalize content, layout links;
   If %This.GetPersLinkHTML(&Portal, &ActiveTabName, &ContentHREF, &LayoutHREF) Then
      &PersText = MsgGetText(95, 58, "Message not found.");
      &LayoutText = MsgGetText(95, 59, "Message not found.");
      &ContentText = MsgGetText(95, 60, "Message not found.");
      &refreshHomepage = GetRefreshHPJS(&ActiveTabName);
      &PersLinkHTML = GetHTMLText(HTML.PORTAL_HP_PERSONALIZE_LINKS_TD, &PersText, &ContentHREF, &ContentText, &LayoutHREF, &LayoutText, &refreshHomepage);
   End-If;
   
   REM System tab content and layout;
   Local string &strModifySysTabHTML = "";
   Local string &strSpaceHTML = "";
   Local string &strSysContentURL, &strSysLayoutURL;
   
   If %This.GetModifySysTabHTML(&Portal, &ActiveTabName, &strSysContentURL, &strSysLayoutURL) Then
      Local string &strModifyText = MsgGetText(95, 144, "Modify");
      Local string &strSysLayoutText = MsgGetText(95, 59, "Layout");
      Local string &strSysContentText = MsgGetText(95, 60, "Content");
      &refreshHomepage = GetRefreshHPJS(&ActiveTabName);
      &strModifySysTabHTML = GetHTMLText(HTML.PORTAL_HP_SYSTAB_LINKS, &strModifyText, &strSysContentURL, &strSysContentText, &strSysLayoutURL, &strSysLayoutText, &refreshHomepage);
   End-If;
   
   If All(&strModifySysTabHTML) And
         All(&PersLinkHTML) Then
      &strSpaceHTML = "&nbsp;&nbsp;&nbsp;&nbsp;";
   End-If;
   
   Local string &strLinkHTML = GetHTMLText(HTML.PORTAL_HP_LINKS, &PersLinkHTML, &strSpaceHTML, &strModifySysTabHTML, &ColSpan);
   
   If &ValidTabCount <= 1 Then
      &PersHTML = GetHTMLText(HTML.PORTAL_HP_PERSONALIZE_LINKS, &strLinkHTML, %Request.GetHelpURL(&HelpID), &HelpText);
      
      REM ICE 567782002;
      &TabHTML = GetHTMLText(HTML.PORTAL_HPTABNAME_COOKIE, &ActiveTabName);
   Else
      &TabHTML = GetHTMLText(HTML.PORTAL_HP_TABS, &TabHTML, &strLinkHTML, &ColSpan, &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_RIGHT), %Request.GetHelpURL(&HelpID), &HelpText, &Response.GetImageURL(Image.PT_HOME_TAB_LINE), &Response.GetImageURL(Image.TRANSPARENT));
      &PersHTML = "";
   End-If;
   
end-method;

method GetPersLinkHTML
   /+ &Portal as ApiObject, +/
   /+ &ActiveTabName as String, +/
   /+ &ContentHREF as String out, +/
   /+ &LayoutHREF as String out +/
   /+ Returns Boolean +/
   
   Local ApiObject &PersCref;
   
   REM Make sure the user is authorized to see the personalize content, layout links;
   &PersCref = &Portal.FindCRefByName("PT_PORTAL_HOMEPAGE_GBL");
   
   If All(&PersCref) And
         &PersCref.Authorized Then
      &LayoutHREF = GenerateComponentRelativeURL(%Portal, %Node, MenuName.PORTAL_PERS_HOMEPAGE, "GBL", Component.PORTAL_HOMEPAGE, "", "") | "?PORTALPARAM_PAGE=LAYOUT&tab=" | &ActiveTabName;
      
      &ContentHREF = GenerateComponentRelativeURL(%Portal, %Node, MenuName.PORTAL_PERS_HOMEPAGE, "GBL", Component.PORTAL_HOMEPAGE, "", "") | "?PORTALPARAM_PAGE=CONTENT&tab=" | &ActiveTabName;
      
      Return True;
   Else
      Return False;
   End-If;
   
end-method;

method GetModifySysTabHTML
   /+ &Portal as ApiObject, +/
   /+ &ActiveTabName as String, +/
   /+ &strSysContentURL as String out, +/
   /+ &strSysLayoutURL as String out +/
   /+ Returns Boolean +/
   
   Local ApiObject &CRef;
   Local boolean &bDisplayLinks = False;
   
   REM Is the Modify Content / Layout links enabled for this portal;
   If &Portal.IsHpModifyLinks Then
      
      REM Make sure the user is authorized to see the Modify System tab component;
      &CRef = &Portal.FindCRefByName("PT_PTSYSTABADM_GBL");
      If All(&CRef) And
            &CRef.Authorized Then
         
         REM Special admin roles get access to all system tabs;
         If IsUserInRole("Portal Administrator", "PeopleSoft Administrator") Then
            &bDisplayLinks = True;
         Else
            REM No special role, so check if an admin role is defined for this portal;
            If All(&Portal.AdmRole) Then
               
               REM Is the current user allowed to modify this system tab;
               If IsUserInRole(&Portal.AdmRole) Then
                  &bDisplayLinks = True;
               End-If;
               
               REM No role, so anybody with access to the component can modify this tab;
            Else
               &bDisplayLinks = True;
            End-If;
         End-If;
      End-If;
   End-If;
   
   If &bDisplayLinks Then
      &strSysContentURL = GenerateComponentRelativeURL(%Portal, %Node, MenuName.PORTAL_ADMIN, "GBL", Component.PTSYSTABADM, Page.PTSYSTABCONTENT, "U") | "&tab=" | &ActiveTabName;
      &strSysLayoutURL = GenerateComponentRelativeURL(%Portal, %Node, MenuName.PORTAL_ADMIN, "GBL", Component.PTSYSTABADM, Page.PTSYSTABLAYOUT, "U") | "&tab=" | &ActiveTabName;
   End-If;
   
   Return &bDisplayLinks;
   
end-method;

/**
     * generate HP Poweredby Footer, called by WEBLIB_PORTAL.PORTAL_HOMEPAGE
     * IScript_HPPoweredBy 
     */
method GetIScriptHPPoweredByFooterHTML
   /+ Returns String +/;
   Local string &PoweredByHTML;
   
   &PoweredByHTML = GetHTMLText(HTML.PORTAL_HP_POWEREDBY, %Response.GetImageURL(Image.PT_PORTAL_POWEREDBY));
   
   Return &PoweredByHTML;
end-method;

method GetUniHeaderHTML
   /+ &PersonalizeHTML as String, +/
   /+ &Today as String, +/
   /+ &Greeting as String, +/
   /+ &homepageJS as String, +/
   /+ &TabHTML as String +/
   /+ Returns String +/
   
   Local Response &Response;
   Local Request &Request;
   Local object &objHeaderLink;
   Local ApiObject &SysTabColl, &UserTabColl, &SysTab, &UserTab, &PersCRef, &Portal, &CRef, &AddToFavCRef, &WLCRef;
   Local string &tabindex, &PortalName, &SaveWarning, &HomepaGetabName, &AddToFavoritesHTML, &AddToFavFormHTML, &portalContent, &strPortalContent, &strPortalActual, &Temp, &FavoritesHTML, &addFavURL, &HelpHTML, &WLRelativeURL, &WLHTML, &domainScript, &SaveWarnCrossDomainScript, &UniHeaderHTML, &HelpJSHTML, &CTIHTML, &MCFHTML, &PPMHTML, &styleSheet;
   
   &Response = %Response;
   &Request = %Request;
   
   &PortalName = %Portal;
   &Portal = PortalOpen();
   
   REM Get the tabindex value from HDRICN personalization
   &tabindex = DefineTabIndex();
   
   &navPortal = create PT_NAV:NavPortal("IScript_UniHeader_Frame");
   &navTheme = create PT_NAV:NavTheme(&navPortal);
   &objHeaderLink = create PT_BRANDING:HeaderLinkHP(&Portal, &tabindex, &navPortal.IsSearchInHdr(), &navPortal.GetSearchPageURL());
   
   REM hompage link;
   &homeURL = &objHeaderLink.GetHomeURL();
   
   REM Sign out link;
   &LogoutURL = &objHeaderLink.GetLogoutURL();
   
   &startURL = &objHeaderLink.GetStartURL();
   
   REM Edit Favorites link is now displayed in side nav;
   &FavoritesHTML = "";
   &objHeaderLink.SetAddFav();
   &FavoritesHTML = &objHeaderLink.GetFavoritesHTML();
   &AddToFavoritesHTML = &objHeaderLink.GetAddToFavoritesHTML();
   &AddToFavFormHTML = &objHeaderLink.GetAddToFavFormHTML();
   
   &HelpHTML = &objHeaderLink.GetHelpHTML();
   
   REM Display worklist if user has access;
   &objHeaderLink.SetWL();
   &WLHTML = &objHeaderLink.GetWLHTML();
   
   REM Display the Multi-Channel Framework link if the user has access;
   &objHeaderLink.SetCTIMCFHTML();
   &CTIHTML = &objHeaderLink.GetCTIHTML();
   &MCFHTML = &objHeaderLink.GetMCFHTML();
   
   REM Display the Performance Monitor User Trace Console if the user has access;
   &objHeaderLink.SetPPMHTML();
   &PPMHTML = &objHeaderLink.GetPPMHTML();
   
   &domainScript = SetDocDomainForPortal();
   
   REM Save warning cross domain script;
   &SaveWarnCrossDomainScript = &objHeaderLink.GetSaveWarnCrossDomainScript();
   
   &styleSheet = &objHeaderLink.GetStyleSheet();
   
   REM Search in header;
   Local string &SearchHTML = &objHeaderLink.GetHdrSearchHTML();
   Local string &ColSpanHTML = &objHeaderLink.GetHdrColSpanHTML();
   
   REM Incident Id : 1481536006;
   Local string &Charset = %Request.CharSet;
   
   REM PP's Custom Links;
   Local string &PPs_Process_Monitor, &PPs_Gateway;
   Local string &PPs_Async, &PPs_Sync, &PPs_ePro;
   Local string &PPs_1;
   REM Process Monitor link;
   &PPs_1 = &homeURL;
   &PPs_Process_Monitor = Substitute(&PPs_1, "h/?tab=DEFAULT", "c/PROCESSMONITOR.PROCESSMONITOR.GBL?");
   &PPs_Gateway = Substitute(&PPs_1, "h/?tab=DEFAULT", "c/IB_PROFILE.IB_GATEWAY.GBL?");
   &PPs_Async = Substitute(&PPs_1, "h/?tab=DEFAULT", "c/IB_PROFILE.IB_MONITOR.GBL?");
   &PPs_Sync = Substitute(&PPs_1, "h/?tab=DEFAULT", "c/IB_PROFILE.IB_MONITOR_SYNCH.GBL?");
   &PPs_ePro = Substitute(&PPs_1, "h/?tab=DEFAULT", "c/PV_MAIN_MENU.PV_REQ_ENTRY.GBL?");
   
   If &navTheme.isNS4x() Then
      &UniHeaderHTML = GetHTMLText(HTML.PORTAL_UNI_HEADER_NS4X, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), "", "", &FavoritesHTML, &AddToFavoritesHTML, &HelpHTML, "", &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &styleSheet, &homeURL, &startURL, &AddToFavFormHTML, &LogoutURL, MsgGetText(95, 400, "Return Home"), /*20*/MsgGetText(95, 401, "Home"), MsgGetText(95, 402, "Return to Menu"), MsgGetText(95, 403, "Menu"), MsgGetText(95, 408, "Sign out"), &Greeting, &SearchHTML, &ColSpanHTML, &PersonalizeHTML, "", "", &HelpJSHTML, &homepageJS, "", &TabHTML, &WLHTML, &domainScript, &Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT), "", &SaveWarnCrossDomainScript, &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_CENTER), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_CENTER), /*40*/&Response.GetImageURL(Image.PT_HOME_TAB_LINE), %Request.ExpireMeta, &CTIHTML, &MCFHTML, &PPMHTML, &Charset);
   Else
      rem &UniHeaderHTML = GetHTMLText(HTML.PORTAL_UNI_HEADER_NNS, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), "", "", &FavoritesHTML, &AddToFavoritesHTML, &HelpHTML, "", &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &styleSheet, &homeURL, &startURL, &AddToFavFormHTML, &LogoutURL, MsgGetText(95, 400, "Return Home"), /*20*/MsgGetText(95, 401, "Home"), MsgGetText(95, 402, "Return to Menu"), MsgGetText(95, 403, "Menu"), MsgGetText(95, 408, "Sign out"), &Greeting, &SearchHTML, &ColSpanHTML, &PersonalizeHTML, "", "", &HelpJSHTML, &homepageJS, "", &TabHTML, &WLHTML, &domainScript, &Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT), "", &SaveWarnCrossDomainScript, &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_CENTER), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_CENTER), /*40*/&Response.GetImageURL(Image.PT_HOME_TAB_LINE), %Request.ExpireMeta, &CTIHTML, &MCFHTML, &PPMHTML, &Charset);
      &UniHeaderHTML = GetHTMLText(HTML.PORTAL_UNI_HEADER_NNS, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), "", "", &FavoritesHTML, &AddToFavoritesHTML, &HelpHTML, "", &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &styleSheet, &homeURL, &startURL, &AddToFavFormHTML, &LogoutURL, MsgGetText(95, 400, "Return Home"), /*20*/MsgGetText(95, 401, "Home"), MsgGetText(95, 402, "Return to Menu"), MsgGetText(95, 403, "Menu"), MsgGetText(95, 408, "Sign out"), &Greeting, &SearchHTML, &ColSpanHTML, &PersonalizeHTML, "", "", &HelpJSHTML, &homepageJS, "", &TabHTML, &WLHTML, &domainScript, &Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT), "", &SaveWarnCrossDomainScript, &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_CENTER), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_CENTER), /*40*/&Response.GetImageURL(Image.PT_HOME_TAB_LINE), %Request.ExpireMeta, &CTIHTML, &MCFHTML, &PPMHTML, &Charset, &PPs_Process_Monitor, &PPs_Gateway, &PPs_Async, &PPs_Sync, &PPs_ePro);
   End-If;
   
   &Portal.Close();
   
   Return &UniHeaderHTML;
   
   
end-method;

method GetUniHeaderHTML_PIA
   /+ &PersonalizeHTML as String, +/
   /+ &Today as String, +/
   /+ &ContentURL as String, +/
   /+ &strTitle as String +/
   /+ Returns String +/
   
   Local Response &Response;
   Local Request &Request;
   Local object &objHeaderLink;
   
   Local ApiObject &SysTabColl, &UserTabColl, &SysTab, &UserTab, &PersCRef, &Portal, &CRef, &AddToFavCRef, &WLCRef;
   Local string &UniHeaderHTMLPIA, &tabindex, &PortalName, &SaveWarning, &HomepaGetabName, &AddToFavoritesHTML, &AddToFavFormHTML, &Temp, &FavoritesHTML, &addFavURL, &HelpHTML, &WLRelativeURL, &WLName, &WLAlt, &WLImg, &WLHTML, &domainScript, &SaveWarnCrossDomainScript, &HelpJSHTML, &PortalContentURL, &PortalActualURL, &portalContent, &WLPortalURL, &Greeting, &BreadHTML, &styleSheet, &homepageJS, &TabHTML, &CTIHTML, &MCFHTML, &PPMHTML;
   Local boolean &DisplayAddToFavLink;
   
   &Response = %Response;
   &Request = %Request;
   
   &PortalName = %Portal;
   &Portal = PortalOpen();
   
   REM Get the tabindex value from HDRICN personalization
   Local string &tabindex = "";
   &tabindex = DefineTabIndex();
   
   &navPortal = create PT_NAV:NavPortal("IScript_UniHeader_Frame");
   &navTheme = create PT_NAV:NavTheme(&navPortal);
   &objHeaderLink = create PT_BRANDING:HeaderLinkPIA(&Portal, &tabindex, &navPortal.IsSearchInHdr(), &navPortal.GetSearchPageURL(), &ContentURL);
   
   REM hompage link;
   &homeURL = &objHeaderLink.GetHomeURL();
   
   REM Sign out link;
   &LogoutURL = &objHeaderLink.GetLogoutURL();
   
   &startURL = &objHeaderLink.GetStartURL();
   
   &objHeaderLink.SetAddFav();
   &FavoritesHTML = &objHeaderLink.GetFavoritesHTML();
   &AddToFavoritesHTML = &objHeaderLink.GetAddToFavoritesHTML();
   &AddToFavFormHTML = &objHeaderLink.GetAddToFavFormHTML();
   
   &HelpHTML = &objHeaderLink.GetHelpHTML();
   
   &objHeaderLink.SetWL();
   &WLHTML = &objHeaderLink.GetWLHTML();
   
   REM Display the Multi-Channel Framework link if the user has access;
   &objHeaderLink.SetCTIMCFHTML();
   &CTIHTML = &objHeaderLink.GetCTIHTML();
   &MCFHTML = &objHeaderLink.GetMCFHTML();
   
   REM Display the Performance Monitor User Trace Console if the user has access;
   &objHeaderLink.SetPPMHTML();
   &PPMHTML = &objHeaderLink.GetPPMHTML();
   
   &domainScript = SetDocDomainForPortal();
   
   REM Save warning cross domain script;
   &SaveWarnCrossDomainScript = &objHeaderLink.GetSaveWarnCrossDomainScript();
   
   &styleSheet = &objHeaderLink.GetStyleSheet();
   
   REM Search in header;
   Local string &SearchHTML = &objHeaderLink.GetHdrSearchHTML();
   Local string &ColSpanHTML = &objHeaderLink.GetHdrColSpanHTML();
   
   REM Incident Id 1481536006;
   Local string &Charset = %Request.CharSet;
   
   REM PP's Custom Links;
   Local string &PPs_Process_Monitor_PIA, &PPs_Gateway_PIA;
   Local string &PPs_Async_PIA, &PPs_Sync_PIA, &PPs_ePro_PIA;
   Local string &PPs_1_PIA;
   REM Process Monitor link;
   &PPs_1_PIA = &homeURL;
   &PPs_Process_Monitor_PIA = Substitute(&PPs_1_PIA, "h/?tab=DEFAULT", "c/PROCESSMONITOR.PROCESSMONITOR.GBL");
   &PPs_Gateway_PIA = Substitute(&PPs_1_PIA, "h/?tab=DEFAULT", "c/IB_PROFILE.IB_GATEWAY.GBL?");
   &PPs_Async_PIA = Substitute(&PPs_1_PIA, "h/?tab=DEFAULT", "c/IB_PROFILE.IB_MONITOR.GBL?");
   &PPs_Sync_PIA = Substitute(&PPs_1_PIA, "h/?tab=DEFAULT", "c/IB_PROFILE.IB_MONITOR_SYNCH.GBL?");
   &PPs_ePro_PIA = Substitute(&PPs_1_PIA, "h/?tab=DEFAULT", "c/PV_MAIN_MENU.PV_REQ_ENTRY.GBL?");
   
   If &navTheme.isNS4x() Then
      &UniHeaderHTMLPIA = GetHTMLText(HTML.PORTAL_UNI_HEADER_NS4X, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), "", "", &FavoritesHTML, &AddToFavoritesHTML, &HelpHTML, "", &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &styleSheet, &homeURL, &startURL, &AddToFavFormHTML, &LogoutURL, MsgGetText(95, 400, "Return Home"), /*20*/MsgGetText(95, 401, "Home"), MsgGetText(95, 402, "Return to Menu"), MsgGetText(95, 403, "Menu"), MsgGetText(95, 408, "Sign out"), &Greeting, &SearchHTML, &ColSpanHTML, &PersonalizeHTML, "", "", &HelpJSHTML, &homepageJS, "", &TabHTML, &WLHTML, &domainScript, &Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT), "", &SaveWarnCrossDomainScript, &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_CENTER), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_CENTER), /*40*/&Response.GetImageURL(Image.PT_HOME_TAB_LINE), %Request.ExpireMeta, &CTIHTML, &MCFHTML, &PPMHTML, &Charset);
   Else
      &UniHeaderHTMLPIA = GetHTMLText(HTML.PORTAL_UNI_HEADER_NNS, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), "", "", &FavoritesHTML, &AddToFavoritesHTML, &HelpHTML, "", &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &styleSheet, &homeURL, &startURL, &AddToFavFormHTML, &LogoutURL, MsgGetText(95, 400, "Return Home"), /*20*/MsgGetText(95, 401, "Home"), MsgGetText(95, 402, "Return to Menu"), MsgGetText(95, 403, "Menu"), MsgGetText(95, 408, "Sign out"), &Greeting, &SearchHTML, &ColSpanHTML, &PersonalizeHTML, "", "", &HelpJSHTML, &homepageJS, MsgGetText(95, 138, "Tool Bar Header"), &TabHTML, &WLHTML, &domainScript, &Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT), "", &SaveWarnCrossDomainScript, &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_CENTER), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_CENTER), /*40*/&Response.GetImageURL(Image.PT_HOME_TAB_LINE), %Request.ExpireMeta, &CTIHTML, &MCFHTML, &PPMHTML, &Charset, &PPs_Process_Monitor_PIA, &PPs_Gateway_PIA, &PPs_Async_PIA, &PPs_Sync_PIA, &PPs_ePro_PIA);
      rem &UniHeaderHTML = GetHTMLText(HTML.PORTAL_UNI_HEADER_NNS, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), "", "", &FavoritesHTML, &AddToFavoritesHTML, &HelpHTML, "", &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &styleSheet, &homeURL, &startURL, &AddToFavFormHTML, &LogoutURL, MsgGetText(95, 400, "Return Home"), /*20*/MsgGetText(95, 401, "Home"), MsgGetText(95, 402, "Return to Menu"), MsgGetText(95, 403, "Menu"), MsgGetText(95, 408, "Sign out"), &Greeting, &SearchHTML, &ColSpanHTML, &PersonalizeHTML, "", "", &HelpJSHTML, &homepageJS, "", &TabHTML, &WLHTML, &domainScript, &Response.GetJavaScriptURL(HTML.PT_SAVEWARNINGSCRIPT), "", &SaveWarnCrossDomainScript, &Response.GetImageURL(Image.PT_HOME_TAB_ACTIVE_CENTER), &Response.GetImageURL(Image.PT_HOME_TAB_INACTIVE_CENTER), /*40*/&Response.GetImageURL(Image.PT_HOME_TAB_LINE), %Request.ExpireMeta, &CTIHTML, &MCFHTML, &PPMHTML, &Charset, &PPs_Process_Monitor);
   End-If;
   
   &Portal.Close();
   
   Return &UniHeaderHTMLPIA;
   
end-method;

method GetExpPasswordHdrHTML
   /+ &ContentURL as String +/
   /+ Returns String +/
   
   Local Response &Response;
   Local object &objHeaderLink;
   Local ApiObject &Portal;
   Local string &PortalName, &tabindex, &UniHeaderExpPasswordHTML;
   
   &Response = %Response;
   &PortalName = %Portal;
   &Portal = PortalOpen();
   
   REM Get the tabindex value from HDRICN personalization
   Local string &tabindex = "";
   &tabindex = DefineTabIndex();
   
   &objHeaderLink = create PT_BRANDING:HeaderLinkPIA(&Portal, &tabindex, False, "", &ContentURL);
   
   REM Sign out link;
   &LogoutURL = &objHeaderLink.GetLogoutURL();
   
   &UniHeaderExpPasswordHTML = GetHTMLText(HTML.PORTAL_EXP_PASSWORD_HDR, &Response.GetImageURL(Image.NEW_PS_LOGO), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBRCRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_CRV), &Response.GetImageURL(Image.NEW_PORTAL_HDR_BG), &Response.GetImageURL(Image.NEW_PORTAL_HDR_SHD), &Response.GetImageURL(Image.NEW_PORTAL_HDR_TBR), &LogoutURL, MsgGetText(95, 408, "Sign out"));
   
   Return &UniHeaderExpPasswordHTML;
end-method;

method GetNavstyleSheetURL
   /+ Returns String +/
   &styleSheetURL = PTGetStyleSheetURL();
   Return &styleSheetURL;
end-method;

method GetNavstyleSheetURLAlt
   /+ Returns String +/
   &styleSheetURL = %Response.GetStyleSheetURL(StyleSheet.PSSTYLEDEF_ALT);
   Return &styleSheetURL;
end-method;

method GetNavstyleBkGndColor
   /+ Returns String +/
   &styleBkGndColor = "PTNAVBACKGROUND";
   Return &styleBkGndColor;
end-method;


method GetNavstyleBkGndColorPage
   /+ Returns String +/
   &styleBkGndColor = "PTNAVBACKGROUND";
   Return &styleBkGndColor;
end-method;

method GetNavstyleSelFolderBK
   /+ Returns String +/
   &styleSelFolderBK = "PTNAVSELFOLDERBK";
   Return &styleSelFolderBK;
end-method;

method GetNavstyleSelParentLink
   /+ Returns String +/
   &styleSelParentLink = "PTNAVSELPARENTLINK";
   Return &styleSelParentLink;
end-method;

method GetNavstyleSelParentBkGnd
   /+ Returns String +/
   &styleSelParentBkGnd = "PTNAVSELPARENTBK";
   Return &styleSelParentBkGnd;
end-method;

method GetNavstyleSelParentEdge
   /+ Returns String +/
   
   &styleSelParentEdge = "PTNAVSELPARENTEDGE";
   Return &styleSelParentEdge;
end-method;

method GetNavstyleNavParentLink
   /+ Returns String +/
   &styleNavParentLink = "PSNAVPARENTLINK";
   Return &styleNavParentLink;
end-method;

method GetNavstyleSelChildBkGnd
   /+ Returns String +/
   &styleSelChildBkGnd = "PTNAVSELCHILDBK";
   Return &styleSelChildBkGnd;
end-method;

method GetNavstyleSelChildLink
   /+ Returns String +/
   &styleSelChildLink = "PTNAVSELCHILDLINK";
   Return &styleSelChildLink;
end-method;

method GetNavstyleUnSelChildLink
   /+ Returns String +/
   &styleUnSelChildLink = "PTNAVLINK";
   Return &styleUnSelChildLink;
end-method;

method GetNavstyleSelChildEdgeLT
   /+ Returns String +/
   &styleSelChildEdgeLT = "PTNAVSELCHILDEDGELT";
   Return &styleSelChildEdgeLT;
end-method;

method GetNavstyleSelChildEdgeDK
   /+ Returns String +/
   &styleSelChildEdgeDK = "PTNAVSELCHILDEDGEDK";
   Return &styleSelChildEdgeDK;
end-method;

method GetNavimgUrlClearDot
   /+ Returns String +/
   &imgUrlClearDot = %Response.GetImageURL(Image.PT_NAV_CLEAR_DOT);
   Return &imgUrlClearDot;
end-method;

method GetNavimgUrlNavBullet
   /+ Returns String +/
   &imgUrlNavBullet = %Response.GetImageURL(Image.PT_NAV_BULLET);
   Return &imgUrlNavBullet;
end-method;

method GetNavimgUrlNavReverseBullet
   /+ Returns String +/
   &imgUrlNavReverseBullet = %Response.GetImageURL(Image.PT_NAV_REVERSE_BULLET);
   Return &imgUrlNavReverseBullet;
end-method;

method GetNavimgUrlOpenFolder
   /+ Returns String +/
   &imgUrlOpenFolder = %Response.GetImageURL(Image.PT_NAV_OPEN_FLDR);
   Return &imgUrlOpenFolder;
end-method;

method GetNavimgUrlClosedFolder
   /+ Returns String +/
   &imgUrlClosedFolder = %Response.GetImageURL(Image.PT_NAV_CLOSED_FLDR);
   Return &imgUrlClosedFolder;
end-method;


method GetNavimgUrlMenuOpen
   /+ Returns String +/
   &imgUrlMenuOpen = %Response.GetImageURL(Image.PT_SHOW_MENU);
   Return &imgUrlMenuOpen;
end-method;

method GetNavimgUrlMenuClose
   /+ Returns String +/
   &imgUrlMenuClose = %Response.GetImageURL(Image.PT_PORTAL_IC_COLLAPSE);
   Return &imgUrlMenuClose;
end-method;

method GetNavimgUrlSearchGo
   /+ Returns String +/
   &imgUrlSearchGo = %Response.GetImageURL(Image.PT_NAV_GO);
   Return &imgUrlSearchGo;
end-method;

method GetHdrMenuTopPos
   /+ Returns String +/
   &strHdrMenuTopPos = "47";
   Return &strHdrMenuTopPos;
end-method;

<html dir='%Direction'>
<head>
<title>%bind(:33)</title>
<meta http-equiv='content-type' content='text/html; charset=%bind(:47)'>
%bind(:36)
<style type="text/css">
.edit_box {  font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; border: 1px cccccc solid; background-color: #e9edf4}
.searchBar {  background-repeat: repeat-x; background-color: #FFFFFF}
.buttonBar {  background-image:  url(%bind(:14)); background-repeat: repeat-x; color: #FFFFFF; background-color: #5F6EAF}
.globeBar {  background-image:  url(%bind(:11))}
.greeting { color: #FFFFFF; font-family: Arial, Helvetica, sans-serif; font-size: 12pt; font-weight: bold}
.pthomepagetabactive { background-color: #FFFFFF; font-family: Arial, Helvetica, sans-serif; font-weight: bold; color: #000000; font-size: 9pt; background-image: url(%bind(:40)); border-style: none}
.pthomepagetabinactive { font-size: 9pt; color: #000000; font-family: Arial, Helvetica, sans-serif; border: #FFFFFF none; background-image: url(%bind(:41))}
.pthomepagetabline { background-image: url(%bind(:42))}
</STYLE>
<script language='javascript' src='%Bind(:37)'></script>
<script language='javascript' src='%Bind(:39)'></script>
%bind(:32)
%bind(:43)
<LINK REL="stylesheet" HREF="%Bind(:15)" TYPE="text/css">
</HEAD>
<BODY class="PSPAGE" topmargin="0" bottommargin="0" %AlignStartmargin="0" %AlignEndmargin="0" marginheight="0" marginwidth="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td rowspan="3" width="145"><img src="%BIND(:1)" width="145" height="41" alt="Oracle logo" hspace=20></td>
    <td rowspan="2" width="46" valign="top" halign="%AlignStart"><img src="%bind(:9)" width="46" height="27" alt=""></td>
    <td valign="top" %BIND(:27) height="23" width="100%" class="globeBar"><font class="greeting">&nbsp;%bind(:25)</font></td>
    %BIND(:26)
  </tr>
  <tr>
    <td valign="top" width="50%" ><img src="%bind(:13)" width="100%" height="4" alt=""></td>
    <td class="buttonBar" halign="%AlignEnd" valign="bottom" width="24" nowrap=true><img src="%bind(:2)" width="24" height="18" alt=""></td>
    <td halign="%AlignEnd" valign="bottom" width="40%"> 
      <table width="100%" border="0" cellspacing="0" cellpadding="0" height="18">
        <tr>
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:16) class="headerLinkActive">&nbsp;%bind(:21)</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- PP's Customization to Add Custom Links for accessibility / STARTS -->
		  <!-- PROCESS MONITOR LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:48) class="headerLinkActive">&nbsp;Process Monitor</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
		  <!-- Integration Gateway LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:49) class="headerLinkActive">&nbsp;Gateway</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- Async Transactions LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:50) class="headerLinkActive">&nbsp;Async</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- Sync Transactions LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:51) class="headerLinkActive">&nbsp;Sync</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- Create Requisitions LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:52) class="headerLinkActive">&nbsp;ePro</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>          
          <!-- PeopleSoft Cust. Conn. LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false href="https://www.peoplesoft.com/corp/en/login.jsp/" target="_blank" class="headerLinkActive">&nbsp;C!!C</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- PP's Customization to Add Custom Links for accessibility / ENDS -->
         %BIND(:35)
          %BIND(:44)
          %BIND(:45)
		  %BIND(:46)
          %BIND(:5)
          %BIND(:6)
          %BIND(:7)
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a %bind(:19) class="headerLinkActive">&nbsp;%bind(:24)</a>&nbsp;&nbsp;</nobr></td>
       </tr>
      </table>
    </td>
  </tr>
</table>
%BIND(:28)
%BIND(:34)
%bind(:29)
%BIND(:18)
</body>
</html>

<html dir='%Direction'>
<head>
<title>%bind(:33)</title>
<meta http-equiv='content-type' content='text/html; charset=%bind(:47)'>
%bind(:36)
<style type="text/css">
.edit_box {  font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; border: 1px cccccc solid; background-color: #e9edf4}
.searchBar {  background-repeat: repeat-x; background-color: #FFFFFF}
.buttonBar {  background-image:  url(%bind(:14)); background-repeat: repeat-x; color: #FFFFFF; background-color: #5F6EAF}
.globeBar {  background-image:  url(%bind(:11))}
.greeting { color: #FFFFFF; font-family: Arial, Helvetica, sans-serif; font-size: 12pt; font-weight: bold}
.pthomepagetabactive { background-color: #FFFFFF; font-family: Arial, Helvetica, sans-serif; font-weight: bold; color: #000000; font-size: 9pt; background-image: url(%bind(:40)); border-style: none}
.pthomepagetabinactive { font-size: 9pt; color: #000000; font-family: Arial, Helvetica, sans-serif; border: #FFFFFF none; background-image: url(%bind(:41))}
.pthomepagetabline { background-image: url(%bind(:42))}
</STYLE>
<script language='javascript' src='%Bind(:37)'></script>
<script language='javascript' src='%Bind(:39)'></script>
%bind(:32)
%bind(:43)
<LINK REL="stylesheet" HREF="%Bind(:15)" TYPE="text/css">
</HEAD>
<BODY class="PSPAGE" topmargin="0" bottommargin="0" %AlignStartmargin="0" %AlignEndmargin="0" marginheight="0" marginwidth="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td rowspan="3" width="145"><img src="%BIND(:1)" width="145" height="41" alt="Oracle logo" hspace=20></td>
    <td rowspan="2" width="46" valign="top" halign="%AlignStart"><img src="%bind(:9)" width="46" height="27" alt=""></td>
    <td valign="top" %BIND(:27) height="23" width="100%" class="globeBar"><font class="greeting">&nbsp;%bind(:25)</font></td>
    %BIND(:26)
  </tr>
  <tr>
    <td valign="top" width="50%" ><img src="%bind(:13)" width="100%" height="4" alt=""></td>
    <td class="buttonBar" halign="%AlignEnd" valign="bottom" width="24" nowrap=true><img src="%bind(:2)" width="24" height="18" alt=""></td>
    <td halign="%AlignEnd" valign="bottom" width="40%"> 
      <table width="100%" border="0" cellspacing="0" cellpadding="0" height="18">
        <tr>
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:16) class="headerLinkActive">&nbsp;%bind(:21)</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- PP's Customization to Add Custom Links for accessibility / STARTS -->
		  <!-- PROCESS MONITOR LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:48) class="headerLinkActive">&nbsp;Process Monitor</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
		  <!-- Integration Gateway LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:49) class="headerLinkActive">&nbsp;Gateway</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- Async Transactions LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:50) class="headerLinkActive">&nbsp;Async</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- Sync Transactions LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:51) class="headerLinkActive">&nbsp;Sync</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- Create Requisitions LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false %bind(:52) class="headerLinkActive">&nbsp;ePro</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>          
          <!-- PeopleSoft Cust. Conn. LINK -->
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a proxied=false href="https://www.peoplesoft.com/corp/en/login.jsp/" target="_blank" class="headerLinkActive">&nbsp;C!!C</span></a></nobr></td>
          <td class="buttonBar" width="7%" nowrap=true>&nbsp;</td>
          <td class="buttonBar"><nobr>|</nobr></td> 
           <td class="buttonBar" width="3%" nowrap=true>&nbsp;</td>
          <!-- PP's Customization to Add Custom Links for accessibility / ENDS -->
         %BIND(:35)
          %BIND(:44)
          %BIND(:45)
		  %BIND(:46)
          %BIND(:5)
          %BIND(:6)
          %BIND(:7)
          <td class="buttonBar" nowrap=true><nobr>&nbsp;<a %bind(:19) class="headerLinkActive">&nbsp;%bind(:24)</a>&nbsp;&nbsp;</nobr></td>
       </tr>
      </table>
    </td>
  </tr>
</table>
%BIND(:28)
%BIND(:34)
%bind(:29)
%BIND(:18)
</body>
</html>

import PT_PRCS:API:*;

Local PT_PRCS:API:PrcsApi &api = create PT_PRCS:API:PrcsApi();
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("my.custom.logger");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.PatternLayout", "%-4r %d [%t] %-5p %c [%x] - %m%n");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.ConsoleAppender", &layout);

&appender.setLayout(&layout);
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
&logger.debug("Hello from a PeopleCode configured logger.");
&logger.debug("Logger created");

&strl_WindowMsg = &strl_WindowMsg | "<br />Step 1/5: PP's Custom AE starting. (" | DateTimeToLocalizedString(%Datetime, "HH:mm:ss") | ")";
&logger.debug(&strl_WindowMsg);
&nret = &api.notifyToWindow(Z_AE_REN_AET.PROCESS_INSTANCE, &strl_WindowMsg);
rem &logFile = GetFile(GetEnv("PSPRCSLOGDIR") | "\logFile.txt", "W", %FilePath_Absolute);
MessageBox(0, "", 0, 0, "Return Code " | &nret);

&logger.info("Process completed successfully");

import PS_PT:Integration:ISend;

class SendHandler implements PS_PT:Integration:ISend
   method SendHandler();
   method OnRequestSend(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method SendHandler
end-method;

method OnRequestSend
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:ISend.OnRequestSend +/
   /* Variable Declaration */
   Local any &tempNode;
   Local any &rootNode;
   Local any &xmlDoc;
   Local any &msg;
   Local boolean &yo;
   Local string &filename, &filepath;
   Local array of XmlNode &modNode;
   Local number &f;
   
   &msg = &_MSG;
   &xmlDoc = &msg.GetXmlDoc();
   /* Add a node to the doc to prove that we can edit it in this event. */
   &rootNode = &xmlDoc.DocumentElement;
   &tempNode = &rootNode.AddElement("OnSend");
   &tempNode.NodeValue = "If you see this, then the Sync OnSend PCode has altered the message";
   &modNode = &xmlDoc.GetElementsByTagName("NewNode");
   rem MessageBox(0, "", 0, 0, "Len " | &modNode.Len);
   For &f = 1 To &modNode.Len
      rem MessageBox(0, "", 0, 0, "Node Value " | &modNode [1]);
   End-For;
   /* and write the data back into the message */
   &yo = &msg.IBInfo.LoadConnectorPropFromNode("TARGETNODE");
   /* Needs to be mentioned */
   &msg.IBInfo.ConnectorOverride = True;
   /* User Defined FileName */
   rem &UPD_DATE = DatePart(%Datetime) | " " | Substitute(Substring(String(TimePart(%Datetime)), 1, 8), ".", ":");
   
   &filename = "PPS_NEW_" | %Datetime | ".xml";
   /* User Defined FilePath */
   &filepath = "C:\temp\NEW";
   /* Override Selected/All properties */
   &yo = &msg.IBInfo.IBConnectorInfo.AddConnectorProperties("FileName", &filename, %Property);
   &yo = &msg.IBInfo.IBConnectorInfo.AddConnectorProperties("FilePath", &filepath, %Property);
   &msg.SetXmlDoc(&xmlDoc);
   Return (&msg);
end-method;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*~~~~~OnRouteSend is called before OnSend~~~~~*/
/* Implement the OnRouteSend method for outbound */
/* synchronous and asynchronous service operations */
/* to specify to what node PeopleSoft Integration */
/* Broker routes a message */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
import PS_PT:Integration:IRouter;

class TestRoute implements PS_PT:Integration:IRouter
   /* array of nodes to route the operation to */
   property array of any destinationNodes;
   method TestRoute();
   method OnRouteSend(&_MSG As Message) Returns integer;
   method OnError(&_MSG As Message);
end-class;

/* constructor */
method TestRoute
end-method;

/** Determine the nodes to send to
  * @param   MSG          Message object containing the operation instance to be routed
  * @return  integer      %IntBroker_ROUTE_NONE = Do not send this operation to any of the possible nodes
                          %IntBroker_ROUTE_SOME = Send this operation to a selected list of nodes (an array of strings in the property "destinationNodes")
                          %IntBroker_ROUTE_ALL = Send this operation to all nodes that have a valid routing
 **/
method OnRouteSend
   /+ &_MSG as Message +/
   /+ Returns Integer +/
   /+ Extends/implements PS_PT:Integration:IRouter.OnRouteSend +/
   Local any &tempNode;
   Local any &rootNode;
   Local any &xmlDoc;
   Local array of XmlNode &modNode;
   Local Message &message = &_MSG;
   Local array of any &nodeList = CreateArray();
   Local number &ipp;
   Local string &ORB_Cd_status;
   
   &xmlDoc = &message.GetXmlDoc();
   /* Add a node to the doc to prove that we can edit it in this event. */
   &rootNode = &xmlDoc.DocumentElement;
   &tempNode = &rootNode.AddElement("OnRouteSend");
   &tempNode.NodeValue = "If you see this, then the Sync OnRouteSend PCode has altered the message";
   &modNode = &xmlDoc.GetElementsByTagName("NewNode");
   &message.SetXmlDoc(&xmlDoc);
   /*Retrieve Node Value */
   If &modNode.Len <> 0 Then
      For &ipp = 1 To &modNode.Len
         &ORB_Cd_status = &modNode [&ipp].NodeValue;
      End-For;
   End-If;
   /* Populate Node Array */
   rem &nodeList [1] = "TARGETNODE";
   rem &nodeList [2] = "NEWNODE";
   
   Evaluate &ORB_Cd_status
   When "Prashant Srivastava."
      &nodeList [1] = "TARGETNODE";
      %This.destinationNodes = &nodeList;
      Break;
   When-Other
      &nodeList [1] = "NEWNODE";
      %This.destinationNodes = &nodeList;
      Break;
   End-Evaluate;
   Return (%IntBroker_ROUTE_SOME);
end-method;

method OnError
   /+ &_MSG as Message +/
   /+ Extends/implements PS_PT:Integration:IRouter.OnError +/
   
   rem Return &MSG.IBException.DefaultText;
end-method;

REMARK OnRequest PeopleCode for PS Web Service INBOUND;

import PS_PT:Integration:IRequestHandler;

class INBOUND implements PS_PT:Integration:IRequestHandler
   method INBOUND();
   method OnRequest(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method INBOUND
end-method;

method OnRequest
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   /* Variable Declaration */
   
   Local any &msg;
   Local Rowset &rs, &msgRowset;
   Local number &m;
   Local string &new_descr, &descr;
   Local XmlDoc &xml_doc;
   &msg = &_MSG;
   &xml_doc = &msg.getXmldoc();
   &msgRowset = &msg.GetRowset();
   For &m = 1 To &msgRowset.RowCount;
      &descr = &msgRowset(&m).GetRecord(Record.INBOUND).DESCR2000.Value;
   End-For;
   &msg = CreateMessage(Message.OUTBOUND);
   &new_descr = Upper(&descr);
   
   Local File &NewFile = GetFile("C:\Temp\OnRequest_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &NewFile.WriteString(&xml_doc.GenFormattedXmlString());
   &NewFile.Close();
   Return &msg;
end-method;

class SMS
   method SMS();
   method AssignConnInfo();
   method IBInfoMethods();
   method IBInfoIBConnectorMethods();
   method WriteRequest();
   method WriteResponse();
   method CreateSOAPDocument();
   
   property Message req;
   property Message res;
   property boolean b;
   property string url;
   property string UserName;
   property string Str_Process;
   property string Str_TransID;
   property string Str_SourceNode;
   property string Str_ReqNodeName;
   property string Str_ReqNodeDescr;
   property string Str_ConnectorClass;
   property string Str_ConnectorName;
   property string Str_PathInfo;
   
end-class;

/* Constructor */
method SMS
   %This.CreateSOAPDocument();
end-method;

method IBInfoMethods
   
   &UserName = &req.IBInfo.OrigUser;
   &Str_Process = &req.IBInfo.OrigProcess;
   &Str_TransID = &req.IBInfo.TransactionID;
   &Str_SourceNode = &req.IBInfo.SourceNode;
   &Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
   rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
   
end-method;

method IBInfoIBConnectorMethods
   
   &Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
   &Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
   &Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
   
end-method;

method WriteRequest
   
   /*
   Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile1.WriteString(&xml.GenFormattedXmlString());
   &ppfile1.Close();
   */
   
end-method;

method WriteResponse
   
   /*
   Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile.WriteString(&xml.GenFormattedXmlString());
   &ppfile.Close();
   */
   
end-method;

method AssignConnInfo
   
   &req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
   /* Specifies OutBound Request */
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic cHJhc2hhbnQ6cHJha2FzaA==", %Header);
   /* End Point */
   rem &url = "http://webservices.daelab.net/datesservice/datesservice.wso";
   &url = GetURL(URL.XMETHODS_MONTH);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
   
end-method;

method CreateSOAPDocument
   
   REMARK ENDPOINT = "http://ws.strikeiron.com/StrikeIron/globalsmspro2_5/SMSTextMessaging";
   
   Local SOAPDoc &soap;
   Local XmlDoc &xml;
   Local integer &i;
   Local XmlNode &node;
   Local number &num, &FromNum, &Tonum;
   Local array of XmlNode &nodes;
   Local string &msgtext, &email;
   Local string &soapstr, &mynumstr, &tonumstr;
   
   &req = CreateMessage(Operation.SENDMESSAGE, %IntBroker_Request);
   &soap = CreateSOAPDoc();
   
   &email = String("prashant.prakash1@gmail.com");
   &Tonum = STRIKEIRON.DESCR120.Value;
   &msgtext = String(STRIKEIRON.DESCR150_MIXED.Value);
   &FromNum = 919818551401;
   &mynumstr = NumberToString("%+", &FromNum);
   &tonumstr = NumberToString("%+", &Tonum);
   
   rem &soapstr = GetHTMLText(HTML.STRIKEIRON_SMS_REQUEST, &email, &tonumstr, &mynumstr, &msgtext);
   /* SOAP 1.1 */
   &soapstr = GetHTMLText(HTML.STRIKEIRON_SMS_REQUEST);
   try
      Local boolean &bool = &soap.ParseXmlString(&soapstr);
      &xml = &soap.XmlDoc;
      %This.WriteRequest();
      /* Assign the Request to a Page Field */
      STRIKEIRON.AUC_COMMENTS_2000.Value = &xml.GenFormattedXmlString();
      /* Assign Connector and relevant Properties */
      rem %This.AssignConnInfo();
      /* Assign the XML Object to a Message Object */
      &req.SetXmlDoc(&xml);
      /*IBInfo Methods */
      %This.IBInfoMethods();
      /* IBConnectorInfo Methods */
      %This.IBInfoIBConnectorMethods();
      /* SyncRequest */
      &res = %IntBroker.SyncRequest(&req);
      /* retrieve the response */
      If &res.ResponseStatus = 0 Then
         &xml = &res.GetXmlDoc();
         STRIKEIRON.AUC_EMAIL_TEXT.Value = &xml.GenFormattedXmlString();
         %This.WriteResponse();
      End-If;
   catch Exception &esoap
      MessageBox(0, "", 0, 0, "Error " | &esoap.ToString());
   end-try;
end-method;

import PT_IB_UDDI:UDDIException;

class XMETHODS
   method XMETHODS();
   method AssignConnInfo();
   method IBInfoMethods();
   method IBInfoIBConnectorMethods();
   method WriteRequest(&ReqXML As XmlDoc);
   method WriteResponse(&ResXML As XmlDoc);
   /**
	* Helper function to throw appropriate exeception whenever ConnectorRequest returns null response.
	*/
   method HandleNullSoapResponse(&soapMs As XmlDoc, &ul As string);
   method HandleSoapFault(&soapReq As XmlDoc, &soapFaultNode As XmlNode);
   method CreateSOAPDocument();
   
   property Message req;
   property Message res;
   property boolean b;
   property string url;
   property string UserName;
   property string Str_Process;
   property string Str_TransID;
   property string Str_SourceNode;
   property string Str_ReqNodeName;
   property string Str_ReqNodeDescr;
   property string Str_ConnectorClass;
   property string Str_ConnectorName;
   property string Str_PathInfo;
private
   rem Constant &NULL_SOAP_RESPONSE = 15301;
   Constant &NULL_SOAP_RESPONSE = 16022;
   Constant &BAD_RESPONSE_STATUS = 15303;
   Constant &NON_XML_RESPONSE = 15304;
   
end-class;

/* Constructor */
method XMETHODS
   %This.CreateSOAPDocument();
end-method;

method IBInfoMethods
   
   &UserName = &req.IBInfo.OrigUser;
   &Str_Process = &req.IBInfo.OrigProcess;
   &Str_TransID = &req.IBInfo.TransactionID;
   &Str_SourceNode = &req.IBInfo.SourceNode;
   &Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
   rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
   
end-method;

method IBInfoIBConnectorMethods
   
   &Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
   &Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
   &Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
   
end-method;

method WriteRequest
   /+ &ReqXML as XmlDoc +/
   
   Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile1.WriteString(&ReqXML.GenFormattedXmlString());
   &ppfile1.Close();
   
end-method;

method WriteResponse
   /+ &ResXML as XmlDoc +/
   
   /*
   Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
   &ppfile.WriteString(&xml.GenFormattedXmlString());
   &ppfile.Close();
   */
   
end-method;

method HandleNullSoapResponse
   /+ &soapMs as XmlDoc, +/
   /+ &ul as String +/
   Local PT_IB_UDDI:UDDIException &ex = create PT_IB_UDDI:UDDIException(&NULL_SOAP_RESPONSE);
   &ex.DefaultText = "There is no reply from the Web server hosting the Web Service at '%1'.";
   &ex.SetSubstitution(1, &ul);
   &ex.SoapRequest = &soapMs.GenFormattedXmlString();
   throw &ex;
end-method;

method HandleSoapFault
   /+ &soapReq as XmlDoc, +/
   /+ &soapFaultNode as XmlNode +/
   
   Local PT_IB_UDDI:UDDIException &ex = create PT_IB_UDDI:UDDIException(0);
   &ex.SoapRequest = &soapReq.GenFormattedXmlString();
   &ex.InitFromSoapFault(&soapFaultNode);
   throw &ex;
end-method;

method AssignConnInfo
   
   &req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
   /* Specifies OutBound Request */
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic cHJhc2hhbnQ6cHJha2FzaA==", %Header);
   /* End Point */
   &url = "http://webservices.daelab.net/datesservice/datesservice.wso";
   rem &url = GetURL(URL.XMETHODS_MONTH);
   &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
   
end-method;

method CreateSOAPDocument
   
   REMARK ENDPOINT = "http://webservices.daelab.net/datesservice/datesservice.wso";
   
   rem Local Message &req, &res;
   Local SOAPDoc &soap;
   Local XmlDoc &xml;
   rem Local boolean &b;
   Local integer &i;
   Local XmlNode &node;
   Local number &num;
   rem Local string &UserName;
   rem Local string &Str_Process, &Str_SourceNode, &Str_ReqNodeName;
   rem Local string &Str_ConnectorClass, &Str_ConnectorName;
   rem Local string &Str_PathInfo;
   Local array of XmlNode &nodes;
   
   &req = CreateMessage(Operation.XMETHODS, %IntBroker_Request);
   &soap = CreateSOAPDoc();
   /* set the Month Number */
   &num = Z_EXAMPLE_WRK.ACCESS_ID.Value;
   If &num <= 0 Or
         None(&num) Or
         &num >= 13 Then
      &num = 1;
   End-If;
   Local string &soapstr = GetHTMLText(HTML.XMETHODS, &num); /* SOAP 1.1 */
   rem Local string &soapstr = GetHTMLText(HTML.XMETHODS_12, &num); /* SOAP 1.2 */
   Local boolean &bool = &soap.ParseXmlString(&soapstr);
   &xml = &soap.XmlDoc;
   /**
    * Test Whether we can send a PSNONXML format for SOAP Requests - AND YES WE CAN SEND THAT 
    **/
   Local string &encoded = Substitute(&xml.GenXmlString(), "<?xml version=""1.0""?>", "<?xml version=""1.0"" encoding=""UTF-8""?>");
   /* Encode the XML as a PSNONXML String and create the XML again */
   Local string &nonXmlData = "<?xml version=""1.0""?><data psnonxml=""yes""><![CDATA[" | &encoded | "]]></data>";
   rem %This.WriteRequest(&xml);
   /* Assign the Request to a Page Field */
   Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
   /* Assign Connector and relevant Properties */
   %This.AssignConnInfo();
   /* Assign the XML Object to a Message Object */
   &xml = CreateXmlDoc(&nonXmlData);
   rem Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
   rem %This.WriteRequest(&xml);
   &req.SetXmlDoc(&xml);
   /*IBInfo Methods */
   %This.IBInfoMethods();
   /* IBConnectorInfo Methods */
   %This.IBInfoIBConnectorMethods();
   rem &res = CreateMessage(Operation.XMETHODS_RESP, %IntBroker_Response);
   &res = %IntBroker.ConnectorRequest(&req);
   /* Additional Error Handling */
   If &res = Null Then /* Throw exception */
      %This.HandleNullSoapResponse(&xml, &url);
   End-If;
   /* Check for soap faults */
   &xml = &res.GetXmlDoc();
   
   /*--
    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	  <soap:Body>
		<soap:Fault>
   --*/
   If &xml <> Null Then
      Local array of XmlNode &faultNodes = &xml.DocumentElement.GetElementsByTagNameNS("http://schemas.xmlsoap.org/soap/envelope/", "Fault");
      
      If &faultNodes <> Null And
            &faultNodes.Len > 0 Then
         %This.HandleSoapFault(&xml, &faultNodes [1]);
      End-If;
   End-If;
   /* Check response Status */
   If &res.ResponseStatus <> 0 Then
      Local PT_IB_UDDI:UDDIException &ex1 = create PT_IB_UDDI:UDDIException(&BAD_RESPONSE_STATUS);
      &ex1.SetSubstitution(1, NumberToString("", &res.ResponseStatus));
      &ex1.SoapRequest = &xml.GenFormattedXmlString();
      throw &ex1;
   End-If;
   
   If &xml = Null Then
      /* Some error in returned object. Does not look like valid Xml */
      Local PT_IB_UDDI:UDDIException &ex2 = create PT_IB_UDDI:UDDIException(&NON_XML_RESPONSE);
      &ex2.SoapRequest = &xml.GenFormattedXmlString();
      throw &ex2;
   End-If;
   
   /* retrieve the response */
   &xml = &res.GetXmlDoc();
   Z_EXAMPLE_WRK.XMLLINKDTD.Value = &xml.GenFormattedXmlString();
   %This.WriteResponse(&xml);
   
end-method;

<* It was not possible to fully convert this code, correct manually to use this as a handler;
import PS_PT:Integration:IRequestHandler;

class RequestHandler implements PS_PT:Integration:IRequestHandler
   method RequestHandler();
   method OnRequest(&_MSG As Message) Returns Message;
end-class;

/* constructor */
method RequestHandler
end-method;

method OnRequest
   /+ &_MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   /* Variable Declaration */
   MessageBox(0, "", 0, 0, "Hiii!!!");
   rem Return &_MSG;
end-method;
*>
&Str = GetHTMLText(HTML.USERJS, "user_function1()");
GetLevel0()(1).Z_EXAMPLE_WRK.DC_AUTHORS.Value = &Str;

REMARK "http://prasprak:8888/PPsJavaWebService-PPsGetDates_12-context-root/PPsGetDatesWSSoap12HttpPort?WSDL";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local number &num;
Local string &url, &UserName;
Local array of XmlNode &nodes;

&req = CreateMessage(Operation.XMETHODS, %IntBroker_Request);
&soap = CreateSOAPDoc();

rem Local string &soapstr = GetHTMLText(HTML.GETDATESWS_REQ);
Local string &soapstr = GetHTMLText(HTML.GETDATESWS_REQ_12);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
/* Assign Connector and relevant Properties */
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
/* Specifies OutBound Request */
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
rem &b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
/* End Point */
&url = "http://prasprak:8888/PPsJavaWebService-PPsGetDates_12-context-root/PPsGetDatesWSSoap12HttpPort";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
/* Assign the XML Object to a Message Object */
&req.SetXmlDoc(&xml);
/*IBInfo Methods */
/* retrieve the User Name of the person that fired the Sv Op */
&UserName = &req.IBInfo.OrigUser;
&Str_Process = &req.IBInfo.OrigProcess;
&Str_TransID = &req.IBInfo.TransactionID;
&Str_SourceNode = &req.IBInfo.SourceNode;
&Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
/* IBConnectorInfo Methods */
&Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
&Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
&Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
rem MessageBox(0, "", 0, 0, "IBConnectorInfo " | &Str_ConnectorClass | " , " | &Str_ConnectorName | " , " | &Str_PathInfo);
rem MessageBox(0, "", 0, 0, "IBInfo " | &Str_TransID | " , " | &Str_ReqNodeName);

&res = %IntBroker.ConnectorRequest(&req);
/* retrieve the response */
&xml = &res.GetXmlDoc();
rem MessageBox(0, "", 0, 0, "String " | &xml.GenFormattedXmlString());
Z_EXAMPLE_WRK.XMLLINKDTD.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
Local Message &msg, &response;
Local XmlDoc &xmlDoc, &res_XML_Doc;
Local string &Str;
Local File &Out_File;

rem SetTracePC(2048);
rem SetTraceSQL(3);
&msg = CreateMessage(Operation.EXAMPLE_SERVICE_OPR);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
&rootNode = &xmlDoc.DocumentElement;
&descNode = &rootNode.AddElement("TestNode");
&descNode.NodeValue = "This message was written to a file.";
&TestNode = &rootNode.AddElement("NewNode");
&TestNode.NodeValue = "Prashant Prakash.";
/* put the XML in the request... */
&msg.SetXmlDoc(&xmlDoc);
/* ...and send */
&response = %IntBroker.SyncRequest(&msg);
&res_XML_Doc = &response.GetXmlDoc();
&Str = &res_XML_Doc.GenFormattedXmlString();
&Out_File = GetFile("C:\Temp\Out_" | %Datetime | "_Put.out", "w", %FilePath_Absolute);
&Out_File.WriteString(&Str);
&Out_File.Close();

<*
&msg = CreateMessage(Operation.EXAMPLE_SERVICE_OPR);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
/* put the XML in the message */
&msg.setxmldoc(&xmlDoc);


/* send the request */
&response = %IntBroker.SyncRequest(&msg);
/* display the results */
&xmlDoc = &response.getxmldoc();
MessageBox(0, "", 0, 0, &xmlDoc.genxmlstring());
*>
rem =============================
rem =============================
rem This code will open 
    your specified location 
    in a new window in Yahoo Maps
rem =============================
rem =============================;

Local string &ADDR1, &CITY, &COUNTRY, &STATE, &POSTAL, &Map_Selection;

&ADDR1 = GetLevel0()(1).Z_PP_MAP_TBL.ADDRESS1.Value;
&CITY = GetLevel0()(1).Z_PP_MAP_TBL.CITY.Value;
&POSTAL = GetLevel0()(1).Z_PP_MAP_TBL.POSTAL.Value;
&STATE = GetLevel0()(1).Z_PP_MAP_TBL.STATE.Value;
&COUNTRY = GetLevel0()(1).Z_PP_MAP_TBL.COUNTRY.Value;

SQLExec("select FO_MAP from PS_INSTALLATION_FO", &Map_Selection);
&Map_Selection = Substitute(&Map_Selection, "%Addr%", &ADDR1);
&Map_Selection = Substitute(&Map_Selection, "%City%", &CITY);
&Map_Selection = Substitute(&Map_Selection, "%Postal%", &POSTAL);
&Map_Selection = Substitute(&Map_Selection, "%State%", &STATE);
&Map_Selection = Substitute(&Map_Selection, "%Country%", &COUNTRY);

ViewContentURL(&Map_Selection);
Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local array of XmlNode &nodes;

rem &req = CreateMessage(Message.PRASHANT_MESSAGE);
&req = CreateMessage(Operation.PRASHANT_MESSAGE, %IntBroker_Request);

&soap = CreateSOAPDoc();
&Str = GetHTMLText(HTML.Z_PPMI_HTML_12, "1.0"); /* sending a SOAP 1.2 message */
&bool = &soap.ParseXmlString(&Str);
<*
&soap.AddEnvelope(0);
&soap.AddHeader();
&soap.AddBody();
&soap.AddMethod("notifyAgentStateChange", 1);
&soap.AddParm("agentID", &agents);
&soap.AddParm("systemID", &system);

&node = &soap.HeaderNode;
&node = &node.AddElement("omiHeader");
&node = &node.AddElement("version");
&node = &node.AddText("1.0");
*>
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\PRASHANT_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.AM_APPSTART_HTML.Value = &xml.GenFormattedXmlString();
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
SQLExec("SELECT URL FROM PSURLDEFN WHERE URL_ID = :1", "PPM_PPMI", &url);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);

&req.SetXmlDoc(&xml);

&res = %IntBroker.ConnectorRequest(&req);
&xml = &res.GetXmlDoc();
Z_EXAMPLE_WRK.APPSTART_HTML.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\PRASHANT_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
&nodes = &xml.DocumentElement.GetElementsByTagName("message");
MessageBox(0, "", 0, 0, "Node Value " | &nodes.Len);
/*
If (&nodes.Len <> 0) Then
   MessageBox(0, MsgGetText(209, 571, "Error"), - 1, - 1, &nodes [1].NodeValue);
End-If;
*/
import XMETHODS:*;

Local XMETHODS:XMETHODS &UM = create XMETHODS:XMETHODS();
/*
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("my.custom.logger");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.PatternLayout", "%-4r %d [%t] %-5p %c [%x] - %m%n");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.ConsoleAppender", &layout);

&appender.setLayout(&layout);
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
&logger.debug("Hello from a PeopleCode configured logger.");
*/
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("PP's.email.debugger");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.HTMLLayout");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.net.SMTPAppender");
&appender.setSMTPHost("d23ml181.in.ibm.com");
&appender.setFrom("PeopleSoft@peoplesoft.com");
&appender.setTo("prashant.srivastava@in.ibm.com");
&appender.setSubject("PeopleCode debug log");
&appender.setBufferSize(1);
&appender.setLayout(&layout);
&appender.activateOptions();
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
rem &logger.fatal("Hello from PeopleCode!");
&logger.debug("Yeh mera code hain!");
rem &logger.debug("2nd Line!!");
rem &logger.debug("3rd Line!!!");
<*
REMARK ENDPOINT = "http://webservices.daelab.net/datesservice/datesservice.wso";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local number &num;
Local string &url, &UserName;
Local array of XmlNode &nodes;

&req = CreateMessage(Operation.XMETHODS, %IntBroker_Request);
&soap = CreateSOAPDoc();

&num = Z_EXAMPLE_WRK.ACCESS_ID.Value;
If &num <= 0 Or
      None(&num) Or
      &num >= 13 Then
   &num = 1;
End-If;
Local string &soapstr = GetHTMLText(HTML.XMETHODS, &num);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.XML_TESTI.Value = &xml.GenFormattedXmlString();
/* Assign Connector and relevant Properties */
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
/* Specifies OutBound Request */
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
/* End Point */
&url = "http://webservices.daelab.net/datesservice/datesservice.wso";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);
/* Assign the XML Object to a Message Object */
&req.SetXmlDoc(&xml);
/*IBInfo Methods */
/* retrieve the User Name of the person that fired the Sv Op */
&UserName = &req.IBInfo.OrigUser;
&Str_Process = &req.IBInfo.OrigProcess;
&Str_TransID = &req.IBInfo.TransactionID;
&Str_SourceNode = &req.IBInfo.SourceNode;
&Str_ReqNodeName = &req.IBInfo.RequestingNodeName;
rem &Str_ReqNodeDescr = &req.IBInfo.RequestingNodeDescription;
/* IBConnectorInfo Methods */
&Str_ConnectorClass = &req.IBInfo.IBConnectorInfo.ConnectorClassName;
&Str_ConnectorName = &req.IBInfo.IBConnectorInfo.ConnectorName;
&Str_PathInfo = &req.IBInfo.IBConnectorInfo.PathInfo;
rem MessageBox(0, "", 0, 0, "IBConnectorInfo " | &Str_ConnectorClass | " , " | &Str_ConnectorName | " , " | &Str_PathInfo);
rem MessageBox(0, "", 0, 0, "IBInfo " | &Str_TransID | " , " | &Str_ReqNodeName);
rem &res = CreateMessage(Operation.XMETHODS_RESP, %IntBroker_Response);
&res = %IntBroker.ConnectorRequest(&req);
/* retrieve the response */
&xml = &res.GetXmlDoc();
Z_EXAMPLE_WRK.XMLLINKDTD.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/
*>
Local Field &HTMLField;

&HTMLField = GetField();
&Str = GetHTMLText(HTML.MD5_JAVASCRIPT);
rem MessageBox(0, "", 0, 0, "&Str " | &Str);
&HTMLField.Value = &Str;
Local Field &HTMLField;

&HTMLField = GetField();
rem &Str = GetHTMLText(HTML.MD5_JAVASCRIPT);
rem &Str = %Response.WriteLine("<script src= " | %Response.GetJavaScriptURL(HTML.MD5_JAVASCRIPT) | "></script>");
rem MessageBox(0, "", 0, 0, "&Str " | &Str);
&Str = GetHTMLText(HTML.PRINT);
&HTMLField.Value = &Str;
<*/**
*
* MD5 (Message-Digest Algorithm)
* http://www.webtoolkit.info/
*
**/

var MD5 = function (string) {

    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    }

    function AddUnsigned(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }

    function F(x,y,z) { return (x & y) | ((~x) & z); }
    function G(x,y,z) { return (x & z) | (y & (~z)); }
    function H(x,y,z) { return (x ^ y ^ z); }
    function I(x,y,z) { return (y ^ (x | (~z))); }

    function FF(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function GG(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function HH(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function II(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    function WordToHex(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    function Utf8Encode(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    string = Utf8Encode(string);

    x = ConvertToWordArray(string);

    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toLowerCase();
}*>

REMARK ENDPOINT = "http://localhost:8280/PSIGW/PeopleSoftServiceListeningConnector/INBOUND.1.wsdl";

Local Message &req, &res;
Local SOAPDoc &soap;
Local XmlDoc &xml;
Local boolean &b;
Local integer &i;
Local XmlNode &node;
Local string &url, &Text;
Local array of XmlNode &nodes;

&req = CreateMessage(Operation.INBOUND, %IntBroker_Request);
&soap = CreateSOAPDoc();

&Text = Z_EXAMPLE_WRK.XML_TESTI.Value;
Local string &soapstr = GetHTMLText(HTML.INBOUND_REQUEST, &Text);
Local boolean &bool = &soap.ParseXmlString(&soapstr);
&xml = &soap.XmlDoc;
/*
Local File &ppfile1 = GetFile("C:\temp\XMETHODS_SOAP_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile1.WriteString(&xml.GenFormattedXmlString());
&ppfile1.Close();
*/
/* Assign the Request to a Page Field */
Z_EXAMPLE_WRK.WORDER_LEGEND.Value = &xml.GenFormattedXmlString();
&req.IBInfo.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("Content-Type", "text/xml", %Header);
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("SOAPUpContent", "Y", %HttpProperty);
&url = "http://localhost:8280/PSIGW/PeopleSoftServiceListeningConnector/INBOUND.1.wsdl";
&b = &req.IBInfo.IBConnectorInfo.AddConnectorProperties("URL", &url, %HttpProperty);

rem &req.SetXmlDoc(&xml);
rem &res = CreateMessage(Message.OUTBOUND);
&res = %IntBroker.ConnectorRequest(&req);
&xml = &res.GetXmlDoc();
Z_EXAMPLE_WRK.WORKER_SUMMARY.Value = &xml.GenFormattedXmlString();
/*
Local File &ppfile = GetFile("C:\temp\XMETHODS_MESSAGE_" | %Datetime | ".out", "W", %FilePath_Absolute);
&ppfile.WriteString(&xml.GenFormattedXmlString());
&ppfile.Close();
*/

import SCM_UTILITIES:Encryption:Base64;
import SCM_UTILITIES:Encryption:PSCipher;
import SCM_UTILITIES:Integration:XMLCompressor;
import SCM_UTILITIES:Integration:XMLPoster;

Local string &enc_String, &dec_String;
Local string &Text2bEncoded, &rem_string, &Compressed_String, &DecompressedString_;
Local string &CompressedXML_, &MYFILESTRING_;
Local XmlDoc &XMLReq_;

Local SCM_UTILITIES:Encryption:Base64 &Base64_ = create SCM_UTILITIES:Encryption:Base64();
Local SCM_UTILITIES:Encryption:PSCipher &PSCipher_ = create SCM_UTILITIES:Encryption:PSCipher();
Local SCM_UTILITIES:Integration:XMLCompressor &XMLComp_ = create SCM_UTILITIES:Integration:XMLCompressor();
Local SCM_UTILITIES:Integration:XMLPoster &XMLPost_ = create SCM_UTILITIES:Integration:XMLPoster();

&Text2bEncoded = "Prashant Srivastava";
Rem This will not work...It will give the dreaded no overload was found with a parameter signature;
rem &enc_String = &Base64_.Encode(&Text2bEncoded);
rem MessageBox(0, "", 0, 0, "&enc_String " | &enc_String);
&enc_String = &PSCipher_.encodePassword(&Text2bEncoded);
MessageBox(0, "", 0, 0, "&enc_String " | &enc_String);
&rem_string = "{V1.1}Wsh6z0LM+4E="; /* VP1 */
&rem_string = "{V1.1}JEhU3QQBGFw="; /* PSADMIN */
&rem_string = "{V1.1}7m4OtVwXFNyLc1j6pZG69Q=="; /* password */
&dec_String = &PSCipher_.decodePassword(&rem_string);
MessageBox(0, "", 0, 0, "&dec_String " | &dec_String);

/* Compress XML Documents */
&XMLReq_ = CreateXmlDoc();
Local boolean &bool = &XMLReq_.ParseXmlFromURL("C:\temp\XMLRequest_2008-03-20-11.11.11.000000.out");
rem MessageBox(0, "", 0, 0, "XML Doc " | &XMLReq_.GenFormattedXmlString());
&CompressedXML_ = &XMLComp_.Compress(&XMLReq_.GenFormattedXmlString());
MessageBox(0, "", 0, 0, "Compressed XML Doc " | &CompressedXML_);
/*
Local File &MYFILE = GetFile("C:\temp\CompressedXML.out", "R", %FilePath_Absolute);
deletes the File CompressedXML everytime u run this...interesting
&MYFILESTRING_ = &MYFILE.GetString( True);
*/
&String = "eJyzsa/IzVEoSy0qzszPs1Uy1DNQsrfj5bJxzs/LS00uyS8KSS0usbMBkX75Kal2IRmZxQq5qcXFiempCuWJxQrFqXklCmlF+bkKIfn5OcUKUQEhFiYWNvpwHTaOpSUZ+UV2AQHFNvpQto0+qvkABRcuhA==";
&DecompressedString_ = &XMLComp_.Decompress(&CompressedXML_);
MessageBox(0, "", 0, 0, "&DecompressedString_ " | &DecompressedString_);
/* SOAPPost */
Local string &TargetUrl_ = "http://www.nanonull.com/TimeService/TimeService.asmx";
Local string &SOAPAction_ = "http://www.Nanonull.com/TimeService/getServerCity";
rem Local string &TargetUrl_ = "http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso";
rem Local string &SOAPAction_ = "http://www.oorsprong.org/websamples.countryinfo";

Local string &soapstr = GetHTMLText(HTML.GETCITYTIME);
rem Local string &soapstr = GetHTMLText(HTML.GETCOUNTRYNAME);
&SOAPAction_ = "";
Local string &SOAPResp_ = &XMLPost_.SOAPPost(&TargetUrl_, &soapstr, &SOAPAction_);
rem Local string &SOAPResp_ = &XMLPost_.XMLPost(&TargetUrl_, &soapstr);
MessageBox(0, "", 0, 0, "&SOAPResp_ " | &SOAPResp_);

Local Message &msg, &response;
Local XmlDoc &xmlDoc, &res_XML_Doc;
Local string &Str;
Local File &Out_File;

&msg = CreateMessage(Operation.FSCM_CRM);
&xmldata = "<?xml version='1.0'?><ConnectorTest/>";
/* create an XmlDoc */
&xmlDoc = CreateXmlDoc(&xmldata);
&rootNode = &xmlDoc.DocumentElement;
&descNode = &rootNode.AddElement("TestNode");
&descNode.NodeValue = "This message was sent to CRM 9.0.";
&TestNode = &rootNode.AddElement("Author");
/* retrieve Author Value */
&TestNode.NodeValue = Z_FSCM2CRM_WRK.ACCOUNT_NAME.Value;
/* Assign the Request XML/SOAP to Page Field */
Z_FSCM2CRM_WRK.PV_MINIMIZE_WL.Value = &xmlDoc.GenFormattedXmlString();
/* put the XML in the request... */
&msg.SetXmlDoc(&xmlDoc);
/* It doesn't include the size of the XML tags */
rem MessageBox(0, "", 0, 0, "Size " | &msg.Size);
/* Put it in a try-catch Block */
/* ...and send */
try
   &response = %IntBroker.SyncRequest(&msg); /* Send the Request to CRM */
   /* check the response status; 0 means OK */
   If (&response.ResponseStatus = 0) Then
      &res_XML_Doc = &response.GetXmlDoc();
      &Str = &res_XML_Doc.GenFormattedXmlString();
      /* Assign the Response XML/SOAP to Page Field */
      Z_FSCM2CRM_WRK.PV_MODAL.Value = &Str;
      <*
      &Out_File = GetFile("C:\Temp\FSCM_CRM_" | %Datetime | "_Put.out", "w", %FilePath_Absolute);
      &Out_File.WriteString(&Str);
      &Out_File.Close();
      *>
   End-If;
catch Exception &estring
   MessageBox(0, "", 0, 0, "Error " | &estring.ToString());
end-try;

REMARK TRADER WEBSERVICE EXAMPLE - SELL;

Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local string &Country, &Str, &Strxml;
Local number &Shares;
Local SOAPDoc &SOAPReq, &SOAPRes;
rem Local XmlDoc &XMLReq, &XMLRes;
Local boolean &bool;

/* Retrieve input from Page/User */
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.Z_PP_WRK);
&Country = &LVL0REC.INPUT_01.Value;
&Shares = &LVL0REC.NBR_DAYS.Value;

/* Assign (Page) Input to SOAP (1.1) Message - Using both GetHTMLText() an ValidateSOAPDoc()*/
&SOAPReq = CreateSOAPDoc();
&Str = GetHTMLText(HTML.Z_TRADER_SOAP12_SELL, &Country, &Shares); /* sending a SOAP 1.2 message */
&bool = &SOAPReq.ParseXmlString(&Str);

&LVL0REC.LONGJOBNAME2.Value = &Str;
/* Convert SOAP (1.1) to XML and send message */
&XMLReq = &SOAPReq.XmlDoc;
&message = CreateMessage(Operation.TRADERWEBSERVICE, %IntBroker_Request);
&message.SetXMLDoc(&XMLReq);
&XMLRes = %IntBroker.SyncRequest(&message, Node.THIRDPARTY);
&XMLRes_XML = &XMLRes.GetXmlDoc();

/* Retrieve XML and Convert to SOAP (1.1) */
&SOAPRes = CreateSOAPDoc();
&SOAPRes.XmlDoc = &XMLRes_XML;

/* Assign Returned SOAP (1.1) to the RESPONSE */
Local XmlNode &FindNode = &XMLRes_XML.DocumentElement.FindNode("numberTraded");
/* If Response is Null then Node.IsNull will be set to TRUE */
rem MessageBox(0, "", 0, 0, "&FindNode " | &FindNode.IsNull);
&fieldList = &XMLRes_XML.GetElementsByTagName("numberTraded");
For &ipp = 1 To &fieldList.len
   &country_node = &fieldList.Get(&ipp);
End-For;
&country_node_value = &country_node.NodeValue;

&fieldList_2 = &XMLRes_XML.GetElementsByTagName("stockSymbol");
For &ip = 1 To &fieldList_2.len
   &country_node_2 = &fieldList_2.Get(&ip);
End-For;
&country_node_value_2 = &country_node_2.NodeValue;

&LVL0REC.OUTPUT_DIRECTORY.Value = &country_node_value | " | " | &country_node_value_2;
/* Assign Result to the OUTPUT on Page */
&Strxml = &XMLRes_XML.GenFormattedXmlString();
&LVL0REC.AE_STMT.Value = &SOAPRes.GenFormattedXmlString();

rem MessageBox(0, "", 0, 0, "Welcome to PP's Web Service Utility!!!!");

REMARK TRADER WEBSERVICE EXAMPLE - BUY;

Local Rowset &LVL0RS;
Local Record &LVL0REC;
Local string &Country, &Str, &Strxml;
Local number &Shares;
Local SOAPDoc &SOAPReq, &SOAPRes;
rem Local XmlDoc &XMLReq, &XMLRes;
Local boolean &bool;

/* Retrieve input from Page/User */
&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.Z_PP_WRK);
&Country = &LVL0REC.INPUT_01.Value;
&Shares = &LVL0REC.NBR_DAYS.Value;

/* Assign (Page) Input to SOAP (1.1) Message - Using both GetHTMLText() and ValidateSOAPDoc()*/
&SOAPReq = CreateSOAPDoc();
&Str = GetHTMLText(HTML.Z_TRADER_SOAP12, &Country, &Shares); /* sending a SOAP 1.2 message */
&bool = &SOAPReq.ParseXmlString(&Str);
&Fault = &SOAPReq.FaultCode;
rem MessageBox(0, "", 0, 0, "&SOAPReq " | &Fault);
&HdrNode = &SOAPReq.HeaderNode;
&HdrName = &HdrNode.NodeName;
rem MessageBox(0, "", 0, 0, "&HdrName " | &HdrName);
/*
&Return = &SOAPReq.ValidateSOAPDoc();
If &Return <> 0 Then
   MessageBox(0, "", 0, 0, "&Return " | &Return);
End-If;
*/
&LVL0REC.LONGJOBNAME2.Value = &Str;
/* Convert SOAP (1.1) to XML and send message */
&XMLReq = &SOAPReq.XmlDoc;
&message = CreateMessage(Operation.TRADERWEBSERVICE, %IntBroker_Request);
rem &message.LOADXMLSTRING(&Str);
&message.SetXMLDoc(&XMLReq);
&XMLRes = %IntBroker.SyncRequest(&message, Node.THIRDPARTY);
rem &XMLRes = SyncRequestXmlDoc(&XMLReq, Message.W_OUTBOUND_MSG, Node.THIRDPARTY);
&XMLRes_XML = &XMLRes.GetXmlDoc();

/* Retrieve XML and Convert to SOAP (1.1) */
&SOAPRes = CreateSOAPDoc();
&SOAPRes.XmlDoc = &XMLRes_XML;

/* Assign Returned SOAP (1.1) to the RESPONSE */

Local XmlNode &FindNode = &XMLRes_XML.DocumentElement.FindNode("numberTraded");
/* If Response is Null then Node.IsNull will be set to TRUE */
rem MessageBox(0, "", 0, 0, "&FindNode " | &FindNode.IsNull);
&fieldList = &XMLRes_XML.GetElementsByTagName("numberTraded");
For &ipp = 1 To &fieldList.len
   rem MessageBox(0, "", 0, 0, "Array Len = " | &fieldList.len);
   rem MessageBox(0, "", 0, 0, "Field Value " | &fieldList [&ipp].NodeValue);
   &country_node = &fieldList.Get(&ipp);
End-For;
&country_node_value = &country_node.NodeValue;

&fieldList_2 = &XMLRes_XML.GetElementsByTagName("stockSymbol");
For &ip = 1 To &fieldList_2.len
   &country_node_2 = &fieldList_2.Get(&ip);
End-For;
&country_node_value_2 = &country_node_2.NodeValue;

&LVL0REC.OUTPUT_DIRECTORY.Value = "Selling " | &country_node_value | " shares of " | &country_node_value_2;
/* Assign Result to the OUTPUT on Page */
&Strxml = &XMLRes_XML.GenFormattedXmlString();
&LVL0REC.AE_STMT.Value = &SOAPRes.GenFormattedXmlString();
/* Write to file */
/*
Local File &PPFILE = GetFile("C:\Temp\Out_" | %Datetime | "_Put.out", "W", %FilePath_Absolute);
&PPFILE.WriteString(&SOAPRes.GenFormattedXmlString());
&PPFILE.Close();
*/

Local File &AMXF;
Local Rowset &AMXRS, &AMXMRS;
Local Message &AMXM;
Local string &next_frs;
Local string &File;

Function Initialize_File();
   &File = EX_PUBAMEX_AET.EX_FILE_NAME;
   If FileExists(&File, %FilePath_Absolute) Then
      &AMXF = GetFile(&File, "R", "A", %FilePath_Absolute);
      &CUR_POSN = 0;
      &FileLayout = "EX_AMEX_KR1025_FLO";
      &AMXF.SetFileLayout(@("FILELAYOUT." | &FileLayout));
      &AMXF.SetPosition(&CUR_POSN);
   Else
      Error (MsgGet(10503, 88, "KR1025 AMEX file does not exist", "AMEX Card", &File));
   End-If;
End-Function;

Function Initialize_Variables();
   &EOF_SW = "N";
   &Record_Type = " ";
End-Function;

Function Get_Other_Values();
   &PROCESS_INSTANCE = EX_PUBAMEX_AET.PROCESS_INSTANCE;
   &RUN_CNTL_ID = EX_PUBAMEX_AET.RUN_CNTL_ID;
   &SEQ_NUM = EX_PUBAMEX_AET.SEQ_NUM;
   &MSGNAME = "CREDIT_CARD_MERCHANT_AMEX_LOAD";
   &AMXM = CreateMessage(@("MESSAGE." | &MSGNAME));
   &AMXMRS = &AMXM.GetRowset();
End-Function;

Function Get_Record_Type();
   &Record_Type = Substring(&next_frs, 1, 1);
End-Function;


Function Get_Next_Record();
   &AMXRS = &AMXF.ReadRowset();
   &next_frs = &AMXF.CurrentRecord;
   
   &reclen = Len(&next_frs);
   
   If &reclen > 1948 Then
      Error (MsgGet(10503, 251, "Unable to locate message.", &I, "1948"));
   End-If;
   
   
   Get_Record_Type();
End-Function;

Function Main_Proc();
   /********** process first record *******/
   Get_Next_Record();
   If &Record_Type = "9" Then
      &EOF_SW = "Y";
   Else
      Get_Next_Record();
   End-If;
   
   &I = 1;
   /********* process loop **************/
   While &EOF_SW = "N"
      /* insert a row for detail transactions only ie record type = "1" */
      &curr_rec_type = &AMXRS(1).GetRecord(1).GetField(Field.AMX_REC_TYPE).Value;
      If &curr_rec_type = "1" Then
         If &I <> 1 Then
            &AMXMRS.InsertRow(&I - 1);
         End-If;
         
         /*Fill Merchant with Description if blank */
         &Merchant = &AMXRS(1).GetRecord(1).AMX_SE_NM_1_TX.Value;
         If None(&Merchant) Then
            &Description = &AMXRS(1).GetRecord(1).AMX_DS_BILL_LINE_1.Value;
            &AMXRS(1).GetRecord(1).AMX_SE_NM_1_TX.Value = &Description;
         End-If;
         &AMXRS(1).GetRecord(1).CopyFieldsTo(&AMXMRS(&I).GetRecord(1));
         &AMXMRS(&I).GetRecord(2).AUDIT_ACTN.Value = &AMXRS(1).GetRecord(1).AUDIT_ACTN.Value;
         &AMXMRS(&I).GetRecord(2).PROCESS_INSTANCE.Value = &PROCESS_INSTANCE;
         &AMXMRS(&I).GetRecord(1).RUN_CNTL_ID.Value = &RUN_CNTL_ID;
         &AMXMRS(&I).GetRecord(1).SEQ_NUM.Value = &SEQ_NUM;
         &I = &I + 1;
         
      End-If;
      
      
      /************* check the record type of the next record *******/
      Evaluate &Record_Type
         /********** end of file ******/
      When = "9"
         &EOF_SW = "Y";
         Break;
         /********* process *******/
      When = "1"
      When = "2"
      When = "3"
      When = "4"
         Get_Next_Record();
         Break;
      When-Other
         Break;
      End-Evaluate;
   End-While;
   If &AMXMRS <> Null And
         &AMXMRS(1).GetRecord(2).PROCESS_INSTANCE.Value <> "" Then
      &AMXMRS(1).GetRecord(1).AMX_FILLER.Value = &AMXMRS.RowCount;
      %IntBroker.Publish(&AMXM);
   End-If;
   &AMXF.Close();
End-Function;

/*************** MainLine *************/
Initialize_Variables();
Get_Other_Values();
Initialize_File();
If &AMXF.IsOpen Then
   Main_Proc();
Else;
   Error (MsgGet(10503, 193, "Unable to read AMEX KR1025 File", "AMEX Card"));
End-If;

Local File &PBSF_;
Local Rowset &PBSRS_, &PBSMRS_, &LEVEL1_ROWSET_;
Local Message &PBSM_;
Local string &next_frs;
Local string &File;

Function Initialize_File();
   rem &File = Z_PBS_AET.EX_FILE_NAME;
   rem If FileExists(&File, %FilePath_Absolute) Then;
   rem &PBSF_ = GetFile(&File, "R", "A", %FilePath_Absolute);
   &File_ = "D:\psoft\pt849\fin9\fs90dev\int_data\other\input\PBS.txt";
   &PBSF_ = GetFile(&File_, "R", "A", %FilePath_Absolute);
   &CUR_POSN = 0;
   &FileLayout = "Z_PBS_FL";
   &PBSF_.SetFileLayout(@("FILELAYOUT." | &FileLayout));
   &PBSF_.SetPosition(&CUR_POSN);
   rem Else
      rem Error (MsgGet(10503, 88, "KR1025 AMEX file does not exist", "AMEX Card", &File))
      Exit (0);
   rem End-If;
End-Function;

Function Initialize_Variables();
   rem PS_PERSONAL_DATA;
   MessageBox(0, "", 0, 0, "Record Name " | &PBSMRS_(1).GetRecord(1).Name);
   rem PSCAMA;
   MessageBox(0, "", 0, 0, "Record Name " | &PBSMRS_(1).GetRecord(2).Name);
   MessageBox(0, "", 0, 0, "RowCount " | &PBSMRS_.RowCount);
   /*PS_PERSONAL_DATA */
   &PBSMRS_(1).GetRecord(1).EMPLID.Value = &PBSRS_.GetRow(1).GetRecord(Record.Z_PBS_REC).GetField(Field.EMPLID).Value;
   rem &PBSMRS_(1).GetRecord(1).NAME.Value = &PBSRS_(1).GetRecord(1).NAME.Value;
   &PBSMRS_(1).GetRecord(1).LAST_NAME_SRCH.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(1).FIRST_NAME_SRCH.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(1).LAST_NAME.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(1).FIRST_NAME.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(1).COUNTRY.Value = &PBSRS_(1).GetRecord(1).COUNTRY.Value;
   &PBSMRS_(1).GetRecord(1).ADDRESS1.Value = &PBSRS_(1).GetRecord(1).ADDRESS1.Value;
   &PBSMRS_(1).GetRecord(1).CITY.Value = &PBSRS_(1).GetRecord(1).CITY.Value;
   &PBSMRS_(1).GetRecord(1).STATE.Value = &PBSRS_(1).GetRecord(1).ADDRESS1.Value;
   &PBSMRS_(1).GetRecord(1).POSTAL.Value = &PBSRS_(1).GetRecord(1).ADDRESS1.Value;
   &PBSMRS_(1).GetRecord(1).PER_STATUS.Value = "E";
   &PBSMRS_(1).GetRecord(1).LANG_CD.Value = "ENG";
   For &I = 1 To &PBSMRS_.RowCount
      &ROW = &PBSMRS_.GetRow(&I);
      MessageBox(0, "", 0, 0, "Row " | &ROW);
      rem Process_Row_Action(&ROW, &PRIOR_ROW);
      For &J = 1 To &ROW.ChildCount
         &CHILD_ROWSET = &ROW.GetRowset(&J);
         rem Proc_Sub_RowSet1(&CHILD_ROWSET);
      End-For;
   End-For;
   /* PS_EMAIL_ADDRESSES */
   &PBSMRS_(1).GetRecord(2).EMPLID.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(2).E_ADDR_TYPE.Value = "BUSN";
   &PBSMRS_(1).GetRecord(2).EMPLID.Value = "abc@embarq.com";
   /* PS_PERSONAL_PHONE */
   &PBSMRS_(1).GetRecord(3).EMPLID.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(3).PHONE_TYPE.Value = "BUSN";
   &PBSMRS_(1).GetRecord(3).COUNTRY_CODE.Value = "001";
   &PBSMRS_(1).GetRecord(3).COUNTRY_CODE.Value = "212-298-1719";
   /*PS_PERS_DATA_EFFDT */
   &PBSMRS_(1).GetRecord(4).EMPLID.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   &PBSMRS_(1).GetRecord(4).EFFDT.Value = %Date;
   /* PS_PERS_NID */
   &PBSMRS_(1).GetRecord(5).EMPLID.Value = &PBSRS_(1).GetRecord(1).EMPLID.Value;
   
End-Function;

Function Get_Other_Values();
   &PROCESS_INSTANCE = Z_PBS_AET.PROCESS_INSTANCE;
   &RUN_CNTL_ID = Z_PBS_AET.RUN_CNTL_ID;
   &SEQ_NUM = Z_PBS_AET.SEQ_NUM;
   &MSGNAME = "PERSON_BASIC_SYNC";
   &PBSM_ = CreateMessage(@("OPERATION." | &MSGNAME));
   &PBSMRS_ = &PBSM_.GetRowset();
End-Function;

Function Main_Proc();
   
   &PBSRS_ = &PBSF_.ReadRowset();
   &next_frs = &PBSF_.CurrentRecord;
   
   
   &I = 1;
   /********* process loop **************/
   While &PBSRS_ <> Null
      /* insert a row for detail transactions only ie record type = "1" */
      rem &curr_rec_type = &AMXRS(1).GetRecord(1).GetField(Field.AMX_REC_TYPE).Value;
      /*      
If &I <> 1 Then
         &PBSMRS_.InsertRow(&I - 1);
      End-If;
*/
      &PBSRS_(1).GetRecord(1).CopyFieldsTo(&PBSMRS_(1).GetRecord(1));
      MessageBox(0, "", 0, 0, "Audit " | &PBSMRS_(1).GetRecord(2).AUDIT_ACTN.Value);
      MessageBox(0, "", 0, 0, "Value " | &PBSRS_(1).GetRecord(1).EMPLID.Value);
      &PBSMRS_(1).GetRecord(1).EMPLID.Value = &PBSRS_.GetRow(1).GetRecord(Record.Z_PBS_REC).GetField(Field.EMPLID).Value;
      MessageBox(0, "", 0, 0, "Rowset Value " | &PBSMRS_(1).GetRecord(1).EMPLID.Value);
      rem &PBSMRS_(1).GetRecord(1).NAME.Value = &PBSRS_(1).GetRecord(1).NAME.Value;
      &PBSMRS_(1).GetRecord(1).LAST_NAME_SRCH.Value = &PBSRS_(1).GetRecord(1).LAST_NAME.Value;
      &PBSMRS_(1).GetRecord(1).FIRST_NAME_SRCH.Value = &PBSRS_(1).GetRecord(1).FIRST_NAME.Value;
      &PBSMRS_(1).GetRecord(1).LAST_NAME.Value = &PBSRS_(1).GetRecord(1).LAST_NAME.Value;
      &PBSMRS_(1).GetRecord(1).FIRST_NAME.Value = &PBSRS_(1).GetRecord(1).FIRST_NAME.Value;
      &PBSMRS_(1).GetRecord(1).COUNTRY.Value = &PBSRS_(1).GetRecord(1).COUNTRY.Value;
      &PBSMRS_(1).GetRecord(1).ADDRESS1.Value = &PBSRS_(1).GetRecord(1).ADDRESS1.Value;
      &PBSMRS_(1).GetRecord(1).CITY.Value = &PBSRS_(1).GetRecord(1).CITY.Value;
      &PBSMRS_(1).GetRecord(1).STATE.Value = &PBSRS_(1).GetRecord(1).STATE.Value;
      &PBSMRS_(1).GetRecord(1).POSTAL.Value = &PBSRS_(1).GetRecord(1).POSTAL.Value;
      &PBSMRS_(1).GetRecord(1).PER_STATUS.Value = "E";
      &PBSMRS_(1).GetRecord(1).LANG_CD.Value = "ENG";
      &PBSMRS_(1).GetRecord(2).AUDIT_ACTN.Value = "A";
      &PBSMRS_(1).GetRecord(2).PROCESS_INSTANCE.Value = &PROCESS_INSTANCE;
      /* Retrieve All Level 1 Records */
      For &A0 = 1 To &PBSMRS_.ActiveRowCount
         If &PBSMRS_(&A0).ChildCount > 0 Then
            For &B1 = 1 To &PBSMRS_(&A0).ChildCount
               &LEVEL1_ROWSET_ = &PBSMRS_(&A0).GetRowset(&B1);
               MessageBox(0, "", 0, 0, "Level 1 Records " | &LEVEL1_ROWSET_(1).GetRecord(1).Name);
            End-For;
         End-If;
         
      End-For;
      &I = &I + 1;
      &PBSRS_ = &PBSF_.ReadRowset();
   End-While;
   
   If &PBSMRS_ <> Null Then
      rem &PBSMRS_(1).GetRecord(1).AMX_FILLER.Value = &PBSMRS_.RowCount;
      rem Initialize_Variables();
      %IntBroker.Publish(&PBSM_);
   End-If;
   &PBSF_.Close();
   
End-Function;

/*************** MainLine *************/
rem Initialize_Variables();
Get_Other_Values();
Initialize_File();
If &PBSF_.IsOpen Then
   SetTracePC(2048);
   SetTraceSQL(3);
   Main_Proc();
Else;
   rem Error (MsgGet(10503, 193, "Unable to read AMEX KR1025 File", "AMEX Card"));
   Exit (0);
End-If;

/* Begin EQREM-(INT_AM-030) Aravindh NarasimhaReddy, 16-Sep-2008, Generate a CSV format file with all Active Location Data */
Local Rowset &l_Rowset;
Local File &l_Export_File;
Local string &l_Filename, &l_CSVString;
Local ApiObject &l_QryObj;

&l_Filename = "Location Details " | %Date | ".CSV";
/* Opening a CSV file */
&l_Export_File = GetFile(&l_Filename, "W", %FilePath_Absolute);
/* Checking whether the File if Opened Successfully */
If &l_Export_File.IsOpen Then
   &l_QryObj = %Session.GetQuery();
   /* Initialising the Rowset */
   &l_Rowset = CreateRowset(Record.LOCATION_TBL);
   &l_Rowset.Flush();
   /* Filling the Rowset with Active Location Details */
   &l_Rowset.Fill("WHERE FILL.EFF_STATUS = 'A' AND %EFFDTCHECK(LOCATION_TBL,FILL,SYSDATE) ");
   /* Formating the Rowset in CSV format */
   &l_CSVString = &l_QryObj.FormatResultString(&l_Rowset, %Query_TXT, 1, &l_Rowset.ActiveRowCount);
   /* Writing the file with the Location Data */
   &l_Export_File.WriteLine(&l_CSVString);
Else
   MessageBox(0, "", 0, 0, "Error: Opening of File Failed");
End-If;
&l_Export_File.Close();
/* End EQREM-(INT_AM-030) Aravindh NarasimhaReddy, 16-Sep-2008, Generate a CSV format file with all Active Location Data */
/* Begin EQREM-(INT_GL-028) Prashant Prakash, 25-Sep-2008, Generate a CSV format file */
Local File &GL_LEDFile_;
Local string &FileName_Path_, &GL_CSVString_;
Local Rowset &GL_LEDRS_;
Local ApiObject &GL_QryObj_;

&FileName_Path_ = "D:\psoft\pt849\fin9\fs90dev\int_data\gl\output\GL_LED_JRNL_CMP_" | %Date | ".csv";
/* Opening a CSV file */
&GL_LEDFile_ = GetFile(&FileName_Path_, "W", %FilePath_Absolute);
/* Checking whether the File if Opened Successfully */
If &GL_LEDFile_.IsOpen Then
   &GL_QryObj_ = %Session.GetQuery();
   /* Initialising the Rowset & Values */
   &GL_LEDRS_ = CreateRowset(Record.Z_GL_LEDJRN_STG);
   &GL_LEDRS_.Fill();
   &FiscalYear_ = Z_GL_LEDCMP_AET.FISCAL_YEAR.Value;
   &AccntPeriod_ = Z_GL_LEDCMP_AET.ACCOUNTING_PERIOD.Value;
   /* File Headings */
   &GL_LEDFile_.WriteLine(MsgGetText(20000, 1, "Message Not Found"));
   &GL_LEDFile_.WriteLine(MsgGetText(20000, 2, "Message Not Found"));
   &GL_LEDFile_.WriteLine(MsgGetText(20000, 3, "Message Not Found", &FiscalYear_, &AccntPeriod_));
   &GL_CSVString_ = &GL_QryObj_.FormatResultString(&GL_LEDRS_, %Query_TXT, 1, &GL_LEDRS_.ActiveRowCount);
   /* Writing the file with the Location Data */
   &GL_LEDFile_.WriteLine(&GL_CSVString_);
Else
   Error ("Error: Opening of File Failed");
End-If;
&GL_LEDFile_.Close();
/* Begin EQREM-(INT_GL-028) Prashant Prakash, 25-Sep-2008, Generate a CSV format file */
%Execute(/)%TruncateTable(%table(Z_GL_JRLCMP_STG)) / %TruncateTable(%table(Z_GL_LEDCMP_STG)) / %TruncateTable(%table(Z_GL_LEDJRN_STG))

/*****************************************************************************
* Class: LogHandler
*
* Description: Debugs using Log4J in PeopleCode
*
*****************************************************************************/
class LogHandler
method LogHandler(&className As string);
method DebugMsg(&msg As string);
method InfoMsg(&msg As string);
method WarnMsg(&msg As string);
method ErrorMsg(&msg As string);
method FatalMsg(&msg As string);
property boolean IsDebugEnabled get;
property boolean IsInfoEnabled get;
property JavaObject Log get;
private
Constant &LOG_CLASS_NAME = "org.apache.log4j.Logger";
instance JavaObject &_logger;
instance JavaObject &_javaErrorMethod;
method InitJavaMethodCall();
method GetCurrentUser() Returns string;
end-class;

/**
* Constructor
*
* @param &className - the class name that is using this instance of the log handler.
**/
method LogHandler
/+ &className as String +/
&_logger = GetJavaClass(&LOG_CLASS_NAME).getLogger(&className);
GetJavaClass("org.apache.log4j.PropertyConfigurator").configureAndWatch("log4j.properties", 60000);
%This.InitJavaMethodCall();
end-method;

/**
* InitJavaMethodCall
*
* Init a reflection java call to Log.error() method. We have to use reflection because
* error is a PeopleCode keyword.
**/
method InitJavaMethodCall
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("my.custom.logger");
Local JavaObject &jErrorArgTypes = CreateJavaObject("java.lang.Class[]", GetJavaClass("java.lang.Object"));
&_javaErrorMethod = &logger.getClass().getMethod("error", &jErrorArgTypes);
end-method;

/**
* DebugMsg
*
* @param &msg - out the debug message to log4j.
**/
method DebugMsg
/+ &msg as String +/
&_logger.debug(%This.GetCurrentUser() | " " | &msg);
end-method;

/**
* InfoMsg
*
* @param &msg - out the info message to log4j.
**/
method InfoMsg
/+ &msg as String +/
&_logger.info(%This.GetCurrentUser() | " " | &msg);
end-method;

/**
* WarnMsg
*
* @param &msg - out the warn message to log4j.
**/
method WarnMsg
/+ &msg as String +/
&_logger.warn(%This.GetCurrentUser() | " " | &msg);
end-method;

/**
* ErrorMsg
*
* We need to use the reflection api to call this method beacuse
* error is a peoplesoft reserved word.
*
* @param &msg - out the error message to log4j.
**/
method ErrorMsg
/+ &msg as String +/
&_javaErrorMethod.invoke(&_logger, CreateJavaObject("java.lang.Object[]", %This.GetCurrentUser() | " " | &msg));
end-method;

/**
* FatalMsg
*
* @param &msg - out the fatal message to log4j.
**/
method FatalMsg
/+ &msg as String +/
&_logger.fatal(%This.GetCurrentUser() | " " | &msg);
end-method;

/**
* IsDebugEnabled
*
* @return if debug is enabled.
**/
get IsDebugEnabled
/+ Returns Boolean +/
Return &_logger.isDebugEnabled;
end-get;

/**
* IsInfoEnabled
*
* @return if debug is enabled.
**/
get IsInfoEnabled
/+ Returns Boolean +/
Return &_logger.isInfoEnabled;
end-get;

/**
* Get Log
*
* @return the java log4j instance
**/
get Log
/+ Returns JavaObject +/
Return &_logger;
end-get;

/**
* GetCurrentUser
*
* @return the current user
**/
method GetCurrentUser
/+ Returns String +/
If (%UserId = "") Then
Return "[Unknown User]";
Else
Return "[" | %UserId | "]";
End-If;
end-method;

/* Import EQ Custom App Package for Logging */
import Z_EQ_LOG:*;
/* Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* Import EQ FileName Package to retrieve File Information*/
import Z_EQ_FILENAMES:*;

/* Create Class Object for Logging */
Local Z_EQ_LOG:EQ_LOG &msgLog_ = create Z_EQ_LOG:EQ_LOG();
/* Create Class Object for retrieving File Information */
Local Z_EQ_FILENAMES:EQ_FILENAMES &objEQFileName = create Z_EQ_FILENAMES:EQ_FILENAMES();

rem *****************************************************************;
rem * PeopleCode to Export Data                                     *;
rem *****************************************************************;
Local File &FILE1, &OutboundFILE, &OutboundFILE1;
Local string &ErrFile_, &FileDir_, &strSlash, &pEmailAddress, &txt1;
Local string &OutboundFileName, &OutboundFileName1, &ErrSub_;
Local Record &REC1, &REC1_;
Local SQL &SQL1, &SQL1_;
Local Rowset &RS1, &RS2, &RS1_;
Local integer &M, &iTempPos;

/* Retrieve File Information for SHIPTO FILE */
&msgLog_.println_to_stdout("SHIPTO_TBL Export");
&msgLog_.println_to_stdout(" ");
&OutboundFileName = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "001");
&OutboundFILE = GetFile(&OutboundFileName, "w", %FilePath_Absolute);

rem &FILE1 = GetFile("INT-PO-OUT-013_SHIPTO_XO.txt", "W", %FilePath_Relative);

/* Logging */
&msgLog_.println_to_stdout("Input parameters to the Application Package");
&msgLog_.println_to_stdout("--------------------------------------------");
&msgLog_.println_to_stdout("The Process Instance: " | Z_PO_P_NIBS_AET.PROCESS_INSTANCE);
&msgLog_.println_to_stdout("Control ID: " | Z_PO_P_NIBS_AET.CONTROL_ID);
&msgLog_.println_to_stdout("File type: 001 --> Outbound File - SHIPTO");
&msgLog_.println_to_stdout("");

&msgLog_.println_to_stdout("Output parameters from the Application Package");
&msgLog_.println_to_stdout("----------------------------------------------");
&msgLog_.println_to_stdout("FIRST Outbound File name: " | &OutboundFileName);
&msgLog_.println_to_stdout("----------------------------------------------");
&msgLog_.println_to_stdout("");
/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value, &FileDir_);
&ErrSub_ = "AE_Z_POPSTONIBS_" | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value | ".rtf";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&iTempPos = Find("\", &FileDir_);
If &iTempPos = 0 Then
   &iTempPos = Find("/", &FileDir_);
   &strSlash = "/";
Else
   &strSlash = "\";
End-If;
&ErrFile_ = &FileDir_ | &strSlash | &ErrSub_;
&msgLog_.println_to_stdout(&ErrFile_);
&msgLog_.redirect_stderr(&ErrFile_);
&msgLog_.println_to_stderr("INT_PO_OUT_013 --> Error Log:");
rem &LOGFILE = GetFile("INT-PO-OUT-013_SHIPTO_XO.err", "W", %FilePath_Relative);
try
   If &OutboundFILE.SetFileLayout(FileLayout.Z_PO_PS_NIBS) Then
      &LOGFILE.SetFileLayout(FileLayout.Z_PO_PS_NIBS);
      &RS1 = &OutboundFILE.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1 = &RS1(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from SHIPTO_TBL*/
      &SQL1 = GetSQL(SQL.Z_PO_SHIPTO_LOC_SQL);
      /* Write all Feched values to Output File */
      While &SQL1.Fetch(&REC1);
         &OutboundFILE.WriteRecord(&REC1);
      End-While;
      /* Close All File Objects */
      &OutboundFILE.Close();
   Else
      &msgLog_.println_to_stdout("Set File Layout Failed...");
   End-If;
catch Exception &e1
   /* Catch All File Handling Issues */
   &msgLog_.println_to_stderr("SetFileLayout method failed");
end-try;

/* Retrieve File Information for REQUESTOR FILE */
&msgLog_.println_to_stdout("REQUESTOR_TBL Export");
&msgLog_.println_to_stdout(" ");
&OutboundFileName1 = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "002");
/* OutBound File 2 --> REQUESTOR_TBL */
&OutboundFILE1 = GetFile(&OutboundFileName1, "w", %FilePath_Absolute);
&msgLog_.println_to_stdout("----------------------------------------------");
&msgLog_.println_to_stdout("SECOND Outbound File name: " | &OutboundFileName1);
&msgLog_.println_to_stdout("----------------------------------------------");

try
   If &OutboundFILE1.SetFileLayout(FileLayout.Z_PO_PS_NIBS) Then
      rem &LOGFILE1.SetFileLayout(FileLayout.Z_PO_PS_NIBS);
      &RS1_ = &OutboundFILE1.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1_ = &RS1_(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from REQUESTOR_TBL*/
      &SQL1_ = GetSQL(SQL.Z_PO_SHIPTO_SQL);
      /* Write all Feched values to Output File */
      While &SQL1_.Fetch(&REC1_);
         &OutboundFILE1.WriteRecord(&REC1_);
      End-While;
      /* Close All File Objects */
      &OutboundFILE1.Close();
   Else
      &msgLog_.println_to_stdout("Set File Layout Failed...");
   End-If;
catch Exception &e2
   /* Catch All File Handling Issues */
   &msgLog_.println_to_stderr("SetFileLayout method failed " | &e2.ToString());
end-try;

/* Send Mail to Notification Email ID on Control ID page for this Process */
Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
/* This Email ID should be provided on the Control ID page for the Process */
&pEmailAddress = "prashant.prakash1@gmail.com";
&email.Recipients = &pEmailAddress;
/* Retrieve Subject from Message Catalog */
&email.Subject = "The Process Z_POPSTONIBS completed with PI " | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value;
/* Add additional text in the email body from Message Catalog */
&txt1 = "The Error File generated has been attached";
&email.Text = &txt1 | Char(13);
/* Add the Error File as an attachment and email it to the Email ID provided on the Control ID Page */
&email.AddAttachment(&ErrFile_, %FilePath_Absolute, &ErrSub_, "", "", "");
If FileExists(&ErrFile_, %FilePath_Absolute) Then
   Local integer &rcEmail;
   &msgLog_.println_to_stdout("Sending Email to: " | &pEmailAddress);
   &rcEmail = &email.Send();
   If &rcEmail <> 1 Then
      /* error processing */
      &msgLog_.println_to_stderr("Report could not be emailed to: " | &pEmailAddress);
   End-If;
Else
   &msgLog_.println_to_stderr("File does not exist in: " | &ErrFile_);
End-If;


/* PS TO NIBS */
/* Import EQ Custom App Package for Logging */
import Z_EQ_LOG:*;
/* Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* Import EQ FileName Package to retrieve File Information*/
import Z_EQ_FILENAMES:*;

/* Create Class Object for Logging */
Local Z_EQ_LOG:EQ_LOG &msgLog_ = create Z_EQ_LOG:EQ_LOG();
/* Create Class Object for retrieving File Information */
Local Z_EQ_FILENAMES:EQ_FILENAMES &objEQFileName = create Z_EQ_FILENAMES:EQ_FILENAMES();

rem *****************************************************************;
rem * PeopleCode to Export Data                                     *;
rem *****************************************************************;
Local File &FILE1, &OutboundFILE, &OutboundFILE1;
Local string &ErrFile_, &FileDir_, &strSlash, &pEmailAddress, &txt1;
Local string &OutboundFileName, &OutboundFileName1, &ErrSub_;
Local Record &REC1, &REC1_;
Local SQL &SQL1, &SQL1_;
Local Rowset &RS1, &RS2, &RS1_;
Local integer &M, &iTempPos;

/* Retrieve File Information for SHIPTO FILE */
&msgLog_.println_to_stdout("SHIPTO_TBL Export");
&msgLog_.println_to_stdout(" ");
/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value, &FileDir_);
&ErrSub_ = "AE_Z_POPSTONIBS_" | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value | ".err";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&iTempPos = Find("\", &FileDir_);
If &iTempPos = 0 Then
   &iTempPos = Find("/", &FileDir_);
   &strSlash = "/";
Else
   &strSlash = "\";
End-If;
&ErrFile_ = &FileDir_ | &strSlash | &ErrSub_;
&msgLog_.println_to_stdout(&ErrFile_);
/* redirect stderr */
&msgLog_.redirect_stderr(&ErrFile_);
&msgLog_.println_to_stderr("=============================================");
&msgLog_.println_to_stderr("PSPO to NIBS Ship-To File ID (PO-INT-OUT-013)");
&msgLog_.println_to_stderr("=============================================");
&msgLog_.println_to_stderr("RUN DATE TIME " | %Datetime);
&msgLog_.println_to_stderr("INT_PO_OUT_013 --> Error Log:");
&OutboundFileName = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "001");
/* All GetFile(s) should be in Try Catch */
try
   &OutboundFILE = GetFile(&OutboundFileName, "w", %FilePath_Absolute);
catch Exception &GetOutFile
   &msgLog_.println_to_stderr("Output File --> 001 not defined on Control ID Page " | &GetOutFile.ToString());
end-try;

rem &FILE1 = GetFile("INT-PO-OUT-013_SHIPTO_XO.txt", "W", %FilePath_Relative);

/* Logging */
&msgLog_.println_to_stdout("Input parameters to the Application Package");
&msgLog_.println_to_stdout("--------------------------------------------");
&msgLog_.println_to_stdout("The Process Instance: " | Z_PO_P_NIBS_AET.PROCESS_INSTANCE);
&msgLog_.println_to_stdout("Control ID: " | Z_PO_P_NIBS_AET.CONTROL_ID);
&msgLog_.println_to_stdout("File type: 001 --> Outbound File - SHIPTO");
&msgLog_.println_to_stdout("");

&msgLog_.println_to_stdout("Output parameters from the Application Package");
&msgLog_.println_to_stdout("----------------------------------------------");
&msgLog_.println_to_stdout("FIRST Outbound File name: " | &OutboundFileName);
&msgLog_.println_to_stdout("----------------------------------------------");
&msgLog_.println_to_stdout("");

rem &LOGFILE = GetFile("INT-PO-OUT-013_SHIPTO_XO.err", "W", %FilePath_Relative);
try
   If &OutboundFILE.SetFileLayout(FileLayout.Z_PO_PS_NIBS) Then
      rem &LOGFILE.SetFileLayout(FileLayout.Z_PO_PS_NIBS);
      &RS1 = &OutboundFILE.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1 = &RS1(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from SHIPTO_TBL*/
      &SQL1 = GetSQL(SQL.Z_PO_SHIPTO_LOC_SQL);
      /* Write all Feched values to Output File */
      While &SQL1.Fetch(&REC1);
         &OutboundFILE.WriteRecord(&REC1);
      End-While;
      /* Close All File Objects */
      &OutboundFILE.Close();
   Else
      &msgLog_.println_to_stdout("Set File Layout Failed...");
   End-If;
catch Exception &e1
   /* Catch All File Handling Issues */
   &msgLog_.println_to_stderr("SetFileLayout method failed");
end-try;

/* Retrieve File Information for REQUESTOR FILE */
&msgLog_.println_to_stdout("REQUESTOR_TBL Export");
&msgLog_.println_to_stdout(" ");
&OutboundFileName1 = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "002");
/* OutBound File 2 --> REQUESTOR_TBL */
/* All getFile(s) should be in Try Catch */
try
   &OutboundFILE1 = GetFile(&OutboundFileName1, "w", %FilePath_Absolute);
catch Exception &GetOutFile_
   &msgLog_.println_to_stderr("Output File --> 002 not defined on Control ID Page " | &GetOutFile_.ToString());
end-try;
&msgLog_.println_to_stdout("----------------------------------------------");
&msgLog_.println_to_stdout("SECOND Outbound File name: " | &OutboundFileName1);
&msgLog_.println_to_stdout("File type: 002 --> Outbound File - REQUESTOR");
&msgLog_.println_to_stdout("----------------------------------------------");

try
   If &OutboundFILE1.SetFileLayout(FileLayout.Z_PO_PS_NIBS) Then
      rem &LOGFILE1.SetFileLayout(FileLayout.Z_PO_PS_NIBS);
      &RS1_ = &OutboundFILE1.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1_ = &RS1_(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from REQUESTOR_TBL*/
      &SQL1_ = GetSQL(SQL.Z_PO_SHIPTO_SQL);
      /* Write all Feched values to Output File */
      While &SQL1_.Fetch(&REC1_);
         &OutboundFILE1.WriteRecord(&REC1_);
      End-While;
      /* Close All File Objects */
      &OutboundFILE1.Close();
   Else
      &msgLog_.println_to_stdout("Set File Layout Failed...");
   End-If;
catch Exception &e2
   /* Catch All File Handling Issues */
   &msgLog_.println_to_stderr("SetFileLayout method failed " | &e2.ToString());
end-try;

Local string &props = MsgGetExplainText(29000, 2, "Message Not Found");
Local JavaObject &string_props = CreateJavaObject("java.lang.String", &props);
Local JavaObject &inputstream = CreateJavaObject("java.io.ByteArrayInputStream", &string_props.getBytes());
Local JavaObject &log4jprops = CreateJavaObject("java.util.Properties");
&log4jprops.load(&inputstream);

/*
Local JavaObject &log4jConfig = GetJavaClass("org.apache.log4j.PropertyConfigurator");
&log4jConfig.configure(MsgGetExplainText(29000, 2, "Message Not Found"));
Local JavaObject &log = GetJavaClass("org.apache.log4j.Logger").getLogger("EQ.AE.PS");
&log.info("hi from peoplecode");
*/
/*
Local JavaObject &logger = GetJavaClass("org.apache.log4j.Logger").getLogger("AE.Z_POPSTONIBS.LOG");
Local JavaObject &layout = CreateJavaObject("org.apache.log4j.HTMLLayout");
rem Local JavaObject &layout = CreateJavaObject("org.apache.log4j.xml.XMLLayout");
Local JavaObject &appender = CreateJavaObject("org.apache.log4j.net.SMTPAppender");

&appender.setSMTPHost("localhost");
&appender.setFrom("PeopleSoft@peoplesoft.com");
&appender.setTo("prashant.prakash1@gmail.com");
&appender.setSubject("AE Z_POPSTONIBS debug log");
&appender.setBufferSize(1);
&appender.setLayout(&layout);
&appender.activateOptions();
&logger.addAppender(&appender);
&logger.setLevel(GetJavaClass("org.apache.log4j.Level").DEBUG);
&logger.fatal("Hello from AE PeopleCode!!!");
&logger.debug("Yeh mera code hain!");
*/
/* Send Mail to Notification Email ID on Control ID page for this Process */
try
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   /* This Email ID should be provided on the Control ID page for the Process */
   rem &pEmailAddress = "prashant.prakash1@gmail.com";
   &pEmailAddress = "prashant.prakash@bearingpoint.com";
   &email.Recipients = &pEmailAddress;
   /* Retrieve Subject from Message Catalog */
   &email.Subject = "The Process Z_POPSTONIBS completed with PI " | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value;
   /* Add additional text in the email body from Message Catalog */
   &txt1 = "The Error File generated has been attached";
   &email.Text = &txt1 | Char(13);
   
   /* Add the Error File as an attachment and email it to the Email ID provided on the Control ID Page */
   &email.AddAttachment(&ErrFile_, %FilePath_Absolute, &ErrSub_, "", "", "");
   If FileExists(&ErrFile_, %FilePath_Absolute) Then
      Local integer &rcEmail;
      &msgLog_.println_to_stdout("Sending Email to: " | &pEmailAddress);
      &rcEmail = &email.Send();
      If &rcEmail <> 1 Then
         /* error processing */
         &msgLog_.println_to_stderr("Report could not be emailed to: " | &pEmailAddress);
      End-If;
   Else
      &msgLog_.println_to_stderr("File does not exist in: " | &ErrFile_);
   End-If;
catch Exception &sendmail_
   &msgLog_.println_to_stderr("Unable to send mail for : " | &ErrFile_);
end-try;


REM ***************************************************************;
REM * EQREM-(Used to send mail to the respective user / group)	   *
REM * Developer: BE								   				   *
REM * Created Date: 10/07/2008									   *
REM *															   *
REM * Description: 	This PeopleCode will be used by all EQ Custom  *
REM *               Interfaces for sending the file to the user.   *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* Import Notification Classes for Generic Templates */
import PT_WF_NOTIFICATION:*;

class EQ_MAIL
   method EQ_MAIL();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMail(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   method NotifyError(&fileName As string, &PROCESS_INSTANCE As string);
end-class;

method EQ_MAIL
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMail
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   Local integer &rcEmail;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   End-If;
   Return &rcEmail;
end-method;

method NotifyError
   /+ &fileName as String, +/
   /+ &PROCESS_INSTANCE as String +/
   
   Local array of string &aryValues;
   Local array of PT_WF_NOTIFICATION:NotificationAddress &mynotifyto;
   Local PT_WF_NOTIFICATION:NotificationAddress &mynotifyaddress;
   Local PT_WF_NOTIFICATION:Notification &mynotification;
   Local PT_WF_NOTIFICATION:NotificationTemplate &myNotifyTemplate;
   
   &mynotifyto = CreateArrayRept(&mynotifyaddress, 0);
   Local string &emailid = "prashant.prakash@bearingpoint.com";
   &mynotifyaddress = create PT_WF_NOTIFICATION:NotificationAddress(%UserId, "", %Language, &emailid, "Email");
   &mynotifyto.Push(&mynotifyaddress);
   &myNotifyTemplate = create PT_WF_NOTIFICATION:NotificationTemplate("", "", "Z_RMA_DATA_ERR_1", "G");
   
   
   /* Populate an array to contain the values needed by the template */
   &aryValues = CreateArrayRept("", 0);
   /* Push Variables as per the Template (InOrder) */
   &aryValues.Push(&fileName);
   &aryValues.Push(&PROCESS_INSTANCE);
   rem &aryValues.Push(GetErrorQueryURL());
   &aryValues.Push(&emailid);
   
   Local string &xmlVars = &myNotifyTemplate.SetupGenericVars(&aryValues);
   Local boolean &flg = &myNotifyTemplate.GetAndExpandTemplate(%Language, &xmlVars);
   /* At this point, the &mynotifytemplate should have every value resolved */
   &mynotification = create PT_WF_NOTIFICATION:Notification("Z_MAIL_ADMIN", %Datetime, %Language);
   &mynotification.NotifyTo = &mynotifyto;
   &mynotification.Subject = &myNotifyTemplate.Subject;
   &mynotification.Message = &myNotifyTemplate.Text;
   &mynotification.Send();
   
end-method;

REM ***************************************************************;
REM * EQREM-(Used to send mail to the respective user / group)	   *
REM * Developer: BE								   				   *
REM * Created Date: 10/07/2008									   *
REM *															   *
REM * Description: 	This PeopleCode will be used by all EQ Custom  *
REM *               Interfaces for sending the file to the user.   *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* Import Notification Classes for Generic Templates */
import PT_WF_NOTIFICATION:*;

class EQ_MAIL
   method EQ_MAIL();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMail(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   
end-class;

method EQ_MAIL
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMail
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   Local integer &rcEmail;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   &htmlPart.Text = &emailBody;
   &htmlPart.ContentType = "text/html";
   &multiPart.AddBodyPart(&htmlPart);
   &email.MultiPart = &multiPart;
   /* Add the Error File as an Attachment */
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   End-If;
   Return &rcEmail;
end-method;


/* Import EQ Custom App Package for Logging */
import Z_EQ_LOG:*;
/* Import the class EQ_FILENAMES - This class is used to get the file names
	which are setup using the Control ID page */
import Z_EQ_INTERFACE:*;

/* Create Class Object for Logging */
Local Z_EQ_LOG:EQ_LOG &msgLog_ = create Z_EQ_LOG:EQ_LOG();
/* Creating an Object for the EQ_CONTROLID_INFO class */
Local Z_EQ_INTERFACE:EQ_CONTROLID_INFO &objEQFileName;

/*	Creating an Object for the EQ_MAIL class*/
Local Z_EQ_INTERFACE:EQ_MAIL &objMail;

/* Instantiate the Object with the default constructor */
&objEQFileName = create Z_EQ_INTERFACE:EQ_CONTROLID_INFO();
/* Create object to send mail */
&objMail = create Z_EQ_INTERFACE:EQ_MAIL();

rem *****************************************************************;
rem * PeopleCode to Export Data                                     *;
rem *****************************************************************;
Local File &OutboundFILE, &OutboundFILE1;
Local File &LogFILE, &ErrorFILE;
Local string &ErrFile_, &FileDir_, &strSlash, &pEmailAddress, &txt1;
Local string &OutboundFileName, &OutboundFileName1, &ErrSub_;
Local string &LogFileName, &ErrorFileName;
Local Record &REC1, &REC1_;
Local SQL &SQL1, &SQL1_;
Local Rowset &RS1, &RS2, &RS1_;
Local integer &M, &iTempPos;
Local number &TotalCount, &TotalErrorCount;
<*
/* Retrieve File Information for SHIPTO FILE */
&msgLog_.println_to_stdout("SHIPTO_TBL Export");
&msgLog_.println_to_stdout(" ");
/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value, &FileDir_);
&ErrSub_ = "AE_Z_POPSTONIBS_" | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value | ".err";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&iTempPos = Find("\", &FileDir_);
If &iTempPos = 0 Then
   &iTempPos = Find("/", &FileDir_);
   &strSlash = "/";
Else
   &strSlash = "\";
End-If;
&ErrFile_ = &FileDir_ | &strSlash | &ErrSub_;
&msgLog_.println_to_stdout(&ErrFile_);
/* redirect stderr */
&msgLog_.redirect_stderr(&ErrFile_);
&msgLog_.println_to_stderr("=============================================");
&msgLog_.println_to_stderr("PSPO to NIBS Ship-To File ID (PO-INT-OUT-013)");
&msgLog_.println_to_stderr("=============================================");
&msgLog_.println_to_stderr("RUN DATE TIME " | %Datetime);
&msgLog_.println_to_stderr("INT_PO_OUT_013 --> Error Log:");
*>
/*	By default set the &TotalErrorCount to 0*/
&TotalErrorCount = 0;
&OperatorID = %OperatorId;
&RunControlID = Z_PO_P_NIBS_AET.RUN_CNTL_ID.Value;
/*	001 - FILEID for Outbound file which is setup at the Control ID page
    002 - FILEID for Outbound file which is setup at the Control ID page
	005 - FILEID for Error file which is setup at the Control ID page
	006 - FILEID for Log file which is setup at the Control ID page*/
/* Always check whether the LOG/ERR files are accessible */
&ErrorFileName = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "005");
If &ErrorFileName <> "" Then
   &ErrorFILE = GetFile(&ErrorFileName, "w", %FilePath_Absolute);
Else
   /*	Write to Message Log*/
   MessageBox(0, "", 0, 0, "Error file is not defined on the Control ID page.");
   &TotalErrorCount = &TotalErrorCount + 1;
End-If;
&LogFileName = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "006");
If &LogFileName <> "" Then
   &LogFILE = GetFile(&LogFileName, "w", %FilePath_Absolute);
Else
   /*	Write to Error File and Message Log*/
   If &ErrorFileName <> "" Then
      MessageBox(0, "", 0, 0, "Log file is not defined on the Control ID page.");
      &ErrorFILE.WriteLine("Log file is not defined on the Control ID page.");
   End-If;
   &TotalErrorCount = &TotalErrorCount + 1;
End-If;
&LogFILE.WriteLine("******************************************************************");
&LogFILE.WriteLine("*                                                                *");
&LogFILE.WriteLine("*                 PeopleSoft PS TO NIBS OUTBOUND                 *");
&LogFILE.WriteLine("*                   Batch Process Log Report                     *");
&LogFILE.WriteLine("*                                                                *");
&LogFILE.WriteLine("******************************************************************");
&LogFILE.WriteLine("");
&LogFILE.WriteLine("       Generated On : " | %Datetime);
&LogFILE.WriteLine("       Generated By : " | &OperatorID);
&LogFILE.WriteLine("   Process Instance : " | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value);
&LogFILE.WriteLine("     Run Control ID : " | &RunControlID);
&LogFILE.WriteLine("         Control ID : " | Z_PO_P_NIBS_AET.CONTROL_ID.Value);
&LogFILE.WriteLine("");
&LogFILE.WriteLine("******************************************************************");
&OutboundFileName = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "001");
<*
/* All GetFile(s) should be in Try Catch */
try
   &OutboundFILE = GetFile(&OutboundFileName, "w", %FilePath_Absolute);
catch Exception &GetOutFile
   &msgLog_.println_to_stderr("Output File --> 001 not defined on Control ID Page " | &GetOutFile.ToString());
end-try;

rem &FILE1 = GetFile("INT-PO-OUT-013_SHIPTO_XO.txt", "W", %FilePath_Relative);
*>
If &OutboundFileName <> "" Then
   &OutboundFILE = GetFile(&OutboundFileName, "w", %FilePath_Absolute);
Else
   /*	Write to Error and log file and exit*/
   If &ErrorFileName <> "" And
         &LogFileName <> "" Then
      &ErrorFILE.WriteLine("Output File --> 001 not defined on Control ID Page.");
      &LogFILE.WriteLine("Output File --> 001 not defined on Control ID Page.");
   End-If;
   &TotalErrorCount = &TotalErrorCount + 1;
End-If;

/* 	Checking if the Outbound File is opening*/
If &OutboundFILE.IsOpen And
      &TotalErrorCount = 0 Then
   /* Logging */
   &LogFILE.WriteLine("");
   &LogFILE.WriteLine("FIRST Outbound File name: " | &OutboundFileName);
   &LogFILE.WriteLine("File type: 001 --> Outbound File - SHIPTO");
   &LogFILE.WriteLine("");
   
   rem &LOGFILE = GetFile("INT-PO-OUT-013_SHIPTO_XO.err", "W", %FilePath_Relative);
   If &OutboundFILE.SetFileLayout(FileLayout.Z_PO_PS_NIBS) Then
      rem &LOGFILE.SetFileLayout(FileLayout.Z_PO_PS_NIBS);
      &RS1 = &OutboundFILE.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1 = &RS1(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from SHIPTO_TBL*/
      &SQL1 = GetSQL(SQL.Z_PO_SHIPTO_LOC_SQL);
      /* Write all Feched values to Output File */
      While &SQL1.Fetch(&REC1);
         &OutboundFILE.WriteRecord(&REC1);
      End-While;
      /* Close All File Objects */
      &OutboundFILE.Close();
   Else
      &LogFILE.WriteLine("Set File Layout Failed...");
   End-If;
End-If;
/* Retrieve File Information for REQUESTOR FILE */
&LogFILE.WriteLine(" ");
&OutboundFileName1 = &objEQFileName.GetFileName(Z_PO_P_NIBS_AET.PROCESS_INSTANCE, Z_PO_P_NIBS_AET.CONTROL_ID, "002");
/* OutBound File 2 --> REQUESTOR_TBL */
<*
/* All getFile(s) should be in Try Catch */
try
   &OutboundFILE1 = GetFile(&OutboundFileName1, "w", %FilePath_Absolute);
catch Exception &GetOutFile_
   &msgLog_.println_to_stderr("Output File --> 002 not defined on Control ID Page " | &GetOutFile_.ToString());
end-try;
*>
If &OutboundFileName1 <> "" Then
   &OutboundFILE1 = GetFile(&OutboundFileName1, "w", %FilePath_Absolute);
Else
   /*	Write to Error and log file and exit*/
   If &ErrorFileName <> "" And
         &LogFileName <> "" Then
      &ErrorFILE.WriteLine("Output File --> 002 not defined on Control ID Page.");
      &LogFILE.WriteLine("Output File --> 002 not defined on Control ID Page.");
   End-If;
   &TotalErrorCount = &TotalErrorCount + 1;
End-If;
&LogFILE.WriteLine(" ");
&LogFILE.WriteLine("SECOND Outbound File name: " | &OutboundFileName1);
&LogFILE.WriteLine("File type: 002 --> Outbound File - REQUESTOR");
&LogFILE.WriteLine(" ");

If &OutboundFILE1.IsOpen And
      &TotalErrorCount = 0 Then
   If &OutboundFILE1.SetFileLayout(FileLayout.Z_PO_PS_NIBS) Then
      rem &LOGFILE1.SetFileLayout(FileLayout.Z_PO_PS_NIBS);
      &RS1_ = &OutboundFILE1.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1_ = &RS1_(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from REQUESTOR_TBL*/
      &SQL1_ = GetSQL(SQL.Z_PO_SHIPTO_SQL);
      /* Write all Feched values to Output File */
      While &SQL1_.Fetch(&REC1_);
         &OutboundFILE1.WriteRecord(&REC1_);
      End-While;
      /* Close All File Objects */
      &OutboundFILE1.Close();
   Else
      &LogFILE.WriteLine("Set File Layout Failed...");
   End-If;
End-If;

/* 	Close the error file so that we can send the file to the user / group*/
If &ErrorFileName <> "" Then
   &ErrorFILE.WriteLine("Testing Send mail...");
   &ErrorFILE.Close();
End-If;

/* Send Mail to Notification Email ID on Control ID page for this Process */
try
   If &TotalErrorCount >= 0 Then
      &LogFILE.WriteLine("");
      &LogFILE.WriteLine("***********************************");
      &LogFILE.WriteLine("Errors while processing the file ->");
      &LogFILE.WriteLine("***********************************");
      Local integer &rcEmail;
      /* This Email ID should be provided on the Control ID page for the Process */
      &pEmailAddress = &objEQFileName.GetEMailID(Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value, Z_PO_P_NIBS_AET.CONTROL_ID.Value);
      /* Retrieve Subject from Message Catalog */
      Local string &Subject = "The Process Z_POPSTONIBS completed with PI " | Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value;
      /* Add additional text in the email body from Message Catalog */
      &txt1 = "The Error File generated has been attached";
      Local string &email = &txt1 | Char(13);
      &LogFILE.WriteLine("Sending Email to: " | &pEmailAddress);
      Local string &fileName = &objEQFileName.GetFileNameOnly(Z_PO_P_NIBS_AET.PROCESS_INST_STG.Value, Z_PO_P_NIBS_AET.CONTROL_ID.Value, "005");
      &rcEmail = &objMail.SendMail(&pEmailAddress, &Subject, &ErrorFileName, &fileName, &email);
      If &rcEmail <> 1 Then
         /* error processing */
         &LogFILE.WriteLine("Report could not be emailed to: " | &pEmailAddress);
      Else
         &LogFILE.WriteLine("Email successfully sent to : " | &pEmailAddress);
      End-If;
   Else
      &LogFILE.WriteLine("Error File does not exist : " | &ErrorFileName);
   End-If;
catch Exception &sendmail_
   &LogFILE.WriteLine("Unable to send mail for : " | &sendmail_.ToString());
end-try;

REM ***************************************************************;
REM * EQREM-(Used to send mail to the respective user / group)	   *
REM * Developer: BE								   				   *
REM * Created Date: 10/07/2008									   *
REM *															   *
REM * Description: 	This PeopleCode will be used by all EQ Custom  *
REM *               Interfaces for sending the file to the user.   *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* Import SCM_UTILITIES */
import SCM_UTILITIES:Portal:*;

class EQ_MAIL
   method EQ_MAIL();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMail(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   
end-class;

method EQ_MAIL
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMail
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   Local integer &rcEmail;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   Local string &sURL, &nextLine, &endNextLine;
   Local SCM_UTILITIES:Portal:portalURL &objPortalURL;
   If &objPortalURL = Null Then
      &objPortalURL = create SCM_UTILITIES:Portal:portalURL();
   End-If;
   /* Formulate the URL for the Process Monitor Page */
   Local string &sMenu, &sComponent, &sPage, &sEmailFooter;
   Local array of any &arrayKeys;
   &sMenu = "PROCESSMONITOR";
   &sComponent = "PROCESSMONITOR";
   &sPage = "PMN_PRCSLIST";
   &sURL = &objPortalURL.GenerateComponentPortalURL(&sMenu, &sComponent, &sPage, %Action_UpdateDisplay, &arrayKeys);
   &sURL = EncodeURL(&sURL);
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   &nextLine = "<br>";
   &sEmailFooter = MsgGetExplainText(29000, 3, "Message Not Found", &fileName);
   &htmlPart.Text = &emailBody | &nextLine | &nextLine | &sURL | &nextLine | &nextLine | &sEmailFooter;
   &htmlPart.ContentType = "text/html";
   &multiPart.AddBodyPart(&htmlPart);
   &email.MultiPart = &multiPart;
   /* Add the Error File as an Attachment */
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   End-If;
   Return &rcEmail;
end-method;


%Sql(PCCOMMON$COUNTCOUNTS,INTFC_PROJ_RES)


/** Before here you would have your Query code........then you would invoke the email App package **/

Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
&FromAddress = "someone@somewhere.com";
/* &ToList = "email@email.com,emaili@email.com"; */

&email.From = &FromAddress;
&email.Recipients = &sEmailList;
&email.Subject = &sEmailSubject;

Local PT_MCF_MAIL:MCFBodyPart &text = create PT_MCF_MAIL:MCFBodyPart();
&text.Text = &sEmailBody;

Local PT_MCF_MAIL:MCFBodyPart &attachFile = create PT_MCF_MAIL:MCFBodyPart();
&attachFile.SetAttachmentContent(&sOutputGetFilePath, %FilePath_Absolute, &sOutputAttachFileName, " ", "", "");

Local PT_MCF_MAIL:MCFMultipart &mp = create PT_MCF_MAIL:MCFMultipart();
&mp.AddBodyPart(&text);
&mp.AddBodyPart(&attachFile);

&email.MultiPart = &mp;

&email.ContentType = "text/html";

Local integer &res = &email.Send();

Local boolean &done;

Evaluate &resp
When %ObEmail_Delivered
/* every thing ok */
&done = True;
Break;

When %ObEmail_NotDelivered
/*-- Check &email.InvalidAddresses, &email.ValidSentAddresses
and &email.ValidUnsentAddresses */
&done = False;
Break;

When %ObEmail_PartiallyDelivered
/* Check &email.InvalidAddresses, &email.ValidSentAddresses
and &email.ValidUnsentAddresses; */
&done = True;
Break;

When %ObEmail_FailedBeforeSending
/* Get the Message Set Number, message number;
Or just get the formatted messages from &email.ErrorDescription,
&email.ErrorDetails;*/

&done = False;
Break;
End-Evaluate;

&oQuery.Close(); /*** Close Query Object ***/

End-If;

/*ASU_HRM0058 9/1/2008 rdavies3
Limited code to custom test page*/

/*** ASU_HRM0058 9/30/2008 J.McMahon ***/
/*** Added XMLP rowset logic, and email logic ***/


import PSXP_RPTDEFNMANAGER:*;
import PSXP_XMLGEN:*;
import PSXP_ENGINE:*;
import PT_MCF_MAIL:*;

Declare Function GetFilePathServer PeopleCode ASU_FILEPATH_WK.ECFILELISTPATH FieldFormula;


/*Create an email object by setting individual parameters*/
Local PT_MCF_MAIL:MCFOutboundEmail &eMail = create PT_MCF_MAIL:MCFOutboundEmail();
Local Rowset &ASU_NOA_Letter_Rowset, &ASU_NOA_Empl_Rowset;
Local Row &person_row;
Local Record &person_rec, &derived_pb;

/*** Fetch Value from page ***/
&Email_to_from_page = FetchValue(Record.ASU_NOA_EE_HIST, 1, ASU_NOA_EE_HIST.EMAILID);
&Fiscal_Year = FetchValue(Record.ASU_NOA_EE_HIST, 1, ASU_NOA_EE_HIST.FISCAL_YEAR);
&Emplid = FetchValue(Record.ASU_NOA_EE_HIST, 1, ASU_NOA_EE_HIST.EMPLID);
&Empl_Rcd = FetchValue(Record.ASU_NOA_EE_HIST, 1, ASU_NOA_EE_HIST.EMPL_RCD);


/*ASU_HRM0058 9/1/2008 rdavies3
NOA save and process code*/
&ASU_NOA_Empl_Rowset = GetLevel0()(1).GetRowset(Scroll.ASU_NOA_EE_HIST);
&derived_pb = GetRecord(Record.ASU_DERIVED_HR);
&person_row = &ASU_NOA_Empl_Rowset(1);
&person_rec = &person_row.GetRecord(Record.ASU_NOA_EE_HIST);
&ASU_NOA_Letter_Rowset = &person_row.GetRowset(Scroll.ASU_NOA_LTRHIST);
&person_rec.LASTUPDOPRID.Value = %UserId;
&person_rec.LAST_ACTIVITY_TIME.Value = %Datetime;

If &person_rec.EMPLID.Value = %EmployeeId Then
&person_rec.COMPLETED.Value = "Y";
&person_rec.APPROVER_OPRID.Value = %UserId;
&person_rec.APPROVEDTTM.Value = %Datetime;
&derived_pb.ASU_HR_PB_TEST_EMA.Label = "Reprint and Email";
DoSave();
CommitWork();
/* do reprint*/
Else
DoSave();
CommitWork();
End-If;



GetFilePathServer(&outFilePath, &inFilePath, %DbName);


&sRptDefn = "ASUHRNOA";
&sTemplateId = "ASUHRNOA_1";
&sLangCode = "";
&dtAsOfDate = %Date;
&sOutputFmt = "PDF";
&RptOutputDir = &outFilePath | "HR/";


/*Set-Up Report*/
&ReportDef = create PSXP_RPTDEFNMANAGER:ReportDefn(&sRptDefn);
&ReportDef.Get();
&ReportDef.SetRuntimeDataXMLFile(&sOutputFile);

&ReportDef.OutDestination = &RptOutputDir;

/*Create Rowset*/
&rs = &ASU_NOA_Empl_Rowset;

/*Fill Rowset*/
rem &rs.FILL("WHERE FILL.FISCAL_YEAR = :1 and FILL.EMPLID = :2 and FILL.EMPL_RCD = :3", &Fiscal_Year, &Emplid, &Empl_Rcd);

/*Create Schema*/
&rds = create PSXP_XMLGEN:RowSetDS(); /*package method*/
&mySchema = &rds.GetXSDSchema(&rs);
&f1 = GetFile(&RptOutputDir | "ASU_HR_NOA.xsd", "W", %FilePath_Absolute);
&f1.WriteLine(&mySchema);
&f1.Close();


/*Create Sample XML File*/
&myXMLFile = &rds.GetXMLData(&rs, &RptOutputDir | "ASU_HR_NOA.xsd");
&f2 = GetFile(&RptOutputDir | "ASU_HR_NOA.xml", "W", %FilePath_Absolute);
&f2.WriteLine(&myXMLFile);
&f2.Close();

/* output format */
&sOutputFormat = &sOutputFmt;

/*Provide a Data Source for the Report*/
&ReportDef.SetRuntimeDataRowset(&rs);


/*Generate the Report*/
&ReportDef.ProcessReport(&sTemplateId, %Language_User, %Date, &sOutputFormat);

/*Publish the Report*/
&ReportDef.Publish("", &RptOutputDir, "XMLP", 9999999);
rem &sFileExt = GetFileExtension(&sOutputFormat);


/*Send Mail*/
rem &ToList = "Jeromy.McMahon@asu.edu";
&ToList = &Email_to_from_page;
&FromList = "support@asu.edu";
&ReplyToList = "";
&Subject = "NOA (Notice of Appointment) Letter Attached";
&eMail.Recipients = &ToList; /*comma separeted list of email addresses*/
&eMail.From = &FromList; /*from email address*/
&eMail.ReplyTo = &ReplyToList; /*in case the reply is to be sent to a different email address*/
&eMail.Subject = &Subject;

/*Body for multiple parts*/
Local string &plain_text = "Attached you will find your copy of the Notice of Appointment letter.";
Local PT_MCF_MAIL:MCFBodyPart &text = create PT_MCF_MAIL:MCFBodyPart();
&text.Text = &plain_text;

Local PT_MCF_MAIL:MCFBodyPart &attach = create PT_MCF_MAIL:MCFBodyPart();

&attach.SetAttachmentContent(&RptOutputDir | "RptInst\" | "ASUHRNOA.pdf", %FilePath_Absolute, "ASUHRNOA.pdf", "ASUHRNOA", "", "");

Local PT_MCF_MAIL:MCFMultipart &mp = create PT_MCF_MAIL:MCFMultipart();
&mp.AddBodyPart(&text);
&mp.AddBodyPart(&attach);
&eMail.MultiPart = &mp;

Local integer &resp = &eMail.Send();
/*now check &resp for the result*/
Local boolean &done;
Evaluate &resp
When %ObEmail_Delivered
/*every thing ok*/
&done = True;
Break;
When %ObEmail_NotDelivered
/*check &eMail.InvalidAddresses, &eMail.ValidSentAddresses and &eMail.ValidUnsentAddresses*/
&done = False;
Break;
When %ObEmail_PartiallyDelivered
/*check &eMail.InvalidAddresses, &eMail.ValidSentAddresses and &eMail.ValidUnsentAddresses*/
&done = True;
Break;
When %ObEmail_FailedBeforeSending
/*get the formatted messages from &eMail.ErrorDescription, &eMail.ErrorDetails*/
&done = False;
Break;
End-Evaluate;

CommitWork();

/* Retrieve the Outpath Directory with FileName */
/* FileName will always be defaulted to FTP_Exchange_Rate.<yyyymmdd>.txt */
&OutboundFileName = &ANZStateRec_.OUTPUT_PATH.Value;
/* All GetFile(s) should be in Try Catch */
try
   &OutboundFILE = GetFile(&OutboundFileName, "w", %FilePath_Absolute);
catch Exception &GetOutFile
   &msgLog_.println_to_stderr("Output File not defined on Run Control Page " | &GetOutFile.ToString());
end-try;

/* 	Checking if the Outbound File is opening*/
If &OutboundFILE.IsOpen Then
   If &OutboundFILE.SetFileLayout(FileLayout.ANZ_PSGL2FTP_EXCHNG_RT_EXTRACT) Then
      &RS1 = &OutboundFILE.CreateRowset();
      rem &RS = CreateRowset(Record.Z_PO_SHIPTO_SQL);
      &REC1 = &RS1(1).Z_PO_SHIPTO_SQL;
      /* Fetch the SQL to retrieve info from SHIPTO_TBL*/
      &SQL1 = GetSQL(SQL.Z_PO_SHIPTO_LOC_SQL);
      /* Write all Feched values to Output File */
      While &SQL1.Fetch(&REC1);
         &OutboundFILE.WriteRecord(&REC1);
      End-While;
      /* Close All File Objects */
      &OutboundFILE.Close();
   Else
      &LogFILE.WriteLine("Set File Layout Failed...");
   End-If;
End-If;

rem Need to stop the user from selecting the same currency in different Request IDs for the same Run Control ID;

Local Rowset &ANZRSLevel0_, &ANZRSLevel1_, &ANZRSLevel2_;
Local Row &ANZRowLevel1_, &ANZRowLevel2_;
Local string &ANZCurrencyCD_;
Local number &ANZcount, &ANZcount2_;

&ANZRSLevel0_ = GetLevel0();
&ANZRowLevel1_ = &ANZRSLevel0_.GetRow(1);
&ANZRSLevel1_ = &ANZRowLevel1_.GetRowset(Scroll.RUN_ANZ_EXRTFTP);

rem Extracting Currency Code ;
For &ANZcount = 1 To &ANZRSLevel1_.ActiveRowCount
   &ANZRSLevel2_ = &ANZRSLevel1_.GetRow(&ANZcount).GetRowset(Scroll.RUN_ANZ_EXT1FTP);
   For &ANZcount2_ = 1 To &ANZRSLevel2_.ActiveRowCount
      rem This will fetch all the currency codes in all the Request IDs for that Run Control ID;
      &ANZCurrencyCD_ = &ANZRSLevel2_.GetRow(&ANZcount2_).RUN_ANZ_EXT1FTP.CURRENCY_CD.Value;
   End-For;
End-For;


/*************************************************************************/
/* WR#       		 Date        Developer        			Notes   	 */
/* ANZWR0XXXX    17/02/2009      prakasp1  		Generate an Exchange Rate*/
/*												Extract for FTP          */
/*************************************************************************/

/* Begin ANZWR0XXXX */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();

/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_EXRTFTP_AET);
Local Rowset &ANZFileRowset_;
Local Record &ANZHDRRecord_, &ANZTrailerRec_, &ANZStagingRec_;
Local File &ANZExchngExtractFile_;
Local number &ANZDetailCount_, &ANZRecordCountLen_;
Local SQL &ANZTransactionSQL_;

&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("Writing Extract File for Request ID " | &ANZStateRec_.REQUEST_ID.Value);
/* Retrieve File Information */
If (&ANZStateRec_.OVERRIDE_FLAG.Value = "N") Then
   Local string &ANZFilePath_ = Substitute(&ANZStateRec_.OUTPUT_PATH.Value, ".txt", "_" | &ANZStateRec_.REQUEST_ID.Value | ".txt");
   &ANZExchngExtractFile_ = GetFile(&ANZFilePath_, "W", %FilePath_Absolute);
Else
   &ANZFilePath_ = Substitute(&ANZStateRec_.FILENAME.Value, ".txt", "_" | &ANZStateRec_.REQUEST_ID.Value | ".txt");
   &ANZExchngExtractFile_ = GetFile(&ANZStateRec_.OUTPUT_PATH.Value | &ANZFilePath_, "W", %FilePath_Absolute);
End-If;
/* Write the Header Record */

If &ANZExchngExtractFile_.IsOpen Then
   If &ANZExchngExtractFile_.SetFileLayout(FileLayout.ANZ_PSGL2FTP_EXCHNG_RT_EXTRACT) Then
      &ANZFileRowset_ = &ANZExchngExtractFile_.CreateRowset();
      &ANZHDRRecord_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_HEADER);
      &ANZHDRRecord_.GetField(Field.ANZ_PROCESS_DATE).Value = Substitute(&ANZStateRec_.AS_OF_DATE.Value, "-", "");
      &ANZHDRRecord_.GetField(Field.ANZ_FILE_ID).Value = &ANZStateRec_.ANZ_SUB_SYSTEM.Value;
      &ANZExchngExtractFile_.WriteRecord(&ANZHDRRecord_);
   End-If;
Else
   &msgLog_.println_to_stderr("******************************************************************");
   &msgLog_.println_to_stderr("File " | &ANZStateRec_.OUTPUT_PATH.Value | " is not accessible");
End-If;
/* Write the Transaction Record */
&ANZTransactionRec_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_TRANSACTION);
&ANZStagingRec_ = CreateRecord(Record.ANZ_EXCHFTP_STG);
rem Local string &ANZSQLString1_ = "%SelectAll(:1) WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = (:2) and RUN_CNTL_ID = (:3) AND REQUEST_ID = (:4))";
rem &ANZTransactionSQL_ = CreateSQL("%SelectAll(:1) WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = (:2) and RUN_CNTL_ID = (:3) AND REQUEST_ID = (:4))", &ANZStagingRec_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
&ANZTransactionSQL_ = CreateSQL("%SelectAll(:1) WHERE REQUEST_ID = :2", &ANZStagingRec_, &ANZStateRec_.REQUEST_ID.Value);
/* Either open/close explicitly or use ReuseCursor */
&ANZTransactionSQL_.ReuseCursor = True;
&ANZTransactionSQL_.TraceName = "WriteExtract.TraceName.SQL";
/* Verify the SQL Status before Binding/Executing */
Evaluate &ANZTransactionSQL_.Status
When = %SQLStatus_OK
   &msgLog_.println_to_stdout("SQL Status OK -> Writing Transaction Record");
   /* Its a must to Bind/Execute the variables before Fetching */
   rem &ANZTransactionSQL_.Execute(&ANZStagingRec_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   &ANZTransactionSQL_.Execute(&ANZStagingRec_, &ANZStateRec_.REQUEST_ID.Value);
   While &ANZTransactionSQL_.Fetch(&ANZStagingRec_)
      &ANZTransactionRec_.GetField(Field.EFFDT).Value = Substitute(&ANZStagingRec_.GetField(Field.EFFDT).Value, "-", "");
      &ANZTransactionRec_.GetField(Field.RT_TYPE).Value = &ANZStagingRec_.GetField(Field.RT_TYPE).Value;
      &ANZTransactionRec_.GetField(Field.FROM_CUR).Value = &ANZStagingRec_.GetField(Field.FROM_CUR).Value;
      &ANZTransactionRec_.GetField(Field.TO_CUR).Value = &ANZStagingRec_.GetField(Field.TO_CUR).Value;
      &ANZTransactionRec_.GetField(Field.CUR_EXCHNG_RT).Value = &ANZStagingRec_.GetField(Field.CUR_EXCHNG_RT).Value;
      &ANZTransactionRec_.GetField(Field.ANZ_MTDAVG_EX_RT).Value = &ANZStagingRec_.GetField(Field.ANZ_MTDAVG_EX_RT).Value;
      &ANZExchngExtractFile_.WriteRecord(&ANZTransactionRec_);
   End-While;
   Break;
When = %SQLStatus_NotFound
   &msgLog_.println_to_stderr("Invalid SQL Status for Transaction Record");
   Error ("LINE Not Found");
   Break;
When = %SQLStatus_Duplicate
   &msgLog_.println_to_stderr("Duplicate Line");
   Error ("DUPLICATE LINE");
   Break;
End-Evaluate;
/* Write the Trailer Record */
&ANZTrailerRec_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_TRAILER);

rem Local string &ANZCountSQL_ = ExpandSqlBinds("SELECT COUNT(*) FROM PS_ANZ_EXCHFTP_STG WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = :1 and RUN_CNTL_ID = :2 AND REQUEST_ID = :3)", &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value, &ANZLineCount_);
Local string &ANZCountSQL_ = ExpandSqlBinds("SELECT COUNT(*) FROM PS_ANZ_EXCHFTP_STG WHERE REQUEST_ID = :1", &ANZStateRec_.REQUEST_ID.Value, &ANZLineCount_);
rem Local SQL &ANZCountRows_ = CreateSQL(&ANZCountSQL_, &ANZLineCount_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
Local SQL &ANZCountRows_ = CreateSQL(&ANZCountSQL_, &ANZLineCount_, &ANZStateRec_.REQUEST_ID.Value);
&ANZCountRows_.ReuseCursor = True;
/* Retrieve the Count of rows written */
rem &ANZCountRows_.Execute(&ANZLineCount_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
&ANZCountRows_.Execute(&ANZLineCount_, &ANZStateRec_.REQUEST_ID.Value);
While &ANZCountRows_.Fetch(&ANZLineCount_)
   &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value = &ANZLineCount_;
   &ANZExchngExtractFile_.WriteRecord(&ANZTrailerRec_);
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("*                                                                *");
   &msgLog_.println_to_stdout("*                     Run Control Parameters                     *");
   &msgLog_.println_to_stdout("*                                                                *");
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("");
   &msgLog_.println_to_stdout("       Generated On : " | %Datetime);
   &msgLog_.println_to_stdout("     Run Control ID : " | &ANZStateRec_.RUN_CNTL_ID.Value);
   &msgLog_.println_to_stdout("         Request ID : " | &ANZStateRec_.REQUEST_ID.Value);
   &msgLog_.println_to_stdout("        Output File : " | &ANZExchngExtractFile_.Name);
   &msgLog_.println_to_stdout("         Total Rows : " | &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value);
   &msgLog_.println_to_stdout("");
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("");
   rem &msgLog_.println_to_stdout("Number of rows written to file " | &ANZExchngExtractFile_.Name | " for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " are " | &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value);
   rem &msgLog_.println_to_stdout("******************************************************************");
End-While;
&ANZExchngExtractFile_.Close();

/* End ANZWR0XXXX */

%SelectInit(OPRID, RUN_CNTL_ID, REQUEST_ID, AS_OF_DATE, ANZ_SUB_SYSTEM, RT_RATE_INDEX, RT_TYPE, TERM, OVERRIDE_FLAG, OUTPUT_PATH, FILENAME) 
 SELECT OPRID 
 , RUN_CNTL_ID 
 , REQUEST_ID 
 , AS_OF_DATE 
 , ANZ_SUB_SYSTEM 
 , RT_RATE_INDEX 
 , RT_TYPE 
 , TERM 
 , OVERRIDE_FLAG 
 , OUTPUT_PATH 
 , FILENAME 
  FROM PS_RUN_ANZ_EXRTFTP 
 WHERE OPRID = %Bind(OPRID) 
   AND RUN_CNTL_ID = %RunControl 
   AND (PROCESS_FREQUENCY = 'O' 
    OR PROCESS_FREQUENCY = 'A') 
  ORDER BY REQUEST_ID

  /*************************************************************************/
/* WR#       		 Date        Developer        			Notes   	 */
/* ANZWR0XXXX    17/02/2009      prakasp1  		Generate an Exchange Rate*/
/*												Extract for FTP          */
/*************************************************************************/

/* Begin ANZWR0XXXX */
import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_EXRTFTP_AET);
/*	By default set the &TotalErrorCount to 0*/
&TotalErrorCount = 0;
&ANZOperatorID_ = %OperatorId;
&ANZRunControlID_ = &ANZStateRec_.RUN_CNTL_ID.Value;
&ANZPrcsInstance_ = &ANZStateRec_.PROCESS_INSTANCE.Value;

/* All Batch Servers do not have the mail and activation jar files in their class path.
   They are not part of standard install. PSADMIN needs to put these files 
*/
/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &ANZPrcsInstance_, &FileDir_);
&ErrSub_ = "AE_ANZ_EXRT_FTP_" | &ANZPrcsInstance_ | ".txt";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&iTempPos = Find("\", &FileDir_);
If &iTempPos = 0 Then
   &iTempPos = Find("/", &FileDir_);
   &strSlash = "/";
Else
   &strSlash = "\";
End-If;
&ErrFile_ = &FileDir_ | &strSlash | &ErrSub_;
/* redirect stdout */
&msgLog_.redirect_stdout(&ErrFile_);
/* Generate Batch Log Report */
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("*                 PeopleSoft PS TO FTP OUTBOUND                  *");
&msgLog_.println_to_stdout("*                   Batch Process Log Report                     *");
&msgLog_.println_to_stdout("*                     Exchange Rate Extract                      *");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("       Generated On : " | %Datetime);
&msgLog_.println_to_stdout("       Generated By : " | &ANZOperatorID_);
&msgLog_.println_to_stdout("   Process Instance : " | &ANZPrcsInstance_);
&msgLog_.println_to_stdout("     Run Control ID : " | &ANZRunControlID_);
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");

/* End ANZWR0XXXX */

%Select(OPRID, RUN_CNTL_ID, REQUEST_ID, AS_OF_DATE, ANZ_SUB_SYSTEM, RT_RATE_INDEX, RT_TYPE, TERM, OVERRIDE_FLAG, OUTPUT_PATH, FILENAME, CURRENCY_CD) 
 SELECT EXRT.OPRID 
 , EXRT.RUN_CNTL_ID 
 , EXRT.REQUEST_ID 
 , EXRT.AS_OF_DATE 
 , EXRT.ANZ_SUB_SYSTEM 
 , EXRT.RT_RATE_INDEX 
 , EXRT.RT_TYPE 
 , EXRT.TERM 
 , EXRT.OVERRIDE_FLAG 
 , EXRT.OUTPUT_PATH 
 , EXRT.FILENAME 
 , FTP.CURRENCY_CD 
  FROM PS_RUN_ANZ_EXRTFTP EXRT 
  , PS_RUN_ANZ_EXT1FTP FTP 
 WHERE EXRT.OPRID = %Bind(OPRID) 
   AND EXRT.RUN_CNTL_ID = %RunControl 
   AND (PROCESS_FREQUENCY = 'O' 
    OR PROCESS_FREQUENCY = 'A') 
   AND EXRT.OPRID = FTP.OPRID 
   AND EXRT.RUN_CNTL_ID = FTP.RUN_CNTL_ID 
   AND EXRT.REQUEST_ID = FTP.REQUEST_ID 
   AND EXRT.REQUEST_ID > %Bind(REQUEST_ID) 
  ORDER BY EXRT.REQUEST_ID

  /*************************************************************************/
/* WR#       		 Date        Developer        			Notes   	 */
/* ANZWR0XXXX    17/02/2009      prakasp1  		Generate an Exchange Rate*/
/*												Extract for FTP          */
/*************************************************************************/

/* Begin ANZWR0XXXX */
import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
Local File &OutboundFILE;
Local string &OutboundFileName;
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_EXRTFTP_AET);

/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", ANZ_EXRTFTP_AET.PROCESS_INST_STG.Value, &FileDir_);
&ErrSub_ = "AE_ANZ_EXRT_FTP_" | ANZ_EXRTFTP_AET.PROCESS_INST_STG.Value | ".log";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&iTempPos = Find("\", &FileDir_);
If &iTempPos = 0 Then
   &iTempPos = Find("/", &FileDir_);
   &strSlash = "/";
Else
   &strSlash = "\";
End-If;
&ErrFile_ = &FileDir_ | &strSlash | &ErrSub_;
rem &msgLog_.println_to_stdout(&ErrFile_);
/* redirect stderr */
&msgLog_.redirect_stderr(&ErrFile_);

/*	By default set the &TotalErrorCount to 0*/
&TotalErrorCount = 0;

&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("Running for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " and Currency Code " | &ANZStateRec_.CURRENCY_CD.Value);

/* Insert into Staging Record */

/* End ANZWR0XXXX */


INSERT INTO %Table(ANZ_EXCHFTP_STG) ( %Sql (ANZ_EXCHFTP_SQL)) 
 SELECT /*+ ORDERED INDEX(A PSART_RATE_TBL) */ %DateOut(A.EFFDT) 
 , A.RT_TYPE 
 , A.FROM_CUR 
 , A.TO_CUR 
 , %Round(%DecDiv(A.RATE_MULT,A.RATE_DIV), 8) 
 , 0 
 , %Bind(REQUEST_ID) 
  FROM PS_RT_RATE_TBL A 
 WHERE A.RT_RATE_INDEX = %Bind(RT_RATE_INDEX) 
   AND A.TERM = %Bind(TERM) 
   AND A.TO_CUR = %Bind(CURRENCY_CD) 
   AND A.RT_TYPE = %Bind(RT_TYPE) 
   AND A.EFFDT <= %Bind(AS_OF_DATE) 
   AND %EffdtCheck(RT_RATE_TBL RT, A, %CurrentDateIn)

   import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();

/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_EXRTFTP_AET);

Local number &ANZTotalRowCount_;
rem &ANZTotalRowCount_ = 0;

Local SQL &ANZStagingSQL_ = CreateSQL("SELECT FROM_CUR FROM PS_ANZ_EXCHFTP_STG WHERE TO_CUR = :1 ORDER BY FROM_CUR", &ANZStateRec_.CURRENCY_CD.Value);
&ANZStagingSQL_.ReuseCursor = True;
While &ANZStagingSQL_.Fetch(&ANZFromCUR_)
   
   Local string &ANZSQLString_ = "UPDATE %Table(ANZ_EXCHFTP_STG) SET ANZ_MTDAVG_EX_RT = (SELECT AVG(CURR_EXCH) FROM (SELECT FROM_CUR , TO_CUR , %Round(%DecDiv(RATE_MULT,RATE_DIV),4) AS CURR_EXCH , BEGIN_DT FROM PS_RT_RATE_TBL , PS_CAL_DETP_TBL WHERE RT_RATE_INDEX = :1 AND TO_CUR = :2 AND FROM_CUR = :6 AND RT_TYPE = :3 AND TERM = :4 AND EFFDT = (SELECT MAX (EFFDT) FROM PS_RT_RATE_TBL INTAB WHERE INTAB.RT_RATE_INDEX = PS_RT_RATE_TBL.RT_RATE_INDEX AND INTAB.TERM = PS_RT_RATE_TBL.TERM AND INTAB.FROM_CUR = PS_RT_RATE_TBL.FROM_CUR AND INTAB.TO_CUR =PS_RT_RATE_TBL.TO_CUR AND INTAB.RT_TYPE = PS_RT_RATE_TBL.RT_TYPE AND INTAB.EFFDT <= PS_CAL_DETP_TBL.BEGIN_DT) AND SETID ='GLOBL' AND CALENDAR_ID ='D1' AND FISCAL_YEAR =YEAR(:5) AND YEAR(BEGIN_DT)=YEAR(:5) AND MONTH(BEGIN_DT)=MONTH(:5) AND DAY(BEGIN_DT) >= 1 AND END_DT <= %CurrentDateIn) X ) WHERE FROM_CUR = :6 AND TO_CUR = :2 AND REQUEST_ID = :7";
   Local SQL &ANZUpdStagingSQL_ = CreateSQL(&ANZSQLString_, &ANZStateRec_.RT_RATE_INDEX.Value, &ANZStateRec_.CURRENCY_CD.Value, &ANZStateRec_.RT_TYPE.Value, &ANZStateRec_.TERM.Value, &ANZStateRec_.AS_OF_DATE.Value, &ANZFromCUR_, &ANZStateRec_.REQUEST_ID.Value);
   /* Try for BulkMode */
   &ANZUpdStagingSQL_.BulkMode = True;
   If &ANZUpdStagingSQL_.RowsAffected = 0 Then;
      MessageBox(0, "", 0, 0, "No Rows Updated");
   Else
      &ANZTotalRowCount_ = &ANZTotalRowCount_ + 1;
      rem MessageBox(0, "", 0, 0, "Number of Rows Updated " | &ANZUpdStagingSQL_.RowsAffected);
   End-If;
   &ANZUpdStagingSQL_.Close();
End-While;
rem MessageBox(0, "", 0, 0, "Number of Rows Updated " | &ANZUpdStagingSQL_.RowsAffected);
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("Total Number of RowsAffected for Currency " | &ANZStateRec_.CURRENCY_CD.Value | " are " | &ANZTotalRowCount_);
&ANZStagingSQL_.Close();


/*************************************************************************/
/* WR#       		 Date        Developer        			Notes   	 */
/* ANZWR07660    17/02/2009      prakasp1  		Common Logging Procedures*/
/*												for Batch Programs       */
/*************************************************************************/

/* Begin ANZWR07660 , Prashant Prakash, 17/02/2009*/


class ANZ_BATCH_LOG
   method ANZ_BATCH_LOG();
   
   method println_to_stdout(&message As string);
   method println_to_stderr(&message As string);
   rem This method may be used at the discretion of the User;
   method redirect_stdout(&fileName As string);
   rem Use the Redirect for stderr as PS by default creates an stdout for each process;
   method redirect_stderr(&fileName As string);
   
end-class;

/*
 * The Constructor takes no arguments
 */
method ANZ_BATCH_LOG
end-method;

/**
 * The println_to_stdout method is used to Print a line of text to Stdout.
 * 
 * @param 				&message  - Text to be written to Stdout.
 */
method println_to_stdout
   /+ &message as String +/
   
   try
      Local string &sMethodName = "ANZ_BATCH_LOG:println_to_stdout";
      Local JavaObject &jSystem = GetJavaClass("java.lang.System");
      Local JavaObject &jOutStream = &jSystem.out;
      Local JavaObject &jCls = GetJavaClass("java.lang.Class");
      Local JavaObject &jStringClass = &jCls.forName("java.lang.String");
      Local JavaObject &jPrintStreamCls = &jOutStream.getClass();
      Local JavaObject &jPrintlnArgTypes = CreateJavaObject("java.lang.Class[]", &jStringClass);
      
      Local JavaObject &jPrintlnMethod = &jPrintStreamCls.getDeclaredMethod("println", &jPrintlnArgTypes);
      
      &jPrintlnMethod.invoke(&jOutStream, CreateJavaObject("java.lang.Object[]", &message));
      rem ** I didn't find flushing necessary, but here is where you would flush the buffer if desired;
      rem &jOutStream.flush();
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
   
end-method;

/**
 * The println_to_stderr method is used to Print a line of text to Stderr.
 * This method should be used with a combination of redirect_stderr as PS 
 * maintains a single Stderr file for all processes.
 * @param 				&message  - Text to be written to Stdout.
 */
method println_to_stderr
   /+ &message as String +/
   
   try
      Local string &sMethodName = "ANZ_BATCH_LOG:println_to_stderr";
      Local JavaObject &jSystem = GetJavaClass("java.lang.System");
      Local JavaObject &jOutStream = &jSystem.err;
      Local JavaObject &jCls = GetJavaClass("java.lang.Class");
      Local JavaObject &jStringClass = &jCls.forName("java.lang.String");
      Local JavaObject &jPrintStreamCls = &jOutStream.getClass();
      Local JavaObject &jPrintlnArgTypes = CreateJavaObject("java.lang.Class[]", &jStringClass);
      
      Local JavaObject &jPrintlnMethod = &jPrintStreamCls.getDeclaredMethod("println", &jPrintlnArgTypes);
      
      &jPrintlnMethod.invoke(&jOutStream, CreateJavaObject("java.lang.Object[]", &message));
      rem ** I didn't find flushing necessary, but here is where you would flush the buffer if desired;
      rem &jOutStream.flush();
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
   
end-method;


/**
 * The redirect_stdout method is used to redirect a line of text to a Custom file (Not a PS File Object) for general message logs.
 * Use the this method prior to calling the println_to_stdout method.
 * 
 * @param 				&fileName  - File name of Redirected File.
 */
method redirect_stdout
   /+ &fileName as String +/
   
   try
      Local string &sMethodName = "ANZ_BATCH_LOG:redirect_stdout";
      Local JavaObject &jSystem = GetJavaClass("java.lang.System");
      Local JavaObject &jfos_out = CreateJavaObject("java.io.FileOutputStream", &fileName, True);
      Local JavaObject &jps_out = CreateJavaObject("java.io.PrintStream", &jfos_out, True);
      &jSystem.setOut(&jps_out);
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;

/**
 * The redirect_stderr method is used to redirect a line of text to a Custom file (Not a PS File Object) for error logging.
 * Use the this method prior to calling the println_to_stderr method.
 * 
 * @param 				&fileName  - File name of Redirected File.
 */
method redirect_stderr
   /+ &fileName as String +/
   
   try
      Local string &sMethodName = "ANZ_BATCH_LOG:redirect_stderr";
      Local JavaObject &jSystem = GetJavaClass("java.lang.System");
      Local JavaObject &jfos_out = CreateJavaObject("java.io.FileOutputStream", &fileName, True);
      Local JavaObject &jps_out = CreateJavaObject("java.io.PrintStream", &jfos_out, True);
      &jSystem.setErr(&jps_out);
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;

/* End ANZWR07660 , Prashant Prakash, 17/02/2009*/


INSERT INTO %Table(ANZ_BAL_FTP_STG) ( %Sql (ANZ_BALANCE_EXTRACT_FTP_SQL)) 
 SELECT %Bind(BUSINESS_UNIT) 
 , %Bind(LEDGER) 
 , ADB.ACCOUNT 
 , ADB.ALTACCT 
 , ADB.DEPTID 
 , ADB.OPERATING_UNIT 
 , ADB.PRODUCT 
 , ADB.AFFILIATE 
 , ADB.STATISTICS_CODE 
 , ADB.FISCAL_YEAR 
 , ADB.ACCOUNTING_PERIOD 
 , ADB.CURRENCY_CD 
 , SUM(ADB.POSTED_TRAN_AMT) AS TRAN_AMT 
 , ADB.BASE_CURRENCY 
 , SUM(ADB.POSTED_BASE_AMT) AS BASE_AMT 
 , %Bind(REQUEST_ID) 
  FROM PS_LEDGER_ADB ADB 
  , PS_CAL_DETP_TBL CAL 
 WHERE CAL.SETID IN ( 
 SELECT Z.SETID 
  FROM PS_SET_CNTRL_REC Z 
 WHERE Z.RECNAME = 'CAL_DETP_TBL' 
   AND Z.SETCNTRLVALUE = ADB.BUSINESS_UNIT) 
   AND ADB.FISCAL_YEAR = CAL.FISCAL_YEAR 
   AND ADB.ACCOUNTING_PERIOD = CAL.ACCOUNTING_PERIOD 
   AND ADB.FISCAL_YEAR = YEAR(%Bind(AS_OF_DATE)) 
   AND ADB.BUSINESS_UNIT = %Bind(BUSINESS_UNIT) 
   AND ADB.LEDGER = %Bind(LEDGER) 
   AND ADB.ACCOUNTING_PERIOD = ( 
 SELECT ACCOUNTING_PERIOD 
  FROM PS_CAL_DETP_TBL 
 WHERE FISCAL_YEAR = YEAR(%Bind(AS_OF_DATE)) 
   AND CALENDAR_ID = 'D1' 
   AND MONTH(END_DT) = MONTH(%Bind(AS_OF_DATE)) 
   AND DAY(END_DT) = DAY(%Bind(AS_OF_DATE))) 
   AND CAL.SETID ='GLOBL' 
   AND CAL.CALENDAR_ID ='D1' 
   AND (CAL.FISCAL_YEAR= YEAR(%Bind(AS_OF_DATE)) 
   AND MONTH(%Bind(AS_OF_DATE)) <= 9) 
    OR (CAL.FISCAL_YEAR= (YEAR(%Bind(AS_OF_DATE)) - 1) 
   AND MONTH(%Bind(AS_OF_DATE)) > 9) 
   AND END_DT <= %DateIn(%Bind(AS_OF_DATE)) 
  GROUP BY ADB.ACCOUNT , ADB.ALTACCT , ADB.DEPTID , ADB.OPERATING_UNIT , ADB.PRODUCT , ADB.AFFILIATE , ADB.STATISTICS_CODE , 
  ADB.FISCAL_YEAR , ADB.ACCOUNTING_PERIOD , ADB.CURRENCY_CD , ADB.BASE_CURRENCY


/************************************************************************ */
/* WR#       		 Date        Developer        			Notes   	  */
/* ANZWR07660    17/02/2009      prakasp1  		Generate a Balance Extract*/
/*                                              for FTP                   */
/************************************************************************ */

/* Begin ANZWR07660 */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();

/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_BAL_FTP_AET);
Local Rowset &ANZFileRowset_;
Local Record &ANZHDRRecord_, &ANZTrailerRec_, &ANZStagingRec_;
Local File &ANZBalanceExtractFile_;
Local number &ANZDetailCount_, &ANZRecordCountLen_, &ANZCountSTG_;
Local SQL &ANZTransactionSQL_, &ANZTransactCountSQL_;

rem Check whether an extract needs to be generated as per Run Control Parameters;
SQLExec("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE REQUEST_ID = :1", &ANZStateRec_.REQUEST_ID.Value, &ANZCountSTG_);
If (&ANZCountSTG_ <> 0) Then
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("Writing Extract File for Request ID " | &ANZStateRec_.REQUEST_ID.Value);
   /* Retrieve File Information */
   If (&ANZStateRec_.OVERRIDE_FLAG.Value = "N") Then
      rem Local string &ANZFilePath_ = Substitute(&ANZStateRec_.OUTPUT_PATH.Value, ".txt", "_" | &ANZStateRec_.REQUEST_ID.Value | ".txt");
      rem As per Functional Analyst, there will be a single Request ID per Run Control ID;
      rem Keeping that in mind removing the suffix from the FileName;
      Local string &ANZFilePath_ = &ANZStateRec_.OUTPUT_PATH.Value;
      &ANZBalanceExtractFile_ = GetFile(&ANZFilePath_, "W", %FilePath_Absolute);
   Else
      rem &ANZFilePath_ = Substitute(&ANZStateRec_.FILENAME.Value, ".txt", "_" | &ANZStateRec_.REQUEST_ID.Value | ".txt");
      &ANZFilePath_ = &ANZStateRec_.FILENAME.Value;
      &ANZBalanceExtractFile_ = GetFile(&ANZStateRec_.OUTPUT_PATH.Value | &ANZFilePath_, "W", %FilePath_Absolute);
   End-If;
   /* Write the Header Record */
   
   If &ANZBalanceExtractFile_.IsOpen Then
      If &ANZBalanceExtractFile_.SetFileLayout(FileLayout.ANZ_PSGL2FTP_BALANCE_EXTRACT) Then
         &ANZFileRowset_ = &ANZBalanceExtractFile_.CreateRowset();
         &ANZHDRRecord_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_HEADER);
         &ANZHDRRecord_.GetField(Field.ANZ_PROCESS_DATE).Value = Substitute(&ANZStateRec_.AS_OF_DATE.Value, "-", "");
         &ANZHDRRecord_.GetField(Field.ANZ_FILE_ID).Value = &ANZStateRec_.ANZ_SUB_SYSTEM.Value;
         &ANZBalanceExtractFile_.WriteRecord(&ANZHDRRecord_);
      End-If;
   Else
      &msgLog_.println_to_stderr("******************************************************************");
      &msgLog_.println_to_stderr("File " | &ANZStateRec_.OUTPUT_PATH.Value | " is not accessible");
   End-If;
   /* Write the Transaction Record */
   &ANZTransactionRec_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_TRANSACTION);
   &ANZStagingRec_ = CreateRecord(Record.ANZ_BAL_FTP_STG);
   rem Local string &ANZSQLString1_ = "%SelectAll(:1) WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = (:2) and RUN_CNTL_ID = (:3) AND REQUEST_ID = (:4))";
   rem &ANZTransactionSQL_ = CreateSQL("%SelectAll(:1) WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = (:2) and RUN_CNTL_ID = (:3) AND REQUEST_ID = (:4))", &ANZStagingRec_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   &ANZTransactionSQL_ = CreateSQL("%SelectAll(:1) WHERE REQUEST_ID = :2", &ANZStagingRec_, &ANZStateRec_.REQUEST_ID.Value);
   /* Either open/close explicitly or use ReuseCursor */
   &ANZTransactionSQL_.ReuseCursor = True;
   &ANZTransactionSQL_.TraceName = "WriteExtract.TraceName.SQL";
   /* Verify the SQL Status before Binding/Executing */
   Evaluate &ANZTransactionSQL_.Status
   When = %SQLStatus_OK
      &msgLog_.println_to_stdout("SQL Status OK -> Writing Transaction Record");
      rem Accounting Period should be from the Monthly Calendar (M1);
      Local SQL &ANZAccntMonthlyPeriod_ = CreateSQL("SELECT ACCOUNTING_PERIOD FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'M1' AND MONTH(END_DT) = MONTH(:1)", &ANZMonthlyAccntPreiod_, &ANZStateRec_.AS_OF_DATE.Value);
      /* Either open/close explicitly or use ReuseCursor */
      &ANZAccntMonthlyPeriod_.ReuseCursor = True;
      /* Its a must to Bind/Execute the variables before Fetching */
      rem &ANZTransactionSQL_.Execute(&ANZStagingRec_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
      &ANZTransactionSQL_.Execute(&ANZStagingRec_, &ANZStateRec_.REQUEST_ID.Value);
      While &ANZTransactionSQL_.Fetch(&ANZStagingRec_)
         &ANZTransactionRec_.GetField(Field.BUSINESS_UNIT).Value = &ANZStagingRec_.GetField(Field.BUSINESS_UNIT).Value;
         &ANZTransactionRec_.GetField(Field.LEDGER).Value = &ANZStagingRec_.GetField(Field.LEDGER).Value;
         rem Business wants this to be defaulted to the ACCOUNT field selected on the Page, essentially a dummy account;
         rem &ANZTransactionRec_.GetField(Field.ACCOUNT).Value = &ANZStagingRec_.GetField(Field.ACCOUNT).Value;
         &ANZTransactionRec_.GetField(Field.ACCOUNT).Value = &ANZStateRec_.ACCOUNT.Value;
         &ANZTransactionRec_.GetField(Field.ALTACCT).Value = &ANZStagingRec_.GetField(Field.ALTACCT).Value;
         &ANZTransactionRec_.GetField(Field.DEPTID).Value = &ANZStagingRec_.GetField(Field.DEPTID).Value;
         &ANZTransactionRec_.GetField(Field.OPERATING_UNIT).Value = &ANZStagingRec_.GetField(Field.OPERATING_UNIT).Value;
         &ANZTransactionRec_.GetField(Field.PRODUCT).Value = &ANZStagingRec_.GetField(Field.PRODUCT).Value;
         &ANZTransactionRec_.GetField(Field.AFFILIATE).Value = &ANZStagingRec_.GetField(Field.AFFILIATE).Value;
         &ANZTransactionRec_.GetField(Field.STATISTICS_CODE).Value = &ANZStagingRec_.GetField(Field.STATISTICS_CODE).Value;
         &ANZTransactionRec_.GetField(Field.FISCAL_YEAR).Value = &ANZStagingRec_.GetField(Field.FISCAL_YEAR).Value;
         rem Since my Bind variables are same for the run, no need to .Execute();
         rem &ANZAccntMonthlyPeriod_.Execute(&ANZMonthlyAccntPreiod_, &ANZStateRec_.AS_OF_DATE.Value);
         While &ANZAccntMonthlyPeriod_.Fetch(&ANZMonthlyAccntPreiod_)
            rem SQLExec("SELECT ACCOUNTING_PERIOD FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'M1' AND MONTH(END_DT) = MONTH(:1)", &ANZStateRec_.AS_OF_DATE.Value, &ANZMonthlyAccntPreiod_);
            rem Changed the SQLExec to CreateSQL citing performance concerns;
            rem &ANZTransactionRec_.GetField(Field.ACCOUNTING_PERIOD).Value = &ANZStagingRec_.GetField(Field.ACCOUNTING_PERIOD).Value;
            &ANZTransactionRec_.GetField(Field.ACCOUNTING_PERIOD).Value = &ANZMonthlyAccntPreiod_;
         End-While;
         &ANZTransactionRec_.GetField(Field.CURRENCY_CD).Value = &ANZStagingRec_.GetField(Field.CURRENCY_CD).Value;
         &ANZTransactionRec_.GetField(Field.POSTED_TRAN_AMT).Value = &ANZStagingRec_.GetField(Field.POSTED_TRAN_AMT).Value;
         &ANZTransactionRec_.GetField(Field.BASE_CURRENCY).Value = &ANZStagingRec_.GetField(Field.BASE_CURRENCY).Value;
         &ANZTransactionRec_.GetField(Field.POSTED_BASE_AMT).Value = &ANZStagingRec_.GetField(Field.POSTED_BASE_AMT).Value;
         &ANZBalanceExtractFile_.WriteRecord(&ANZTransactionRec_);
      End-While;
      Break;
   When = %SQLStatus_NotFound
      &msgLog_.println_to_stderr("Invalid SQL Status for Transaction Record");
      Error ("LINE Not Found");
      Break;
   When = %SQLStatus_Duplicate
      &msgLog_.println_to_stderr("Duplicate Line");
      Error ("DUPLICATE LINE");
      Break;
   End-Evaluate;
   /* Write the Trailer Record */
   &ANZTrailerRec_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_TRAILER);
   
   rem Local string &ANZCountSQL_ = ExpandSqlBinds("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = :1 and RUN_CNTL_ID = :2 AND REQUEST_ID = :3)", &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value, &ANZLineCount_);
   Local string &ANZCountSQL_ = ExpandSqlBinds("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE REQUEST_ID = :1", &ANZStateRec_.REQUEST_ID.Value, &ANZLineCount_);
   rem Local SQL &ANZCountRows_ = CreateSQL(&ANZCountSQL_, &ANZLineCount_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   Local SQL &ANZCountRows_ = CreateSQL(&ANZCountSQL_, &ANZLineCount_, &ANZStateRec_.REQUEST_ID.Value);
   &ANZCountRows_.ReuseCursor = True;
   /* Retrieve the Count of rows written */
   rem &ANZCountRows_.Execute(&ANZLineCount_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   &ANZCountRows_.Execute(&ANZLineCount_, &ANZStateRec_.REQUEST_ID.Value);
   While &ANZCountRows_.Fetch(&ANZLineCount_)
      &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value = &ANZLineCount_;
      &ANZBalanceExtractFile_.WriteRecord(&ANZTrailerRec_);
      &msgLog_.println_to_stdout("******************************************************************");
      &msgLog_.println_to_stdout("*                                                                *");
      &msgLog_.println_to_stdout("*                     Run Control Parameters                     *");
      &msgLog_.println_to_stdout("*                                                                *");
      &msgLog_.println_to_stdout("******************************************************************");
      &msgLog_.println_to_stdout("");
      &msgLog_.println_to_stdout("       Generated On : " | %Datetime);
      &msgLog_.println_to_stdout("     Run Control ID : " | &ANZStateRec_.RUN_CNTL_ID.Value);
      &msgLog_.println_to_stdout("         Request ID : " | &ANZStateRec_.REQUEST_ID.Value);
      &msgLog_.println_to_stdout("        Output File : " | &ANZBalanceExtractFile_.Name);
      &msgLog_.println_to_stdout("         Total Rows : " | &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value);
      &msgLog_.println_to_stdout("");
      &msgLog_.println_to_stdout("******************************************************************");
      &msgLog_.println_to_stdout("");
      rem &msgLog_.println_to_stdout("Number of rows written to file " | &ANZBalanceExtractFile_.Name | " for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " are " | &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value);
      rem &msgLog_.println_to_stdout("******************************************************************");
   End-While;
   &ANZBalanceExtractFile_.Close();
Else
   &msgLog_.println_to_stdout("No Rows for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " Business Unit " | &ANZStateRec_.BUSINESS_UNIT.Value);
   &msgLog_.println_to_stderr("No Rows Selected. Either Re-run with different Run Control Parameters or create data for existing parameters");
End-If;
/* End ANZWR07660 */

INSERT INTO %Table(ANZ_BAL_FTP_STG) ( %Sql (ANZ_BALANCE_EXTRACT_FTP_SQL)) 
 SELECT %Bind(BUSINESS_UNIT) 
 , %Bind(LEDGER) 
 , ADB.ACCOUNT 
 , ADB.ALTACCT 
 , ADB.DEPTID 
 , ADB.OPERATING_UNIT 
 , ADB.PRODUCT 
 , ADB.AFFILIATE 
 , ADB.STATISTICS_CODE 
 , ADB.FISCAL_YEAR 
 , ADB.ACCOUNTING_PERIOD 
 , ADB.CURRENCY_CD 
 , SUM(ADB.POSTED_TRAN_AMT) AS TRAN_AMT 
 , ADB.BASE_CURRENCY 
 , SUM(ADB.POSTED_BASE_AMT) AS BASE_AMT 
 , %Bind(REQUEST_ID) 
  FROM PS_LEDGER_ADB ADB 
 WHERE ADB.FISCAL_YEAR = YEAR(%Bind(AS_OF_DATE)) 
   AND ADB.BUSINESS_UNIT = %Bind(BUSINESS_UNIT) 
   AND ADB.LEDGER = %Bind(LEDGER) %Bind(WHERE_CLAUSE_LONG, NOQUOTES) 
  GROUP BY ADB.ACCOUNT,ADB.ALTACCT ,ADB.DEPTID ,ADB.OPERATING_UNIT ,ADB.PRODUCT ,ADB.AFFILIATE ,ADB.STATISTICS_CODE , ADB.FISCAL_YEAR ,
  ADB.ACCOUNTING_PERIOD ,ADB.CURRENCY_CD ,ADB.BASE_CURRENCY

  /****************************************************************************************** */
/* WR#       		 Date        Developer        			Notes						    */
/* ANZWR07660    17/02/2009      prakasp1  		Report Actual count of rows processed for BU*/
/********************************************************************************************/

/* Begin ANZWR07660 */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();

/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_BAL_FTP_AET);

Local number &ANZTotalRowCount_, &ANZCountBU_;
rem &ANZTotalRowCount_ = 0;

Local SQL &ANZStagingSQL_ = CreateSQL("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE REQUEST_ID = :1 AND BUSINESS_UNIT = :2", &ANZStateRec_.REQUEST_ID.Value, &ANZStateRec_.BUSINESS_UNIT.Value);
&ANZStagingSQL_.ReuseCursor = True;
While &ANZStagingSQL_.Fetch(&ANZCountBU_)
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("Total Number of RowsAffected for BU " | &ANZStateRec_.BUSINESS_UNIT.Value | " are " | &ANZCountBU_);
   If (&ANZCountBU_ = 0) Then
      &msgLog_.println_to_stderr("No Rows Selected for the BU " | "'" | &ANZStateRec_.BUSINESS_UNIT.Value | "'" | " and Ledger " | "'" | &ANZStateRec_.LEDGER.Value | "'" | " combination from Average Daily Balance SQL Table");
   End-If;
End-While;
&ANZStagingSQL_.Close();

/* End ANZWR07660 */


%Select(OPRID, RUN_CNTL_ID, REQUEST_ID, AS_OF_DATE, ANZ_SUB_SYSTEM, LEDGER, ACCOUNT, END_OF_MNTH_FLAG, OVERRIDE_FLAG, ANZ_GEN_EXTR, OUTPUT_PATH, FILENAME, BUSINESS_UNIT) 
 SELECT BAL.OPRID 
 , BAL.RUN_CNTL_ID 
 , BAL.REQUEST_ID 
 , BAL.AS_OF_DATE 
 , BAL.ANZ_SUB_SYSTEM 
 , BAL.LEDGER 
 , BAL.ACCOUNT 
 , BAL.END_OF_MNTH_FLAG 
 , BAL.OVERRIDE_FLAG 
 , ANZ_GEN_EXTR 
 , BAL.OUTPUT_PATH 
 , BAL.FILENAME 
 , FTP.BUSINESS_UNIT 
  FROM PS_RUN_ANZ_BAL_FTP BAL 
  , PS_RUN_ANZ_BAL1FTP FTP 
 WHERE BAL.OPRID = %Bind(OPRID) 
   AND BAL.RUN_CNTL_ID = %RunControl 
   AND (PROCESS_FREQUENCY = 'O' 
    OR PROCESS_FREQUENCY = 'A') 
   AND BAL.OPRID = FTP.OPRID 
   AND BAL.RUN_CNTL_ID = FTP.RUN_CNTL_ID 
   AND BAL.REQUEST_ID = FTP.REQUEST_ID 
   AND BAL.REQUEST_ID > %Bind(REQUEST_ID) 
  ORDER BY BAL.REQUEST_ID

  /*******************************************************************************************/
/* WR#       		 Date        Developer        			Notes						   */
/* ANZWR07660    17/02/2009      prakasp1  		Create and redirect Stderr file for the AE */
/*******************************************************************************************/

/* Begin ANZWR07660 */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_BAL_FTP_AET);
Local string &ANZErrSub_, &ANZErrFile_, &ANZstrSlash_, &ANZEndofMonth_;
Local number &ANZLastDayofMonth_;

/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &ANZStateRec_.PROCESS_INST_STG.Value, &ANZFileDir_);
&ANZErrSub_ = "AE_ANZ_BAL_FTP_" | &ANZStateRec_.PROCESS_INST_STG.Value | ".log";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&ANZiTempPos_ = Find("\", &ANZFileDir_);
If &ANZiTempPos_ = 0 Then
   &ANZiTempPos_ = Find("/", &ANZFileDir_);
   &ANZstrSlash_ = "/";
Else
   &ANZstrSlash_ = "\";
End-If;
&ANZErrFile_ = &ANZFileDir_ | &ANZstrSlash_ | &ANZErrSub_;
rem &msgLog_.println_to_stdout(&ErrFile_);
/* redirect stderr */
&msgLog_.redirect_stderr(&ANZErrFile_);

/*	By default set the &TotalErrorCount to 0*/
&TotalErrorCount = 0;

&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("Running for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " and Business Unit " | &ANZStateRec_.BUSINESS_UNIT.Value);

/* Prepare the Where Clause to accommodate the ANZ Fin Calendar (OCT-SEPT) */
&ANZEndofMonth_ = &ANZStateRec_.END_OF_MNTH_FLAG.Value;
If (&ANZEndofMonth_ = "Y") Then
   &ANZSqlText_ = &ANZSqlText_ | " AND ACCOUNTING_PERIOD >= 1 AND ACCOUNTING_PERIOD <= :1";
   rem need to calculate the last day of that month;
   SQLExec("SELECT DAY(MAX(END_DT)) FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'D1'AND MONTH(END_DT) = MONTH(:1)", &ANZStateRec_.AS_OF_DATE.Value, &ANZLastDayofMonth_);
   SQLExec("SELECT ACCOUNTING_PERIOD FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'D1' AND MONTH(END_DT) = MONTH(:1) AND DAY(END_DT) = :2", &ANZStateRec_.AS_OF_DATE.Value, &ANZLastDayofMonth_, &ANZAccntngPeriod_);
   &ANZSqlText_ = ExpandSqlBinds(&ANZSqlText_, &ANZAccntngPeriod_);
   &ANZStateRec_.WHERE_CLAUSE_LONG.Value = &ANZSqlText_;
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("End of Month selected for Request ID " | &ANZStateRec_.REQUEST_ID.Value);
Else
   &ANZSqlText_ = &ANZSqlText_ | " AND ACCOUNTING_PERIOD >= 1 AND ACCOUNTING_PERIOD <= :1 ";
   SQLExec("SELECT ACCOUNTING_PERIOD FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'D1' AND MONTH(END_DT) = MONTH(:1) AND DAY(END_DT) = DAY(:1)", &ANZStateRec_.AS_OF_DATE.Value, &ANZAccntngPeriod_);
   &ANZSqlText_ = ExpandSqlBinds(&ANZSqlText_, &ANZAccntngPeriod_);
   &ANZStateRec_.WHERE_CLAUSE_LONG.Value = &ANZSqlText_;
End-If;
&ANZStateRec_.Update();

/* End ANZWR07660 */

/*******************************************************************************************/
/* WR#       		 Date        Developer        			Notes						   */
/* ANZWR07660    17/02/2009      prakasp1  		Create and redirect Stdout file for the AE */
/*******************************************************************************************/

/* Begin ANZWR07660 */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_BAL_FTP_AET);
/*	By default set the &TotalErrorCount to 0*/
&ANZTotalErrorCount = 0;
&ANZOperatorID_ = %OperatorId;
&ANZRunControlID_ = &ANZStateRec_.RUN_CNTL_ID.Value;
&ANZPrcsInstance_ = &ANZStateRec_.PROCESS_INSTANCE.Value;

/* All Batch Servers do not have the mail and activation jar files in their class path.
   They are not part of standard install. PSADMIN needs to put these files 
*/
/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &ANZPrcsInstance_, &ANZFileDir_);
&ANZErrSub_ = "AE_ANZ_BAL_FTP_" | &ANZPrcsInstance_ | ".txt";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&ANZiTempPos = Find("\", &ANZFileDir_);
If &ANZiTempPos = 0 Then
   &ANZiTempPos = Find("/", &ANZFileDir_);
   &ANZstrSlash = "/";
Else
   &ANZstrSlash = "\";
End-If;
&ANZErrFile_ = &ANZFileDir_ | &ANZstrSlash | &ANZErrSub_;
/* redirect stdout */
&msgLog_.redirect_stdout(&ANZErrFile_);
/* Generate Batch Log Report */
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("*                 PeopleSoft PS TO FTP OUTBOUND                  *");
&msgLog_.println_to_stdout("*                   Batch Process Log Report                     *");
&msgLog_.println_to_stdout("*                        Balance Extract                         *");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("       Generated On : " | %Datetime);
&msgLog_.println_to_stdout("       Generated By : " | &ANZOperatorID_);
&msgLog_.println_to_stdout("   Process Instance : " | &ANZPrcsInstance_);
&msgLog_.println_to_stdout("     Run Control ID : " | &ANZRunControlID_);
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");

/* End ANZWR07660 */

%SelectInit(OPRID, RUN_CNTL_ID, REQUEST_ID, AS_OF_DATE, ANZ_SUB_SYSTEM, LEDGER, ACCOUNT, END_OF_MNTH_FLAG, OVERRIDE_FLAG, ANZ_GEN_EXTR, OUTPUT_PATH, FILENAME) 
 SELECT OPRID 
 , RUN_CNTL_ID 
 , REQUEST_ID 
 , AS_OF_DATE 
 , ANZ_SUB_SYSTEM 
 , LEDGER 
 , ACCOUNT 
 , END_OF_MNTH_FLAG 
 , OVERRIDE_FLAG 
 , ANZ_GEN_EXTR 
 , OUTPUT_PATH 
 , FILENAME 
  FROM PS_RUN_ANZ_BAL_FTP 
 WHERE OPRID = %Bind(OPRID) 
   AND RUN_CNTL_ID = %RunControl 
   AND (PROCESS_FREQUENCY = 'O' 
    OR PROCESS_FREQUENCY = 'A') 
  ORDER BY REQUEST_ID

  /************************************************************************ */
/* WR#       		 Date        Developer        			Notes   	  */
/* ANZWR07660    17/02/2009      prakasp1  		Generate a Balance Extract*/
/*                                              for FTP                   */
/************************************************************************ */

/* Begin ANZWR07660 */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();

/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_BAL_FTP_AET);
Local Rowset &ANZFileRowset_;
Local Record &ANZHDRRecord_, &ANZTrailerRec_, &ANZStagingRec_;
Local File &ANZBalanceExtractFile_;
Local number &ANZDetailCount_, &ANZRecordCountLen_, &ANZCountSTG_;
Local SQL &ANZTransactionSQL_, &ANZTransactCountSQL_;

rem Check whether an extract needs to be generated as per Run Control Parameters;
SQLExec("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE REQUEST_ID = :1", &ANZStateRec_.REQUEST_ID.Value, &ANZCountSTG_);
If (&ANZCountSTG_ <> 0) Then
   &msgLog_.println_to_stdout("******************************************************************");
   &msgLog_.println_to_stdout("Writing Extract File for Request ID " | &ANZStateRec_.REQUEST_ID.Value);
   /* Retrieve File Information */
   If (&ANZStateRec_.OVERRIDE_FLAG.Value = "N") Then
      rem Local string &ANZFilePath_ = Substitute(&ANZStateRec_.OUTPUT_PATH.Value, ".txt", "_" | &ANZStateRec_.REQUEST_ID.Value | ".txt");
      rem As per Functional Analyst, there will be a single Request ID per Run Control ID;
      rem Keeping that in mind removing the suffix from the FileName;
      Local string &ANZFilePath_ = &ANZStateRec_.OUTPUT_PATH.Value;
      &ANZBalanceExtractFile_ = GetFile(&ANZFilePath_, "W", %FilePath_Absolute);
   Else
      rem &ANZFilePath_ = Substitute(&ANZStateRec_.FILENAME.Value, ".txt", "_" | &ANZStateRec_.REQUEST_ID.Value | ".txt");
      &ANZFilePath_ = &ANZStateRec_.FILENAME.Value;
      &ANZBalanceExtractFile_ = GetFile(&ANZStateRec_.OUTPUT_PATH.Value | &ANZFilePath_, "W", %FilePath_Absolute);
   End-If;
   /* Write the Header Record */
   
   If &ANZBalanceExtractFile_.IsOpen Then
      If &ANZBalanceExtractFile_.SetFileLayout(FileLayout.ANZ_PSGL2FTP_BALANCE_EXTRACT) Then
         &ANZFileRowset_ = &ANZBalanceExtractFile_.CreateRowset();
         &ANZHDRRecord_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_HEADER);
         &ANZHDRRecord_.GetField(Field.ANZ_PROCESS_DATE).Value = Substitute(&ANZStateRec_.AS_OF_DATE.Value, "-", "");
         &ANZHDRRecord_.GetField(Field.ANZ_FILE_ID).Value = &ANZStateRec_.ANZ_SUB_SYSTEM.Value;
         &ANZBalanceExtractFile_.WriteRecord(&ANZHDRRecord_);
      End-If;
   Else
      &msgLog_.println_to_stderr("******************************************************************");
      &msgLog_.println_to_stderr("File " | &ANZStateRec_.OUTPUT_PATH.Value | " is not accessible");
   End-If;
   /* Write the Transaction Record */
   &ANZTransactionRec_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_TRANSACTION);
   &ANZStagingRec_ = CreateRecord(Record.ANZ_BAL_FTP_STG);
   rem Local string &ANZSQLString1_ = "%SelectAll(:1) WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = (:2) and RUN_CNTL_ID = (:3) AND REQUEST_ID = (:4))";
   rem &ANZTransactionSQL_ = CreateSQL("%SelectAll(:1) WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = (:2) and RUN_CNTL_ID = (:3) AND REQUEST_ID = (:4))", &ANZStagingRec_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   &ANZTransactionSQL_ = CreateSQL("%SelectAll(:1) WHERE REQUEST_ID = :2", &ANZStagingRec_, &ANZStateRec_.REQUEST_ID.Value);
   /* Either open/close explicitly or use ReuseCursor */
   &ANZTransactionSQL_.ReuseCursor = True;
   &ANZTransactionSQL_.TraceName = "WriteExtract.TraceName.SQL";
   /* Verify the SQL Status before Binding/Executing */
   Evaluate &ANZTransactionSQL_.Status
   When = %SQLStatus_OK
      &msgLog_.println_to_stdout("SQL Status OK -> Writing Transaction Record");
      rem Accounting Period should be from the Monthly Calendar (M1);
      Local SQL &ANZAccntMonthlyPeriod_ = CreateSQL("SELECT ACCOUNTING_PERIOD FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'M1' AND MONTH(END_DT) = MONTH(:1)", &ANZMonthlyAccntPreiod_, &ANZStateRec_.AS_OF_DATE.Value);
      /* Either open/close explicitly or use ReuseCursor */
      &ANZAccntMonthlyPeriod_.ReuseCursor = True;
      /* Its a must to Bind/Execute the variables before Fetching */
      rem &ANZTransactionSQL_.Execute(&ANZStagingRec_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
      &ANZTransactionSQL_.Execute(&ANZStagingRec_, &ANZStateRec_.REQUEST_ID.Value);
      While &ANZTransactionSQL_.Fetch(&ANZStagingRec_)
         &ANZTransactionRec_.GetField(Field.BUSINESS_UNIT).Value = &ANZStagingRec_.GetField(Field.BUSINESS_UNIT).Value;
         &ANZTransactionRec_.GetField(Field.LEDGER).Value = &ANZStagingRec_.GetField(Field.LEDGER).Value;
         rem Business wants this to be defaulted to the ACCOUNT field selected on the Page, essentially a dummy account;
         rem &ANZTransactionRec_.GetField(Field.ACCOUNT).Value = &ANZStagingRec_.GetField(Field.ACCOUNT).Value;
         &ANZTransactionRec_.GetField(Field.ACCOUNT).Value = &ANZStateRec_.ACCOUNT.Value;
         &ANZTransactionRec_.GetField(Field.ALTACCT).Value = &ANZStagingRec_.GetField(Field.ALTACCT).Value;
         &ANZTransactionRec_.GetField(Field.DEPTID).Value = &ANZStagingRec_.GetField(Field.DEPTID).Value;
         &ANZTransactionRec_.GetField(Field.OPERATING_UNIT).Value = &ANZStagingRec_.GetField(Field.OPERATING_UNIT).Value;
         &ANZTransactionRec_.GetField(Field.PRODUCT).Value = &ANZStagingRec_.GetField(Field.PRODUCT).Value;
         &ANZTransactionRec_.GetField(Field.AFFILIATE).Value = &ANZStagingRec_.GetField(Field.AFFILIATE).Value;
         &ANZTransactionRec_.GetField(Field.STATISTICS_CODE).Value = &ANZStagingRec_.GetField(Field.STATISTICS_CODE).Value;
         &ANZTransactionRec_.GetField(Field.FISCAL_YEAR).Value = &ANZStagingRec_.GetField(Field.FISCAL_YEAR).Value;
         rem Since my Bind variables are same for the run, no need to .Execute();
         rem &ANZAccntMonthlyPeriod_.Execute(&ANZMonthlyAccntPreiod_, &ANZStateRec_.AS_OF_DATE.Value);
         While &ANZAccntMonthlyPeriod_.Fetch(&ANZMonthlyAccntPreiod_)
            rem SQLExec("SELECT ACCOUNTING_PERIOD FROM %Table(CAL_DETP_TBL) WHERE FISCAL_YEAR = YEAR(:1) AND CALENDAR_ID = 'M1' AND MONTH(END_DT) = MONTH(:1)", &ANZStateRec_.AS_OF_DATE.Value, &ANZMonthlyAccntPreiod_);
            rem Changed the SQLExec to CreateSQL citing performance concerns;
            rem &ANZTransactionRec_.GetField(Field.ACCOUNTING_PERIOD).Value = &ANZStagingRec_.GetField(Field.ACCOUNTING_PERIOD).Value;
            &ANZTransactionRec_.GetField(Field.ACCOUNTING_PERIOD).Value = &ANZMonthlyAccntPreiod_;
         End-While;
         &ANZTransactionRec_.GetField(Field.CURRENCY_CD).Value = &ANZStagingRec_.GetField(Field.CURRENCY_CD).Value;
         &ANZTransactionRec_.GetField(Field.POSTED_TRAN_AMT).Value = &ANZStagingRec_.GetField(Field.POSTED_TRAN_AMT).Value;
         &ANZTransactionRec_.GetField(Field.BASE_CURRENCY).Value = &ANZStagingRec_.GetField(Field.BASE_CURRENCY).Value;
         &ANZTransactionRec_.GetField(Field.POSTED_BASE_AMT).Value = &ANZStagingRec_.GetField(Field.POSTED_BASE_AMT).Value;
         &ANZBalanceExtractFile_.WriteRecord(&ANZTransactionRec_);
      End-While;
      Break;
   When = %SQLStatus_NotFound
      &msgLog_.println_to_stderr("Invalid SQL Status for Transaction Record");
      Error ("LINE Not Found");
      Break;
   When = %SQLStatus_Duplicate
      &msgLog_.println_to_stderr("Duplicate Line");
      Error ("DUPLICATE LINE");
      Break;
   End-Evaluate;
   /* Write the Trailer Record */
   &ANZTrailerRec_ = &ANZFileRowset_(1).GetRecord(Record.ANZ_TRAILER);
   
   rem Local string &ANZCountSQL_ = ExpandSqlBinds("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE TO_CUR IN (SELECT CURRENCY_CD FROM PS_RUN_ANZ_EXT1FTP WHERE OPRID = :1 and RUN_CNTL_ID = :2 AND REQUEST_ID = :3)", &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value, &ANZLineCount_);
   Local string &ANZCountSQL_ = ExpandSqlBinds("SELECT COUNT(*) FROM PS_ANZ_BAL_FTP_STG WHERE REQUEST_ID = :1", &ANZStateRec_.REQUEST_ID.Value, &ANZLineCount_);
   rem Local SQL &ANZCountRows_ = CreateSQL(&ANZCountSQL_, &ANZLineCount_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   Local SQL &ANZCountRows_ = CreateSQL(&ANZCountSQL_, &ANZLineCount_, &ANZStateRec_.REQUEST_ID.Value);
   &ANZCountRows_.ReuseCursor = True;
   /* Retrieve the Count of rows written */
   rem &ANZCountRows_.Execute(&ANZLineCount_, &ANZStateRec_.OPRID.Value, &ANZStateRec_.RUN_CNTL_ID.Value, &ANZStateRec_.REQUEST_ID.Value);
   &ANZCountRows_.Execute(&ANZLineCount_, &ANZStateRec_.REQUEST_ID.Value);
   While &ANZCountRows_.Fetch(&ANZLineCount_)
      &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value = &ANZLineCount_;
      &ANZBalanceExtractFile_.WriteRecord(&ANZTrailerRec_);
      &msgLog_.println_to_stdout("******************************************************************");
      &msgLog_.println_to_stdout("*                                                                *");
      &msgLog_.println_to_stdout("*                     Run Control Parameters                     *");
      &msgLog_.println_to_stdout("*                                                                *");
      &msgLog_.println_to_stdout("******************************************************************");
      &msgLog_.println_to_stdout("");
      &msgLog_.println_to_stdout("       Generated On : " | %Datetime);
      &msgLog_.println_to_stdout("     Run Control ID : " | &ANZStateRec_.RUN_CNTL_ID.Value);
      &msgLog_.println_to_stdout("         Request ID : " | &ANZStateRec_.REQUEST_ID.Value);
      &msgLog_.println_to_stdout("        Output File : " | &ANZBalanceExtractFile_.Name);
      &msgLog_.println_to_stdout("         Total Rows : " | &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value);
      &msgLog_.println_to_stdout("");
      &msgLog_.println_to_stdout("******************************************************************");
      &msgLog_.println_to_stdout("");
      rem &msgLog_.println_to_stdout("Number of rows written to file " | &ANZBalanceExtractFile_.Name | " for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " are " | &ANZTrailerRec_.GetField(Field.LINE_COUNT).Value);
      rem &msgLog_.println_to_stdout("******************************************************************");
   End-While;
   &ANZBalanceExtractFile_.Close();
Else
   &msgLog_.println_to_stdout("No Rows for Request ID " | &ANZStateRec_.REQUEST_ID.Value | " Business Unit " | &ANZStateRec_.BUSINESS_UNIT.Value);
   &msgLog_.println_to_stderr("No Rows Selected. Either Re-run with different Run Control Parameters or create data for existing parameters");
End-If;
/* End ANZWR07660 */


DELETE 
  FROM %Table(ANZ_BAL_FTP_STG) 
 WHERE REQUEST_ID = %Bind(REQUEST_ID)

/******************************************************************/
/* ANZWR05536 , 08/05/2009 , prakasp1                             */
/* Verbiage added to prompt the user to add the Hyperion LCD Bus  */
/******************************************************************/

/*Begin, ANZWR05536 , 08/05/2009 , prakasp1 */
<*    When no Hyperion LCD BUS is selected.  
      Issue an Error message.*>
&err_style = "PSERROR";
&normal_style = "PSEDITBOX";

&field = GetField();
If Not All(&field.Value) Then
   &label = &field.GetLongLabel(&field.Name);
   &field.Style = &err_style;
   SetCursorPos(%Page, ANZ_TREE_REC_1.ANZ_HYPO_TREENODE);
   Error MsgGet(5930, 1, "", &label);
Else
   &field.Style = &normal_style;
End-If;
/*End , ANZWR05536 , 08/05/2009 , prakasp1 */

class RunDMS
   method RunDMS(&RunCntlRec_ As Record);
   property Record Rec;
   property integer Status_;
   property integer RetStatus_;
   property integer PrcsInstance_
private
   instance string &run_cntl_id, &kk_run_status;
   instance ProcessRequest &Request;
   instance boolean &iscompleted;
   
   
   method scheduleProcess() Returns integer;
   method waitForProcess();
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/

method RunDMS
   /+ &RunCntlRec_ as Record +/
   
   %This.Rec = &RunCntlRec_;
   &Status_ = %This.scheduleProcess();
   If &Status_ = 0 Then
      %This.PrcsInstance_ = &Request.ProcessInstance;
   End-If;
   rem %This.waitForProcess();
   %This.RetStatus_ = &Status_;
   
end-method;

method scheduleProcess
   /+ Returns Integer +/
   
   &Request = CreateProcessRequest();
   &Request.RunControlID = &Rec.RUN_CNTL_ID.Value;
   rem check to see if the user wants to run in the Bootstrap mode or not;
   If (&Rec.ANZ_DM_RUN_MODE.Value = "R") Then
      rem This is regular mode access;
      &Request.ProcessType = "Data Mover";
   Else
      rem Be very careful...This is Bootstrap mode access;
      &Request.ProcessType = "DATA MOVER BS";
   End-If;
   rem Custom definition;
   &Request.ProcessName = "ANZDMS";
   &Request.RunLocation = &Rec.SERVERNAME.Value;
   rem &Request.FileName = "D:\psoft\auf0dev1b\scripts\ANZTEST.dms";
   &Request.RunDateTime = %Datetime;
   &Request.TimeZone = %ServerTimeZone;
   rem Schedule the request and check the status;
   &Request.Schedule();
   Return &Request.Status;
   
end-method;

method waitForProcess
   
   Local integer &K;
   Local boolean &timeout;
   Local time &timeend;
   Local string &run_status;
   Local JavaObject &Pause;
   Local number &Seconds;
   
   rem &timeend = AddToTime(%Time, 0, &inst.MaxWaitTime, 0);
   &timeout = False;
   &iscompleted = False;
   Repeat
      try
         &Seconds = 5;
         &Pause = GetJavaClass("java.lang.Thread");
         &Pause.sleep(&Seconds * 1000);
         &Pause = Null;
      catch Exception &NoProblem
         &Pause = Null;
      end-try;
      SQLExec("SELECT RUNSTATUS FROM PS_PMN_PRCSLIST WHERE PRCSINSTANCE=:1", &Request.ProcessInstance, &run_status);
      Evaluate &run_status
      When = "1"
      When = "2"
      When = "3"
      When = "8"
      When = "9"
      When = "10"
      When = "14"
      When = "17"
         &iscompleted = True;
         Break;
      End-Evaluate;
      &timeout = (%Time > &timeend);
   Until (&iscompleted) Or
      (&timeout);
   
   If &iscompleted Then
      SQLExec("SELECT KK_PROCESS_STATUS FROM PS_KK_CHECK_REQ WHERE OPRID=:1 AND RUN_CNTL_ID=:2", %OperatorId, &run_cntl_id, &run_status);
      &kk_run_status = &run_status;
   Else
      rem MessageBox(16, " ", 18021, 92, " ", &RQST.ProcessInstance, &inst.MaxWaitTime);
   End-If;
end-method;

<*

Local ProcessRequest &Request;
Local Row &Row_Level1;
Local Rowset &RS_Level0;

&Request = CreateProcessRequest();
&Request.RunControlID = RUN_ANZ_DMS.RUN_CNTL_ID;
&Request.ProcessType = "Data Mover";
&Request.ProcessName = "ANZDMS";
&Request.RunLocation = RUN_ANZ_DMS.SERVERNAME;
rem &Request.FileName = "D:\psoft\auf0dev1b\scripts\ANZTEST.dms";
&Request.RunDateTime = %Datetime;
&Request.TimeZone = %ServerTimeZone;
&Request.OutDest = "D:\TEMP\";
&DataBufRS = CreateRowset(Record.PRCSDEFN);
&num = &DataBufRS.Fill("WHERE PRCSNAME = :1", "ANZDMS");
MessageBox(0, "", 0, 0, "&num " | &num);
rem get the file names at level 1;
&RS_Level0 = GetLevel0();
&Row_Level1 = &RS_Level0(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.RUN_ANZ_DMS_1);
For &inv = 1 To &RS_Level1.ActiverowCount;
   MessageBox(0, "", 0, 0, "File Name(s) " | &RS_Level1.GetRow(&inv).RUN_ANZ_DMS_1.FILENAME.Value);
End-For;
rem Schedule the request and check the status;
&ProcessInstance = &Request.Schedule();
MessageBox(0, "", 0, 0, "&ProcessInstance " | &ProcessInstance);
If &Request.Status = 0 Then
   /* Schedule succeeded. */
Else
   MessageBox(0, "", 0, 0, "Report could not be scheduled");
   /* Process (job) not scheduled, do error processing */
End-If;
*>

import SCM_ARCH_ATTACH:UI:*;

Local Rowset &RS0, &RS1, &rsAttach;
Local Row &Row;
Local number &I, &J, &attach_num, &temp_num;
Local string &scrollname, &recname;

Local SCM_ARCH_ATTACH:UI:AttachmentHandler &scm_app_interface_comp;


&scrollname = "Scroll.RUN_ANZ_DMS_1";
&recname = "Record.RUN_ANZ_DMS_1";

/* Call SCM Arch team attach code - Begin *********************************************/
If (None(&scm_app_interface_comp)) Then
   &scm_app_interface_comp = create SCM_ARCH_ATTACH:UI:AttachmentHandler();
End-If;


&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.RUN_ANZ_DMS);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.RUN_ANZ_DMS_1);

Local Rowset &rs = GetLevel0()(1).GetRowset(@&scrollname);
&Row = &scm_app_interface_comp.InsertRowUploadAtt(&rs, &recname);

/* Call SCM Arch team attach code - End ***********************************************/
If &Row <> Null Then
   /* Attempt to override PV_ATTACH_WRK RowInit code which disables Description. */
   If All(&Row.GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
      &Row.GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACH_DESCR).Enabled = True;
   End-If;
End-If;

import ANZ_RUN_DMS:*;

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Row &Row_Level1;
Local ProcessRequest &Request;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.RUN_ANZ_DMS);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.RUN_ANZ_DMS_1);

For &inv = 1 To &RS_Level1.ActiveRowCount;
   rem MessageBox(0, "", 0, 0, "File Name(s) " | &RS_Level1.GetRow(&inv).RUN_ANZ_DMS_1.FILENAME.Value);
End-For;
&CURRENTLINE = CurrentRowNumber();
&LVL0REC.FILENAME.Value = FetchValue(RUN_ANZ_DMS_1.FILENAME, &CURRENTLINE);

rem call ANZ_RUN_DMS;
Local ANZ_RUN_DMS:RunDMS &ANZRunDMS_ = create ANZ_RUN_DMS:RunDMS(&LVL0REC);
rem MessageBox(0, "", 0, 0, "Rec " | &ANZRunDMS_.RetStatus_);

If &ANZRunDMS_.RetStatus_ = 0 Then
   /* Schedule succeeded. */
   &ProcInst = &ANZRunDMS_.PrcsInstance_;
   UpdateValue(RUN_ANZ_DMS_1.STATUS_FIELD, &CURRENTLINE, "Success");
   UpdateValue(RUN_ANZ_DMS_1.PROCESS_INSTANCE, &CURRENTLINE, &ProcInst);
Else
   UpdateValue(RUN_ANZ_DMS_WRK.STATUS_FIELD, &CURRENTLINE, "No Success");
   MessageBox(0, "", 0, 0, "Report could not be scheduled");
   /* Process (job) not scheduled, do error processing */
End-If;


import SCM_ARCH_ATTACH:UI:*;

Local Rowset &RS0, &RS1, &rsAttach, &RS_LEVEL0, &RS_Level1;
Local Row &Row, &Row_Level1;
Local number &I, &J, &attach_num, &temp_num;
Local string &scrollname, &recname;
Local Record &LVL0REC;

Component SCM_ARCH_ATTACH:UI:AttachmentHandler &scm_app_interface_comp;


&scrollname = "Scroll.RUN_ANZ_DMS_1";
&recname = "Record.RUN_ANZ_DMS_1";

/* Call SCM Arch team attach code - Begin *********************************************/
If (None(&scm_app_interface_comp)) Then
   &scm_app_interface_comp = create SCM_ARCH_ATTACH:UI:AttachmentHandler();
End-If;


&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.RUN_ANZ_DMS);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.RUN_ANZ_DMS_1);

Local Rowset &rs = GetLevel0()(1).GetRowset(@&scrollname);
&Row = &scm_app_interface_comp.InsertRowUploadAtt(&RS_Level1, &recname);

/* Call SCM Arch team attach code - End ***********************************************/
If &Row <> Null Then
   /* Attempt to override PV_ATTACH_WRK RowInit code which disables Description. */
   If All(&Row.GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
      &Row.GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACH_DESCR).Enabled = True;
      rem assign the file name to the file descr;
      &Row.GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACH_DESCR).Value = &Row.GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
   End-If;
End-If;


import FO_UTILITIES:AUTO_NUM:*;
import SCM_ARCH_ATTACH:Attachments:*;
import SCM_ARCH_ATTACH:UI:*;
import SCM_ARCH_ATTACH:Attachments:Exceptions:*;
import PT_MCF_MAIL:*;

Declare Function extract PeopleCode PT_WF_FUNCLIB.FUNCLIB_01 FieldFormula;

Component SCM_ARCH_ATTACH:UI:AttachmentHandler &scm_app_interface_comp;

Local string &sNextNumber, &strVarValue, &strValue;
Local Rowset &rsFoSndEmailAtt;
Local Record &recSendMailHist, &recSendMailHistAtt, &recSendMailAtt, &recHist;
Local boolean &bCreateOneHist;
Local array of string &aryCandidateID, &aryCandidateType;
Local FO_UTILITIES:AUTO_NUM:AutoNumInstall &objIDGenerator;
Local SCM_ARCH_ATTACH:Attachments:AttachmentFactory &fac;

Function CreateHistRec()
   &recHist = CreateRecord(Record.FO_HISTORY);
   &objIDGenerator = create FO_UTILITIES:AUTO_NUM:AutoNumInstall("HSTY", "NEXT", "", "", "");
   &sNextHistNumber = &objIDGenerator.AssignAutoNum();
   &recHist.HISTORY_ID.Value = &sNextHistNumber;
   &recHist.FO_DATE.Value = %Date;
   &recHist.DATETIME_ADDED.Value = %Datetime;
   &recHist.RED_FLAG.Value = "Y";
   &recHist.OPRID.Value = %OperatorId;
   &recHist.EMAIL_ID.Value = &sNextNumber;
   &recHist.CUST_ID.Value = FO_COMPMAIL_WRK.CUST_ID.Value;
   &recHist.CUSTOMER_SETID.Value = FO_COMPMAIL_WRK.CUSTOMER_SETID.Value;
   &recHist.BUSINESS_UNIT.Value = FO_COMPMAIL_WRK.BUSINESS_UNIT.Value;
   &recHist.SO_ID.Value = FO_COMPMAIL_WRK.SO_ID.Value;
   &recHist.CONTACT_SETID.Value = FO_COMPMAIL_WRK.CONTACT_SETID.Value;
   &recHist.CONTACT_ID.Value = FO_COMPMAIL_WRK.CONTACT_ID.Value;
   &recHist.OWNERSHIP_ID.Value = FO_COMPMAIL_WRK.OWNERSHIP_ID.Value;
   &recHist.ASSIGNMENT_ID.Value = FO_COMPMAIL_WRK.ASSIGNMENT_ID.Value;
   &recHist.CANDIDATE_ID.Value = &sCandidateID;
   &recHist.CANDIDATE_TYPE.Value = &sCandidateType;
   &recHist.Insert();
End-Function;

/* Create Send History record */
&recSendMailHist = CreateRecord(Record.FO_SNDMAIL_HIST);
/* Assign Email ID */
&objIDGenerator = create FO_UTILITIES:AUTO_NUM:AutoNumInstall("EMID", "NEXT", "", "", "");
&sNextNumber = &objIDGenerator.AssignAutoNum();
&recSendMailHist.DATETIME_SENT.Value = %Datetime;
&recSendMailHist.EMAIL_ID.Value = &sNextNumber;
&recSendMailHist.EMAIL_FROM.Value = FO_SNDEMAIL_WRK.EMAIL_FROM.Value;
&recSendMailHist.EMAIL_TO.Value = FO_SNDEMAIL_WRK.EMAIL_TO.Value;
&recSendMailHist.EMAIL_CC.Value = FO_SNDEMAIL_WRK.EMAIL_CC.Value;
&recSendMailHist.EMAIL_BCC.Value = FO_SNDEMAIL_WRK.EMAIL_BCC.Value;
&recSendMailHist.FO_EMAIL_SUBJECT.Value = FO_SNDEMAIL_WRK.FO_EMAIL_SUBJECT.Value;
&recSendMailHist.EMAIL_TEXTLONG.Value = FO_SNDEMAIL_WRK.EMAIL_TEXTLONG.Value;
&recSendMailHist.Insert();

/* Create Send History Attachment record */

&rsFoSndEmailAtt = GetLevel0()(1).GetRowset(Scroll.FO_SNDEMAIL_WS);
If All(&rsFoSndEmailAtt(1).FO_SNDEMAIL_WS.ATTACHUSERFILE.Value) Then
   For &i = 1 To &rsFoSndEmailAtt.ActiveRowCount
      &recSendMailAtt = &rsFoSndEmailAtt(&i).FO_SNDEMAIL_WS;
      &recSendMailHistAtt = CreateRecord(Record.FO_SNDMAIL_ATT);
      &recSendMailHistAtt.EMAIL_ID.Value = &sNextNumber;
      &recSendMailHistAtt.SEQ_NUM.Value = &i;
      If All(&recSendMailAtt.SCM_ATTACH_ID.Value) Then
         &recSendMailHistAtt.SCM_ATTACH_ID.Value = &recSendMailAtt.SCM_ATTACH_ID.Value;
         &recSendMailHistAtt.ATT_VERSION.Value = 1;
         &recSendMailHistAtt.RESUME_TEXT_FILE.Value = " ";
         &recSendMailHistAtt.FROM_RESUME_TEXT.Value = "N";
      Else
         &recSendMailHistAtt.SCM_ATTACH_ID.Value = " ";
         &recSendMailHistAtt.ATT_VERSION.Value = 0;
         &recSendMailHistAtt.RESUME_TEXT_FILE.Value = &recSendMailAtt.ATTACHUSERFILE.Value;
         &recSendMailHistAtt.FROM_RESUME_TEXT.Value = "Y";
      End-If;
      &recSendMailHistAtt.Insert();
      
   End-For;
End-If;

/* Create History record */


Evaluate FO_COMPMAIL_WRK.BCPGNAME.Value
When = "FO_APPLICANT"
   &sCandidateID = FO_COMPMAIL_WRK.APPLID.Value;
   &sCandidateType = "A";
   CreateHistRec();
   Break;
When = "FO_EMPLOYEE"
   &sCandidateID = FO_COMPMAIL_WRK.EMPLID.Value;
   &sCandidateType = "E";
   CreateHistRec();
   Break;
When = "CONTACT_INFO"
   CreateHistRec();
   Break;
When = "FO_ASSIGNMENTS"
   &sCandidateID = FO_COMPMAIL_WRK.CANDIDATE_ID.Value;
   &sCandidateType = FO_COMPMAIL_WRK.CANDIDATE_TYPE.Value;
   CreateHistRec();
   Break;
When = "FO_ORDER_MGR"
   &sCandidateID = FO_COMPMAIL_WRK.CANDIDATE_ID.Value;
   &sCandidateType = FO_COMPMAIL_WRK.CANDIDATE_TYPE.Value;
   CreateHistRec();
   Break;
When = "FO_APPL_OVW"
When = "FO_EMPL_OVW"
   &sCandidateID = FO_COMPMAIL_WRK.CANDIDATE_ID.Value;
   &sCandidateType = FO_COMPMAIL_WRK.CANDIDATE_TYPE.Value;
   CreateHistRec();
   Break;
When = "FO_ORDERS"
When = "FO_PEOPLE_SRCH"
   
   If All(FO_COMPMAIL_WRK.CANDIDATE_ID.Value) Then
      &sCandidateID = FO_COMPMAIL_WRK.CANDIDATE_ID.Value;
      &sCandidateType = FO_COMPMAIL_WRK.CANDIDATE_TYPE.Value;
      CreateHistRec();
   Else
      &bCreateOneHist = False;
      &aryCandidateID = CreateArrayRept(" ", 0);
      &aryCandidateType = CreateArrayRept(" ", 0);
      &strValue = FO_COMPMAIL_WRK.STR_CANDIDATE_ID.Value;
      Repeat
         &strVarValue = extract(&strValue, ",");
         &aryCandidateID.Push(&strVarValue);
      Until Len(&strValue) = 0;
      &strValue = FO_COMPMAIL_WRK.STR_CANDIDATE_TYPE.Value;
      Repeat
         &strVarValue = extract(&strValue, ",");
         &aryCandidateType.Push(&strVarValue);
      Until Len(&strValue) = 0;
      For &i = 1 To &aryCandidateID.Len
         &sCandidateID = &aryCandidateID [&i];
         &sCandidateType = &aryCandidateType [&i];
         CreateHistRec();
      End-For;
   End-If;
   
End-Evaluate;


&fac = create SCM_ARCH_ATTACH:Attachments:AttachmentFactory();


Local Record &recAttServer;

If (None(&scm_app_interface_comp)) Then
   &scm_app_interface_comp = create SCM_ARCH_ATTACH:UI:AttachmentHandler();
End-If;


/* Send the email */


&MAIL_TO = FO_SNDEMAIL_WRK.EMAIL_TO;
&MAIL_FLAGS = 0;
&MAIL_CC = FO_SNDEMAIL_WRK.EMAIL_CC;
&MAIL_BCC = FO_SNDEMAIL_WRK.EMAIL_BCC;
&MAIL_SUBJECT = FO_SNDEMAIL_WRK.FO_EMAIL_SUBJECT;
&MAIL_TEXT = FO_SNDEMAIL_WRK.EMAIL_TEXTLONG;


Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();

&email.From = FO_SNDEMAIL_WRK.EMAIL_FROM;
&email.Recipients = FO_SNDEMAIL_WRK.EMAIL_TO;
&email.Recipients = Substitute(&email.Recipients, ";", ",");
&email.CC = FO_SNDEMAIL_WRK.EMAIL_CC;
&email.BCC = FO_SNDEMAIL_WRK.EMAIL_BCC;
&email.BCC = Substitute(&email.BCC, ";", ",");
&email.Subject = FO_SNDEMAIL_WRK.FO_EMAIL_SUBJECT;
&email.Text = FO_SNDEMAIL_WRK.EMAIL_TEXTLONG;

If All(&rsFoSndEmailAtt(1).FO_SNDEMAIL_WS.ATTACHUSERFILE.Value) Then
   Local string &plain_text = "Hi there!";
   Local PT_MCF_MAIL:MCFBodyPart &text = create PT_MCF_MAIL:MCFBodyPart();
   
   &text.Text = FO_SNDEMAIL_WRK.EMAIL_TEXTLONG;
   
   Local PT_MCF_MAIL:MCFMultipart &mp = create PT_MCF_MAIL:MCFMultipart();
   &mp.AddBodyPart(&text);
   Local string &surl, &sResumeFil;
   Local SCM_ARCH_ATTACH:Attachments:Server &server;
   
   
   For &i = 1 To &rsFoSndEmailAtt.ActiveRowCount
      &recSendMailAtt = &rsFoSndEmailAtt(&i).FO_SNDEMAIL_WS;
      
      If &recSendMailAtt.FROM_RESUME_TEXT.Value = "N" Then
         &recAttServer = CreateRecord(Record.PV_ATT_SERVERS);
         &recAttServer.SERVER_ID.Value = &recSendMailAtt.SERVER_ID.Value;
         &recAttServer.SERVER_TYPE.Value = &recSendMailAtt.SERVER_TYPE.Value;
         &recAttServer.SelectByKey();
         
         &server = create SCM_ARCH_ATTACH:Attachments:Server(&recAttServer);
         &surl = &server.url | &recAttServer.SERVER_PATH.Value | "/";
         
         &sResumeFile = &surl | &recSendMailAtt.ATTACHSYSFILENAME.Value;
      Else
         &sResumeFile = GetEnv("PS_SERVDIR") | "\" | &recSendMailAtt.ATTACHUSERFILE.Value;
         &sResumeFile = GetEnv("PS_SERVDIR") | "\" | &recSendMailAtt.ATTACHSYSFILENAME.Value;
      End-If;
      
      
      Local PT_MCF_MAIL:MCFBodyPart &attach = create PT_MCF_MAIL:MCFBodyPart();
      &attach.SetAttachmentContent(&sResumeFile, %FilePath_Absolute, &recSendMailAtt.ATTACHUSERFILE.Value, &recSendMailAtt.ATTACHUSERFILE.Value, "", "");
      
      
      &mp.AddBodyPart(&attach);
      
   End-For;
   
   &email.MultiPart = &mp;
End-If;

Local integer &res = &email.Send();

&rsFoSndEmailAtt = GetLevel0()(1).GetRowset(Scroll.FO_SNDEMAIL_WS);
For &i = 1 To &rsFoSndEmailAtt.ActiveRowCount
   &recSendMailAtt = &rsFoSndEmailAtt(&i).FO_SNDEMAIL_WS;
   
   If &recSendMailAtt.FROM_RESUME_TEXT.Value = "Y" Then
      /* &sResumeFile = GetEnv("PS_SERVDIR") | "\" | &recSendMailAtt.ATTACHUSERFILE.Value;*/
      &sResumeFile = GetEnv("PS_SERVDIR") | "\" | &recSendMailAtt.ATTACHSYSFILENAME.Value;
      &FileToDelete = GetFile(&sResumeFile, "U", %FilePath_Absolute);
      &FileToDelete.Delete();
   End-If;
End-For;


/*************************************/
rem Copyright App Package by prakasp1;
rem All original methods used;
REMARK Protected under Patent 996537;
/*************************************/

class RunDMS
   method RunDMS(&RunCntlRec_ As Record);
   method GetFileAsString(&oFile As File) Returns string;
   property Record Rec;
   property integer Status_;
   property integer RetStatus_;
   property integer PrcsInstance_;
   property integer MaxWaitTimeInMinutes_;
   property string FileString_;
   property string AttachID_
private
   instance string &run_cntl_id, &kk_run_status;
   instance ProcessRequest &Request;
   instance boolean &iscompleted;
   
   
   method scheduleProcess() Returns integer;
   method waitForProcess();
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/

method RunDMS
   /+ &RunCntlRec_ as Record +/
   
   rem Retrieve Run Control Record;
   %This.Rec = &RunCntlRec_;
   rem Max Wait Time for process;
   %This.MaxWaitTimeInMinutes_ = %This.Rec.MAX_WAIT_TIME.Value;
   %This.AttachID_ = %This.Rec.SCM_ATTACH_ID.Value;
   rem Pass the File Object to retrieve the File as a string;
   Local string &strTempFile_ = %This.Rec.FILENAME.Value;
   &strTempFile_ = "\\psoau227dev83.appdev.corptst.anz.com\Temp\" | %This.AttachID_ | &strTempFile_;
   try
      Local File &file_ = GetFile(&strTempFile_, "R", "A", %FilePath_Absolute);
      %This.FileString_ = %This.GetFileAsString(&file_);
   catch Exception &FileError
      MessageBox(0, "", 0, 0, "***File Exception...Could not read file*** " | &FileError.ToString());
   end-try;
   rem Schedule the Process;
   &Status_ = %This.scheduleProcess();
   If &Status_ = 0 Then
      rem Retrieve the process instance;
      %This.PrcsInstance_ = &Request.ProcessInstance;
   End-If;
   rem Retrieve the Scheduling Status for the Process;
   %This.RetStatus_ = &Status_;
   rem %This.waitForProcess();
   
end-method;

method scheduleProcess
   /+ Returns Integer +/
   
   &Request = CreateProcessRequest();
   &Request.RunControlID = &Rec.RUN_CNTL_ID.Value;
   rem check to see if the user wants to run in the Bootstrap mode or not;
   If (&Rec.ANZ_DM_RUN_MODE.Value = "R") Then
      rem This is regular mode access;
      &Request.ProcessType = "Data Mover";
   Else
      rem Be very careful...This is Bootstrap mode access;
      &Request.ProcessType = "DATA MOVER BS";
   End-If;
   rem Custom definition;
   &Request.ProcessName = "ANZDMS";
   &Request.RunLocation = &Rec.SERVERNAME.Value;
   rem &Request.FileName = "D:\psoft\auf0dev1b\scripts\ANZTEST_PP.dms";
   &Request.RunDateTime = %Datetime;
   &Request.TimeZone = %ServerTimeZone;
   rem Schedule the request and check the status;
   &Request.Schedule();
   Return &Request.Status;
   
end-method;

method waitForProcess
   
   Local integer &K;
   Local boolean &timeout;
   Local time &timeend;
   Local string &run_status;
   Local JavaObject &Pause;
   Local number &Seconds;
   
   &timeend = AddToTime(%Time, 0, %This.MaxWaitTimeInMinutes_, 0);
   &timeout = False;
   &iscompleted = False;
   Repeat
      try
         &Seconds = 5;
         &Pause = GetJavaClass("java.lang.Thread");
         &Pause.sleep(&Seconds * 1000);
         &Pause = Null;
      catch Exception &NoProblem
         &Pause = Null;
      end-try;
      SQLExec("SELECT RUNSTATUS FROM PS_PMN_PRCSLIST WHERE PRCSINSTANCE=:1", &Request.ProcessInstance, &run_status);
      Evaluate &run_status
      When = "1"
      When = "2"
      When = "3"
      When = "8"
      When = "9"
      When = "10"
      When = "14"
      When = "17"
         &iscompleted = True;
         Break;
      End-Evaluate;
      &timeout = (%Time > &timeend);
   Until (&iscompleted) Or
      (&timeout);
   
   If Not (&iscompleted) Then
      MessageBox(16, " ", 22015, 6, " ", &Request.ProcessInstance, %This.MaxWaitTimeInMinutes_);
   End-If;
end-method;

/*
This method takes a PS File object and reads the contents from disk exactly how it appears.
File must be closed to release lock, then java inputstream reads file.
*/
method GetFileAsString
   /+ &oFile as File +/
   /+ Returns String +/
   
   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;
   
   
   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");
   
   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();
   
   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
      
      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
   
   /*open up the file again so that addition things could be written to file */
   rem &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);
   
   Return &sFullFileContent;
   
end-method;

--GENERATE an XLS file from App Engine
&FileName_Path_ = "D:\psoft\auf0dev1b\PSOPTIONS_" | %Date | ".xls";
/* Opening a CSV file */
&GL_LEDFile_ = GetFile(&FileName_Path_, "W", %FilePath_Absolute);
/* Checking whether the File if Opened Successfully */
If &GL_LEDFile_.IsOpen Then
   &GL_QryObj_ = %Session.GetQuery();
   /* Initialising the Rowset & Values */
   &GL_LEDRS_ = CreateRowset(Record.PSOPTIONS);
   &GL_LEDRS_.Fill();
   &GL_CSVString_ = &GL_QryObj_.FormatResultString(&GL_LEDRS_, %Query_XLS, 1, &GL_LEDRS_.ActiveRowCount);
   /* Writing the file with the Location Data */
   &GL_LEDFile_.WriteLine(&GL_CSVString_);
Else
   Error ("Error: Opening of File Failed");
End-If;
&GL_LEDFile_.Close();


--SENDING MAIL MY APP CLASS START
REM ***************************************************************;
REM * ANZ(Used to send mail to the respective user / group)	       *
REM * Developer: prakasp1						   				   *
REM * Created Date: 23/07/2009									   *
REM *															   *
REM * Description: 	This class can be used to send emails from     *
REM *               Interfaces along with the output attached      *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/*SCM_PORTAL*/
import SCM_UTILITIES:Portal:portalURL;

class ANZSendEmail
   method ANZSendEmail();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMailTo_(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   method GetUrl_() Returns string;
   
end-class;

method ANZSendEmail
   /* Keeping the Constructor blank for the time being */
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMailTo_
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   
   Local integer &rcEmail;
   Local string &msgBody, &emailText_, &URL_, &encodedText;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   rem I dnt think that the function actually works;
   Local boolean &EmailIDValidate_ = ValidateEmailAddress(&emailAddress);
   
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   &msgBody = GetHTMLText(HTML.ANZ_EMAIL_SKELETON, &emailAddress, "", "", "", "", "", "", "", "");
   &URL_ = %This.GetUrl_();
   rem &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", MsgGetText(18130, 15031, "EWN_Notification"), MsgGetText(18130, 15032, "Process_Name"), MsgGetText(18130, 15033, "Category"), MsgGetText(18130, 15030, "GoTo"), MsgGetText(18130, 15020, "Message_Detail"));
   &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", "Script Scheduling Failure Notification", MsgGetText(18130, 15032, "Process_Name"), "Process Type:", MsgGetText(18130, 15030, "GoTo"), "ANZ DMS Utilities", "Scheduled By:", %OperatorId, "Scheduled At:", %Datetime);
   rem &emailText_ = GetHTMLText(HTML.ANZ_TESTING_ONLY);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   Local boolean &ret = EncodeText(&emailText_, "ISO_8859-1", "B", &encodedText);
   rem uncomment the line below to revert the changes. currently commented to test the EncodeText function;
   rem &htmlPart.Text = &emailText_;
   rem encoding somehow doesn't seem to work;
   &htmlPart.Text = &encodedText;
   &htmlPart.ContentType = "text/html";
   &email.AddHeader("X-Mailer", "Custom Header");
   /* Always use these */
   &email.Priority = 1;
   &email.Importance = "high";
   &email.Sensitivity = "private";
   &multiPart.AddBodyPart(&htmlPart);
   Local string &ContentType_ = &multiPart.GetContentType();
   /* The attachment somehow does not come along with the email
   &multiPart.SubType = "alternative; differences=Content-type";
   */
   &email.MultiPart = &multiPart;
   /* Add the Error File as an Attachment */
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   Else
      rem &rcEmail will be blank. Need to set it here;
   End-If;
   Return &rcEmail;
end-method;

method GetUrl_
   /+ Returns String +/
   
   try
      Local SCM_UTILITIES:Portal:portalURL &GetPortalURL_ = create SCM_UTILITIES:Portal:portalURL();
      Local string &URL;
      
      &URL = &GetPortalURL_.GenerateComponentPortalURL("ANZ_DMS_MENU", "RUN_ANZ_DMS", "ANZ_RUN_DMS", "U", Null);
      Return &URL;
      /* If there is no servlet setup then generate an empty string */
   catch Exception &ec
      Return "";
   end-try;
end-method;
--END
--Code used to call this method START
try
      Local integer &rcEmail;
      /* This Email ID should be provided on the Control ID page for the Process */
      &pEmailAddress = "prashant.prakash@anz.com";
      /* Retrieve Subject from Message Catalog */
      Local string &Subject = "The Process could not be scheduled";
      /* Add additional text in the email body from Message Catalog */
      &txt1 = MsgGetExplainText(21000, 204, "Message Not Found");
      
      Local string &email = &txt1 | Char(13);
      &ErrorFileName = "D:\temp\" | &LVL0REC.SCM_ATTACH_ID.Value | &LVL0REC.FILENAME.Value;
      Local string &fileName = &LVL0REC.SCM_ATTACH_ID.Value | &LVL0REC.FILENAME.Value;
      &rcEmail = &objMail.SendMailTo_(&pEmailAddress, &Subject, &ErrorFileName, &fileName, &email);
      If &rcEmail <> 1 Then
         /* error processing */
         MessageBox(0, "", 0, 0, "Report could not be emailed to: " | &pEmailAddress);
      Else
         MessageBox(0, "", 0, 0, "Email successfully sent to : " | &pEmailAddress);
      End-If;
      
   catch Exception &sendmail_
      MessageBox(0, "", 0, 0, "Unable to send mail for : " | &sendmail_.ToString());
   end-try;



import PT_DIAGNOSTICS:*;

class GetPSRECDEFNCount extends PTDiagnostics
   /* Constructor */
   
   method GetPSRECDEFNCount();
   
   /* Public Method */
   method GetDiagnosticInfo();
   method IsPlugIn();
   
private
   
end-class;

method GetPSRECDEFNCount;
   Local boolean &status;
   Local string &sError;
   %Super = create PTDiagnostics();
   &status = %Super.SetProperty(%This, "Purpose", "String", "This is a diagnostic to count the number of records, views, derived
work records, and sub-records in your PeopleSoft Database.");
end-method;

method GetDiagnosticInfo
   Local boolean &status;
   Local number &rc1;
   Local Rowset &rs1;
   Local string &sError;
   
   &rs1 = CreateRowset(Record.PSRECDEFN);
   &rc1 = &rs1.Fill("where RECTYPE = 0");
   &status = %Super.InsertData("Number", "Number of Records: ", &rs1.RowCount);
   
   &rs1 = CreateRowset(Record.PSRECDEFN);
   &rc1 = &rs1.Fill("where RECTYPE = 1");
   &status = %Super.InsertData("Number", "Number of Views: ", &rs1.RowCount);
   
   &rs1 = CreateRowset(Record.PSRECDEFN);
   &rc1 = &rs1.Fill("where RECTYPE = 2");
   &status = %Super.InsertData("Number", "Number of Derived/Work Records: ", &rs1.RowCount);
   
   &rs1 = CreateRowset(Record.PSRECDEFN);
   &rc1 = &rs1.Fill("where RECTYPE = 3");
   &status = %Super.InsertData("Number", "Number of sub-records: ", &rs1.RowCount);
   
end-method;

method IsPlugIn
end-method;

/***
This class has been created to Parse the attached DMS file(s).
It will search for the following Keywords:
1. UPDATE
2. DELETE
3. INSERT
4. EXPORT
5. IMPORT
6. FROM
It will be later modified to include parsing of the SET commands as well.
***/
class DMSFileProc
   method DMSFileProc();
   method ParseDMSFile(&strDMSFilePart_ As string) Returns string;
   
end-class;

/**********
CONSTRUCTOR
***********/

method DMSFileProc
   /* keeping the constructor blank for the time being */
end-method;

method ParseDMSFile
   /+ &strDMSFilePart_ as String +/
   /+ Returns String +/
   
   Local boolean &ANZPatternMatchFlg_;
   Local string &strTableName_, &ANZMatchBegin_;
   Local number &M;
   Local array of string &ANZRecord_;
   &ANZRecord_ = CreateArrayRept("", 0);
   
   rem MessageBox(0, "", 0, 0, "File Part: " | &strDMSFilePart_);
   &strDMSFilePart_ = RTrim(Clean(&strDMSFilePart_));
   &strDMSFilePart_ = Substitute(&strDMSFilePart_, Char(26), " "); /* Added this line to remove invalid characters */
   rem looking for the Record Name. Crude of doing it but assuming developer will write the script as per Dev Standards;
   &ANZMatchBegin_ = Substring(&strDMSFilePart_, 1, 2);
   rem Evaluate to find out the Statement type in DMS script;
   Evaluate &ANZMatchBegin_
   When "EX" /* EXPORT TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [2];
      Break;
   When "IM" /* IMPORT TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [2];
      Break;
   When "UP" /* UPDATE TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [2];
      Break;
   When "DE" /* DELETE FROM TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [3];
      If None(&strTableName_) Then
         rem User has used the syntax DELETE TABLE NAME;
         &strTableName_ = &ANZRecord_ [2];
      End-If;
      Break;
   When "IN" /* INSERT INTO TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [3];
      Break;
   When "RUN"
      /* User is trying to run a DMS which references other DMS files. */
      rem Its similar to an Index file;
      Error ("DMS files with RUN command are not allowed");
      Break;
   When-Other;
      rem It might be a comment or a SET command;
      &ANZPatternMatchFlg_ = DBPatternMatch(&strDMSFilePart_, "% PS%", True);
      rem MessageBox(0, "", 0, 0, "Match Flag " | &ANZPatternMatchFlg_);
      Break;
   End-Evaluate;
   
   Return &strTableName_;
end-method;

REM ***************************************************************;
REM * ANZ(Used to send mail to the respective user / group)	       *
REM * Developer: prakasp1						   				   *
REM * Created Date: 23/07/2009									   *
REM *															   *
REM * Description: 	This class can be used to send emails from     *
REM *               Interfaces along with the output attached      *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/*SCM_PORTAL*/
import SCM_UTILITIES:Portal:portalURL;

class ANZSendEmail
   method ANZSendEmail();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMailTo_(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   method GetUrl_() Returns string;
   
end-class;

method ANZSendEmail
   /* Keeping the Constructor blank for the time being */
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMailTo_
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   
   Local integer &rcEmail;
   Local string &msgBody, &emailText_, &URL_, &encodedText;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   rem I dnt think that the function actually works;
   Local boolean &EmailIDValidate_ = ValidateEmailAddress(&emailAddress);
   
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   &msgBody = GetHTMLText(HTML.ANZ_EMAIL_SKELETON, &emailAddress, "", "", "", "", "", "", "", "");
   &URL_ = %This.GetUrl_();
   rem &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", MsgGetText(18130, 15031, "EWN_Notification"), MsgGetText(18130, 15032, "Process_Name"), MsgGetText(18130, 15033, "Category"), MsgGetText(18130, 15030, "GoTo"), MsgGetText(18130, 15020, "Message_Detail"));
   &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", "Script Scheduling Failure Notification", MsgGetText(18130, 15032, "Process_Name"), "Process Type:", MsgGetText(18130, 15030, "GoTo"), "ANZ DMS Utilities", "Scheduled By:", %OperatorId, "Scheduled At:", %Datetime);
   rem &emailText_ = GetHTMLText(HTML.ANZ_TESTING_ONLY);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   Local boolean &ret = EncodeText(&emailText_, "ISO_8859-1", "B", &encodedText);
   rem uncomment the line below to revert the changes. currently commented to test the EncodeText function;
   rem &htmlPart.Text = &emailText_;
   rem encoding somehow doesn't seem to work;
   &htmlPart.Text = &encodedText;
   &htmlPart.ContentType = "text/html";
   &email.AddHeader("X-Mailer", "Custom Header");
   /* Always use these MCFEmail Class Properties --START */
   &email.Priority = 1;
   &email.Importance = "high";
   &email.Sensitivity = "private";
   /* Always use these MCFEmail Class Properties --END */
   &multiPart.AddBodyPart(&htmlPart);
   Local string &ContentType_ = &multiPart.GetContentType();
   /* The attachment somehow does not come along with the email
   &multiPart.SubType = "alternative; differences=Content-type";
   */
   &email.MultiPart = &multiPart;
   /* Add the Error File as an Attachment */
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   Else
      rem &rcEmail will be blank. Need to set it here;
   End-If;
   Return &rcEmail;
end-method;

method GetUrl_
   /+ Returns String +/
   
   try
      Local SCM_UTILITIES:Portal:portalURL &GetPortalURL_ = create SCM_UTILITIES:Portal:portalURL();
      Local string &URL;
      rem How do I by pass the sign-on?;
      &URL = &GetPortalURL_.GenerateComponentPortalURL("ANZ_DMS_MENU", "RUN_ANZ_DMS", "ANZ_RUN_DMS", "U", Null);
      Return &URL;
   catch Exception &ec
      Return "";
   end-try;
end-method;

REM ***************************************************************;
REM * ANZ(Used to send mail to the respective user / group)	       *
REM * Developer: prakasp1						   				   *
REM * Created Date: 16/07/2009									   *
REM *															   *
REM * Description: 	This class is used to schedule DMS             *
REM ***************************************************************;

import ANZ_RUN_DMS:DMSFileProc;

class RunDMS
   method RunDMS(&RunCntlRec_ As Record, &ANZSimulateDMS_ As string);
   
   property Record Rec;
   property integer Status_;
   property integer RetStatus_;
   property integer PrcsInstance_;
   property integer MaxWaitTimeInMinutes_;
   property string FileString_;
   property string FileStringNew_;
   property string AttachID_;
   property string RecName_
private
   instance string &run_cntl_id, &kk_run_status;
   instance ProcessRequest &Request;
   instance boolean &iscompleted;
   
   method GetFileAsString(&oFile As File) Returns string;
   method FileCopy(&strOldFileInfo As string, &strNewFilePath As string, &strNewFileName As string);
   method WaitForNSeconds(&nSeconds As number);
   method scheduleProcess() Returns integer;
   method waitForProcess();
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/

method RunDMS
   /+ &RunCntlRec_ as Record, +/
   /+ &ANZSimulateDMS_ as String +/
   Local array of string &AS;
   Local integer &M, &StylePos;
   Local string &strRecName_, &strTempFile_, &strTempFileNew_, &Temp_;
   Local File &file_, &CopiedFile_;
   Local ANZ_RUN_DMS:DMSFileProc &ANZParseFile_ = create ANZ_RUN_DMS:DMSFileProc();
   Local boolean &FileBoolean_;
   
   rem Retrieve Run Control Record;
   %This.Rec = &RunCntlRec_;
   rem Max Wait Time for process;
   %This.MaxWaitTimeInMinutes_ = %This.Rec.MAX_WAIT_TIME.Value;
   %This.AttachID_ = %This.Rec.SCM_ATTACH_ID.Value;
   rem Pass the File Object to retrieve the File as a string;
   &strTempFile_ = %This.Rec.FILENAME.Value;
   &strTempFileNew_ = "\\psoau227dev83.appdev.corptst.anz.com\Temp\" | %This.AttachID_ | &strTempFile_;
   
   try
      &file_ = GetFile(&strTempFileNew_, "R", "A", %FilePath_Absolute);
      rem Original file retrieved as string;
      %This.FileString_ = %This.GetFileAsString(&file_);
      rem Copy the file to Scripts HOME folder so that Data Mover is able to access it;
      %This.FileCopy(&strTempFileNew_, "D:\psoft\auf0dev1b\scripts\", &strTempFile_);
      rem The copied file should be modified. the uploaded file should not be modified;
      &CopiedFile_ = GetFile("D:\psoft\auf0dev1b\scripts\" | &strTempFile_, "R", "A", %FilePath_Absolute);
      If &CopiedFile_.IsOpen Then
         &StylePos = &CopiedFile_.GetPosition();
         rem Original file retrieved as string;
         %This.FileStringNew_ = %This.GetFileAsString(&CopiedFile_);
         If (&ANZSimulateDMS_ = "Y") Then
            rem User wants to simulate DMS Execution;
            If (&FileBoolean_) Then
            Else
               %This.FileStringNew_ = "SET NO DATA;" | Char(10) | %This.FileStringNew_;
               &FileBoolean_ = True;
            End-If;
            &CopiedFile_ = GetFile("D:\psoft\auf0dev1b\scripts\" | &strTempFile_, "U", %FilePath_Absolute);
            If &CopiedFile_.IsOpen Then
               &CopiedFile_.SetPosition(&StylePos);
               rem File modified to include the SET NO DATA command to simulate DMS;
               &CopiedFile_.WriteString(%This.FileStringNew_);
            End-If;
         Else
            rem User wants to execute the DMS as it is;
         End-If; /* Simulate END-IF */
      End-If; /* Copied File Open END-IF */
      rem Parse the DMS file before scheduling;
      &AS = CreateArrayRept("", 0);
      &AS = Split(%This.FileString_, ";");
      For &M = 1 To &AS.Len
         &strRecName_ = &ANZParseFile_.ParseDMSFile(&AS [&M]);
         If All(&strRecName_) Then
            &Temp_ = " " | &strRecName_ | ";" | &Temp_;
         Else
            rem Comments or SET Statements encountered;
         End-If;
      End-For;
      %This.RecName_ = &Temp_;
   catch Exception &FileError
      MessageBox(0, "", 0, 0, "***File Exception...Could not read file*** " | &FileError.ToString());
   end-try;
   /*
   rem Schedule the Process;
   &Status_ = %This.scheduleProcess();
   If &Status_ = 0 Then
      rem Retrieve the process instance;
      %This.PrcsInstance_ = &Request.ProcessInstance;
   End-If;
   rem Retrieve the Scheduling Status for the Process;
   %This.RetStatus_ = &Status_;
   rem Use this method to wait for n seconds;
   rem %This.WaitForNSeconds(30);
   rem This is definitely a better choice for waiting as the thread is put to sleep for that duration;
   rem %This.waitForProcess();
   */
end-method;

method scheduleProcess
   /+ Returns Integer +/
   
   &Request = CreateProcessRequest();
   &Request.RunControlID = %This.Rec.RUN_CNTL_ID.Value;
   rem check to see if the user wants to run in the Bootstrap mode or not;
   If (&Rec.ANZ_DM_RUN_MODE.Value = "R") Then
      rem This is regular mode access;
      &Request.ProcessType = "Data Mover";
   Else
      rem Be very careful...This is Bootstrap mode access;
      &Request.ProcessType = "DATA MOVER BS";
   End-If;
   rem Custom definition;
   &Request.ProcessName = "ANZDMS";
   &Request.RunLocation = %This.Rec.SERVERNAME.Value;
   rem &Request.FileName = "D:\psoft\auf0dev1b\scripts\ANZTEST_PP.dms";
   &Request.RunDateTime = %Datetime;
   &Request.TimeZone = %ServerTimeZone;
   rem Schedule the request and check the status;
   &Request.Schedule();
   Return &Request.Status;
   
end-method;

method waitForProcess
   
   Local integer &K;
   Local boolean &timeout;
   Local time &timeend;
   Local string &run_status;
   Local JavaObject &Pause;
   Local number &Seconds;
   
   &timeend = AddToTime(%Time, 0, %This.MaxWaitTimeInMinutes_, 0);
   &timeout = False;
   &iscompleted = False;
   Repeat
      try
         &Seconds = 5;
         &Pause = GetJavaClass("java.lang.Thread");
         &Pause.sleep(&Seconds * 1000);
         &Pause = Null;
      catch Exception &NoProblem
         &Pause = Null;
      end-try;
      SQLExec("SELECT RUNSTATUS FROM PS_PMN_PRCSLIST WHERE PRCSINSTANCE=:1", &Request.ProcessInstance, &run_status);
      Evaluate &run_status
      When = "1"
      When = "2"
      When = "3"
      When = "8"
      When = "9"
      When = "10"
      When = "14"
      When = "17"
         &iscompleted = True;
         Break;
      End-Evaluate;
      &timeout = (%Time > &timeend);
   Until (&iscompleted) Or
      (&timeout);
   
   If Not (&iscompleted) Then
      MessageBox(16, " ", 22015, 6, " ", &Request.ProcessInstance, %This.MaxWaitTimeInMinutes_);
   End-If;
end-method;

/*
This method takes a PS File object and reads the contents from disk exactly how it appears.
File must be closed to release lock, then java inputstream reads file.
*/
method GetFileAsString
   /+ &oFile as File +/
   /+ Returns String +/
   
   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;
   
   
   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");
   
   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();
   
   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
      
      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
   
   /*open up the file again so that addition things could be written to file */
   rem &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);
   
   Return &sFullFileContent;
   
end-method;

/** This method will copy a file to another location **/
method FileCopy
   /+ &strOldFileInfo as String, +/
   /+ &strNewFilePath as String, +/
   /+ &strNewFileName as String +/
   
   Local File &oOldFile;
   Local File &oNewFile;
   Local string &strFileName;
   Local string &strData;
   Local integer &iPos, &iTempPos;
   
   &oOldFile = GetFile(&strOldFileInfo, "R", "A", %FilePath_Absolute);
   &strFileName = &oOldFile.Name;
   &iTempPos = Find("\", &strFileName);
   While &iTempPos > 0 And
         &iTempPos < Len(&strFileName)
      &iPos = &iTempPos;
      &iTempPos = Find("\", &strFileName, &iTempPos + 1);
   End-While;
   rem &strFileName = Substring(&strFileName, &iPos + 1, Len(&strFileName));
   
   &oNewFile = GetFile(&strNewFilePath | &strNewFileName, "W", "A", %FilePath_Absolute);
   
   While &oOldFile.ReadLine(&strData);
      &oNewFile.WriteLine(&strData);
   End-While;
   
   &oOldFile.Close();
   &oNewFile.Close();
   
end-method;

method WaitForNSeconds
   /+ &nSeconds as Number +/
   
   Local time &tCurTime;
   While AddToTime(&tCurTime, 0, 0, &nSeconds) > %Time
      /*stay in loop*/
   End-While;
   
end-method;


--Very Simple HTML Example but very nicely done
Global string &g_bstation_page; /*PV8.0 SP2*/

Function Admin_Links(&AdminGroup)
   remark Get the admin links for the main page from the PV_ADM_PAGE_TBL;
   If %Panel = "PV_ADM_MAIN" Or
         %Panel = "PV_ADM_MAIN2" Then
      &rs = CreateRowset(Record.PV_ADM_PAGE_TBL);
      &rs.fill("WHERE PV_ADM_SUB_ITEM2 = :1", &AdminGroup);
      &rs.sort(PV_ADM_PAGE_TBL.SEQNUM, "A");
      &lang = %Language;
      
      For &i = 1 To &rs.activerowcount
         &row = &rs.getrow(&i);
         &msg_set_nbr = &row.PV_ADM_PAGE_TBL.MESSAGE_SET_NBR.value;
         &msg_nbr = &row.PV_ADM_PAGE_TBL.MESSAGE_NBR.value;
         Rem -- PV8.4: URLFIX - Read the menu & component info from table ------------;
         &menu = &row.PV_ADM_PAGE_TBL.MENUNAME_STRING.value;
         &component = &row.PV_ADM_PAGE_TBL.COMPONENT_TITLE.value;
         &URL = GenerateComponentContentURL(%Portal, %Node, @("MenuName." | &menu), %Market, @("Component." | &component), "", "");
         rem &url = &row.PV_ADM_PAGE_TBL.URL.value;
         &TXT = MsgGetText(&msg_set_nbr, &msg_nbr, "Message Could Not Be Found");
         &Descr = MsgGetExplainText(&msg_set_nbr, &msg_nbr, "No Explanation Text found");
         &Full_url = &URL;
         If &AdminGroup = "Procurement" Then
            PV_ADM_MAIN_WK.PV_HTMLAREA = PV_ADM_MAIN_WK.PV_HTMLAREA | GetHTMLText(HTML.PV_ADM_TOP_HTML, &TXT, &Descr, &Full_url);
         Else
            PV_ADM_MAIN_WK.PV_HTMLAREA1 = PV_ADM_MAIN_WK.PV_HTMLAREA1 | GetHTMLText(HTML.PV_ADM_TOP_HTML, &TXT, &Descr, &Full_url);
         End-If;
      End-For;
   End-If;
   
End-Function;

&g_bstation_page = " "; /*PV8.0 SP2*/

Admin_Links("Procurement");

--This example is used to display the Administer Procurement Page in eProcurement
--The HTML Looks like
	<TABLE BORDER=0 CELLPADDING=1 CELLSPACING=0>
		<TR>
			<TD>
				<TD VALIGN=TOP ><A HREF="%BIND(:3)" STYLE="FONT-FAMILY: ARIAL, HELVETICA, SANS-SERIF;FONT-SIZE:11PT;FONT-WEIGHT:BOLD;COLOR:#333399">%BIND(:1)</A></TD>
			</TD>
		<TR>   <TD>   
				 <TD VALIGN=BOTTOM><FONT SIZE =2 >      %BIND(:2)</TD>
			</TD>  
		</TR>
		<TR>   <td> <FONT SIZE =1>&nbsp;</td>
		</TR>
	</TABLE>

	REM ***************************************************************;
REM * ANZ(Used to send mail to the respective user / group)	       *
REM * Developer: prakasp1						   				   *
REM * Created Date: 23/07/2009									   *
REM *															   *
REM * Description: 	This class can be used to send emails from     *
REM *               Interfaces along with the output attached      *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/*SCM_PORTAL*/
import SCM_UTILITIES:Portal:portalURL;

class ANZSendEmail
   method ANZSendEmail();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMailTo_(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   method GetUrl_() Returns string;
   
end-class;

method ANZSendEmail
   /* Keeping the Constructor blank for the time being */
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMailTo_
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   
   Local integer &rcEmail;
   Local string &msgBody, &emailText_, &URL_, &encodedText;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   rem I dnt think that the function actually works;
   Local boolean &EmailIDValidate_ = ValidateEmailAddress(&emailAddress);
   
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   &msgBody = GetHTMLText(HTML.ANZ_EMAIL_SKELETON, &emailAddress, "", "", "", "", "", "", "", "");
   &URL_ = %This.GetUrl_();
   rem &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", MsgGetText(18130, 15031, "EWN_Notification"), MsgGetText(18130, 15032, "Process_Name"), MsgGetText(18130, 15033, "Category"), MsgGetText(18130, 15030, "GoTo"), MsgGetText(18130, 15020, "Message_Detail"));
   &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", "Script Scheduling Failure Notification", MsgGetText(18130, 15032, "Process_Name"), "Process Type:", MsgGetText(18130, 15030, "GoTo"), "ANZ DMS Utilities", "Scheduled By:", %OperatorId, "Scheduled At:", %Datetime);
   rem &emailText_ = GetHTMLText(HTML.ANZ_TESTING_ONLY);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   Local boolean &ret = EncodeText(&emailText_, "ISO_8859-1", "B", &encodedText);
   rem uncomment the line below to revert the changes. currently commented to test the EncodeText function;
   rem &htmlPart.Text = &emailText_;
   rem encoding somehow doesn't seem to work;
   &htmlPart.Text = &encodedText;
   &htmlPart.ContentType = "text/html";
   &email.AddHeader("X-Mailer", "FSCM Application 8.9");
   /* Always use these MCFEmail Class Properties --START */
   rem Use the From to receive the read receipt;
   &email.From = "prashant.prakash@anz.com";
   &email.ContentLanguage = "en-GB";
   &email.Priority = 1;
   &email.Importance = "high";
   &email.Sensitivity = "private";
   &email.IsReturnReceiptReqd = True;
   rem This can be set later on;
   rem &email.ReplyTo = "prashant.prakash@anz.com";
   /* Always use these MCFEmail Class Properties --END */
   &multiPart.AddBodyPart(&htmlPart);
   Local string &ContentType_ = &multiPart.GetContentType();
   /* The attachment somehow does not come along with the email
   &multiPart.SubType = "alternative; differences=Content-type";
   */
   &email.MultiPart = &multiPart;
   /* Add the Error File as an Attachment */
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   Else
      rem &rcEmail will be blank. Need to set it here;
   End-If;
   Return &rcEmail;
end-method;

method GetUrl_
   /+ Returns String +/
   
   try
      Local SCM_UTILITIES:Portal:portalURL &GetPortalURL_ = create SCM_UTILITIES:Portal:portalURL();
      Local string &URL;
      rem How do I by pass the sign-on?;
      &URL = &GetPortalURL_.GenerateComponentPortalURL("ANZ_DMS_MENU", "RUN_ANZ_DMS", "ANZ_RUN_DMS", "U", Null);
      Return &URL;
   catch Exception &ec
      Return "";
   end-try;
end-method;


/************************* DECLARE EXTERNAL FUNCTIONS *************************/
Declare Function GetLastError Library "kernel32"
      () Returns long As number;
Declare Function FormatMessageA Library "kernel32"
      (long Value As number, long Value As number, long Value As number, long Value As number, string Ref As string, long Value As number, long Value As number) Returns long As number;
Declare Function InternetOpenA Library "wininet.dll"
      (string Value As string, long Value As number, string Value As string, string Value As string, long Value As number) Returns long As number;
Declare Function InternetConnectA Library "wininet.dll"
      (long Value As number, string Value As string, integer Value As number, string Value As string, string Value As string, long Value As number, long Value As number, long Value As number) Returns long As number;
Declare Function FtpSetCurrentDirectoryA Library "wininet.dll"
      (long Value As number, string Value As string) Returns long As number;
Declare Function FtpGetFileA Library "wininet.dll"
      (long Value As number, string Value As string, string Value As string, long Value As number, long Value As number, long Value As number, long Value As number) Returns boolean;
Declare Function FtpDeleteFileA Library "wininet.dll"
      (long Value As number, string Value As string) Returns boolean;
Declare Function FtpCommandA Library "wininet.dll"
      (long Value As number, long Value As number, long Value As number, string Value As string, long Value As number, long Ref As number) Returns boolean;
Declare Function InternetReadFile Library "wininet.dll"
      (long Value As number, string Ref As string, integer Value As number, integer Ref As number) Returns boolean;
Declare Function InternetCloseHandle Library "wininet.dll"
      (long Value As number) Returns integer As number;
/*********************** END DECLARE EXTERNAL FUNCTIONS ***********************/
 
/* Program Variable Declarations */
Local array of string &gFileList;
Local number &gHostOpen, &gHostConnect;
Local string &gHostFileName;
Local number &gReturnCode;
Local boolean &gReturnStatus;
 
Function GetNTMessage(&inReturnCode As number) Returns string;
   Local number &l_MsgLength;
   Local string &l_ReturnMsg;
 
   &l_MsgLength = FormatMessageA(4096, 0, &inReturnCode, 0, &l_ReturnMsg, 256, 0);
   If &l_MsgLength > 0 Then
      Return &l_ReturnMsg;
   Else
      Return "";
   End-If;
End-Function;
 
Function FTPOpenHostConnection(&inLogFile As File) Returns number;
   Local number &l_OPEN_PRECONFIG = 0;
   Local number &l_Handle;
 
   /* Open connection to host */
   &l_Handle = InternetOpenA("Peoplecode FTP", &l_OPEN_PRECONFIG, "", "", 0);
   If &l_Handle = 0 Then
      &inLogFile.WriteLine("FTP ERROR: Unable to open Internet connection.");
   End-If;
   Return &l_Handle;
End-Function;
 
Function FTPConnectToHost(&inLogFile As File, &inHandleOpen As number, &inHostSystem As string, &inHostDirectory As string, &inHostFTPAccount As string, &inHostPassword As string) Returns number;
   Local number &l_FTP_PORT = 21;
   Local number &l_INET_FTP = 1;
   Local number &l_INET_PASSIVE = 134217728;
 
   Local number &l_HostDirSet, &l_Handle;
   Local number &l_ReturnCode;
 
   /* Login to Host */
   &l_Handle = InternetConnectA(&inHandleOpen, &inHostSystem, &l_FTP_PORT, &inHostFTPAccount, &inHostPassword, &l_INET_FTP, &l_INET_PASSIVE, 0);
 
   If &l_Handle = 0 Then
      &inLogFile.WriteLine("FTP ERROR: Unable to open connection to " | &inHostSystem | " !!!");
      Return 0;
   End-If;
 
   /* Change remote directory */
   If All(&inHostDirectory) Then /* If host directory passed, set it. */
      &l_HostDirSet = FtpSetCurrentDirectoryA(&l_Handle, &inHostDirectory);
   Else
      &l_HostDirSet = 1;
   End-If;
 
   If &l_HostDirSet = 0 Then
      &inLogFile.WriteLine("FTP ERROR: Unable to set directory to " | &inHostDirectory | " !!!");
      &l_ReturnCode = InternetCloseHandle(&l_Handle);
      Return 0;
   End-If;
 
   Return &l_Handle;
End-Function;
 
Function FTPGetFileList(&inLogFile As File, &inHandleConnect As number) Returns array of string;
   Local string &l_FTP_CMD = "NLST";
   Local number &l_ASCII = 1;
 
   Local array of string &l_FileList = CreateArrayRept("", 0);
 
   Local number &l_FTPHandle;
   Local string &l_Out, &l_Text_Buffer;
   Local number &l_Bytes = 100;
   Local number &l_Bytes_Read;
   Local boolean &l_ReturnStatus;
   Local number &l_ReturnCode;
 
   &l_ReturnStatus = FtpCommandA(&inHandleConnect, 1, &l_ASCII, &l_FTP_CMD, 0, &l_FTPHandle);
   If &l_FTPHandle = 0 Then
      &inLogFile.WriteLine("FTP ERROR: Unable to get directory !!!");
      Return &l_FileList;
   Else
      &inLogFile.WriteLine("Getting List of files from host.");
      &l_ReturnStatus = InternetReadFile(&l_FTPHandle, &l_Text_Buffer, &l_Bytes, &l_Bytes_Read);
      While &l_Bytes_Read > 0
         &l_Out = &l_Out | &l_Text_Buffer;
         &l_ReturnStatus = InternetReadFile(&l_FTPHandle, &l_Text_Buffer, &l_Bytes, &l_Bytes_Read);
      End-While;
      &l_ReturnCode = InternetCloseHandle(&l_FTPHandle);
   End-If;
   &l_FileList = Split(&l_Out, Char(13) | Char(10));
   &inLogFile.WriteLine(String(&l_FileList.Len) | " file(s) found.");
   Return &l_FileList;
End-Function;
 
Function FTPGetFile(&inLogFile As File, &inHandleConnect As number, &inHostFileName As string, &inLocalDirectory) Returns boolean;
   Local number &l_FTP_ASCII = 1;
   Local string &l_LocalFileName;
   Local number &l_ReturnCode;
   Local string &l_ReturnMsg;
   Local boolean &l_GetFile;
 
   /* Get (Session, local file, remote file, failexist, flags&attibutes, flags, context */
   &inLogFile.WriteLine("Getting " | &inHostFileName | "...");
   &l_LocalFileName = &inLocalDirectory | &inHostFileName;
   &l_GetFile = FtpGetFileA(&inHandleConnect, &inHostFileName, &l_LocalFileName, 0, 0, &l_FTP_ASCII, 0);
 
   If Not &l_GetFile Then
      &l_ReturnCode = GetLastError();
      &l_ReturnMsg = GetNTMessage(&l_ReturnCode);
      &inLogFile.WriteLine("FTP ERROR: " | String(&l_ReturnCode) | " : " | &l_ReturnMsg);
      &inLogFile.WriteLine("FTP ERROR: Unable to retrieve file !!!");
      Return False;
   End-If;
 
   /* Sucessful Get */
   &inLogFile.WriteLine("   Get Sucessful.");
   Return True;
End-Function;
 
Function FTPDeleteFile(&inLogFile As File, &inHandleConnect As number, &inHostFileName As string) Returns boolean;
   Local boolean &l_DeleteFile;
   Local number &l_ReturnCode;
   Local string &l_ReturnMsg;
 
   &l_DeleteFile = FtpDeleteFileA(&inHandleConnect, &inHostFileName);
 
   If Not &l_DeleteFile Then
      &l_ReturnCode = GetLastError();
      &l_ReturnMsg = GetNTMessage(&l_ReturnCode);
      &inLogFile.WriteLine("   FTP ERROR: " | String(&l_ReturnCode) | " : " | &l_ReturnMsg);
      &inLogFile.WriteLine("   FTP ERROR: Unable to delete file.");
      Return False;
   End-If;
 
   /* SUCCESS */
   &inLogFile.WriteLine("   File Deleted from HRSmart server.");
   Return True;
End-Function;
 
/*****************************************************************************/
/* MAIN PROGRAM
/*****************************************************************************/
 
/* Log File */
Local File &gLogFile;
 
/* Host information */
Local string &HOSTSERVER = "www.example.com";
Local string &HOSTACCOUNT = "usename";
Local string &HOSTPASSWORD = "password";
Local string &HOSTDIRECTORY = "";
Local string &FILE_MASK = "%";
 
/* A File Object &gLogFile needs to have already been open prior to calling this routine. */
/* Log information is written to this file */
 
&gHostOpen = FTPOpenHostConnection(&gLogFile);
If &gHostOpen > 0 Then
   &gHostConnect = FTPConnectToHost(&gLogFile, &gHostOpen, &HOSTSERVER, &HOSTDIRECTORY, &HOSTACCOUNT, &HOSTPASSWORD);
   If &gHostConnect > 0 Then
      &gFileList = FTPGetFileList(&gLogFile, &gHostConnect);
      While &gFileList.Len > 0
         &gHostFileName = &gFileList.Shift();
         If DBPatternMatch(&gHostFileName, &FILE_MASK, False) Then
            If FTPGetFile(&gLogFile, &gHostConnect, &gHostFileName, &LOCALDIRECTORY) Then
               &gReturnStatus = FTPDeleteFile(&gLogFile, &gHostConnect, &gHostFileName); 
            End-If;
         End-If;
      End-While;
      &gReturnCode = InternetCloseHandle(&gHostConnect);
      &gReturnCode = InternetCloseHandle(&gHostOpen);
   Else
      &gReturnCode = InternetCloseHandle(&gHostOpen);
   End-If;
End-If;


REMARK Section to generate the CSV Extract;
REMARK 3 types of Extract Format;
REMARK 1. Hyp Detail, 2. PS Details, 3. Summary;

import ANZ_BATCH_LOG:*;

Function ANZStateRecInit(&ANZRecState_ As Record)
   Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
   /* Reset a few values in the Default State Record */
   &msgLog_.println_to_stdout("--><-- Reinitializing few values of the Default State Record --><--");
   ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE5.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE8.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE9.Value = "";
   ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = "";
   ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value = "";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE_LONG.Value = "";
   ANZ_HYP_EXT_AET.WHERE_CLAUSE_LONG.Value = "";
   ANZ_HYP_EXT_AET.ORDER_BY_LONG.Value = "";
   ANZ_HYP_EXT_AET.PV_RTV_TEXT1.Value = "";
   ANZ_HYP_EXT_AET.PV_RTV_TEXT2.Value = "";
   ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "";
End-Function;

Function ANZSelectBalances_(&ANZRec_ As Record)
   
   /*
    SELECT_CLAUSE1 = $dyn_HYP_LCD2
    SELECT_CLAUSE2 = $LC
    SELECT_CLAUSE3 = $dyn_LEDGER    
    SELECT_CLAUSE4 = $dyn_TOP_NODE
    SELECT_CLAUSE5 = $dyn_BOTTOM_NODE
    SELECT_CLAUSE6 = $dyn_LEDGER2
    SELECT_CLAUSE7 = $dyn_TOP_NODE2
    SELECT_CLAUSE8 = $dyn_BOTTOM_NODE2
    SELECT_CLAUSE9 = $dyn_HYP_LCD
    SELECT_CLAUSE_LONG = STANDARD for D, S & H
    WHERE_CLAUSE_LONG = EXCEPTION for D, S & H
    GROUP_BY_ACT = $bal_grp_ord_by2     
    GROUP_BY_LONG = $bal_grp_ord_by 
    */
   
   Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
   
   ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value = "HT.LEDGER";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value = "HT.ANZ_HYPO_TREENODE";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE5.Value = "HT.NODE_LVL1";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE9.Value = "HT.ANZ_HYPO_LCD";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value = "HT2.LEDGER";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value = "HT2.ANZ_HYPO_TREENODE";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE8.Value = "HT2.NODE_LVL1";
   ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value = "HT2.ANZ_HYPO_LCD";
   
   /* Formulate the Where/Group By Clauses */
   &ANZExtractFormat_ = &ANZRec_.ANZ_EXTRACT_FORMAT.Value;
   Evaluate &ANZExtractFormat_
   When "H"
      &ANZExtractDetailValue_ = "Hyperion Detail";
      &msgLog_.println_to_stdout("--><-- Writing Extract File for Extract Format: " | &ANZExtractDetailValue_ | " --><--");
      ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE5.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE8.Value = "' " | "'";
      ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = "HT.ANZ_HYPO_LCD"; /* This CLAUSE is for STANDARD ONLY */
      ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "HT2.ANZ_HYPO_LCD"; /* This CLAUSE is for EXCEPTIONS ONLY */
      /* Create the SELECT CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.SELECT_CLAUSE_LONG.Value = " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE5.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE9.Value | " , " | " HT.PARENT_NODE_NAME , ' ' , ' ' , HT.ACCOUNTING_PERIOD , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , SUM(HT.POSTED_TOTAL_AMT) , HT.CURRENCY_CD";
      /* Create the SELECT CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.WHERE_CLAUSE_LONG.Value = " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE8.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value | " , " | " ' ' , ' ' , HT2.ACCT , HT2.ACCOUNTING_PERIOD , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , SUM(HT2.POSTED_TOTAL_AMT) , HT2.CURRENCY_CD";
      /* Create the GROUP BY CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value = ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , HT.PARENT_NODE_NAME , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , HT.ACCOUNTING_PERIOD , HT.CURRENCY_CD";
      /* Create the ORDER BY CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.ORDER_BY_LONG.Value = ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , HT.PARENT_NODE_NAME , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , HT.ACCOUNTING_PERIOD , HT.CURRENCY_CD";
      /* Create the GROUP BY CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.PV_RTV_TEXT1.Value = ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | " , HT2.ACCT , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , HT2.ACCOUNTING_PERIOD , HT2.CURRENCY_CD";
      /* Create the ORDER BY CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.PV_RTV_TEXT2.Value = ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | " , HT2.ACCT , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , HT2.ACCOUNTING_PERIOD , HT2.CURRENCY_CD";
      Break;
   When "D"
      &ANZExtractDetailValue_ = "PS Detail";
      &msgLog_.println_to_stdout("--><-- Writing Extract File for Extract Format: " | &ANZExtractDetailValue_ | " --><--");
      ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = "HT.LEDGER, HT.ANZ_HYPO_TREENODE, HT.NODE_LVL1, HT.ANZ_HYPO_LCD"; /* This CLAUSE is for STANDARD ONLY */
      ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "HT2.LEDGER, HT2.ANZ_HYPO_TREENODE, HT2.NODE_LVL1, HT2.ANZ_HYPO_LCD"; /* This CLAUSE is for EXCEPTIONS ONLY */
      /* Create the SELECT CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.SELECT_CLAUSE_LONG.Value = " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE5.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE9.Value | " , " | " HT.PARENT_NODE_NAME , ' ' , ' ' , HT.ACCOUNTING_PERIOD , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , SUM(HT.POSTED_TOTAL_AMT) , HT.CURRENCY_CD";
      /* Create the SELECT CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.WHERE_CLAUSE_LONG.Value = " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE8.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value | " , " | " ' ' , ' ' , HT2.ACCT , HT2.ACCOUNTING_PERIOD , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , SUM(HT2.POSTED_TOTAL_AMT) , HT2.CURRENCY_CD";
      /* Create the GROUP BY CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value = ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , HT.PARENT_NODE_NAME , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , HT.ACCOUNTING_PERIOD , HT.CURRENCY_CD";
      /* Create the ORDER BY CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.ORDER_BY_LONG.Value = ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , HT.PARENT_NODE_NAME , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , HT.ACCOUNTING_PERIOD , HT.CURRENCY_CD";
      /* Create the GROUP BY CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.PV_RTV_TEXT1.Value = ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | " , HT2.ACCT , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , HT2.ACCOUNTING_PERIOD , HT2.CURRENCY_CD";
      /* Create the ORDER BY CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.PV_RTV_TEXT2.Value = ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | " , HT2.ACCT , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , HT2.ACCOUNTING_PERIOD , HT2.CURRENCY_CD";
      Break;
   When "S"
      &ANZExtractDetailValue_ = "Summary";
      &msgLog_.println_to_stdout("--><-- Writing Extract File for Extract Format: " | &ANZExtractDetailValue_ | " --><--");
      ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE9.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value = "' " | "'";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value = "' " | "'";
      ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = "HT.NODE_LVL1"; /* This CLAUSE is for STANDARD ONLY */
      ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "HT2.NODE_LVL1"; /* This CLAUSE is for EXCEPTIONS ONLY */
      ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value = "' " | "'";
      /* Create the SELECT CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.SELECT_CLAUSE_LONG.Value = " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE4.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE5.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE3.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE9.Value | " , " | " HT.PARENT_NODE_NAME , ' ' , ' ' , HT.ACCOUNTING_PERIOD , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , SUM(HT.POSTED_TOTAL_AMT) , HT.CURRENCY_CD";
      /* Create the GROUP BY CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value = ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , HT.PARENT_NODE_NAME , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , HT.ACCOUNTING_PERIOD , HT.CURRENCY_CD";
      /* Create the ORDER BY CLAUSE for STANDARD. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.ORDER_BY_LONG.Value = ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , HT.PARENT_NODE_NAME , HT.DESCRSHORT , HT.DESCRSHORT2 , HT.DETAIL_TMPLT , HT.ACCOUNTING_PERIOD , HT.CURRENCY_CD";
      /* Create the SELECT CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.WHERE_CLAUSE_LONG.Value = " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE7.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE8.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE6.Value | " , " | ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value | " , " | " ' ' , ' ' , HT2.ACCT , HT2.ACCOUNTING_PERIOD , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , SUM(HT2.POSTED_TOTAL_AMT) , ' ' ";
      /* Create the GROUP BY CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.PV_RTV_TEXT1.Value = ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | " , HT2.ACCT , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , HT2.ACCOUNTING_PERIOD";
      /* Create the ORDER BY CLAUSE for EXCEPTION. The same clause will hold true for both D & H */
      ANZ_HYP_EXT_AET.PV_RTV_TEXT2.Value = ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | " , HT2.ACCT , HT2.DESCRSHORT , HT2.DESCRSHORT2 , HT2.DETAIL_TMPLT , HT2.ACCOUNTING_PERIOD";
      Break;
   When-Other
      &msgLog_.println_to_stderr("Invalid Format");
      Exit (1);
      Break;
   End-Evaluate;
   
End-Function;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_HYP_EXT_AET);

rem check whether an extract needs to be generated as per the Run Control Parameters;
SQLExec("SELECT COUNT(1) FROM %Table(ANZ_HYPTM_TAO)", &ANZCountTMP_);
If (&ANZCountTMP_ <> 0) Then
   &msgLog_.println_to_stdout("******************************************************************");
   ANZStateRecInit(&ANZStateRec_); /* Initialize State Record Values. NOT ALL */
   ANZSelectBalances_(&ANZStateRec_); /* Set Unique Select/Group By Clauses based on Extract Format selected */
Else
   /* Create the error file in the following path */
   SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &ANZStateRec_.PROCESS_INSTANCE.Value, &ANZFileDir_);
   &ANZErrSub_ = "AE_ANZ_HYP_EXTR_" | &ANZStateRec_.PROCESS_INST_STG.Value | ".log";
   /* Determine the file path separator character. First check for backslash then forwardslash. */
   &ANZiTempPos_ = Find("\", &ANZFileDir_);
   If &ANZiTempPos_ = 0 Then
      &ANZiTempPos_ = Find("/", &ANZFileDir_);
      &ANZstrSlash_ = "/";
   Else
      &ANZstrSlash_ = "\";
   End-If;
   &ANZErrFile_ = &ANZFileDir_ | &ANZstrSlash_ | &ANZErrSub_;
   /* redirect stderr */
   &msgLog_.redirect_stderr(&ANZErrFile_);
   &msgLog_.println_to_stderr("--><-- Error File redirected --><--");
   &msgLog_.println_to_stdout("No Rows found to process in ANZ_HYPTM_TAO.");
   &msgLog_.println_to_stderr("No Rows found to process in ANZ_HYPTM_TAO.");
   Exit (1);
End-If;

Rem Just write the file here;
import ANZ_BATCH_LOG:*;

Function WriteLastLine() Returns string
   rem Return the date time;
   Local number &ANZDay_, &ANZMonth_;
   Local string &ANZYear_, &ANZNewMonth_;
   &ANZDay_ = Day(%Date);
   &ANZMonth_ = Month(%Date);
   &ANZNewMonth_ = NumberToString("%02", &ANZMonth_);
   &ANZYear_ = Substring(String(Year(%Date)), 3, 2);
   &ANZTimeString_ = &ANZDay_ | "/" | &ANZNewMonth_ | "/" | &ANZYear_ | "," | Substitute(Substring(String(%Time), 1, 8), ".", ":");
   Return &ANZTimeString_
End-Function;

Function GetColumnList(&ANZTableAlias As string, &ANZStartPD_ As number, &ANZEndPD_ As number) Returns string
   
   &ANZExtractScale_ = ANZ_HYP_EXT_AET.ANZ_EXTRACT_SCALE.Value;
   
   While &ANZStartPD_ <= &ANZEndPD_
      Evaluate &ANZStartPD_
      When 1
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TOTAL_CR";
         rem &ANZColumnName_ = &ANZTableAlias | GetField(Field.POSTED_TOTAL_CR).Name;
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 2
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TOTAL_DR";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 3
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TOTAL_EBAL";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 4
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TOT_EBAL";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 5
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TRAN_ADJ";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 6
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TRAN_AMT";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 7
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TRAN_CR";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 8
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TRAN_DR";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 9
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_TRAN_EBAL";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 10
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_WRK_AMT";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 11
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_WRK_AMT2";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When 12
         &ANZColumnName_ = &ANZTableAlias | ".POSTED_WRK_AMT3 ";
         &ANZColumnName_ = "%Round(%DecDiv(" | &ANZColumnName_ | ", POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When-Other;
         Error ("Invalid Period");
         Break;
      End-Evaluate;
      &ANZStartPD_ = &ANZStartPD_ + 1;
      &ANZColumnList_ = &ANZColumnList_ | "," | &ANZColumnName_;
   End-While;
   
   Return &ANZColumnList_
End-Function;

Function GenerateSelectClause_() Returns string
   
   Local string &ANZSQLStringColumns_, &ANZExtractDetail_;
   Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
   &msgLog_.println_to_stdout("--><-- Generate the Select Clause --><--");
   
   &ANZExtractScale_ = ANZ_HYP_EXT_AET.ANZ_EXTRACT_SCALE.Value;
   &ANZExtractDetail_ = ANZ_HYP_EXT_AET.ANZ_EXTRACT_FORMAT.Value;
   /* Spit the columns out based on the Extract Format and the Multi Period Flag for the Hyperion Data Type */
   If (ANZ_HYP_EXT_AET.ANZ_MUTIPERIOD_FLG.Value = "N") Then
      Evaluate &ANZExtractDetail_
      When "H" /* Hyperion Detail */
         rem LC suffix for ANZ_HYPO_LCD;
         &ANZSQLStringColumns_ = "RTRIM(ANZ_HYPO_LCD) + RTRIM(CURRENCY_CD), PARENT_NODE_NAME, %Round(%DecDiv(POSTED_TOTAL_AMT , POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When "D" /* PS Detail */
         rem LC suffix for ANZ_HYPO_LCD;
         &ANZSQLStringColumns_ = "LEDGER, ANZ_HYPO_TREENODE, NODE_LVL1, RTRIM(ANZ_HYPO_LCD) + RTRIM(CURRENCY_CD), ACCT, DESCRSHORT, DESCRSHORT2, DETAIL_TMPLT, %Round(%DecDiv(POSTED_TOTAL_AMT , POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When "S" /* Summary */
         rem LC suffix for NODE_LVL1;
         &ANZSQLStringColumns_ = "RTRIM(NODE_LVL1) + RTRIM(CURRENCY_CD), PARENT_NODE_NAME, %Round(%DecDiv(POSTED_TOTAL_AMT , POWER(10, " | &ANZExtractScale_ | ")), 8)";
         Break;
      When-Other
         /* DO NOT GENERATE A FILE */
         Exit (1);
         Break;
      End-Evaluate;
      &msgLog_.println_to_stdout("--><-- Generated Clause " | &ANZSQLStringColumns_ | "--><--");
   Else
      &ANZMultiPeriodColumns_ = GetColumnList("OM", ANZ_HYP_EXT_AET.START_PERIOD.Value, ANZ_HYP_EXT_AET.END_PERIOD.Value);
      Evaluate &ANZExtractDetail_
      When "H" /* Hyperion Detail */
         rem LC suffix for ANZ_HYPO_LCD;
         &ANZSQLStringColumns_ = "RTRIM(OM.ANZ_HYPO_LCD) + RTRIM(OM.CURRENCY_CD), OM.PARENT_NODE_NAME " | &ANZMultiPeriodColumns_;
         Break;
      When "D" /* PS Detail */
         rem LC suffix for ANZ_HYPO_LCD;
         &ANZSQLStringColumns_ = "OM.LEDGER, OM.ANZ_HYPO_TREENODE, OM.NODE_LVL1, RTRIM(OM.ANZ_HYPO_LCD) + RTRIM(OM.CURRENCY_CD), OM.ACCT, OM.DESCRSHORT, OM.DESCRSHORT2, OM.DETAIL_TMPLT " | &ANZMultiPeriodColumns_;
         Break;
      When "S" /* Summary */
         rem LC suffix for NODE_LVL1;
         &ANZSQLStringColumns_ = "RTRIM(OM.NODE_LVL1) + RTRIM(OM.CURRENCY_CD), OM.PARENT_NODE_NAME " | &ANZMultiPeriodColumns_;
         Break;
      When-Other
         /* DO NOT GENERATE A FILE */
         Exit (1);
         Break;
      End-Evaluate;
      &msgLog_.println_to_stdout("--><-- Generated Clause " | &ANZSQLStringColumns_ | "--><--");
   End-If;
   
   Return &ANZSQLStringColumns_;
End-Function;

Local string &ANZOutputDir_;
/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Create the file in the log_output directory on the Batch Server */

Local number &ANZRecordCounter_;
Local string &ANZLastString_;

SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", ANZ_HYP_EXT_AET.PROCESS_INSTANCE.Value, &ANZOutputDir_);
/* Create a file object to generate the extract */
Local File &ANZFile_ = GetFile(&ANZOutputDir_ | "/ANZ_HYP_EXTR_" | ANZ_HYP_EXT_AET.PROCESS_INSTANCE.Value | ".csv", "W", "U", %FilePath_Absolute);

<*
/* Extract Format */
&ANZExtractDetail_ = ANZ_HYP_EXT_AET.ANZ_EXTRACT_FORMAT.Value;
Evaluate &ANZExtractDetail_
When "H" /* Hyperion Detail */
   rem LC suffix for ANZ_HYPO_LCD;
   &ANZSQLStringColumns_ = "RTRIM(ANZ_HYPO_LCD) +  CASE CURRENCY_CD WHEN 'AUD' THEN '' ELSE '.LC' END, PARENT_NODE_NAME, %Round(%DecDiv(POSTED_TOTAL_AMT , POWER(10, " | &ANZExtractScale_ | ")), 8)";
   Break;
When "D" /* PS Detail */
   rem LC suffix for ANZ_HYPO_LCD;
   &ANZSQLStringColumns_ = "LEDGER, ANZ_HYPO_TREENODE, NODE_LVL1, RTRIM(ANZ_HYPO_LCD) +  CASE CURRENCY_CD WHEN 'AUD' THEN '' ELSE '.LC' END, ACCT, DESCRSHORT, DESCRSHORT2, DETAIL_TMPLT, %Round(%DecDiv(POSTED_TOTAL_AMT , POWER(10, " | &ANZExtractScale_ | ")), 8)";
   Break;
When "S" /* Summary */
   rem LC suffix for NODE_LVL1;
   &ANZSQLStringColumns_ = "RTRIM(NODE_LVL1) +  CASE CURRENCY_CD WHEN 'AUD' THEN '' ELSE '.LC' END , PARENT_NODE_NAME, %Round(%DecDiv(POSTED_TOTAL_AMT , POWER(10, " | &ANZExtractScale_ | ")), 8)";
   Break;
When-Other
   /* DO NOT GENERATE A FILE */
   Exit (1);
   Break;
End-Evaluate;
*>
try
   If (ANZ_HYP_EXT_AET.START_PERIOD.Value = ANZ_HYP_EXT_AET.END_PERIOD.Value) And
         (ANZ_HYP_EXT_AET.ANZ_MUTIPERIOD_FLG.Value = "N") Then
      &msgLog_.println_to_stdout("--><-- Writing for a Single Period --><--");
      /* Pass the Columns to be written as a String to the SQL Object */
      rem Local SQL &ANZCursor_ = CreateSQL("SELECT ANZ_HYPO_LCD, PARENT_NODE_NAME, %Round(%DecDiv(POSTED_TOTAL_AMT , 1000), 8)  FROM %Table(ANZ_HYPOP_TAO)");
      &ANZSQLStringColumns_ = GenerateSelectClause_();
      Local SQL &ANZCursor_ = CreateSQL("SELECT " | &ANZSQLStringColumns_ | " FROM %Table(ANZ_HYPOP_TAO)");
      Evaluate &ANZCursor_.Status
      When = %SQLStatus_OK
         &ANZCursor_.TraceName = "Write CSV Extract - Single Period";
         &ANZCursor_.ReuseCursor = True;
         Local array of any &ANZData_ = CreateArrayAny();
         /* Write the Hyperion Data Type to the file */
         &ANZFile_.WriteLine(ANZ_HYP_EXT_AET.ANZ_HYPO_DATA_TYP.Value);
         /* Use WriteLine to write the Start and End Period on new lines */
         &ANZFile_.WriteLine(ANZ_HYP_EXT_AET.START_PERIOD.Value);
         &ANZFile_.WriteLine(ANZ_HYP_EXT_AET.END_PERIOD.Value);
         /* Initialize the row counter */
         &ANZRecordCounter_ = 0;
         /* Fetch the data into an array and join with "," */
         While (&ANZCursor_.Fetch(&ANZData_))
            &ANZFile_.WriteLine(&ANZData_.Join(",", "", ""));
            &ANZRecordCounter_ = &ANZRecordCounter_ + 1;
         End-While;
         /* Write the Total number of rows written to the file in a new line */
         &ANZTimeStr_ = WriteLastLine();
         &ANZLastString_ = &ANZRecordCounter_ | "," | &ANZTimeStr_;
         &ANZFile_.WriteLine(&ANZLastString_);
         &msgLog_.println_to_stdout("--><-- Rows Written to the Extract File are: " | &ANZRecordCounter_ | " --><--");
         Break;
      When = %SQLStatus_NotFound
         &msgLog_.println_to_stderr("Invalid SQL Status for Cursor");
         Error ("LINE Not Found");
         Break;
      When = %SQLStatus_Duplicate
         &msgLog_.println_to_stderr("Duplicate Line");
         Error ("DUPLICATE LINE");
         Break;
      End-Evaluate;
   Else
      /* Process Multiperiod Hyperion Data Types */
      /*
       POSTED_TOTAL_AMT = 0
       POSTED_TOTAL_CR = 1
       POSTED_TOTAL_DR = 2  
       POSTED_TOTAL_EBAL = 3
       POSTED_TOT_EBAL = 4
       POSTED_TRAN_ADJ = 5
       POSTED_TRAN_AMT = 6
       POSTED_TRAN_CR = 7
       POSTED_TRAN_DR = 8
       POSTED_TRAN_EBAL = 9
       POSTED_WRK_AMT = 10
       POSTED_WRK_AMT2 = 11
       POSTED_WRK_AMT3 = 12
       */
      &ANZLogStartPeriod_ = ANZ_HYP_EXT_AET.START_PERIOD.Value;
      &msgLog_.println_to_stdout("--><-- Writing for Multi Period from: " | ANZ_HYP_EXT_AET.START_PERIOD.Value | " to: " | ANZ_HYP_EXT_AET.END_PERIOD.Value | " --><--");
      &ANZSQLStringColumns_ = GenerateSelectClause_();
      Local SQL &ANZMultiPeriodCursor_ = CreateSQL("SELECT " | &ANZSQLStringColumns_ | " FROM %Table(ANZ_HYPOM_TAO) OM");
      &ANZMultiPeriodCursor_.TraceName = "Write CSV Extract - Multi Period";
      &ANZMultiPeriodCursor_.ReuseCursor = True;
      Local array of any &ANZMultiPeriodData_ = CreateArrayAny();
      /* Write the Hyperion Data Type to the file */
      &ANZFile_.WriteLine(ANZ_HYP_EXT_AET.ANZ_HYPO_DATA_TYP.Value);
      /* Use WriteLine to write the Start and End Period on new lines */
      &ANZFile_.WriteLine(&ANZLogStartPeriod_);
      &ANZFile_.WriteLine(ANZ_HYP_EXT_AET.END_PERIOD.Value);
      /* Initialize the row counter */
      &ANZRecordCounter_ = 0;
      /* Fetch the data into an array and join with "," */
      While (&ANZMultiPeriodCursor_.Fetch(&ANZMultiPeriodData_))
         &ANZFile_.WriteLine(&ANZMultiPeriodData_.Join(",", "", ""));
         &ANZRecordCounter_ = &ANZRecordCounter_ + 1;
      End-While;
      /* Write the Total number of rows written to the file in a new line */
      &ANZTimeStr_ = WriteLastLine();
      &ANZLastString_ = &ANZRecordCounter_ | "," | &ANZTimeStr_;
      &ANZFile_.WriteLine(&ANZLastString_);
      &msgLog_.println_to_stdout("--><-- Rows Written to the Extract File are: " | &ANZRecordCounter_ | " --><--");
   End-If; /* End-If for MultiPeriod check */
catch Exception &ANZErr_
   &msgLog_.println_to_stdout("--><-- Unhandled Exception occured while writing the Extract --><--");
   &msgLog_.println_to_stderr(&ANZErr_.ToString());
end-try;

/*******************************************************************************************/
/* WR#       		 Date        Developer        			Notes						   */
/* ANZWR05536    11/08/2009      prakasp1  		Create and redirect Stdout file for the AE */
/*******************************************************************************************/

/* Begin ANZWR05536 */
import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_HYP_EXT_AET);

/*	By default set the &TotalErrorCount to 0*/
&ANZTotalErrorCount = 0;
&ANZOperatorID_ = %OperatorId;
&ANZRunControlID_ = &ANZStateRec_.RUN_CNTL_ID.Value;
&ANZPrcsInstance_ = &ANZStateRec_.PROCESS_INSTANCE.Value;

/***********************************************************************************
All Batch Servers do not have the mail and activation jar files in their class path.
They are not part of standard install. PSADMIN needs to put these files 
************************************************************************************/

/* Create the error file in the following path */
SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &ANZPrcsInstance_, &ANZFileDir_);
&ANZErrSub_ = "AE_ANZ_HYP_EXTR_" | &ANZPrcsInstance_ | ".txt";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&ANZiTempPos = Find("\", &ANZFileDir_);
If &ANZiTempPos = 0 Then
   &ANZiTempPos = Find("/", &ANZFileDir_);
   &ANZstrSlash = "/";
Else
   &ANZstrSlash = "\";
End-If;
&ANZErrFile_ = &ANZFileDir_ | &ANZstrSlash | &ANZErrSub_;
/* redirect stdout */
&msgLog_.redirect_stdout(&ANZErrFile_);
/* Generate Batch Log Report */
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("*                 PS to Hyperion LCD Extract                     *");
&msgLog_.println_to_stdout("*                  Batch Process Log Report                      *");
&msgLog_.println_to_stdout("*                        LCD Extract                             *");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("       Generated On : " | %Datetime);
&msgLog_.println_to_stdout("       Generated By : " | &ANZOperatorID_);
&msgLog_.println_to_stdout("   Process Instance : " | &ANZPrcsInstance_);
&msgLog_.println_to_stdout("     Run Control ID : " | &ANZRunControlID_);
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");

/* End ANZWR05536 */

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_HYP_EXT_AET);

/* Generate the Select, Where & Group By Clauses based on the Extract Format */
&ANZExtractFormat_ = ANZ_HYP_EXT_AET.ANZ_EXTRACT_FORMAT.Value;
/* If it's a Budget Ledger, then set up SQL for Scenario */
If All(ANZ_HYP_EXT_AET.SCENARIO.Value) Then
   ANZ_HYP_EXT_AET.WHERE_BU.Value = " AND LED.SCENARIO = " | "'" | ANZ_HYP_EXT_AET.SCENARIO.Value | "'";
End-If;
If None(ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value) Then
   
   Evaluate &ANZExtractFormat_
   When "D" /* PeopleSoft Detail */
      ANZ_HYP_EXT_AET.SELECTPHRASE.Value = ",LC.ANZ_HYPO_LCD";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE.Value = ",LED.BUSINESS_UNIT";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value = ",LED.DEPTID";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value = ",LED.ACCOUNT";
      ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "LC.TREE_NODE" | ANZ_HYP_EXT_AET.SELECTPHRASE.Value;
      ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = ANZ_HYP_EXT_AET.SELECT_CLAUSE.Value | ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value | ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value;
      Break;
   When "H" /* Hyperion Detail */
      ANZ_HYP_EXT_AET.SELECTPHRASE.Value = ",LC.ANZ_HYPO_LCD";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE.Value = ",' '";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value = ",' '";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value = ",' '";
      ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "LC.TREE_NODE" | ANZ_HYP_EXT_AET.SELECTPHRASE.Value;
      ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = "";
      Break;
   When "S" /* Hyperion Summary */
      ANZ_HYP_EXT_AET.SELECTPHRASE.Value = ",' '";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE.Value = ",' '";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value = ",' '";
      ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value = ",' '";
      ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value = "LC.TREE_NODE";
      ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value = "";
      Break;
   When-Other /* Force an Error */
      Error ("Incorrect Format specified");
      Break;
   End-Evaluate;
   rem  Assign the clauses to State Record Fields;
   ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value = " GROUP BY LC.ANZ_HYPO_TREENODE ,LED.LEDGER, " | ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | ", AE.ANZ_HYPO_ACCT" | ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | " , AC.PARENT_NODE_NAME";
   ANZ_HYP_EXT_AET.ORDER_BY_LONG.Value = " GROUP BY LC.ANZ_HYPO_TREENODE ,LED.LEDGER, " | ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value | ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value | ", AC.ACCOUNT, AC.TREE_NAME, AC.PARENT_NODE_NAME";
Else
   /* do nothing */
End-If;
<*
/* Generate Batch Log Report */
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("Retrieving Ledger Balances for :" | ANZ_HYP_EXT_AET.RECNAME.Value);
&msgLog_.println_to_stdout("       Parameter 1             : " | ANZ_HYP_EXT_AET.SELECTPHRASE.Value);
&msgLog_.println_to_stdout("       Parameter 2             : " | ANZ_HYP_EXT_AET.SELECT_CLAUSE.Value);
&msgLog_.println_to_stdout("       Parameter 3             : " | ANZ_HYP_EXT_AET.SELECT_CLAUSE1.Value);
&msgLog_.println_to_stdout("       Parameter 4             : " | ANZ_HYP_EXT_AET.SELECT_CLAUSE2.Value);
&msgLog_.println_to_stdout("       Parameter 5             : " | ANZ_HYP_EXT_AET.GROUP_BY_ACT.Value);
&msgLog_.println_to_stdout("       Parameter 6             : " | ANZ_HYP_EXT_AET.GROUP_BY_LONG.Value);
&msgLog_.println_to_stdout("       Exception Group By      : " | ANZ_HYP_EXT_AET.GROUP_BY_LONG2.Value);
&msgLog_.println_to_stdout("       Normal Group By         : " | ANZ_HYP_EXT_AET.ORDER_BY_LONG.Value);
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");
*>

import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
/* Get the Default State Record */
Local Record &ANZStateRec_ = GetRecord(Record.ANZ_HYP_EXT_AET);

&ANZOperatorID_ = %OperatorId;
&ANZRunControlID_ = &ANZStateRec_.ANZ_HYPO_DATA_TYP.Value;
&ANZFiscalYear_ = &ANZStateRec_.FISCAL_YEAR.Value;
&ANZStartPeriod_ = &ANZStateRec_.START_PERIOD.Value;
&ANZEndPeriod_ = &ANZStateRec_.END_PERIOD.Value;
&ANZExtractFormat_ = &ANZStateRec_.ANZ_EXTRACT_FORMAT.Value;
&ANZMultiPeriodFlg_ = &ANZStateRec_.ANZ_MUTIPERIOD_FLG.Value;
&ANZHypTreeNode_ = &ANZStateRec_.ANZ_HYPO_TREENODE.Value;
&ANZExtractScale_ = &ANZStateRec_.ANZ_EXTRACT_SCALE.Value;

Evaluate &ANZExtractFormat_
When "H"
   &ANZExtractDetailValue_ = "Hyperion Detail";
   Break;
When "D"
   &ANZExtractDetailValue_ = "PS Detail";
   Break;
When "S"
   &ANZExtractDetailValue_ = "Summary";
   Break;
When-Other
   &ANZExtractDetailValue_ = "Invalid Format";
   Break;
End-Evaluate;

/* Generate Batch Log Report */
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("--><-- Running for: --><--");
&msgLog_.println_to_stdout("       Hyperion Data Type     : " | &ANZRunControlID_);
&msgLog_.println_to_stdout("       Fiscal Year            : " | &ANZFiscalYear_);
&msgLog_.println_to_stdout("       Start Period           : " | &ANZStartPeriod_);
&msgLog_.println_to_stdout("       End Period             : " | &ANZEndPeriod_);
&msgLog_.println_to_stdout("       Extract Format         : " | &ANZExtractDetailValue_);
&msgLog_.println_to_stdout("       Hyperion Business User : " | &ANZHypTreeNode_);
&msgLog_.println_to_stdout("       Multi Period Flag      : " | &ANZMultiPeriodFlg_);
&msgLog_.println_to_stdout("       Extract Scale          : " | &ANZExtractScale_);
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");

/* PPs Modification - TESTING START */
            &sQueryString = &sQueryString | "&BUSINESS_UNIT=" | RTrim(ANZNZ_IPFHEADER.BUSINESS_UNIT.Value);
            &sQueryString = &sQueryString | "&ANZNZ_IPF_ID=" | RTrim(ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value);
            &cashURL = GenerateComponentPortalURL(%Portal, %Node, MenuName.ANZ_MENU_AP, "GBL", Component.ANZNZ_IPF_APPR, Page.ANZNZ_IPF_APPR, "U") | &sQueryString;
            &cashURL = EncodeURL(&cashURL);
            MessageBox(0, "", 0, 0, "After Encoding " | &cashURL);
/* PPs Modification - TESTING END */

REM ***************************************************************;
REM * ANZWR07973						   				           *
REM * Developer: prakasp1						   				   *
REM * Created Date: 08/12/2009									   *
REM * Description: 	This class is used to check query profile      *
                    security. The delivered Class GetQuerySecurityProfile() 
                    is currently not returning the correct results *
                    unless Query Access List Cache is enabled and  *
                    run after every change.                        *
REM ***************************************************************;

class ANZQuerySecurity
   method ANZQuerySecurity(&ANZOprID_ As string);
   
   property integer Status_;
   property string UserID_;
   property string ANZRoleName_;
   property boolean ANZRunFlag_;
   property boolean ANZExcelFlag_;
   property boolean ANZCrystalFlag_;
   property array of any ANZData_;
   property string ANZRunEFirstTime_;
private
   instance boolean &iscompleted;
   
   method RunQuery() Returns boolean;
   method RunToExcel() Returns boolean;
   method RunToCrystal() Returns boolean;
   method CheckUserInRole(&ANZRoleStringQEC_ As string) Returns boolean;
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/
method ANZQuerySecurity
   /+ &ANZOprID_ as String +/
   
   %This.UserID_ = &ANZOprID_;
   &ANZData_ = CreateArrayAny();
   &ANZRunFlag_ = %This.RunQuery();
   &ANZExcelFlag_ = %This.RunToExcel();
   &ANZCrystalFlag_ = %This.RunToCrystal();
end-method;

method RunQuery
   /+ Returns Boolean +/
   
   /* This is equivalent to %Session.GetQuerySecurityProfile().CanRunQuery; */
   Local boolean &ANZRunFlagQBool_;
   Local string &ANZRoleStringQ_;
   Local SQL &ANZRunFlagSQL_ = GetSQL(SQL.ANZ_QRY_RUN_FLAG_SQL, %This.UserID_);
   While &ANZRunFlagSQL_.Fetch(&ANZData_);
      &ANZRoleStringQ_ = &ANZData_.Join(",", "", "");
   End-While;
   
   rem MessageBox(0, "", 0, 0, "Here in 1:" | &ANZRoleStringQ_);
   /* Pass the RoleNames and check whether any of the Roles have this option checked */
   &ANZRunFlagQBool_ = %This.CheckUserInRole(&ANZRoleStringQ_);
   
   Return &ANZRunFlagQBool_;
   
end-method;

method RunToExcel
   /+ Returns Boolean +/
   
   /* This is equivalent to %Session.GetQuerySecurityProfile().CanRunToExcel; */
   Local boolean &ANZRunFlagEBool_;
   Local string &ANZRoleStringE_;
   Local SQL &ANZRun2ExcelFlagSQL_ = GetSQL(SQL.ANZ_QRY_EXCEL_FLAG_SQL, %This.UserID_);
   
   While &ANZRun2ExcelFlagSQL_.Fetch(&ANZData_);
      &ANZRoleStringE_ = &ANZData_.Join(",", "", "");
   End-While;
   
   rem MessageBox(0, "", 0, 0, "Here in 2:" | &ANZRoleStringE_);
   /* Pass the RoleNames and check whether any of the Roles have this option checked */
   &ANZRunFlagEBool_ = %This.CheckUserInRole(&ANZRoleStringE_);
   
   Return &ANZRunFlagEBool_;
   
end-method;

method RunToCrystal
   /+ Returns Boolean +/
   
   /* This is equivalent to %Session.GetQuerySecurityProfile().CanRunToCrystal; */
   Local boolean &ANZRunFlagCBool_;
   Local string &ANZRoleStringC_;
   Local SQL &ANZRun2CrystalFlagSQL_ = GetSQL(SQL.ANZ_QRY_CRYSTAL_FLAG_SQL, %This.UserID_);
   While &ANZRun2CrystalFlagSQL_.Fetch(&ANZData_);
      &ANZRoleStringC_ = &ANZData_.Join(",", "", "");
   End-While;
   
   rem MessageBox(0, "", 0, 0, "Here in 3:" | &ANZRoleStringC_);
   /* Pass the RoleNames and check whether any of the Roles have this option checked */
   &ANZRunFlagCBool_ = %This.CheckUserInRole(&ANZRoleStringC_);
   /* This condition has been added as PS OOB checks for this Role. It will always return false as there are no users with Role CE User in FS8PROD */
   If (&ANZRunFlagCBool_ = True) Then
      If (IsUserInRole("CE User") = True) Then
         &ANZRunFlagCBool_ = True;
      Else
         &ANZRunFlagCBool_ = False;
      End-If;
   End-If;
   
   Return &ANZRunFlagCBool_;
   
end-method;

method CheckUserInRole
   /+ &ANZRoleStringQEC_ as String +/
   /+ Returns Boolean +/
   
   Return IsUserInRole(&ANZRoleStringQEC_)
end-method;

/* Begin ANZ001, Prashant Prakash, 08/12/2009 */
/* This is Singleton Approach. Always use this while creating objects for any App Class. PS OOB also uses this for Attachment Utility */
   Local ANZQRYSCRTY:ANZQuerySecurity &ANZQryObj_;
   If (None(&ANZQryObj_)) Then
      &ANZQryObj_ = create ANZQRYSCRTY:ANZQuerySecurity(%UserId);
   End-If;
   rem Local ANZQRYSCRTY:ANZQuerySecurity &ANZQryObj_ = create ANZQRYSCRTY:ANZQuerySecurity(%UserId);
   /*
   %This.ANZRunFlag_;
   %This.ANZExcelFlag_; 
   %this.ANZCrystalFlag_;
   */
   /* End ANZ001, Prashant Prakash, 08/12/2009 */
   /* check security */
   If &bModify = False Then
      &rRecord.QRYEDITFIELD.Enabled = False;
   End-If;
   /* Begin ANZ001, Prashant Prakash, 08/12/2009 */
   rem If &bRun = False Then;
   If &ANZQryObj_.ANZRunFlag_ = False Then
      /* End ANZ001, Prashant Prakash, 08/12/2009 */
      &rRecord.QRYRUN.Visible = False;
   End-If;
   /* Begin ANZ001, Prashant Prakash, 08/12/2009 */
   rem If &bRunExcel = False Then;
   If &ANZQryObj_.ANZExcelFlag_ = False Then
      /* End ANZ001, Prashant Prakash, 08/12/2009 */
      /* ICE ReportID:739008000 */
      &rRecord.QRYRUNEXCEL.Visible = False;
   End-If;
   /* Begin ANZ001, Prashant Prakash, 08/12/2009 */
   rem If &bRunCrystal = False Then;
   If &ANZQryObj_.ANZCrystalFlag_ = False Then
      /* End ANZ001, Prashant Prakash, 08/12/2009 */
      &rRecord.QRYRUNCRYSTAL.Visible = False;
   End-If;


   /* Begin ANZ003, Prashant Prakash, 11/12/2009 */
Function CreateApprovalHierarchy
   
   Local string &ANZFlushApprHierarchy_ = "DELETE ANZ_IPF_APPR_HIERARCHY WHERE BUSINESS_UNIT = :1 AND ANZNZ_IPF_ID = :2";
   rem Flush the Approval Hierarchy Table for the current IPF;
   SQLExec(&ANZFlushApprHierarchy_, ANZNZ_IPFHEADER.BUSINESS_UNIT.Value, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value);
   rem &ANZCTESQLString_ = MsgGetExplainText(21500, 64, "Msg not found");
   Local SQL &ANZCTESQLString_ = GetSQL(SQL.ANZ_IPF_APPR_HIER_2_SQL);
   Local string &ANZSQLStringValue_ = &ANZCTESQLString_.Value;
   rem Issue reported when people have delegate setup;
   Local SQL &ANZIdentifyDelegateSQL_ = GetSQL(SQL.ANZ_IPF_IDENTIFY_DELEGATE_SQL, ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value);
   If &ANZIdentifyDelegateSQL_.Fetch(&ANZRoleUser_, &ANZInUser_) Then
      <*
      /* This check needs to be in place to cater for multiple levels of delegation. 
         For example 3A delegates 1A and 4A delegates 3A. In this case the SQL will fail 
      */
      &ANZIndex_ = 0;
      Repeat
         &ANZIndex_ = &ANZIndex_ + 1;
         MessageBox(0, "", 0, 0, "&ANZIndex_ " | &ANZIndex_);
         &ANZRecursiveDelegateSQL_ = GetSQL(SQL.ANZ_IPF_IDENTIFY_DELEGATE_SQL, &ANZRoleUser_);
         If &ANZRecursiveDelegateSQL_.Fetch(&ANZRoleUser_, &ANZInUser_) Then
            MessageBox(0, "", 0, 0, "&ANZRoleUser_ " | &ANZRoleUser_ | " &ANZInUser_ " | &ANZInUser_);
            &ANZDrillDownRoleUser_ = &ANZRoleUser_;
         End-If;
      Until (&ANZRoleUser_ = &ANZInUser_ Or
         &ANZIndex_ >= 100);
      MessageBox(0, "", 0, 0, "SQL - > " | &ANZIdentifyDelegateSQL_.Value);
   *>
   Else
      &ANZRoleUser_ = ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value;
   End-If;
   If (&ANZIndex_ >= 100) Then
      Error ("There seems to be a loop");
   End-If;
   rem MessageBox(0, "", 0, 0, "&ANZRoleUser_ " | &ANZRoleUser_ | " Approver " | ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value | " Drill " | &ANZDrillDownRoleUser_);
   &ANZIdentifyDelegateSQL_.Close();
   &ANZRecursiveDelegateSQL_.Close();
   rem Using CTE find the Approval Hierarchy;
   rem SQLExec(&ANZSQLStringValue_, ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value, ANZNZ_IPFHEADER.GROSS_AMT.Value, ANZNZ_IPFHEADER.BUSINESS_UNIT.Value);
   SQLExec(&ANZSQLStringValue_, &ANZRoleUser_, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value, ANZNZ_IPFHEADER.GROSS_AMT.Value, ANZNZ_IPFHEADER.BUSINESS_UNIT.Value);
   
End-Function;

INSERT INTO PS_ANZ_QTEST_TBL (PROCESS_INST_STG 
 ,OPRID 
 ,RUN_CNTL_ID 
 ,AE_APPLID 
 ,ACTIONDTTM 
 ,ENDDTTM 
 ,DURATION_TIME) 
  VALUES (%Sql(ANZQUERYTESTSQL,%Bind(ANZ_QTEST_AET.PROCESS_INST_STG) ,10) 
  ,%Sql(ANZQUERYTESTSQL,%Bind(ANZ_QTEST_AET.OPRID),30) 
  ,%Sql(ANZQUERYTESTSQL,%Bind(ANZ_QTEST_AET.RUN_CNTL_ID),30) 
  ,%AEProgram 
  ,%Sql(ANZQUERYTESTSQL,%Bind(ANZ_QTEST_AET.ACTIONDTTM),26) 
  ,%CurrentDateTimeIn 
  ,%DateTimeDiff(%Sql(ANZQUERYTESTSQL,%Bind(ANZ_QTEST_AET.ACTIONDTTM),26), %CurrentDateTimeIn))


  rem One of the better ways to write SaveEdit Validation for a Field. Only for Contextual Reference though;
&err_style = "PSERROR";
&normal_style = "PSEDITBOX";

&field = GetField();
If Not All(&field.Value) Then
   &label = &field.GetLongLabel(&field.Name);
   &field.Style = &err_style;
   rem Press SHIFT + ^ for the FieldName to appear in the SetCursorPos Function Below. Field shown is for reference ONLY;
   SetCursorPos(%Page, ANZ_TREE_REC_1.ANZ_HYPO_TREENODE);
   Error MsgGet(5930, 1, "", &label);
Else
   &field.Style = &normal_style;
End-If;

REM --> This function will set the rowsets in component buffer to have SetComponentChanged = false, ChangeOnInit = false so when user leaves this component, save warning prompt won't show up;
REM --> This function mainly will be called when the "Show Transaction Details" checkbox is checked in INQUIYR_CRITERIA page;
Function SetComponentChangedForRowset()
   Local Rowset &rs_Level0, &rs_Level1, &rs_Level2;
   Local integer &i_Counter;
   
   REM --> Level 1 Rowsets;
   &rs_Level0 = GetLevel0();
   &rs_Level1 = &rs_Level0.GetRow(1).GetRowset(Scroll.INQ_CRIT_CF_DTL);
   &rs_Level1.SetComponentChanged = False;
   &rs_Level1.ChangeOnInit = False;
   
   &rs_Level1 = &rs_Level0.GetRow(1).GetRowset(Scroll.INQ_CRIT_CF_TRN);
   &rs_Level1.SetComponentChanged = False;
   &rs_Level1.ChangeOnInit = False;
   
   &rs_Level1 = &rs_Level0.GetRow(1).GetRowset(Scroll.ANZ_INQ_TRN_DVW);
   &rs_Level1.SetComponentChanged = False;
   &rs_Level1.ChangeOnInit = False;

   /* ANZWR20908, ANZ001, Prashant Prakash, 04/02/2010 */
/* Ensure that the user selects at least one file/attachment for deletion */

/* Begin ANZ001, Prashant Prakash, 04/02/2010 */

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Record &LVL0REC;
Local Row &Row_Level1;
Local string &check_box, &selected;
Local number &ANZCounterI_;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);
&selected = "N";

For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
   &check_box = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Value;
   If &check_box = "Y" Then
      &selected = "Y";
   End-If;
End-For;
If &selected = "Y" Then
   rem EndModal(1);
Else
   Error MsgGet(21500, 67, "Please select one or more lines.");
End-If;


/* End ANZ001, Prashant Prakash, 04/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 05/02/2010 */
/* Adding the Add Attachment Functionality for IPFs. */

/* Begin ANZ001, Prashant Prakash, 05/02/2010 */

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Row &Row_Level1;
Local Record &LVL0REC;
Local string &FTP_URL;
Local number &ANZCounterI_;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

&FTP_URL = GetURL(URL.PV);
&KEY_TBL = Record.ANZ_IPF_ATTACH;

For &ANZCounterI_ = &RS_Level1.ActiveRowCount To 1 Step - 1
   &ANZSCMAttachID_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
   &ATTACHSYSFILENAME = &ANZSCMAttachID_ | &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
   rem MessageBox(0, "", 0, 0, "&ATTACHSYSFILENAME " | &ATTACHSYSFILENAME);
   If (&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Value = "Y") Then
      &Return = DeleteAttachment(&FTP_URL, &ATTACHSYSFILENAME);
      If &Return = 0 Then
         &RS_Level1.DeleteRow(&ANZCounterI_);
         If (&RS_Level1.ActiveRowCount = 1) And
               None(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
            &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
            &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
         End-If;
         SQLExec("DELETE FROM PS_PV_ATTACHMENTS WHERE SCM_ATTACH_ID = :1", &ANZSCMAttachID_);
         rem SQLExec("DELETE FROM PS_ANZ_IPF_ATTACH WHERE SCM_ATTACH_ID = :1", &ANZSCMAttachID_);
      Else
         Warning (MsgGetText(137, 1, "File Attachment Status"));
      End-If;
   Else
      rem User has not selected any file for deletion or find out if there are any files which have to be deleted;
      If (&RS_Level1.ActiveRowCount = 1) And
            None(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
      End-If;
   End-If;
End-For;
If (&RS_Level1.ActiveRowCount = 1) And
      None(&RS_Level1.GetRow(1).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
End-If;

/*
If Not (&RS_Level1(CurrentRowNumber()).Selected) Then
   &ANZalreadyselected_ = "N";
End-If;
If (&ANZalreadyselected_ = "N") Then
   MessageBox(0, "", 0, 0, "Please select at least one file");
End-If;
&ANZSCMAttachID_ = &RS_Level1.GetRow(CurrentRowNumber()).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
&ATTACHSYSFILENAME = &ANZSCMAttachID_ | &RS_Level1.GetRow(CurrentRowNumber()).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
MessageBox(0, "", 0, 0, "&ATTACHSYSFILENAME " | &ATTACHSYSFILENAME);
*/
/* End ANZ001, Prashant Prakash, 05/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 05/02/2010 */
/* Keeping tab of attachments being added. */

/* Begin ANZ001, Prashant Prakash, 05/02/2010 */

&DATETIME = %Datetime;
If None(ANZ_IPF_ATTACH.ADD_DTTM) And
      RecordNew(ANZ_IPF_ATTACH.ADD_DTTM) And
      RecordChanged(ANZ_IPF_ATTACH.ADD_DTTM) Then
   ANZ_IPF_ATTACH.ADD_DTTM = &DATETIME;
   ANZ_IPF_ATTACH.LAST_MAINT_OPRID = %OperatorId;
End-If;

/* End ANZ001, Prashant Prakash, 05/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 04/02/2010 */
/* Adding the Add Attachment Functionality for IPFs.
*/

/* Begin ANZ001, Prashant Prakash, 04/02/2010 */

import SCM_ARCH_ATTACH:UI:*;

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Row &Row_Level1, &RSRow_;
Local string &scrollname, &recname;
Local Record &LVL0REC;

rem MAKE SURE THAT THE BELOW VARIABLES ARE ALWAYS DECLARED AS COMPONENT;
rem CHANGING THE SCOPE WILL AFFECT THE FUNCTIONALITY;
Component SCM_ARCH_ATTACH:UI:AttachmentHandler &scm_app_interface_comp;
Component Row &Row;

&scrollname = "Scroll.ANZ_IPF_ATTACH";
&recname = "Record.ANZ_IPF_ATTACH";

/**************** Call SCM Arch team attach code - Begin *********************/
If (None(&scm_app_interface_comp)) Then
   &scm_app_interface_comp = create SCM_ARCH_ATTACH:UI:AttachmentHandler();
End-If;


&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

Local Rowset &rs = GetLevel0()(1).GetRowset(@&scrollname);
&Row = &scm_app_interface_comp.InsertRowUploadAtt(&RS_Level1, &recname);

rem Find out who's adding the attachment;
If %Component = Component.ANZNZ_IPF_VMUDTL Then
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).ShowRequiredFieldCue = True;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
Else
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = True;
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).ShowRequiredFieldCue = True;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
   &RS_Level1.GetRow(1).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = True
End-If;

For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
   If &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value = "" Then
      &RS_Level1.HideAllRows();
   Else
      &RS_Level1.ShowAllRows();
   End-If;
End-For;

/* End ANZ001, Prashant Prakash, 04/02/2010 */
/* ANZWR20908, ANZ001, Prashant Prakash, 05/02/2010 */
/* Ensure that the user uploads at least one supporting document prior to submitting the IPF */

/* Begin ANZ001, Prashant Prakash, 05/02/2010 */
Function ValidateIPFAttachment(&ANZIPFBU_ As string, &ANZIPFID_ As string)
   
   
   &RS_LEVEL0 = GetLevel0();
   &LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
   &Row_Level1 = &RS_LEVEL0.GetRow(1);
   &RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);
   
   If None(&RS_Level1.GetRow(1).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) And
         (&LVL0REC.ANZNZ_IPF_ID.value = "NEXT") Then
      rem SQLExec("SELECT COUNT(1) FROM PS_ANZ_IPF_ATTACH WHERE BUSINESS_UNIT = :1 AND ANZNZ_IPF_ID = :2", &ANZIPFBU_, &ANZIPFID_, &ANZAttachCount_);
      rem If (&ANZAttachCount_ = 0) Then;
      SetCursorPos(Page.ANZ_IPF_ATTACHMENT, ANZNZ_IPF_DRV.ATTACHADD);
      Error (MsgGet(21500, 66, "Message Not Found"));
      rem End-If;
   Else
      For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
         &ANZSCMAttachID_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
         &ATTACHSYSFILENAME = &ANZSCMAttachID_ | &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.FILENAMECONCAT).Value = &ATTACHSYSFILENAME;
      End-For;
   End-If;
   
End-Function;

ValidateIPFAttachment(ANZNZ_IPFHEADER.BUSINESS_UNIT.Value, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value);

/* End ANZ001, Prashant Prakash, 05/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 04/02/2010 */
/* Adding the Add Attachment Functionality for IPFs. */

/* Begin ANZ001, Prashant Prakash, 04/02/2010 */
Local Rowset &RS_LEVEL0, &RS_Level1;
Local Record &LVL0REC;
Local Row &Row_Level1;
Local string &ANZIPFStatus_;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

Evaluate %Component
When = Component.ANZNZ_IPF_ENTRY
   ANZNZ_IPF_DRV.ATTACHADD.Enabled = True;
   Break;
When = Component.ANZNZ_IPF_APPR
   ANZNZ_IPF_DRV.ATTACHADD.Enabled = False;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
   rem Disable the Action and Go Button;
   ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION.Enabled = False;
   ANZNZ_IPFWF_DRV.ANZNZ_IPF_GOPB.Enabled = False;
   Break;
When-Other
   Break;
End-Evaluate;

rem Retrieve the IPF Status;
&ANZIPFStatus_ = &LVL0REC.ANZNZ_IPF_STATUS.Value;

REM Enable/Disable the Delete Attachment button based on the status of the IPF;
Evaluate &ANZIPFStatus_
When = "A" /* Approved */
When = "B" /* Confirmed */
When = "P" /* Pending Approval */
When = "X" /* Closed */
   rem Maske sure you enable the AddAttachment for the Workbench guys;
   If %Component = Component.ANZNZ_IPF_VMUDTL Then
      ANZNZ_IPF_DRV.ATTACHADD.Enabled = True;
   Else
      ANZNZ_IPF_DRV.ATTACHADD.Enabled = False;
   End-If;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
   For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
      &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
      &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
      rem users should be able to view the attachments;
      &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.SCM_DOWNLOAD).Enabled = True;
   End-For;
   rem Disable the Action and Go Button;
   ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION.Enabled = False;
   ANZNZ_IPFWF_DRV.ANZNZ_IPF_GOPB.Enabled = False;
   Break;
When = "N" /* New */
When = "C" /* Cancelled */
When = "D" /* Rejected */
   For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
      If All(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = True;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = True;
      Else
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
      End-If;
   End-For;
   Break;
When-Other;
   rem Invalid IPF Status;
   Break;
End-Evaluate;

For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
   If &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value = "" Then
      &RS_Level1.HideAllRows();
   Else
      &RS_Level1.ShowAllRows();
   End-If;
End-For;

/* End ANZ001, Prashant Prakash, 04/02/2010 */


REM ***************************************************************;
REM * ANZ(Used to send mail to the respective user / group)	       *
REM * Developer: prakasp1						   				   *
REM * Created Date: 23/07/2009									   *
REM *															   *
REM * Description: 	This class can be used to send emails from     *
REM *               Interfaces along with the output attached      *
REM ***************************************************************;

/* 	Import MCF for sending mails */
import PT_MCF_MAIL:*;
/*SCM_PORTAL*/
import SCM_UTILITIES:Portal:portalURL;

class ANZSendEmail
   method ANZSendEmail();
   /* SendMail is called from the user, which intern calls the Send method to perform the task*/
   method SendMailTo_(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer;
   method GetUrl_() Returns string;
   
end-class;

method ANZSendEmail
   /* Keeping the Constructor blank for the time being */
end-method;

/* SendMail method is called fromt he user, this method calls Send method internally*/
method SendMailTo_
   /+ &emailAddress as String, +/
   /+ &subject as String, +/
   /+ &completeFileName as String, +/
   /+ &fileName as String, +/
   /+ &emailBody as String +/
   /+ Returns Integer +/
   
   Local integer &rcEmail;
   Local string &msgBody, &emailText_, &URL_, &encodedText;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   rem I dnt think that the function actually works;
   Local boolean &EmailIDValidate_ = ValidateEmailAddress(&emailAddress);
   
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   &msgBody = GetHTMLText(HTML.ANZ_EMAIL_SKELETON, &emailAddress, "", "", "", "", "", "", "", "");
   &URL_ = %This.GetUrl_();
   rem &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", MsgGetText(18130, 15031, "EWN_Notification"), MsgGetText(18130, 15032, "Process_Name"), MsgGetText(18130, 15033, "Category"), MsgGetText(18130, 15030, "GoTo"), MsgGetText(18130, 15020, "Message_Detail"));
   &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", "Script Scheduling Failure Notification", MsgGetText(18130, 15032, "Process_Name"), "Process Type:", MsgGetText(18130, 15030, "GoTo"), "ANZ DMS Utilities", "Scheduled By:", %OperatorId, "Scheduled At:", %Datetime);
   rem &emailText_ = GetHTMLText(HTML.ANZ_TESTING_ONLY);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   Local boolean &ret = EncodeText(&emailText_, "ISO_8859-1", "Q", &encodedText);
   rem uncomment the line below to revert the changes. currently commented to test the EncodeText function;
   rem &htmlPart.Text = &emailText_;
   rem encoding somehow doesn't seem to work;
   &htmlPart.Text = &encodedText;
   &htmlPart.ContentType = "text/html";
   &email.AddHeader("X-Mailer", "FSCM Application 8.9");
   /* Always use these MCFEmail Class Properties --START */
   rem Use the From to receive the read receipt;
   &email.From = "prashant.prakash@anz.com"; /* Sending the mail */
   rem &email.ContentLanguage = "en-GB"; /* Language is really not needed */
   &email.Priority = 1;
   &email.Importance = "high";
   &email.Sensitivity = "private";
   &email.Disposition = "attachment";
   &email.IsReturnReceiptReqd = True;
   rem &email.BounceTo = "prashant.prakash@anz.com";
   rem always returns false;
   rem MessageBox(0, "", 0, 0, "IsAttachment " | &email.IsAttachment);
   rem This can be set later on;
   rem &email.ReplyTo = "prashant.prakash@anz.com";
   /* Always use these MCFEmail Class Properties --END */
   &multiPart.AddBodyPart(&htmlPart);
   rem &multiPart.AddBodyPart(&textPart);
   Local string &ContentType_ = &multiPart.GetContentType();
   /* The attachment somehow does not come along with the email
   &multiPart.SubType = "alternative; differences=Content-type";
   */
   &email.MultiPart = &multiPart;
   /* Add the Error File as an Attachment */
   &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   Else
      rem &rcEmail will be blank. Need to set it here;
   End-If;
   Return &rcEmail;
end-method;

method GetUrl_
   /+ Returns String +/
   
   try
      Local SCM_UTILITIES:Portal:portalURL &GetPortalURL_ = create SCM_UTILITIES:Portal:portalURL();
      Local string &URL;
      rem How do I by pass the sign-on?;
      &URL = &GetPortalURL_.GenerateComponentPortalURL("ANZ_DMS_MENU", "RUN_ANZ_DMS", "ANZ_RUN_DMS", "U", Null);
      Return &URL;
   catch Exception &ec
      Return "";
   end-try;
end-method;

/***
This class has been created to Parse the attached DMS file(s).
It will search for the following Keywords:
1. UPDATE
2. DELETE
3. INSERT
4. EXPORT
5. IMPORT
6. FROM
It will be later modified to include parsing of the SET commands as well.
***/
class DMSFileProc
   method DMSFileProc();
   method ParseDMSFile(&strDMSFilePart_ As string) Returns string;
   
end-class;

/**********
CONSTRUCTOR
***********/

method DMSFileProc
   /* keeping the constructor blank for the time being */
end-method;

method ParseDMSFile
   /+ &strDMSFilePart_ as String +/
   /+ Returns String +/
   
   Local boolean &ANZPatternMatchFlg_;
   Local string &strTableName_, &ANZMatchBegin_;
   Local number &M;
   Local array of string &ANZRecord_;
   &ANZRecord_ = CreateArrayRept("", 0);
   
   rem MessageBox(0, "", 0, 0, "File Part: " | &strDMSFilePart_);
   &strDMSFilePart_ = RTrim(Clean(&strDMSFilePart_));
   &strDMSFilePart_ = Substitute(&strDMSFilePart_, Char(26), " "); /* Added this line to remove invalid characters */
   rem looking for the Record Name. Crude of doing it but assuming developer will write the script as per Dev Standards;
   &ANZMatchBegin_ = Substring(&strDMSFilePart_, 1, 2);
   rem Evaluate to find out the Statement type in DMS script;
   Evaluate &ANZMatchBegin_
   When "EX" /* EXPORT TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [2];
      Break;
   When "IM" /* IMPORT TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [2];
      Break;
   When "UP" /* UPDATE TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [2];
      Break;
   When "DE" /* DELETE FROM TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [3];
      If None(&strTableName_) Then
         rem User has used the syntax DELETE TABLE NAME;
         &strTableName_ = &ANZRecord_ [2];
      End-If;
      Break;
   When "IN" /* INSERT INTO TABLE NAME */
      &ANZRecord_ = Split(&strDMSFilePart_, " ");
      &strTableName_ = &ANZRecord_ [3];
      Break;
   When "RUN"
      /* User is trying to run a DMS which references other DMS files. */
      rem Its similar to an Index file;
      Error ("DMS files with RUN command are not allowed");
      Break;
   When-Other;
      rem It might be a comment or a SET command;
      &ANZPatternMatchFlg_ = DBPatternMatch(&strDMSFilePart_, "% PS%", True);
      rem MessageBox(0, "", 0, 0, "Match Flag " | &ANZPatternMatchFlg_);
      Break;
   End-Evaluate;
   
   Return &strTableName_;
end-method;

REM ***************************************************************;
REM * ANZ(Used to schedule DMS)	                                   *
REM * Developer: prakasp1						   				   *
REM * Created Date: 16/07/2009									   *
REM * Description: 	This class is used to schedule DMS             *
REM ***************************************************************;

import ANZ_RUN_DMS:DMSFileProc;

class RunDMS
   method RunDMS(&RunCntlRec_ As Record, &ANZSimulateDMS_ As string);
   
   property Record Rec;
   property integer Status_;
   property integer RetStatus_;
   property integer PrcsInstance_;
   property integer MaxWaitTimeInMinutes_;
   property string FileString_;
   property string FileStringNew_;
   property string AttachID_;
   property string RecName_
private
   instance string &run_cntl_id, &kk_run_status;
   instance ProcessRequest &Request;
   instance boolean &iscompleted;
   
   method GetFileAsString(&oFile As File) Returns string;
   method FileCopy(&strOldFileInfo As string, &strNewFilePath As string, &strNewFileName As string);
   method WaitForNSeconds(&nSeconds As number);
   method scheduleProcess() Returns integer;
   method waitForProcess();
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/

method RunDMS
   /+ &RunCntlRec_ as Record, +/
   /+ &ANZSimulateDMS_ as String +/
   Local array of string &AS;
   Local integer &M, &StylePos;
   Local string &strRecName_, &strTempFile_, &strTempFileNew_, &Temp_;
   Local File &file_, &CopiedFile_;
   Local ANZ_RUN_DMS:DMSFileProc &ANZParseFile_ = create ANZ_RUN_DMS:DMSFileProc();
   Local boolean &FileBoolean_;
   
   rem Retrieve Run Control Record;
   %This.Rec = &RunCntlRec_;
   rem Max Wait Time for process;
   %This.MaxWaitTimeInMinutes_ = %This.Rec.MAX_WAIT_TIME.Value;
   %This.AttachID_ = %This.Rec.SCM_ATTACH_ID.Value;
   rem Pass the File Object to retrieve the File as a string;
   &strTempFile_ = %This.Rec.FILENAME.Value;
   &strTempFileNew_ = "\\psoau227dev83.appdev.corptst.anz.com\Temp\" | %This.AttachID_ | &strTempFile_;
   
   try
      &file_ = GetFile(&strTempFileNew_, "R", "A", %FilePath_Absolute);
      rem Original file retrieved as string;
      %This.FileString_ = %This.GetFileAsString(&file_);
      rem Copy the file to Scripts HOME folder so that Data Mover is able to access it;
      %This.FileCopy(&strTempFileNew_, "D:\psoft\auf0dev1b\scripts\", &strTempFile_);
      rem The copied file should be modified. the uploaded file should not be modified;
      &CopiedFile_ = GetFile("D:\psoft\auf0dev1b\scripts\" | &strTempFile_, "R", "A", %FilePath_Absolute);
      If &CopiedFile_.IsOpen Then
         &StylePos = &CopiedFile_.GetPosition();
         rem Original file retrieved as string;
         %This.FileStringNew_ = %This.GetFileAsString(&CopiedFile_);
         If (&ANZSimulateDMS_ = "Y") Then
            rem User wants to simulate DMS Execution;
            If (&FileBoolean_) Then
            Else
               %This.FileStringNew_ = "SET NO DATA;" | Char(10) | %This.FileStringNew_;
               &FileBoolean_ = True;
            End-If;
            &CopiedFile_ = GetFile("D:\psoft\auf0dev1b\scripts\" | &strTempFile_, "U", %FilePath_Absolute);
            If &CopiedFile_.IsOpen Then
               &CopiedFile_.SetPosition(&StylePos);
               rem File modified to include the SET NO DATA command to simulate DMS;
               &CopiedFile_.WriteString(%This.FileStringNew_);
            End-If;
         Else
            rem User wants to execute the DMS as it is;
         End-If; /* Simulate END-IF */
      End-If; /* Copied File Open END-IF */
      rem Parse the DMS file before scheduling;
      &AS = CreateArrayRept("", 0);
      &AS = Split(%This.FileString_, ";");
      For &M = 1 To &AS.Len
         &strRecName_ = &ANZParseFile_.ParseDMSFile(&AS [&M]);
         If All(&strRecName_) Then
            &Temp_ = " " | &strRecName_ | ";" | &Temp_;
         Else
            rem Comments or SET Statements encountered;
         End-If;
      End-For;
      %This.RecName_ = &Temp_;
   catch Exception &FileError
      MessageBox(0, "", 0, 0, "***File Exception...Could not read file*** " | &FileError.ToString());
   end-try;
   /*
   rem Schedule the Process;
   &Status_ = %This.scheduleProcess();
   If &Status_ = 0 Then
      rem Retrieve the process instance;
      %This.PrcsInstance_ = &Request.ProcessInstance;
   End-If;
   rem Retrieve the Scheduling Status for the Process;
   %This.RetStatus_ = &Status_;
   rem Use this method to wait for n seconds;
   rem %This.WaitForNSeconds(30);
   rem This is definitely a better choice for waiting as the thread is put to sleep for that duration;
   rem %This.waitForProcess();
   */
end-method;

method scheduleProcess
   /+ Returns Integer +/
   
   &Request = CreateProcessRequest();
   &Request.RunControlID = %This.Rec.RUN_CNTL_ID.Value;
   rem check to see if the user wants to run in the Bootstrap mode or not;
   If (&Rec.ANZ_DM_RUN_MODE.Value = "R") Then
      rem This is regular mode access;
      &Request.ProcessType = "Data Mover";
   Else
      rem Be very careful...This is Bootstrap mode access;
      &Request.ProcessType = "DATA MOVER BS";
   End-If;
   rem Custom definition;
   &Request.ProcessName = "ANZDMS";
   &Request.RunLocation = %This.Rec.SERVERNAME.Value;
   rem &Request.FileName = "D:\psoft\auf0dev1b\scripts\ANZTEST_PP.dms";
   &Request.RunDateTime = %Datetime;
   &Request.TimeZone = %ServerTimeZone;
   rem Schedule the request and check the status;
   &Request.Schedule();
   Return &Request.Status;
   
end-method;

method waitForProcess
   
   Local integer &K;
   Local boolean &timeout;
   Local time &timeend;
   Local string &run_status;
   Local JavaObject &Pause;
   Local number &Seconds;
   
   &timeend = AddToTime(%Time, 0, %This.MaxWaitTimeInMinutes_, 0);
   &timeout = False;
   &iscompleted = False;
   Repeat
      try
         &Seconds = 5;
         &Pause = GetJavaClass("java.lang.Thread");
         &Pause.sleep(&Seconds * 1000);
         &Pause = Null;
      catch Exception &NoProblem
         &Pause = Null;
      end-try;
      SQLExec("SELECT RUNSTATUS FROM PS_PMN_PRCSLIST WHERE PRCSINSTANCE=:1", &Request.ProcessInstance, &run_status);
      Evaluate &run_status
      When = "1"
      When = "2"
      When = "3"
      When = "8"
      When = "9"
      When = "10"
      When = "14"
      When = "17"
         &iscompleted = True;
         Break;
      End-Evaluate;
      &timeout = (%Time > &timeend);
   Until (&iscompleted) Or
      (&timeout);
   
   If Not (&iscompleted) Then
      MessageBox(16, " ", 22015, 6, " ", &Request.ProcessInstance, %This.MaxWaitTimeInMinutes_);
   End-If;
end-method;

/*
This method takes a PS File object and reads the contents from disk exactly how it appears.
File must be closed to release lock, then java inputstream reads file.
*/
method GetFileAsString
   /+ &oFile as File +/
   /+ Returns String +/
   
   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;
   
   
   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");
   
   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();
   
   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
      
      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
   
   /*open up the file again so that addition things could be written to file */
   rem &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);
   
   Return &sFullFileContent;
   
end-method;

/** This method will copy a file to another location **/
method FileCopy
   /+ &strOldFileInfo as String, +/
   /+ &strNewFilePath as String, +/
   /+ &strNewFileName as String +/
   
   Local File &oOldFile;
   Local File &oNewFile;
   Local string &strFileName;
   Local string &strData;
   Local integer &iPos, &iTempPos;
   
   &oOldFile = GetFile(&strOldFileInfo, "R", "A", %FilePath_Absolute);
   &strFileName = &oOldFile.Name;
   &iTempPos = Find("\", &strFileName);
   While &iTempPos > 0 And
         &iTempPos < Len(&strFileName)
      &iPos = &iTempPos;
      &iTempPos = Find("\", &strFileName, &iTempPos + 1);
   End-While;
   rem &strFileName = Substring(&strFileName, &iPos + 1, Len(&strFileName));
   
   &oNewFile = GetFile(&strNewFilePath | &strNewFileName, "W", "A", %FilePath_Absolute);
   
   While &oOldFile.ReadLine(&strData);
      &oNewFile.WriteLine(&strData);
   End-While;
   
   &oOldFile.Close();
   &oNewFile.Close();
   
end-method;

method WaitForNSeconds
   /+ &nSeconds as Number +/
   
   Local time &tCurTime;
   While AddToTime(&tCurTime, 0, 0, &nSeconds) > %Time
      /*stay in loop*/
   End-While;
   
end-method;

class Utilities
   method Utilities();
   method IsValidEmailId(&emailId As string) Returns boolean; /* Validate Email Addresses */
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/
method Utilities
   rem leaving it blank for the time being;
end-method;

/*     
 Action: checks if an email is correct. 
 Parameter: EmailId - the Email address 
 Returned value: on success it returns True, else False. 
*/
method IsValidEmailId
   /+ &emailId as String +/
   /+ Returns Boolean +/
   Local boolean &blnIsItValid;
   Local array of string &strArray;
   Local array of string &strDomainPart;
   Local string &strItem;
   Local number &i;
   Local string &char;
   rem -  assume the email address is correct  ;
   &blnIsItValid = True;
   If LTrim(RTrim(&emailId)) = "" Then
      Return False;
   End-If;
   rem - split the email address in two parts: name@domain.ext ;
   &strArray = Split(&emailId, "@");
   rem - if there are more or less than two parts  ;
   If &strArray.Len <> 2 Then
      &blnIsItValid = False;
      Return &blnIsItValid;
   End-If;
   rem - check each part ;
   While &strArray.Len > 0
      &strItem = &strArray.Pop();
      rem - no part can be void;
      If Len(&strItem) <= 0 Then
         &blnIsItValid = False;
         Return &blnIsItValid;
      End-If;
      /* - check each character of the part only following "abcdefghijklmnopqrstuvwxyz_-."
        ' characters and the ten digits are allowed */
      For &i = 1 To Len(&strItem)
         &char = Lower(Substring(&strItem, &i, 1));
         rem - check if there is an illegal character in the part ;
         Local number &val = Find(&char, "abcdefghijklmnopqrstuvwxyz_-.");
         Local boolean &y = IsDigits(&char);
         If Find(&char, "abcdefghijklmnopqrstuvwxyz_-.") <= 0 And
               Not IsDigits(&char) Then
            &blnIsItValid = False;
            Return &blnIsItValid;
         End-If;
      End-For;
      rem - the first and the last character in the part cannot be . (dot) ;
      If Left(&strItem, 1) = "." Or
            Right(&strItem, 1) = "." Then
         &blnIsItValid = False;
         Return &blnIsItValid;
      End-If;
   End-While;
   
   rem - split the email address in two parts: name@domain.ext again;
   &strArray = Split(&emailId, "@");
   rem - the second part (domain.ext) must contain a . (dot);
   If Find(".", &strArray [2]) <= 0 Then
      &blnIsItValid = False;
      Return &blnIsItValid;
   End-If;
   rem -  check the length of the extension ;
   &strDomainPart = Split(&strArray [2], ".");
   rem - the length of the extension can be only 2, 3, or 4 to cover the new "info" extension ;
   If (Len(&strDomainPart [&strDomainPart.Len]) < 5 And
         Len(&strDomainPart [&strDomainPart.Len]) > 1) Then
   Else
      &blnIsItValid = False;
      Return &blnIsItValid;
   End-If;
   rem - after . (dot) cannot follow a . (dot) ;
   If Find("..", &emailId) > 0 Then
      &blnIsItValid = False;
      Return &blnIsItValid;
   End-If;
   Return True;
end-method;

REM ***************************************************************;
REM * ANZWR07973						   				           *
REM * Developer: prakasp1						   				   *
REM * Created Date: 08/12/2009									   *
REM * Description: 	This class is used to check query profile      *
                    security. The delivered Class GetQuerySecurityProfile() 
                    is currently not returning the correct results *
                    unless Query Access List Cache is enabled and  *
                    run after every change.                        *
REM ***************************************************************;

class ANZQuerySecurity
   method ANZQuerySecurity(&ANZOprID_ As string);
   
   property integer Status_;
   property string UserID_;
   property string ANZRoleName_;
   property boolean ANZRunFlag_;
   property boolean ANZExcelFlag_;
   property boolean ANZCrystalFlag_;
   property array of any ANZData_;
   property string ANZRunEFirstTime_;
private
   instance boolean &iscompleted;
   
   method RunQuery() Returns boolean;
   method RunToExcel() Returns boolean;
   method RunToCrystal() Returns boolean;
   method CheckUserInRole(&ANZRoleStringQEC_ As string) Returns boolean;
   
end-class;

/*------------------------*/
/*      Constructor       */
/*------------------------*/
method ANZQuerySecurity
   /+ &ANZOprID_ as String +/
   
   %This.UserID_ = &ANZOprID_;
   &ANZData_ = CreateArrayAny();
   &ANZRunFlag_ = %This.RunQuery();
   &ANZExcelFlag_ = %This.RunToExcel();
   &ANZCrystalFlag_ = %This.RunToCrystal();
end-method;

method RunQuery
   /+ Returns Boolean +/
   
   /* This is equivalent to %Session.GetQuerySecurityProfile().CanRunQuery; */
   Local boolean &ANZRunFlagQBool_;
   Local string &ANZRoleStringQ_;
   Local SQL &ANZRunFlagSQL_ = GetSQL(SQL.ANZ_QRY_RUN_FLAG_SQL, %This.UserID_);
   While &ANZRunFlagSQL_.Fetch(&ANZData_);
      &ANZRoleStringQ_ = &ANZData_.Join(",", "", "");
   End-While;
   
   rem MessageBox(0, "", 0, 0, "Here in 1:" | &ANZRoleStringQ_);
   /* Pass the RoleNames and check whether any of the Roles have this option checked */
   &ANZRunFlagQBool_ = %This.CheckUserInRole(&ANZRoleStringQ_);
   
   Return &ANZRunFlagQBool_;
   
end-method;

method RunToExcel
   /+ Returns Boolean +/
   
   /* This is equivalent to %Session.GetQuerySecurityProfile().CanRunToExcel; */
   Local boolean &ANZRunFlagEBool_;
   Local string &ANZRoleStringE_;
   Local SQL &ANZRun2ExcelFlagSQL_ = GetSQL(SQL.ANZ_QRY_EXCEL_FLAG_SQL, %This.UserID_);
   
   While &ANZRun2ExcelFlagSQL_.Fetch(&ANZData_);
      &ANZRoleStringE_ = &ANZData_.Join(",", "", "");
   End-While;
   
   rem MessageBox(0, "", 0, 0, "Here in 2:" | &ANZRoleStringE_);
   /* Pass the RoleNames and check whether any of the Roles have this option checked */
   &ANZRunFlagEBool_ = %This.CheckUserInRole(&ANZRoleStringE_);
   
   Return &ANZRunFlagEBool_;
   
end-method;

method RunToCrystal
   /+ Returns Boolean +/
   
   /* This is equivalent to %Session.GetQuerySecurityProfile().CanRunToCrystal; */
   Local boolean &ANZRunFlagCBool_;
   Local string &ANZRoleStringC_;
   Local SQL &ANZRun2CrystalFlagSQL_ = GetSQL(SQL.ANZ_QRY_CRYSTAL_FLAG_SQL, %This.UserID_);
   While &ANZRun2CrystalFlagSQL_.Fetch(&ANZData_);
      &ANZRoleStringC_ = &ANZData_.Join(",", "", "");
   End-While;
   
   rem MessageBox(0, "", 0, 0, "Here in 3:" | &ANZRoleStringC_);
   /* Pass the RoleNames and check whether any of the Roles have this option checked */
   &ANZRunFlagCBool_ = %This.CheckUserInRole(&ANZRoleStringC_);
   /* This condition has been added as PS OOB checks for this Role. It will always return false as there are no users with Role CE User in FS8PROD */
   If (&ANZRunFlagCBool_ = True) Then
      If (IsUserInRole("CE User") = True) Then
         &ANZRunFlagCBool_ = True;
      Else
         &ANZRunFlagCBool_ = False;
      End-If;
   End-If;
   
   Return &ANZRunFlagCBool_;
   
end-method;

method CheckUserInRole
   /+ &ANZRoleStringQEC_ as String +/
   /+ Returns Boolean +/
   
   Return IsUserInRole(&ANZRoleStringQEC_)
end-method;

SELECT ROLENAME 
  FROM PSROLECLASS 
 WHERE CLASSID IN ( 
 SELECT CLASSID 
  FROM PS_SCRTY_QUERY 
 WHERE CLASSID IN ( 
 SELECT CLASSID 
  FROM PSROLECLASS 
 WHERE ROLENAME IN ( 
 SELECT ROLENAME 
  FROM PSROLEUSER 
 WHERE ROLEUSER = :1)) 
   AND QRY_OUT_LISTBOX = 'Y')

   SELECT ROLENAME 
  FROM PSROLECLASS 
 WHERE CLASSID IN ( 
 SELECT CLASSID 
  FROM PS_SCRTY_QUERY 
 WHERE CLASSID IN ( 
 SELECT CLASSID 
  FROM PSROLECLASS 
 WHERE ROLENAME IN ( 
 SELECT ROLENAME 
  FROM PSROLEUSER 
 WHERE ROLEUSER = :1)) 
   AND QRY_OUT_NVISION = 'Y')

   SELECT ROLENAME 
  FROM PSROLECLASS 
 WHERE CLASSID IN ( 
 SELECT CLASSID 
  FROM PS_SCRTY_QUERY 
 WHERE CLASSID IN ( 
 SELECT CLASSID 
  FROM PSROLECLASS 
 WHERE ROLENAME IN ( 
 SELECT ROLENAME 
  FROM PSROLEUSER 
 WHERE ROLEUSER = :1)) 
   AND QRY_OUT_CRYSTAL = 'Y')

   /*************************************************************************/
/* WR#       		 Date        Developer        			Notes   	 */
/* ANZWR07922    06/08/2009      Ashish Kumar  		Prcedures to output a*/
/*												    file from an AE in   */
/*													the desired format   */
/*************************************************************************/

/* Begin ANZWR07922 , Ashish Kumar, 06/08/2009*/


import ANZ_BATCH_LOG:*;

class ANZ_AE_OUTPUT_FILE
   property boolean stdout_redirected;
   property boolean stderr_redirected;
   property integer error_flag;
   property integer format_type;
   
   method ANZ_AE_OUTPUT_FILE(&oprid As string, &run_cntl_id As string, &proc_inst As integer);
   method print_out_xls(&rec As string, &filename As string, &filedir As string, &fieldstr As string);
   method log_stdout(&filename As string, &filedir As string, &header As string, &msgtext As string);
   method log_stderr(&filename As string, &filedir As string, &msgtext As string);
   
private
   instance integer &ae_proc_inst;
   instance string &ae_oprid;
   instance string &ae_run_cntl_id;
   instance string &ae_file_dir;
   instance string &ae_log_file_dir;
   instance string &ae_err_file_dir;
   instance string &ae_file_path;
   instance string &ae_filename;
   instance string &ae_log_filename;
   instance string &ae_err_filename;
   instance string &ae_log_title;
   instance string &ae_rc;
   instance string &ae_fieldstr;
   
   instance Rowset &ae_rs;
   instance ANZ_BATCH_LOG:ANZ_BATCH_LOG &ae_msgLog;
   
   Constant &Query_PDF = 2;
   Constant &Query_HTML = 5;
   Constant &Query_XLS = 8;
   Constant &Query_TXT = 14;
   
   method print_output();
   method log_redirect();
   method err_redirect();
   method rowset_sort();
   
end-class;

/**
 * The ANZ_AE_OUTPUT_FILE constructor is used to create the class object.
 * It also initialises three instance variables. 
 * oprid and runcontrol id should not be null otherwise error flag will be set and error log will
 * be generated and no further processign will be done.
 * @param &ae_oprid - OPRID , &ae_run_cntl_id - Run Control Id, &ae_proc_inst - Process Instance. 				.
 */
method ANZ_AE_OUTPUT_FILE
   /+ &oprid as String, +/
   /+ &run_cntl_id as String, +/
   /+ &proc_inst as Integer +/
   Local integer &tmp;
   Local string &errmsg;
   Local string &errfiledir;
   
   %This.stdout_redirected = False;
   %This.stderr_redirected = False;
   &ae_oprid = &oprid;
   &ae_run_cntl_id = &run_cntl_id;
   &ae_proc_inst = &proc_inst;
   If All(&oprid, &run_cntl_id) Then
      %This.error_flag = 0;
   Else
      %This.error_flag = 1;
      &tmp = &proc_inst;
      &errmsg = "oprid and run control id parameters cannot be blank while instanciating ANZ_AE_OUTPUT_FILE class objetcs";
      If All(&tmp) Then;
         SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &tmp, &errfiledir);
         &ae_err_file_dir = &errfiledir;
         &ae_err_filename = "Error_log";
         %This.log_stderr(&ae_err_filename, &ae_err_file_dir, &errmsg);
      Else
         MessageBox(%MsgStyle_OK, "", 23000, 17, "&errmsg");
         MessageBox(%MsgStyle_OK, "", 23000, 19, "Proc Instance" | &tmp);
      End-If;
   End-If;
   rem &ae_msgLog = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
end-method;


/**
 * The print_out_xls method prints the output in xls format.
 * It in turn calls the method print_out. 
 * @param &rec - Record data which will be output , &filename - output file without extension, &filedir - file directory prefixed with abosulute path, &fieldstr - comma separed string of fields based on which rowset data should be sorted.
 */
method print_out_xls
   /+ &rec as String, +/
   /+ &filename as String, +/
   /+ &filedir as String, +/
   /+ &fieldstr as String +/
   try
      
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:print_output_xls";
      Local integer &ANZiTempPos;
      Local string &ANZstrSlash;
      Local string &errmsg;
      Local string &errfiledir;
      Local integer &tmp;
      
      If All(&rec, &filename, &filedir) And
            %This.error_flag = 0 Then
         &ae_rc = &rec;
         &ae_filename = &filename;
         &ae_file_dir = &filedir;
         &ae_fieldstr = &fieldstr;
         
         %This.format_type = &Query_XLS;
         rem SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &ae_proc_inst, &ae_file_dir);
         rem &ae_file_dir = "D:\psoft\auf0dev1b\appserv\prcs\AUF0DEV1\log_output\";
         
         &ANZiTempPos = Find("\", &ae_file_dir);
         If &ANZiTempPos = 0 Then
            &ANZiTempPos = Find("/", &ae_file_dir);
            &ANZstrSlash = "/";
         Else
            &ANZstrSlash = "\";
         End-If;
         
         &ae_file_path = &ae_file_dir | &ANZstrSlash | &ae_filename | "_" | %Date | ".xls";
         %This.print_output();
      Else
         If %This.error_flag = 0 Then /* Print error message only when anyone of method parameters is blank. Error Flag 1 has already been take care of */
            &errmsg = "Mthod print_out_xls prameters Record, File Name and File Output Path are mandatory and cannot be blank";
            &tmp = &ae_proc_inst;
            If All(&tmp) Then;
               SQLExec("SELECT PRCSOUTPUTDIR FROM PSPRCSPARMS WHERE PRCSINSTANCE = :1", &tmp, &errfiledir);
               &ae_err_file_dir = &errfiledir;
               &ae_err_filename = "Error_log";
               %This.log_stderr(&ae_err_filename, &ae_err_file_dir, &errmsg);
            Else
               MessageBox(%MsgStyle_OK, "", 23000, 18, "&errmsg");
            End-If;
            %This.error_flag = 1;
         End-If;
      End-If;
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;



/**
 * The print_out method prints the output as per the specified format.
 * record object, filename etc should be set before calling this method.. 
 * @param No parameters required.
 */

method print_output;
   
   try
      
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:print_output";
      Local File &AE_File;
      Local string &CSV_String;
      Local ApiObject &AE_QryObj;
      
      
      &AE_QryObj = %Session.GetQuery();
      /* Opening a CSV file */
      &AE_File = GetFile(&ae_file_path, "W", %FilePath_Absolute);
      /* Checking whether the File if Opened Successfully */
      If &AE_File.IsOpen Then
         /* Initialising the Rowset & Values */
         &ae_rs = CreateRowset(@("RECORD." | &ae_rc));
         %This.log_stdout("ANZ_INCP_USR", &ae_file_dir, "ANZ_INCP_USR", "The number of records read for the table " | &ae_rc | " = " | &ae_rs.Fill());
         /* Sorting the rowset based upon the supplied field/fields in ascending order*/
         rem &ae_rs.Fill();
         If &ae_fieldstr <> "" And
               &ae_fieldstr <> " " Then
            %This.rowset_sort();
         End-If;
         &CSV_String = &AE_QryObj.FormatResultString(&ae_rs, %This.format_type, 1, &ae_rs.ActiveRowCount);
         /* Writing the file with the Location Data */
         &AE_File.WriteLine(&CSV_String);
      Else
         Error ("Error: Opening of File " | &ae_file_path | " Failed");
      End-If;
      &AE_File.Close();
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;




/**
 * log_redirect creates the specified log file in the text format at the specified location to print the log message.
 * Before printing the log message this method redirects the standard output and standard error to the log file.
 * This method is called within the method log_stdout. 
 * @param No Parameter specified.
 */
method log_redirect
   
   try
      
      
      
      /* Create Class Object for Logging */
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:log_redirect";
      Local string &ANZErrSub_;
      Local string &ANZErrFile_;
      Local integer &ANZiTempPos;
      Local string &ANZstrSlash;
      
      
      If %This.stdout_redirected = False And
            &ae_log_filename <> "" And
            &ae_log_file_dir <> "" Then
         &ANZErrSub_ = &ae_log_filename | "_" | &ae_proc_inst | ".txt";
         /* Determine the file path separator character. First check for backslash then forwardslash. */
         &ANZiTempPos = Find("\", &ae_log_file_dir);
         If &ANZiTempPos = 0 Then
            &ANZiTempPos = Find("/", &ae_log_file_dir);
            &ANZstrSlash = "/";
         Else
            &ANZstrSlash = "\";
         End-If;
         
         &ANZErrFile_ = &ae_log_file_dir | &ANZstrSlash | &ANZErrSub_;
         /* redirect stdout */
         &ae_msgLog.redirect_stdout(&ANZErrFile_);
         /* Generate Batch Log Report */
         &ae_msgLog.println_to_stdout("******************************************************************");
         &ae_msgLog.println_to_stdout("*                                                                *");
         &ae_msgLog.println_to_stdout("*                     " | &ae_log_title | "                ");
         rem &ae_msgLog.println_to_stdout("*                        ANZ_PASS_AE                             *");
         &ae_msgLog.println_to_stdout("*                                                                *");
         &ae_msgLog.println_to_stdout("******************************************************************");
         &ae_msgLog.println_to_stdout("");
         &ae_msgLog.println_to_stdout("       Generated On : " | %Datetime);
         &ae_msgLog.println_to_stdout("       Generated By : " | &ae_oprid);
         &ae_msgLog.println_to_stdout("   Process Instance : " | &ae_proc_inst);
         &ae_msgLog.println_to_stdout("     Run Control ID : " | &ae_run_cntl_id);
         &ae_msgLog.println_to_stdout("");
         &ae_msgLog.println_to_stdout("******************************************************************");
         &ae_msgLog.println_to_stdout("");
         &ae_msgLog.println_to_stdout("******************************************************************");
         %This.stdout_redirected = True;
      End-If;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
   
end-method;



/**
 * The log_stdout method prints the log message.
 * This method gives a call the to method log_redirect to print the header for the log file only once in the entire session. 
 * @param - &filename - log file name, &filedir - directory of the log file to be created, &header - title of the log file e.g. the program name for which this log file is being created, &msgtext - log message to be printed.   
 */
method log_stdout
   /+ &filename as String, +/
   /+ &filedir as String, +/
   /+ &header as String, +/
   /+ &msgtext as String +/
   try
      
      
      
      /* Create Class Object for Logging */
      rem Local ANZ_BATCH_LOG:ANZ_BATCH_LOG ae_msgLog = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:log_stdout";
      Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &tmp = &ae_msgLog;
      &ae_log_filename = &filename;
      &ae_log_file_dir = &filedir;
      &ae_log_title = &header;
      If None(&tmp) Then
         &ae_msgLog = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
      End-If;
      If All(&filename, &filedir) Then
         %This.log_redirect();
         &ae_msgLog.println_to_stdout(&msgtext);
      End-If;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;





/**
 * The rowset_sort method sorts the data in the rowset. It should be called after the rowset has been filled.
 * The call to this method is given from within the method print_output. 
 * @param - No parameters for this method
 */
method rowset_sort
   try
      
      
      
      /* Create Class Object for Logging */
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:log_stdout";
      
      Local array of string &AE_FieldArray;
      Local string &sortfld1, &sortfld2, &sortfld3, &sortfld4, &sortfld5, &sortfld6, &sortfld7, &sortfld8, &sortfld9, &sortfld10, &sortfld11, &sortfld12;
      Local integer &I;
      
      &AE_FieldArray = CreateArrayRept("", 0);
      &AE_FieldArray = Split(&ae_fieldstr, ",");
      
      For &I = 1 To &AE_FieldArray.Len
         Evaluate &I
         When (1)
            &sortfld1 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (2)
            &sortfld2 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (3)
            &sortfld3 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (4)
            &sortfld4 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (5)
            &sortfld5 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (6)
            &sortfld6 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (7)
            &sortfld7 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (8)
            &sortfld8 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (9)
            &sortfld9 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (10)
            &sortfld10 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (11)
            &sortfld11 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
         When (12)
            &sortfld12 = &ae_rc | "." | &AE_FieldArray [&I];
            Break;
            
         End-Evaluate;
      End-For;
      
      Evaluate &AE_FieldArray.Len
      When (1)
         &ae_rs.Sort(@&sortfld1, "A");
         Break;
      When (2)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A");
         Break;
      When (3)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A");
         Break;
      When (4)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A");
         Break;
      When (5)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A");
         Break;
      When (6)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A");
         Break;
      When (7)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A", @&sortfld7, "A");
         Break;
      When (8)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A", @&sortfld7, "A", @&sortfld8, "A");
         Break;
      When (9)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A", @&sortfld7, "A", @&sortfld8, "A", @&sortfld9, "A");
         Break;
      When (10)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A", @&sortfld7, "A", @&sortfld8, "A", @&sortfld9, "A", @&sortfld10, "A");
         Break;
      When (11)
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A", @&sortfld7, "A", @&sortfld8, "A", @&sortfld9, "A", @&sortfld10, "A", @&sortfld11, "A");
         Break;
      When >= 12
         &ae_rs.Sort(@&sortfld1, "A", @&sortfld2, "A", @&sortfld3, "A", @&sortfld4, "A", @&sortfld5, "A", @&sortfld6, "A", @&sortfld7, "A", @&sortfld8, "A", @&sortfld9, "A", @&sortfld10, "A", @&sortfld11, "A", @&sortfld12, "A");
         Break;
         
      End-Evaluate;
      
      
      
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;



/**
 * err_redirect creates the specified err file in the text format at the specified location to print the log message.
 * Before printing the err message this method redirects the standard error to the log file.
 * This method is called within the method log_stderr. 
 * @param No Parameter specified.
 */
method err_redirect
   try
      
      
      
      /* Create Class Object for Logging */
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:err_redirect";
      Local string &ANZErrSub_;
      Local string &ANZErrFile_;
      Local integer &ANZiTempPos;
      Local string &ANZstrSlash;
      
      
      If %This.stderr_redirected = False And
            &ae_err_filename <> "" And
            &ae_err_file_dir <> "" Then
         &ANZErrSub_ = &ae_err_filename | "_" | &ae_proc_inst | ".log";
         
         /* Determine the file path separator character. First check for backslash then forwardslash. */
         &ANZiTempPos = Find("\", &ae_err_file_dir);
         If &ANZiTempPos = 0 Then
            &ANZiTempPos = Find("/", &ae_err_file_dir);
            &ANZstrSlash = "/";
         Else
            &ANZstrSlash = "\";
         End-If;
         
         &ANZErrFile_ = &ae_err_file_dir | &ANZstrSlash | &ANZErrSub_;
         /* redirect stdout */
         &ae_msgLog.redirect_stderr(&ANZErrFile_);
         &ae_msgLog.println_to_stderr("******************************************************************");
         &ae_msgLog.println_to_stderr("");
         &ae_msgLog.println_to_stderr("       Generated On : " | %Datetime);
         &ae_msgLog.println_to_stderr("       Generated By : " | &ae_oprid);
         &ae_msgLog.println_to_stderr("   Process Instance : " | &ae_proc_inst);
         &ae_msgLog.println_to_stderr("     Run Control ID : " | &ae_run_cntl_id);
         &ae_msgLog.println_to_stderr("");
         &ae_msgLog.println_to_stderr("******************************************************************");
         &ae_msgLog.println_to_stderr("");
         &ae_msgLog.println_to_stderr("******************************************************************");
         %This.stderr_redirected = True;
      End-If;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;





/**
 * The log_stderr method prints the error message.
 * This method gives a call the to method err_redirect to print the header for the error file only once in the entire session. 
 * @param - &filename - error file name, &filedir - directory of the error file to be created, &msgtext - error message to be printed.   
 */
method log_stderr
   /+ &filename as String, +/
   /+ &filedir as String, +/
   /+ &msgtext as String +/
   try
      
      
      
      /* Create Class Object for Logging */
      Local string &sMethodName = "ANZ_AE_OUTPUT_FILE:log_stderr";
      Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &tmp = &ae_msgLog;
      &ae_err_filename = &filename;
      &ae_err_file_dir = &filedir;
      If None(&tmp) Then
         &ae_msgLog = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
      End-If;
      If All(&filename, &filedir) Then
         %This.err_redirect();
         &ae_msgLog.println_to_stderr(&msgtext);
      End-If;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName));
   end-try;
end-method;

PSIDE.EXE -HIDE -CT MICROSFT -CD CNF0DEV1 -CO prakasp1 -CP Password_1 -PJM ANZWR07990_PP -TD CNF0FUN1 -TO prakasp1 -TP Password_2 -QUIET -LF C:\TEMP\COMPARE.LOG -CL 150 -AF 0 -DDL 0 -OBJ 0,1,5,10,20 -LNG ENG, ZHS -CMT 1 -TGT 1 -CBY REL Financials/SCM 8.09.00.000 -ROD C:\TEMP\UPGREPORTS

&ANZEmailID_ = "prakasp1@anz.com";
Local ANZ_RUN_DMS:Utilities &ANZUtilObj_;
If (None(&ANZUtilObj_)) Then
   &ANZUtilObj_ = create ANZ_RUN_DMS:Utilities();
End-If;

&ANZLocalBool_ = &ANZUtilObj_.IsValidEmailId(&ANZEmailID_);
MessageBox(0, "", 0, 0, "&ANZLocalBool_ " | &ANZLocalBool_);

Query
DECLARE @COUNT INT;
DECLARE @ORDERBY VARCHAR(4);

SET @COUNT = 50;
SET @ORDERBY = 'USED';

BEGIN try
IF ((SELECT CASE WHEN @ORDERBY in ('USED','DATA','RC','RESD') THEN 1 ELSE 0 END) = 0)
BEGIN 
   -- abort if invalid @ORDERBY parameter entered
   RAISERROR('@ORDERBY parameter not USED, DATA, RC or RESD',11,1)
   RETURN
END

SELECT TOP (@COUNT)
 --(row_number() over(order by a3.name, a2.name))%2 as l1,
 a2.name AS [TableName],
 sum(a1.rows) as row_count,
 sum((a1.reserved + ISNULL(a4.reserved,0))* 8) AS reserved, 
 sum(a1.used * 8)[Used],
 sum(a1.data * 8) AS data,
 sum((CASE WHEN (a1.used + ISNULL(a4.used,0)) > a1.data THEN 
   (a1.used + ISNULL(a4.used,0)) - a1.data ELSE 0 END) * 8 )AS index_size,
 sum((CASE WHEN (a1.reserved + ISNULL(a4.reserved,0)) > a1.used THEN 
   (a1.reserved + ISNULL(a4.reserved,0)) - a1.used ELSE 0 END) * 8) AS unused
FROM
 (SELECT ps.object_id, SUM (CASE WHEN (ps.index_id < 2) THEN row_count ELSE 0 END) AS [rows], SUM (ps.reserved_page_count) AS reserved,
  SUM (CASE WHEN (ps.index_id < 2) THEN (ps.in_row_data_page_count + ps.lob_used_page_count + ps.row_overflow_used_page_count)
    ELSE (ps.lob_used_page_count + ps.row_overflow_used_page_count)END) AS data, SUM (ps.used_page_count) AS used
FROM sys.dm_db_partition_stats ps
GROUP BY ps.object_id) AS a1
LEFT OUTER JOIN 
 (SELECT it.parent_id, SUM(ps.reserved_page_count) AS reserved, SUM(ps.used_page_count) AS used
  FROM sys.dm_db_partition_stats ps
  INNER JOIN sys.internal_tables it ON (it.object_id = ps.object_id)
  WHERE it.internal_type IN (202,204)
  GROUP BY it.parent_id) AS a4 ON (a4.parent_id = a1.object_id)
INNER JOIN sys.all_objects a2  ON ( a1.object_id = a2.object_id ) 
INNER JOIN sys.schemas a3 ON (a2.schema_id = a3.schema_id)
WHERE a2.type <> 'S' and a2.type <> 'IT'
AND a1.used <> 0
GROUP BY a2.name 
ORDER BY CASE 
WHEN @ORDERBY = 'USED' THEN sum(a1.used * 8)
WHEN @ORDERBY = 'DATA' THEN sum(a1.data * 8)
WHEN @ORDERBY = 'RC' THEN sum(a1.rows)
WHEN @ORDERBY = 'RESD' THEN sum((a1.reserved + ISNULL(a4.reserved,0))* 8)
END DESC
end try 
begin catch 
select 
 -100 as l1
, 1 as schemaname 
,       ERROR_NUMBER() as tablename
,       ERROR_SEVERITY() as row_count
,       ERROR_STATE() as reserved
,       ERROR_MESSAGE() as data
,       1 as index_size
,   1 as unused 
end catch

Use the below query to determine Schema Space Usage
begin try 
SELECT
 --(row_number() over(order by a3.name, a2.name))%2 as l1,
 a3.name AS [schemaname],
 count(a2.name ) as NumberOftables,
 sum(a1.rows) as row_count,
 sum((a1.reserved + ISNULL(a4.reserved,0))* 8) AS reserved, 
 sum(a1.data * 8) AS data,
 sum((CASE WHEN (a1.used + ISNULL(a4.used,0)) > a1.data THEN 
   (a1.used + ISNULL(a4.used,0)) - a1.data ELSE 0 END) * 8 )AS index_size,
 sum((CASE WHEN (a1.reserved + ISNULL(a4.reserved,0)) > a1.used THEN 
   (a1.reserved + ISNULL(a4.reserved,0)) - a1.used ELSE 0 END) * 8) AS unused
FROM
 (SELECT 
  ps.object_id,
  SUM (
   CASE
    WHEN (ps.index_id < 2) THEN row_count
    ELSE 0
   END
   ) AS [rows],
  SUM (ps.reserved_page_count) AS reserved,
  SUM (
   CASE
    WHEN (ps.index_id < 2) THEN 
     (ps.in_row_data_page_count + ps.lob_used_page_count + ps.row_overflow_used_page_count)
    ELSE (ps.lob_used_page_count + ps.row_overflow_used_page_count)
   END
   ) AS data,
  SUM (ps.used_page_count) AS used
 FROM sys.dm_db_partition_stats ps
 GROUP BY ps.object_id) AS a1
LEFT OUTER JOIN 
 (SELECT 
  it.parent_id,
  SUM(ps.reserved_page_count) AS reserved,
  SUM(ps.used_page_count) AS used
  FROM sys.dm_db_partition_stats ps
  INNER JOIN sys.internal_tables it ON (it.object_id = ps.object_id)
  WHERE it.internal_type IN (202,204)
  GROUP BY it.parent_id) AS a4 ON (a4.parent_id = a1.object_id)
INNER JOIN sys.all_objects a2  ON ( a1.object_id = a2.object_id ) 
INNER JOIN sys.schemas a3 ON (a2.schema_id = a3.schema_id)
WHERE a2.type <> 'S' and a2.type <> 'IT'
group by a3.name 
ORDER BY a3.name
end try 
begin catch 
select 
 -100 as l1
, 1 as schemaname 
,       ERROR_NUMBER() as tablename
,       ERROR_SEVERITY() as row_count
,       ERROR_STATE() as reserved
,       ERROR_MESSAGE() as data
,       1 as index_size
,   1 as unused 
end catch

Use the below query to determine space used for each table

BEGIN try 
DECLARE @table_name VARCHAR(500) ; 
DECLARE @schema_name VARCHAR(500) ; 
DECLARE @tab1 TABLE(
        tablename VARCHAR (500) collate database_default
,       schemaname VARCHAR(500) collate database_default
); 
DECLARE  @temp_table TABLE (    
        tablename sysname
,       row_count INT
,       reserved VARCHAR(50) collate database_default
,       data VARCHAR(50) collate database_default
,       index_size VARCHAR(50) collate database_default
,       unused VARCHAR(50) collate database_default 
); 

INSERT INTO @tab1 
SELECT t1.name
,       t2.name 
FROM sys.tables t1 
INNER JOIN sys.schemas t2 ON ( t1.schema_id = t2.schema_id );   

DECLARE c1 CURSOR FOR 
SELECT t2.name + '.' + t1.name  
FROM sys.tables t1 
INNER JOIN sys.schemas t2 ON ( t1.schema_id = t2.schema_id );   

OPEN c1; 
FETCH NEXT FROM c1 INTO @table_name;
WHILE @@FETCH_STATUS = 0 
BEGIN  
        SET @table_name = REPLACE(@table_name, '[',''); 
        SET @table_name = REPLACE(@table_name, ']',''); 

        -- make sure the object exists before calling sp_spacedused
        IF EXISTS(SELECT OBJECT_ID FROM sys.objects WHERE OBJECT_ID = OBJECT_ID(@table_name))
        BEGIN
                INSERT INTO @temp_table EXEC sp_spaceused @table_name, false ;
        END
        
        FETCH NEXT FROM c1 INTO @table_name; 
END; 
CLOSE c1; 
DEALLOCATE c1; 
SELECT t1.*
,       t2.schemaname 
FROM @temp_table t1 
INNER JOIN @tab1 t2 ON (t1.tablename = t2.tablename )
ORDER BY  schemaname,tablename;
END try 
BEGIN catch 
SELECT -100 AS l1
,       ERROR_NUMBER() AS tablename
,       ERROR_SEVERITY() AS row_count
,       ERROR_STATE() AS reserved
,       ERROR_MESSAGE() AS data
,       1 AS index_size, 1 AS unused, 1 AS schemaname 
END catch

Use this query to identify potential candidates for Batch Temp Tables locking
SELECT P.MESSAGE_PARM RECNAME, R.PRCSNAME, COUNT(*) OCCURRENCES, MAX(L.DTTM_STAMP_SEC) LAST_OCCURRENCE,
MAX(P.PROCESS_INSTANCE) PROCESS_INSTANCE
FROM PS_MESSAGE_LOG L (NOLOCK) , PS_MESSAGE_LOGPARM P (NOLOCK) 
LEFT OUTER JOIN PSPRCSRQST R (NOLOCK)
ON R.PRCSINSTANCE = P.PROCESS_INSTANCE
WHERE L.MESSAGE_SET_NBR = 108
    AND L.MESSAGE_NBR = 544
    AND P.PROCESS_INSTANCE = L.PROCESS_INSTANCE
    AND P.MESSAGE_SEQ = L.MESSAGE_SEQ
 --AND L.DTTM_STAMP_SEC >= Getdate()
 --AND MONTH(L.DTTM_STAMP_SEC) = 08
 --AND DAY(L.DTTM_STAMP_SEC) >= 22
   AND YEAR(L.DTTM_STAMP_SEC) > 2009
GROUP BY P.MESSAGE_PARM, R.PRCSNAME
ORDER BY 1, 2

Run at End of Batch to gather Online Journal Edits per minute
CREATE TABLE #TIME
(START datetime,
 STOP  datetime)

declare @i int
declare @t datetime
set @i = 0
set @t = '2010-03-01 00:00:00'

while (@i < 1440)
begin
 INSERT INTO #TIME VALUES (@t, dateadd(MINUTE,1,@t))
 set @t = dateadd(MINUTE,1,@t)
 set @i = @i + 1
end

SELECT T.START, (MAX(PRCSINSTANCE) - MIN(PRCSINSTANCE)+1) - COUNT('X') AS ONLINE_EDITS
FROM PSPRCSRQST, #TIME T
WHERE RQSTDTTM BETWEEN T.START AND T.STOP
GROUP BY T.START
ORDER BY 1

SELECT DTL.AE_APPLID, DTL.AE_SECTION, STEP.AE_STEP, STMT.AE_STMT_TYPE,
(CASE STMT.AE_STMT_TYPE When '0' then 'Records'
When 'C' Then 'Comments'                      
When 'D' Then 'Do Select'                     
When 'H' Then 'Do When'                       
When 'N' Then 'Do Until'                      
When 'S' Then 'Select'                        
When 'U' Then 'Update/Insert/Delete'
When 'W' Then 'Do While'
--When 'D' Then 'Do Section'                    
When 'M' Then 'Mass Change'                   
When 'P' Then 'Peoplecode'                    
When 'S' Then 'SQL Statement'
Else 'Unknown' END) [Statement Type], 
STMT.AE_DO_SELECT_TYPE, 
STMT.SQLID, STMT.DESCR, STEP.AE_DO_SECTION, 
STEP.AE_DO_APPL_ID, STEP.DESCR, DTL.DESCR, DTL.DESCRLONG 
FROM PSAESECTDTLDEFN DTL, PSAESTEPDEFN STEP, PSAESTMTDEFN STMT
WHERE DTL.AE_APPLID = STEP.AE_APPLID
  AND DTL.AE_SECTION = STEP.AE_SECTION
  AND DTL.AE_APPLID = STMT.AE_APPLID
  AND DTL.AE_SECTION = STMT.AE_SECTION
  AND STEP.AE_STEP = STMT.AE_STEP
  AND DTL.AE_APPLID = 'ANZ_EXP_LED'

  	Query
	DECLARE @COUNT INT;
	DECLARE @ORDERBY VARCHAR(4);

	SET @COUNT = 50;
	SET @ORDERBY = 'USED';

	BEGIN try
	IF ((SELECT CASE WHEN @ORDERBY in ('USED','DATA','RC','RESD') THEN 1 ELSE 0 END) = 0)
	BEGIN 
	   -- abort if invalid @ORDERBY parameter entered
	   RAISERROR('@ORDERBY parameter not USED, DATA, RC or RESD',11,1)
	   RETURN
	END

	SELECT TOP (@COUNT)
	 --(row_number() over(order by a3.name, a2.name))%2 as l1,
	 a2.name AS [TableName],
	 sum(a1.rows) as row_count,
	 sum((a1.reserved + ISNULL(a4.reserved,0))* 8) AS reserved, 
	 sum(a1.used * 8)[Used],
	 sum(a1.data * 8) AS data,
	 sum((CASE WHEN (a1.used + ISNULL(a4.used,0)) > a1.data THEN 
	   (a1.used + ISNULL(a4.used,0)) - a1.data ELSE 0 END) * 8 )AS index_size,
	 sum((CASE WHEN (a1.reserved + ISNULL(a4.reserved,0)) > a1.used THEN 
	   (a1.reserved + ISNULL(a4.reserved,0)) - a1.used ELSE 0 END) * 8) AS unused
	FROM
	 (SELECT ps.object_id, SUM (CASE WHEN (ps.index_id < 2) THEN row_count ELSE 0 END) AS [rows], SUM (ps.reserved_page_count) AS reserved,
	  SUM (CASE WHEN (ps.index_id < 2) THEN (ps.in_row_data_page_count + ps.lob_used_page_count + ps.row_overflow_used_page_count)
	    ELSE (ps.lob_used_page_count + ps.row_overflow_used_page_count)END) AS data, SUM (ps.used_page_count) AS used
	FROM sys.dm_db_partition_stats ps
	GROUP BY ps.object_id) AS a1
	LEFT OUTER JOIN 
	 (SELECT it.parent_id, SUM(ps.reserved_page_count) AS reserved, SUM(ps.used_page_count) AS used
	  FROM sys.dm_db_partition_stats ps
	  INNER JOIN sys.internal_tables it ON (it.object_id = ps.object_id)
	  WHERE it.internal_type IN (202,204)
	  GROUP BY it.parent_id) AS a4 ON (a4.parent_id = a1.object_id)
	INNER JOIN sys.all_objects a2  ON ( a1.object_id = a2.object_id ) 
	INNER JOIN sys.schemas a3 ON (a2.schema_id = a3.schema_id)
	WHERE a2.type <> 'S' and a2.type <> 'IT'
	AND a1.used <> 0
	GROUP BY a2.name 
	ORDER BY CASE 
	WHEN @ORDERBY = 'USED' THEN sum(a1.used * 8)
	WHEN @ORDERBY = 'DATA' THEN sum(a1.data * 8)
	WHEN @ORDERBY = 'RC' THEN sum(a1.rows)
	WHEN @ORDERBY = 'RESD' THEN sum((a1.reserved + ISNULL(a4.reserved,0))* 8)
	END DESC
	end try 
	begin catch 
	select 
	 -100 as l1
	, 1 as schemaname 
	,       ERROR_NUMBER() as tablename
	,       ERROR_SEVERITY() as row_count
	,       ERROR_STATE() as reserved
	,       ERROR_MESSAGE() as data
	,       1 as index_size
	,   1 as unused 
	end catch

	Use the below query to determine Schema Space Usage
	begin try 
	SELECT
	 --(row_number() over(order by a3.name, a2.name))%2 as l1,
	 a3.name AS [schemaname],
	 count(a2.name ) as NumberOftables,
	 sum(a1.rows) as row_count,
	 sum((a1.reserved + ISNULL(a4.reserved,0))* 8) AS reserved, 
	 sum(a1.data * 8) AS data,
	 sum((CASE WHEN (a1.used + ISNULL(a4.used,0)) > a1.data THEN 
	   (a1.used + ISNULL(a4.used,0)) - a1.data ELSE 0 END) * 8 )AS index_size,
	 sum((CASE WHEN (a1.reserved + ISNULL(a4.reserved,0)) > a1.used THEN 
	   (a1.reserved + ISNULL(a4.reserved,0)) - a1.used ELSE 0 END) * 8) AS unused
	FROM
	 (SELECT 
	  ps.object_id,
	  SUM (
	   CASE
	    WHEN (ps.index_id < 2) THEN row_count
	    ELSE 0
	   END
	   ) AS [rows],
	  SUM (ps.reserved_page_count) AS reserved,
	  SUM (
	   CASE
	    WHEN (ps.index_id < 2) THEN 
	     (ps.in_row_data_page_count + ps.lob_used_page_count + ps.row_overflow_used_page_count)
	    ELSE (ps.lob_used_page_count + ps.row_overflow_used_page_count)
	   END
	   ) AS data,
	  SUM (ps.used_page_count) AS used
	 FROM sys.dm_db_partition_stats ps
	 GROUP BY ps.object_id) AS a1
	LEFT OUTER JOIN 
	 (SELECT 
	  it.parent_id,
	  SUM(ps.reserved_page_count) AS reserved,
	  SUM(ps.used_page_count) AS used
	  FROM sys.dm_db_partition_stats ps
	  INNER JOIN sys.internal_tables it ON (it.object_id = ps.object_id)
	  WHERE it.internal_type IN (202,204)
	  GROUP BY it.parent_id) AS a4 ON (a4.parent_id = a1.object_id)
	INNER JOIN sys.all_objects a2  ON ( a1.object_id = a2.object_id ) 
	INNER JOIN sys.schemas a3 ON (a2.schema_id = a3.schema_id)
	WHERE a2.type <> 'S' and a2.type <> 'IT'
	group by a3.name 
	ORDER BY a3.name
	end try 
	begin catch 
	select 
	 -100 as l1
	, 1 as schemaname 
	,       ERROR_NUMBER() as tablename
	,       ERROR_SEVERITY() as row_count
	,       ERROR_STATE() as reserved
	,       ERROR_MESSAGE() as data
	,       1 as index_size
	,   1 as unused 
	end catch

	Use the below query to determine space used for each table

	BEGIN try 
	DECLARE @table_name VARCHAR(500) ; 
	DECLARE @schema_name VARCHAR(500) ; 
	DECLARE @tab1 TABLE(
	        tablename VARCHAR (500) collate database_default
	,       schemaname VARCHAR(500) collate database_default
	); 
	DECLARE  @temp_table TABLE (    
	        tablename sysname
	,       row_count INT
	,       reserved VARCHAR(50) collate database_default
	,       data VARCHAR(50) collate database_default
	,       index_size VARCHAR(50) collate database_default
	,       unused VARCHAR(50) collate database_default 
	); 

	INSERT INTO @tab1 
	SELECT t1.name
	,       t2.name 
	FROM sys.tables t1 
	INNER JOIN sys.schemas t2 ON ( t1.schema_id = t2.schema_id );   

	DECLARE c1 CURSOR FOR 
	SELECT t2.name + '.' + t1.name  
	FROM sys.tables t1 
	INNER JOIN sys.schemas t2 ON ( t1.schema_id = t2.schema_id );   

	OPEN c1; 
	FETCH NEXT FROM c1 INTO @table_name;
	WHILE @@FETCH_STATUS = 0 
	BEGIN  
	        SET @table_name = REPLACE(@table_name, '[',''); 
	        SET @table_name = REPLACE(@table_name, ']',''); 

	        -- make sure the object exists before calling sp_spacedused
	        IF EXISTS(SELECT OBJECT_ID FROM sys.objects WHERE OBJECT_ID = OBJECT_ID(@table_name))
	        BEGIN
	                INSERT INTO @temp_table EXEC sp_spaceused @table_name, false ;
	        END
	        
	        FETCH NEXT FROM c1 INTO @table_name; 
	END; 
	CLOSE c1; 
	DEALLOCATE c1; 
	SELECT t1.*
	,       t2.schemaname 
	FROM @temp_table t1 
	INNER JOIN @tab1 t2 ON (t1.tablename = t2.tablename )
	ORDER BY  schemaname,tablename;
	END try 
	BEGIN catch 
	SELECT -100 AS l1
	,       ERROR_NUMBER() AS tablename
	,       ERROR_SEVERITY() AS row_count
	,       ERROR_STATE() AS reserved
	,       ERROR_MESSAGE() AS data
	,       1 AS index_size, 1 AS unused, 1 AS schemaname 
	END catch

	Use this query to identify potential candidates for Batch Temp Tables locking
	SELECT P.MESSAGE_PARM RECNAME, R.PRCSNAME, COUNT(*) OCCURRENCES, MAX(L.DTTM_STAMP_SEC) LAST_OCCURRENCE,
	MAX(P.PROCESS_INSTANCE) PROCESS_INSTANCE
	FROM PS_MESSAGE_LOG L (NOLOCK) , PS_MESSAGE_LOGPARM P (NOLOCK) 
	LEFT OUTER JOIN PSPRCSRQST R (NOLOCK)
	ON R.PRCSINSTANCE = P.PROCESS_INSTANCE
	WHERE L.MESSAGE_SET_NBR = 108
	    AND L.MESSAGE_NBR = 544
	    AND P.PROCESS_INSTANCE = L.PROCESS_INSTANCE
	    AND P.MESSAGE_SEQ = L.MESSAGE_SEQ
	 --AND L.DTTM_STAMP_SEC >= Getdate()
	 --AND MONTH(L.DTTM_STAMP_SEC) = 08
	 --AND DAY(L.DTTM_STAMP_SEC) >= 22
	   AND YEAR(L.DTTM_STAMP_SEC) > 2009
	GROUP BY P.MESSAGE_PARM, R.PRCSNAME
	ORDER BY 1, 2

	Run at End of Batch to gather Online Journal Edits per minute
	CREATE TABLE #TIME
	(START datetime,
	 STOP  datetime)

	declare @i int
	declare @t datetime
	set @i = 0
	set @t = '2010-03-01 00:00:00'

	while (@i < 1440)
	begin
	 INSERT INTO #TIME VALUES (@t, dateadd(MINUTE,1,@t))
	 set @t = dateadd(MINUTE,1,@t)
	 set @i = @i + 1
	end

	SELECT T.START, (MAX(PRCSINSTANCE) - MIN(PRCSINSTANCE)+1) - COUNT('X') AS ONLINE_EDITS
	FROM PSPRCSRQST, #TIME T
	WHERE RQSTDTTM BETWEEN T.START AND T.STOP
	GROUP BY T.START
	ORDER BY 1


--WINDOW 1
--Monitor Batch Instance Usage
select top 200 * from PS_AETEMPTBLMGR (NOLOCK) WHERE RUN_DTTM >= '2010-01-01 00:00:00.000' order by 7 DESC
--Monitor Online Instance Usage
SELECT * FROM PS_AEONLINEINST (NOLOCK) WHERE AE_LOCK_CNT > 0
--Monitor GL Shared Table Usage
select top 10 * from PS_TEMP_TBL_STATS (NOLOCK) order by 2 desc
--select * from PS_TEMP_TBL_STATS (NOLOCK) WHERE YEAR(DATE_ASSIGNED) > 2009
--Monitor GL Non-Shared Table Usage
select * from PS_TEMP_TBL_ASGNM (NOLOCK) WHERE IN_USE_SW = 'Y'
--Monitor Audit Table
SELECT * FROM PS_ANZ_TEMP_AUDIT (NOLOCK)
-- Temp Table Batch Instance monitoring
SELECT P.MESSAGE_PARM RECNAME, R.PRCSNAME, COUNT(*) OCCURRENCES, MAX(L.DTTM_STAMP_SEC) LAST_OCCURRENCE,
MAX(P.PROCESS_INSTANCE) PROCESS_INSTANCE
FROM PS_MESSAGE_LOG L (NOLOCK) , PS_MESSAGE_LOGPARM P (NOLOCK) 
LEFT OUTER JOIN PSPRCSRQST R (NOLOCK)
ON R.PRCSINSTANCE = P.PROCESS_INSTANCE
WHERE L.MESSAGE_SET_NBR = 108
    AND L.MESSAGE_NBR = 544
    AND P.PROCESS_INSTANCE = L.PROCESS_INSTANCE
    AND P.MESSAGE_SEQ = L.MESSAGE_SEQ
 --AND L.DTTM_STAMP_SEC >= Getdate()
 --AND MONTH(L.DTTM_STAMP_SEC) = 08
 --AND DAY(L.DTTM_STAMP_SEC) >= 22
   AND YEAR(L.DTTM_STAMP_SEC) > 2009
GROUP BY P.MESSAGE_PARM, R.PRCSNAME
ORDER BY 1, 2
--Make sure Journals are being created
SELECT JRNL_HDR_STATUS, DTTM_STAMP_SEC, * 
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
ORDER BY JOURNAL_ID DESC


--WINDOW 2
--------------------------------------------------------------
-- ONLINE Journal Edits per minute
--------------------------------------------------------------

--Time
CREATE TABLE #TIME
(START datetime,
 STOP  datetime)

declare @i int
declare @t datetime
set @i = 0
set @t = '2010-03-01 00:00:00'


while (@i < 1440)
begin
 INSERT INTO #TIME VALUES (@t, dateadd(MINUTE,1,@t))
 set @t = dateadd(MINUTE,1,@t)
 set @i = @i + 1
end

SELECT	T.START, (MAX(PRCSINSTANCE) - MIN(PRCSINSTANCE)+1) - COUNT('X') AS ONLINE_EDITS
FROM PSPRCSRQST, #TIME T
WHERE RQSTDTTM BETWEEN T.START AND T.STOP
GROUP BY T.START
ORDER BY 1

--DROP TABLE #TIME

--WINDOW 3
SELECT JRNL_HDR_STATUS, COUNT(1) 
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
GROUP BY JRNL_HDR_STATUS

--WINDOW 3
SELECT JRNL_HDR_STATUS [Journal Status], COUNT(1) [Count of Journals] 
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
GROUP BY JRNL_HDR_STATUS

SELECT PRCSINSTANCE, PRCSTYPE, PRCSNAME, SERVERNAMERQST, SERVERNAMERUN, RUNDTTM  
FROM PSPRCSRQST 
WHERE RUNSTATUS = 10
  AND RUNDTTM BETWEEN '2010-03-01' AND '2010-03-03'

SELECT * FROM PS_MESSAGE_LOG WHERE PROCESS_INSTANCE IN (SELECT PRCSINSTANCE FROM PSPRCSRQST WHERE RUNSTATUS = 10 AND RUNDTTM BETWEEN '2010-03-01' AND '2010-03-03')

SELECT PROCESS_INSTANCE, COUNT(1) FROM PS_MESSAGE_LOG WHERE PROCESS_INSTANCE IN (SELECT PRCSINSTANCE FROM PSPRCSRQST WHERE RUNSTATUS = 10 AND RUNDTTM BETWEEN '2010-03-01' AND '2010-03-03')
GROUP BY PROCESS_INSTANCE


SELECT * FROM PSMSGCATDEFN WHERE MESSAGE_SET_NBR = 108 AND MESSAGE_NBR in (543, 524)

SELECT * FROM PSXLATITEM WHERE FIELDNAME = 'RUNSTATUS'

--WINDOW 3
--This is Per second
SELECT JRNL_HDR_STATUS [Journal Status], DTTM_STAMP_SEC, COUNT(1) [Count of Journals]
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
  AND JRNL_HDR_STATUS = 'N'
  AND DTTM_STAMP_SEC BETWEEN '2010-03-01 00:00:00.000' AND '2010-03-03 00:00:00.000'
GROUP BY JRNL_HDR_STATUS, DTTM_STAMP_SEC
order by 2

--This is Per minute
SELECT JRNL_HDR_STATUS [Journal Status], LEFT(DTTM_STAMP_SEC, 16) , COUNT(1) [Count of Journals]
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
  AND JRNL_HDR_STATUS = 'N'
  AND DTTM_STAMP_SEC BETWEEN '2010-03-01 00:00:00.000' AND '2010-03-03 00:00:00.000'
GROUP BY JRNL_HDR_STATUS, LEFT(DTTM_STAMP_SEC, 16)
order by 2

--This is for Posted Journals
SELECT RTRIM(CAST(DATEPART(yy, DTTM_STAMP_SEC) AS CHAR)) + '-0' + RTRIM(CAST(DATEPART(mm, DTTM_STAMP_SEC) AS CHAR)) + '-0' + RTRIM(CAST(DATEPART(dd, DTTM_STAMP_SEC) AS CHAR)) + ' ' + RTRIM(CAST(DATEPART(hh, DTTM_STAMP_SEC) AS CHAR)) + ':' + RTRIM(CAST(DATEPART(mi, DTTM_STAMP_SEC) AS CHAR)) [Per Minute], COUNT(1) [Count of Journals]
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
  AND JRNL_HDR_STATUS = 'N'
  AND DTTM_STAMP_SEC BETWEEN '2010-03-01 00:00:00.000' AND '2010-03-03 00:00:00.000'
GROUP BY RTRIM(CAST(DATEPART(yy, DTTM_STAMP_SEC) AS CHAR)) + '-0' + RTRIM(CAST(DATEPART(mm, DTTM_STAMP_SEC) AS CHAR)) + '-0' + RTRIM(CAST(DATEPART(dd, DTTM_STAMP_SEC) AS CHAR)) + ' ' + RTRIM(CAST(DATEPART(hh, DTTM_STAMP_SEC) AS CHAR)) + ':' + RTRIM(CAST(DATEPART(mi, DTTM_STAMP_SEC) AS CHAR))
order by 2 desc

SELECT * FROM PS_JRNL_HEADER WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
  AND JRNL_HDR_STATUS = 'N'
AND DTTM_STAMP_SEC BETWEEN '2010-03-01 23:23:00.000' AND '2010-03-01 23:23:59.000'


SELECT RTRIM(CAST(DATEPART(yy, GetDate()) AS CHAR)) + '-0' + RTRIM(CAST(DATEPART(mm, GetDate()) AS CHAR)) + '-0' + RTRIM(CAST(DATEPART(dd, GetDate()) AS CHAR)) + ' ' + RTRIM(CAST(DATEPART(hh, GetDate()) AS CHAR)) + ':' + RTRIM(CAST(DATEPART(hh, GetDate()) AS CHAR))  
SELECT DATEPART(mm, GetDate())
SELECT DATEPART(dd, GetDate())
SELECT DATEPART(hh, GetDate())
SELECT DATEPART(mi, GetDate())

SELECT SUBSTRING(getDate(), 1, 16)


SELECT SUBSTRING(CONVERT(datetime, getDate(), 102), 1, 16)


SELECT JRNL_HDR_STATUS [Journal Status], COUNT(1) [Count of Journals] 
FROM PS_JRNL_HEADER (NOLOCK)
WHERE BUSINESS_UNIT = '00100' 
  AND YEAR(JRNL_CREATE_DTTM) > 2009
  AND OPRID = 'prakasp1'
  AND DTTM_STAMP_SEC BETWEEN '2010-03-03 16:00:00.000' AND '2010-03-05 00:00:00.000'
GROUP BY JRNL_HDR_STATUS

/**
 * A utility class of which at most one instance
 * can exist per VM.
 *
 * Use Singleton.instance() to access this
 * instance.
 */
import java.io.*;
import java.util.Random;
 
class Singleton {
   /**
    * The constructor could be made private
    * to prevent others from instantiating this class.
    * But this would also make it impossible to
    * create instances of Singleton subclasses.
    */
   protected Singleton() {
     // ...
   }
 
   /**
    * A handle to the unique Singleton instance.
    */
   static private Singleton _instance = null;
   
   /**
    * A handle for the flag.
    */
   static private int flag = 0;
   
   /**
    * @return The unique instance of this class.
    */
   static public synchronized Singleton instance() {
   Singleton returnObj = null;
   int i = 0;
   String str= Thread.currentThread().getName() + ": This data is written through the program#";
   String str1 = Thread.currentThread().getName() + ": Flag is ZERO #";
   String str2 = Thread.currentThread().getName() + ": _instance was null #";
   String str3 = Thread.currentThread().getName() + ":  _instance has been set #";
   String str4 = Thread.currentThread().getName() + ":  Flag is ONE #";	
   String str5 = Thread.currentThread().getName() + ":  ELSE #";
   String str6 = Thread.currentThread().getName() + ":  ELSE AND WHILE FLAG IS ONE #";
   String str7 = Thread.currentThread().getName() + ":  ELSE AFTER WHILE #";		
   String str8 = Thread.currentThread().getName() + ":  READY TO RETURN #";
   
   try
   {
   File f = new File("D://psoft//Threading.txt");
   //File f = new File("C://temp//Threading.txt");
   FileOutputStream fop = new FileOutputStream(f);
   //System.out.println (str);
   fop.write(str.getBytes());
   
      if (flag == 0)
	  {
	  //System.out.println (str1);
	  fop.write(str1.getBytes());		  
		  if(null == _instance)
		  {
		  //System.out.println (str2);
		  fop.write(str2.getBytes());			  		  
          _instance = new Singleton();
		  //System.out.println (str3);
		  fop.write(str3.getBytes());
		    } 			 
		returnObj = _instance;	
		flag = 1;
        //System.out.println (str4);	
		fop.write(str4.getBytes());
		  }
	  else	     
		{
		//System.out.println (str5);
	    fop.write(str5.getBytes());
		i = 0;
		while (flag==1) {
			try{
			//System.out.println (str6);
			fop.write(str6.getBytes());
			Thread.sleep(2000);
			i = i + 1;			
			} catch (InterruptedException x) {			
			}
			if (i >= 10) {
			resetflag();
			}
		}
		 flag = 1;
		 returnObj = _instance;
        //System.out.println (str7); 
		fop.write(str7.getBytes());
		}
		//System.out.println (str8);
		fop.write(str8.getBytes());
		fop.close();    
   }
   catch(FileNotFoundException ex){
   } catch (Exception e) {
   }
   return returnObj;
 }
  /**
    * @set the flag to zero.
    */
  static public void resetflag() {
    String str9 = Thread.currentThread().getName() + ":  READY TO release \n";
   	  //System.out.println (str9);
	  flag = 0;      	  
   }
}

import PT_DIAGNOSTICS:*;
import PT_DIAGNOSTICS:Collections:*;
import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

class FilePath_00 extends PT_DIAGNOSTICS:PTDiagnostics
   /* Constructor ***/
   method FilePath_00();
   
   /* PUBLIC Method */
   method GetDiagnosticInfo();
   method IsPlugIn();
   method GetDynamicPrompt();
   rem method ToHTML() Returns string;
   rem method DisplayContent(&diag As PTDiagnostics, &rec_v As Record, &rec_field_v As Field);
   
private
   instance boolean &status;
   
end-class;

Component PT_DIAGNOSTICS:Collections:oList &oolist;

method FilePath_00
   
   %Super = create PT_DIAGNOSTICS:PTDiagnostics();
   &status = %Super.SetProperty(%This, "Purpose", "String", "This is general information about File Path/Directory Localization in ANZ Custom Tables");
   rem %Super.Purpose = "ANZ FilePath Diagnostics";
   %Super.Where = True;
   
end-method;


method IsPlugIn
   /* method to let the Diagnostic Framework know that this is a plug-in */
end-method;

method GetDynamicPrompt
   
   &status = %Super.InsertQuestion("Log", "Identify Localization Issues", "String", True);
   <*
   Local PT_DIAGNOSTICS:Collections:qList &qList;
   Local boolean &stat, &stat1;
   
   &qList = &oolist.GetObject();
   
   &stat = &qList.AddQuestion("MY BUSINESSUNIT", "Enter Business Unit to search for: ", &qList.stringType, &qList.classType);
   
   &stat1 = &qList.AddQuestion("MY POID", "Enter POID  to search for: ", &qList.stringType, &qList.classType);
*>
end-method;

method GetDiagnosticInfo
   
   Local Record &recdata;
   Local SQL &Sql1;
   Local boolean &ret;
   Local string &sOut1, &sOut2;
   Local PT_DIAGNOSTICS:Collections:qList &qList;
   Local string &SQLString_;
   Local Rowset &rs;
   Local Record &Rec_;
   Local number &rc, &RecCount_;
   Local boolean &stat;
   Local File &oDebugFile_;
   &qList = &oolist.GetObject();
   
   try
      
      &rs = CreateRowset(Record.ANZ_FLPATH_DIAG);
      &rc = &rs.Fill("ORDER BY 2");
      rem &Sql1 = GetSQL(SQL.ANZ$FILEPATH$LOC_DIAG$SQL);
      
      rem &ret = %Super.AddString("**** TABLE NAME ****", "**** FIELD NAME ****");
      <*
   While &Sql1.Fetch(&sOut1, &sOut2) = True
      &ret = %Super.AddString("FIELD NAME", &sOut1);
      &ret = %Super.AddString("TABLE NAME", &sOut2);
   End-While;
   *>
      /**** RowSet display  ****/
      &stat = %Super.SetProperty(%This, "hasRowset", "Boolean", True);
      &stat = %Super.InsertData("Rowset", "ANZ_FLPATH_DIAG", &rs);
      &oDebugFile_ = GetFile("\\207.43.103.86\psoft\auf0dev1b\Int\Debug.txt", "W", %FilePath_Absolute);
      /****/
      REM *** Now loop through all the rows of the Rowset &rs and print the DISTINCT values ***;
      For &RecCount_ = 1 To &rs.ActiveRowCount
         &Rec_ = &rs(&RecCount_).GetRecord(Record.ANZ_FLPATH_DIAG);
         rem &ret = %Super.InsertData("String", "**** " | &Rec_.TABLENAME.Value | " ****", "**** " | &Rec_.FIELDNAME.Value | " ****");
         &oDebugFile_.WriteLine("Starting ***" | &Rec_.FIELDNAME.Value | "---" | &Rec_.TABLENAME.Value);
         &Sql1 = GetSQL(SQL.ANZ$FILEPATH$LOOP$SQL, @(&Rec_.FIELDNAME.Value), @(&Rec_.TABLENAME.Value));
         &oDebugFile_.WriteLine("SQLString -- " | &Sql1.Value);
         While &Sql1.Fetch(&sOut1) = True
            &ret = %Super.AddString("FIELD NAME", &sOut1);
            rem &ret = %Super.AddString("TABLE NAME", &sOut2);
         End-While;
      End-For;
      
   catch Exception &ErrDiagInfo
      Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
      &oDebugFile_.WriteLine("Exception Logged > " | &handler.getMessageText(&ErrDiagInfo));
      REM Error (&handler.getMessageExplainText(&ErrDiagInfo));
      REM Error (&handler.getMessageText(&ErrDiagInfo));
   end-try;
   
end-method;



SELECT DISTINCT a.name [FIELD NAME] 
 , b.name [TABLE NAME] 
  FROM syscolumns a JOIN sysobjects b ON b.id = a.id JOIN sysindexes c ON c.id = b.id JOIN PSRECDEFN R ON b.name = 'PS_' + R.RECNAME 
 WHERE (a.name IN ('FILE_DIRECTORY', 'PATHNAME', 'URL', 'OUTDEST') 
    OR a.name LIKE '%FILEPATH' 
    OR a.name LIKE '%PATH') 
   AND b.type = 'U' 
   AND b.name NOT LIKE '%_TMP%' 
   AND b.name NOT LIKE '%_T_A%' 
   AND b.name NOT LIKE '%_AET' 
   AND b.name NOT LIKE '%_TAO%' 
   AND b.name LIKE 'PS\_%' ESCAPE '\' 
   AND R.LASTUPDOPRID <> 'PPLSOFT' 
   AND R.LASTUPDOPRID <> 'VP1'

   import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Local string &sTgtProjID_, &sDirPath_, &sAllSQLs_;
Local string &strClauseName_, &sFileStr_;
Local File &oALLSQLs_;
Local array of string &AS;
Local number &M;

Function GetFileAsString(&oFile As File) Returns string
   
   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;
   
   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");
   
   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();
   
   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
      
      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
   
   /*open up the file again so that addition things could be written to file */
   rem &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);
   
   Return &sFullFileContent;
   
End-Function;

Function ParseSQLFile(&strFilePart_ As string) Returns string
   
   Local string &strClause_, &ANZMatchBegin_;
   Local File &oSRCEXP_, &oTGTEXP_, &oTGTDEL_;
   Local File &oTGTIMP_, &oVERSQL_;
   
   REM *** DO NOT CLEAN THE FILE ***;
   rem &strFilePart_ = RTrim(Clean(&strFilePart_));
   rem &strFilePart_ = Substitute(&strFilePart_, Char(26), " "); /* Added this line to remove invalid characters */
   REM *** Search for the EXPORT/DELETE/IMPORT Clauses in the file ***;
   &ANZMatchBegin_ = Substring(&strFilePart_, 1, 3);
   Evaluate &ANZMatchBegin_
   When "EXP" /* EXPORT TABLE NAME SOURCE */
      REM *** Write 2 Export Files ***;
      &oSRCEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.dms", "W", %FilePath_Absolute);
      &oSRCEXP_.WriteLine(&strFilePart_);
      &oTGTEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.dms", "W", %FilePath_Absolute);
      &oTGTEXP_.WriteLine(&strFilePart_);
      Break;
   When "DEL" /* DELETE TABLE NAME */
      REM *** Write 1 Delete File ***;
      &oTGTDEL_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_02_TGTDELETE.dms", "W", %FilePath_Absolute);
      &oTGTDEL_.WriteLine(&strFilePart_);
      Break;
   When "IMP" /* IMPORT TABLE NAME */
      REM *** Write 1 Import File ***;
      &oTGTIMP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_03_TGTIMPORT.dms", "W", %FilePath_Absolute);
      &oTGTIMP_.WriteLine(&strFilePart_);
      Break;
   When "TAR" /* EXPORT TABLE NAME TARGET */
      &oTGTEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.dms", "W", %FilePath_Absolute);
      &oTGTEXP_.WriteLine(&strFilePart_);
      Break;
   When-Other;
      rem It might be Comments or Verification statements;
      &oVERSQL_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_99_VerificationSQLs.sql", "W", %FilePath_Absolute);
      &oVERSQL_.WriteLine(&strFilePart_);
      Break;
   End-Evaluate;
   
   Return &strClause_;
End-Function;

/****************************/
REM ** Generate ExcelSheet **;
/****************************/
Function PPGenerateExcel4EachRecord()
   
   REM *** This function is responsible to generate ONE SpreadSheet/RECORD ***;
   Local File &RecSSFile_;
   Local ApiObject &Rec_QryObj_;
   Local Rowset &oRecSSRS_;
   Local string &sRecSSString_, &sSQLString_;
   Local Record &oRecSS_;
   Local string &sRecSS_, &sWhereClauseLong_;
   Local integer &iNumofRows_;
   
   try
      REM *** Make a new Directory to place all the generated SpreadSheets ***;
      &sRecDirPath_ = &sDirPath_ | "\" | "XLS";
      REM *** Make sure you clean the directory ***;
      rem RemoveDirectory(&sRecDirPath_, %FilePath_Absolute + %Remove_Subtree);
      REM *** Create a fresh directory ***;
      CreateDirectory(&sRecDirPath_, %FilePath_Absolute);
      REM *** This should be called within a loop ***;
      &oPP3SQL_ = GetSQL(SQL.PP_COMPRECFETCH_SQL, &sTgtProjID_, "E");
      While &oPP3SQL_.Fetch(&sRecSS_, &sWhereClauseLong_)
         rem &REC = CreateRecord(@("RECORD." | &sRecSS_));
         &RecSSFile_ = GetFile(&sRecDirPath_ | "\" | &sRecSS_ | "_" | %DbName | ".xls", "W", %FilePath_Absolute);
         REM *** Check to see if File is Open ***;
         If &RecSSFile_.IsOpen Then
            REM *** Be careful about the Users' language code on the User Profile ***;
            &Rec_QryObj_ = %Session.GetQuery();
            /* Initialising the Rowset & Values */
            &oRecSSRS_ = CreateRowset(@("RECORD." | &sRecSS_));
            &iNumofRows_ = &oRecSSRS_.Fill(" WHERE " | &sWhereClauseLong_);
            &sRecSSString_ = &Rec_QryObj_.FormatResultString(&oRecSSRS_, %Query_XLS, 1, &oRecSSRS_.ActiveRowCount);
            &RecSSFile_.WriteLine(&sRecSSString_);
         Else
            Error ("Error: Opening of File Failed");
         End-If;
         &RecSSFile_.Close();
      End-While;
      REM *** Exception Block ***;
   catch Exception &ex
      Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
      REM *** Display the Message Text and Message Explain Text and then FAIL it!!! ***;
      rem Error (&handler.getMessageText(&ex));
      MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageText(&ex));
      rem Error (&handler.getMessageExplainText(&ex));
   end-try;
   
End-Function;

/****************************/
REM *** ~~~ MAIN LINE ~~~ ***;
/****************************/
try
   REM *** Physical Location of the Files is important to fix ***;
   &sTgtProjID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
   &sANZWRNumber_ = PP_COMP_QRY.WORK_ID.Value;
   If All(&sANZWRNumber_) Then
      &sDirPath_ = "D:\Temp\" | &sTgtProjID_;
      If (PP_GENERIC_WRK.ADVANCED_FLAG = "Y") Then
         REM *** Make sure you clean the directory ***;
         RemoveDirectory(&sDirPath_, %FilePath_Absolute + %Remove_Subtree);
         REM *** Create a fresh directory ***;
         CreateDirectory(&sDirPath_, %FilePath_Absolute);
         &oALLSQLs_ = GetFile(&sDirPath_ | "\ANZWR" | &sANZWRNumber_ | "ALLSQLs_" | %Datetime | ".txt", "W", %FilePath_Absolute);
         &sAllSQLs_ = PP_COMP_QRY.SQL_STATEMENT.Value;
         &oALLSQLs_.WriteLine(&sAllSQLs_);
         &sFileStr_ = GetFileAsString(&oALLSQLs_);
         rem Parse the file;
         &AS = CreateArrayRept("", 0);
         &AS = Split(&sFileStr_, "--");
         For &M = 1 To &AS.Len
            &strClauseName_ = ParseSQLFile(&AS [&M]);
            /*
         If All(&strClauseName_) Then
            &Temp_ = " " | &strClauseName_ | ";" | &Temp_;
         Else
            rem Comments or SET Statements encountered;
         End-If;
         */
         End-For;
         MessageBox(0, "", 0, 0, "Files generated successfully under -- " | &sDirPath_);
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Please provide a valid WR number before generating files");
      PP_GENERIC_WRK.ADVANCED_FLAG.Value = "N";
   End-If;
   REM *** Call the function to generate spreadsheets for each record in the Project ***;
   PPGenerateExcel4EachRecord();
   
catch Exception &ex
   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM Error (&handler.getMessageText(&ex));
   MessageBox(0, "", 0, 0, "Unable To Create Directory : " | &handler.getMessageText(&ex));
   REM Error (&handler.getMessageExplainText(&ex));
end-try;


<*
/* Keeping tab of modifications */
Local Rowset &RS_Lvl0_, &RS_Lvl1_;


&RS_Lvl0_ = GetLevel0();
&RS_Lvl1_ = GetLevel0().GetRow(1).GetRowset(Scroll.PP_COMP_QRY_AUD);
&DATETIME = %Datetime;

Local string &tmp = &RS_Lvl1_.GetRow(1).GetRecord(Record.PP_COMP_QRY_AUD).GetField(Field.ADD_DTTM).Value;
If (All(&tmp)) Then
   &RS_Lvl1_.GetRow(1).GetRecord(Record.PP_COMP_QRY_AUD).GetField(Field.ADD_DTTM).Value = &DATETIME;
   &RS_Lvl1_.GetRow(1).GetRecord(Record.PP_COMP_QRY_AUD).GetField(Field.LAST_MAINT_OPRID).Value = %OperatorId;
   &RS_Lvl1_.InsertRow(&RS_Lvl1_.ActiveRowCount);
End-If;
*>
Component array of string &recArray_;

&recArray_ = CreateArrayRept("", 0);
REM *** Generate SQL Statements Push Button ***;
<*
If %Mode <> "A" Then
   PP_GENERIC_WRK.DESCR2.Enabled = True;
Else
   PP_GENERIC_WRK.DESCR2.Enabled = False;
End-If;
REM *** Add to Project Push Button ***;
PP_GENERIC_WRK.DESCR3.Enabled = False;
*>
Evaluate PP_COMPSRCHFLDS.PP_MATCH_KIND.Value
When = 1 /*** = ***/;
   PP_COMPSRCHFLDS.WHERE_CLAUSE.Value = "";
   Break;
When = 2 /*** IN ***/;
   PP_COMPSRCHFLDS.WHERE_CLAUSE.Value = "()";
   Break;
When = 7 /*** LIKE ***/;
   PP_COMPSRCHFLDS.WHERE_CLAUSE.Value = "%";
   Break;
When-Other
   Error ("Invalid Option");
   Break;
End-Evaluate;

Component array of string &recArray_;
Component string &sCompPriorValue_;
Local Rowset &RS_Level0, &RS_Level1, &RS_Level11;
Local Row &RowLevel0;

&RS_Level0 = GetLevel0();
&RowLevel0 = &RS_Level0.GetRow(1);

&RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMP_WRK);
&RS_Level11 = &RowLevel0.GetRowset(Scroll.PP_COMPSRCHFLDS);
REM *** Flush the Component Properties Scroll ***;
&RS_Level1.Flush();
REM *** Flush the Component Search Keys Scroll ***;
&RS_Level11.Flush();
REM *** Disable the Generate Clause Button ***;
PP_GENERIC_WRK.DESCR2.Enabled = False;

REM *** Emptying the Array since the component name has changed ***;
If (PP_COMP_QRY.COMPONENT_ID.Value <> &sCompPriorValue_) Then
   For &ArrLen_ = 1 To &recArray_.Len
      &recArray_.Pop();
   End-For;
End-If;

Component string &sCompPriorValue_;

&sCompPriorValue_ = PriorValue(PP_COMP_QRY.COMPONENT_ID);
<*
rem One of the better ways to write SaveEdit Validation for a Field. Only for Contextual Reference though;
&err_style = "PSERROR";
&normal_style = "PSEDITBOX";

&field = GetField();
If Not All(&field.Value) Then
   &label = &field.GetLongLabel(&field.Name);
   &field.Style = &err_style;
   SetCursorPos(%Page, PP_COMP_QRY.SQL_STATEMENT);
   Error MsgGet(5930, 1, "", &label);
Else
   &field.Style = &normal_style;
End-If;
*>

REM *** Set the Component Name to ADHOC and provide a drop-down list for the Record Name field ***;
Local Rowset &RS0_, &RS1_;
Local Row &Row1_;
Local Record &Rec1_;
Local number &I_;

&RS0_ = GetLevel0();
&Row1_ = &RS0_.GetRow(1);
&RS1_ = &Row1_.GetRowset(Scroll.PP_COMP_QRY_1);
&CurrRow_ = CurrentRowNumber();
&Rec1_ = &RS1_.GetRow(&CurrRow_).GetRecord(Record.PP_COMP_QRY_1);
&Rec1_.COMPONENT_ID.Value = "ADHOC";
If (&Rec1_.COMPONENT_ID.Value = "ADHOC") Then
   &Rec1_.RECORDNAME.DisplayOnly = False;
End-If;
rem MessageBox(0, "", 0, 0, "PromptTableName " | &Rec1_.RECORDNAME.PromptTableName);
Evaluate PP_COMP_QRY_2.PP_MATCH_KIND.Value
When = 1 /*** = ***/;
   PP_COMP_QRY_2.WHERE_CLAUSE.Value = "";
   Break;
When = 2 /*** IN ***/;
   PP_COMP_QRY_2.WHERE_CLAUSE.Value = "()";
   Break;
When = 7 /*** LIKE ***/;
   PP_COMP_QRY_2.WHERE_CLAUSE.Value = "%";
   Break;
When-Other
   Error ("Invalid Option");
   Break;
End-Evaluate;

Function OpridTimeStamp(&Row As Row)
   
   Local Rowset &RS0_, &RS1_;
   Local Row &Row1_;
   Local Record &Rec1_;
   Local number &I_;
   
   &RS0_ = GetLevel0();
   &Row1_ = &RS0_.GetRow(1);
   &RS1_ = &Row1_.GetRowset(Scroll.PP_COMP_QRY_AUD);
   
   For &I = 1 To &RS1_.RowCount
      &Rec1_ = &RS1_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_AUD);
      &CF_SEQNO = &Rec1_.SEQNO.Value;
   End-For;
   &Row.PP_COMP_QRY_AUD.SEQNO.Value = &CF_SEQNO + 1;
   &Row.PP_COMP_QRY_AUD.LASTUPDOPRID.Value = %OperatorId;
   &Row.PP_COMP_QRY_AUD.LASTUPDDTTM.Value = %Datetime;
   
End-Function;

Declare Function OpridTimeStamp PeopleCode PP_COMP_QRY_AUD.LASTUPDDTTM FieldFormula;

Local Rowset &AUD_RS;
Local Row &Row;

rem If %Page = Page.PP_COMP_QRY_PG Then;
&AUD_RS = GetLevel0()(1).GetRowset(Scroll.PP_COMP_QRY_AUD);
&Row = &AUD_RS.GetRow(CurrentRowNumber());
REM *** Maintain Audit History ***;
If &Row.IsChanged Or
      &Row.IsNew Or
      &Row.IsDeleted Then
   OpridTimeStamp(&Row);
End-If;
rem End-If;
SetSearchDefault(PP_COMP_QRY_VW1.HIDDEN_FLAG);

Declare Function setcheckbox PeopleCode PP_COMP_WRK.CHECKED FieldFormula;
Component array of string &recArray_;

rem Component integer &ORDER_COUNT;

&RS_Comp = GetRowset();
&I = CurrentRowNumber();

&CheckBool_ = setcheckbox(&RS_Comp, &I);
REM *** Enable the Generate Clause Button ONLY when the user has selected some of the records ***;
<*
If Not (&CheckBool_) Then
   PP_GENERIC_WRK.DESCR2.Enabled = False;
Else
   PP_GENERIC_WRK.DESCR2.Enabled = True;
End-If;
*>
PP_GENERIC_WRK.DESCR3.Enabled = True;
Component array of string &recArray_;

Function setcheckbox(&RS_Comp As Rowset, &I As integer) Returns boolean
   If &RS_Comp.GetRow(&I).PP_COMP_WRK.CHECKED.Value = "Y" Then
      &sCompRecordName = &RS_Comp.GetRow(&I).PP_COMP_WRK.DESCR100_2.Value;
      For &J = 1 To &RS_Comp.ActiveRowCount
         &sRecordName = &RS_Comp.GetRow(&J).PP_COMP_WRK.DESCR100_2.Value;
         If &I <> &J Then
            If (&sCompRecordName = &sRecordName) Then
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Value = "Y";
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Enabled = False;
               &Bool_ = True;
            End-If;
            REM *** MAKE SURE YOU PUSH DISTINCT RECNAMES ***;
            &Found = &recArray_.Find(&sCompRecordName);
            If (&Found = 0) Then
               rem MessageBox(0, "", 0, 0, "Pushing > " | &I);
               &recArray_.Push(&sCompRecordName);
            End-If;
         End-If;
      End-For;
   Else
      &sCompRecordName = &RS_Comp.GetRow(&I).PP_COMP_WRK.DESCR100_2.Value;
      For &J = 1 To &RS_Comp.ActiveRowCount
         &sRecordName = &RS_Comp.GetRow(&J).PP_COMP_WRK.DESCR100_2.Value;
         If &I <> &J Then
            If (&sCompRecordName = &sRecordName) Then
               REM *** REMOVE THE RECORD(S) WHICH THE USER HAS DESELECTED ***;
               &Found = &recArray_.Find(&sCompRecordName);
               If ((&Found <> 0) And
                     (&RS_Comp.GetRow(&I).PP_COMP_WRK.CHECKED.Value = "N")) Then
                  rem MessageBox(0, "", 0, 0, "Popping > " | &I);
                  &recArray_.Pop();
               End-If;
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Value = "N";
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Enabled = True;
               &Bool_ = False;
            End-If;
         End-If;
      End-For;
   End-If;
   Return &Bool_;
End-Function;


import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Local string &sTgtProjID_, &sDirPath_, &sAllSQLs_;
Local string &strClauseName_, &sFileStr_;
Local File &oALLSQLs_;
Local array of string &AS;
Local number &M;

Function GetFileAsString(&oFile As File) Returns string
   
   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;
   
   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");
   
   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();
   
   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
      
      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
   
   /*open up the file again so that addition things could be written to file */
   rem &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);
   
   Return &sFullFileContent;
   
End-Function;

Function ParseSQLFile(&strFilePart_ As string) Returns string
   
   Local string &strClause_, &ANZMatchBegin_;
   Local File &oSRCEXP_, &oTGTEXP_, &oTGTDEL_;
   Local File &oTGTIMP_, &oVERSQL_;
   
   REM *** DO NOT CLEAN THE FILE ***;
   rem &strFilePart_ = RTrim(Clean(&strFilePart_));
   rem &strFilePart_ = Substitute(&strFilePart_, Char(26), " "); /* Added this line to remove invalid characters */
   REM *** Search for the EXPORT/DELETE/IMPORT Clauses in the file ***;
   &ANZMatchBegin_ = Substring(&strFilePart_, 1, 3);
   Evaluate &ANZMatchBegin_
   When "EXP" /* EXPORT TABLE NAME SOURCE */
      REM *** Write 2 Export Files ***;
      &oSRCEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.dms", "W", %FilePath_Absolute);
      &oSRCEXP_.WriteLine(&strFilePart_);
      &oTGTEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.dms", "W", %FilePath_Absolute);
      &oTGTEXP_.WriteLine(&strFilePart_);
      Break;
   When "DEL" /* DELETE TABLE NAME */
      REM *** Write 1 Delete File ***;
      &oTGTDEL_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_02_TGTDELETE.dms", "W", %FilePath_Absolute);
      &oTGTDEL_.WriteLine(&strFilePart_);
      Break;
   When "IMP" /* IMPORT TABLE NAME */
      REM *** Write 1 Import File ***;
      &oTGTIMP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_03_TGTIMPORT.dms", "W", %FilePath_Absolute);
      &oTGTIMP_.WriteLine(&strFilePart_);
      Break;
   When "TAR" /* EXPORT TABLE NAME TARGET */
      &oTGTEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.dms", "W", %FilePath_Absolute);
      &oTGTEXP_.WriteLine(&strFilePart_);
      Break;
   When-Other;
      rem It might be Comments or Verification statements;
      &oVERSQL_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_99_VerificationSQLs.sql", "W", %FilePath_Absolute);
      &oVERSQL_.WriteLine(&strFilePart_);
      Break;
   End-Evaluate;
   
   Return &strClause_;
End-Function;

/****************************/
REM ** Generate ExcelSheet **;
/****************************/
Function PPGenerateExcel4EachRecord()
   
   REM *** This function is responsible to generate ONE SpreadSheet/RECORD ***;
   Local File &RecSSFile_;
   Local ApiObject &Rec_QryObj_;
   Local Rowset &oRecSSRS_;
   Local string &sRecSSString_, &sSQLString_;
   Local Record &oRecSS_;
   Local string &sRecSS_, &sWhereClauseLong_;
   Local integer &iNumofRows_;
   
   try
      REM *** Make a new Directory to place all the generated SpreadSheets ***;
      &sRecDirPath_ = &sDirPath_ | "\" | "XLS";
      REM *** Make sure you clean the directory ***;
      rem RemoveDirectory(&sRecDirPath_, %FilePath_Absolute + %Remove_Subtree);
      REM *** Create a fresh directory ***;
      CreateDirectory(&sRecDirPath_, %FilePath_Absolute);
      REM *** This should be called within a loop ***;
      &oPP3SQL_ = GetSQL(SQL.PP_COMPRECFETCH_SQL, &sTgtProjID_, "E");
      While &oPP3SQL_.Fetch(&sRecSS_, &sWhereClauseLong_)
         rem &REC = CreateRecord(@("RECORD." | &sRecSS_));
         &RecSSFile_ = GetFile(&sRecDirPath_ | "\" | &sRecSS_ | "_" | %DbName | ".xls", "W", %FilePath_Absolute);
         REM *** Check to see if File is Open ***;
         If &RecSSFile_.IsOpen Then
            REM *** Be careful about the Users' language code on the User Profile ***;
            &Rec_QryObj_ = %Session.GetQuery();
            /* Initialising the Rowset & Values */
            &oRecSSRS_ = CreateRowset(@("RECORD." | &sRecSS_));
            &iNumofRows_ = &oRecSSRS_.Fill(" WHERE " | &sWhereClauseLong_);
            &sRecSSString_ = &Rec_QryObj_.FormatResultString(&oRecSSRS_, %Query_XLS, 1, &oRecSSRS_.ActiveRowCount);
            &RecSSFile_.WriteLine(&sRecSSString_);
         Else
            Error ("Error: Opening of File Failed");
         End-If;
         &RecSSFile_.Close();
      End-While;
      REM *** Exception Block ***;
   catch Exception &ex
      Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
      REM *** Display the Message Text and Message Explain Text and then FAIL it!!! ***;
      rem Error (&handler.getMessageText(&ex));
      MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageText(&ex));
      rem Error (&handler.getMessageExplainText(&ex));
   end-try;
   
End-Function;

/****************************/
REM *** ~~~ MAIN LINE ~~~ ***;
/****************************/
try
   REM *** Physical Location of the Files is important to fix ***;
   &sTgtProjID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
   &sANZWRNumber_ = PP_COMP_QRY.WORK_ID.Value;
   If All(&sANZWRNumber_) Then
      &sDirPath_ = "D:\Temp\" | &sTgtProjID_;
      If (PP_GENERIC_WRK.ADVANCED_FLAG = "Y") Then
         REM *** Make sure you clean the directory ***;
         RemoveDirectory(&sDirPath_, %FilePath_Absolute + %Remove_Subtree);
         REM *** Create a fresh directory ***;
         CreateDirectory(&sDirPath_, %FilePath_Absolute);
         &oALLSQLs_ = GetFile(&sDirPath_ | "\ANZWR" | &sANZWRNumber_ | "ALLSQLs_" | %Datetime | ".txt", "W", %FilePath_Absolute);
         &sAllSQLs_ = PP_COMP_QRY.SQL_STATEMENT.Value;
         &oALLSQLs_.WriteLine(&sAllSQLs_);
         &sFileStr_ = GetFileAsString(&oALLSQLs_);
         rem Parse the file;
         &AS = CreateArrayRept("", 0);
         &AS = Split(&sFileStr_, "--");
         For &M = 1 To &AS.Len
            &strClauseName_ = ParseSQLFile(&AS [&M]);
            /*
         If All(&strClauseName_) Then
            &Temp_ = " " | &strClauseName_ | ";" | &Temp_;
         Else
            rem Comments or SET Statements encountered;
         End-If;
         */
         End-For;
         MessageBox(0, "", 0, 0, "Files generated successfully under -- " | &sDirPath_);
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Please provide a valid WR number before generating files");
      PP_GENERIC_WRK.ADVANCED_FLAG.Value = "N";
   End-If;
   REM *** Call the function to generate spreadsheets for each record in the Project ***;
   PPGenerateExcel4EachRecord();
   
catch Exception &ex
   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM Error (&handler.getMessageText(&ex));
   MessageBox(0, "", 0, 0, "Unable To Create Directory : " | &handler.getMessageText(&ex));
   REM Error (&handler.getMessageExplainText(&ex));
end-try;

Declare Function PopulateSearchKeys PeopleCode PP_GENERIC_WRK.DESCR1 FieldFormula;
Declare Function FlushCompRecScroll PeopleCode PP_GENERIC_WRK.DESCR1 FieldFormula;
Local number &I;

&sComponentName_ = PP_COMP_QRY.COMPONENT_ID.Value;
&oCompSQL_ = GetSQL(SQL.PP$COMP$SQL, &sComponentName_);
REM *** Keep this handy to check the actual SQL statement ***;
Local string &sSQLStringVal_ = &oCompSQL_.Value;

&RS_Level0 = GetLevel0();
&RowLevel0 = &RS_Level0.getRow(1);

&RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMP_WRK);
ScrollFlush(Record.PP_COMP_WRK);
REM *** Set the counter to 1. Please be aware that aware that at this point there is an additional blank row which needs to be deleted later ***;
&I = 1;
While &oCompSQL_.Fetch(&L3_, &L2, &L1, &L0, &sPageName, &sSearchRecName, &sRecName, &sParentRecName, &sFieldName, &sTableEditName, &sLabelIDName, &sLabelTextName)
   If &I <> 1 Then
      REM *** This ensures that the additional blank row is not there ***;
      &RS_Level1.InsertRow(&I - 1);
   End-If;
   &Rec_Level1 = &RS_Level1.getRow(&I).GetRecord(Record.PP_COMP_WRK);
   &Rec_Level1.DESCR100E.Value = &L3_;
   &Rec_Level1.DESCR100F.Value = &L2;
   &Rec_Level1.DESCR100G.Value = &L1;
   &Rec_Level1.DESCR100H.Value = &L0;
   &Rec_Level1.DESCR100.Value = &sPageName;
   &Rec_Level1.DESCR100_2.Value = &sRecName;
   &Rec_Level1.DESCR100_3.Value = &sParentRecName;
   &Rec_Level1.DESCR100_4.Value = &sFieldName;
   &Rec_Level1.DESCR100A.Value = &sTableEditName;
   &Rec_Level1.DESCR100B.Value = &sLabelIDName;
   &Rec_Level1.DESCR100C.Value = &sLabelTextName;
   &Rec_Level1.DESCR100D.Value = &sSearchRecName;
   &I = &I + 1;
End-While;

&sSrchRecName_ = &RS_Level1.getRow(1).GetRecord(Record.PP_COMP_WRK).GetField(Field.DESCR100D).Value;
PopulateSearchKeys(&sSrchRecName_);
REM *** Cater for records which do not conform to the key structure of the Component ***;
rem FlushCompRecScroll();
REM *** Populate the Search Keys for the Component in Question ***;
Function PopulateSearchKeys(&sSearchRecName_ As string)
   
   &RS_Level0 = GetLevel0();
   &RowLevel0 = &RS_Level0.getRow(1);
   &RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMPSRCHFLDS);
   &oSrchRecSQL_ = GetSQL(SQL.PP$REC$KEYS$SQL, &sSearchRecName_);
   ScrollFlush(Record.PP_COMPSRCHFLDS);
   &I = 1;
   While &oSrchRecSQL_.Fetch(&sFieldName)
      If &I <> 1 Then
         REM *** This ensures that the additional blank row is not there ***;
         &RS_Level1.InsertRow(&I - 1);
      End-If;
      &Rec_Level1 = &RS_Level1.getRow(&I).GetRecord(Record.PP_COMPSRCHFLDS);
      &Rec_Level1.FIELDNAME1.Value = &sFieldName;
      &I = &I + 1;
   End-While;
   
End-Function;

REM *** DO NOT CHANGE THE CODE BELOW ***;
Function CheckFieldInRec(&CheckRec_ As string, &CheckField_ As string) Returns boolean
   
   Local SQL &oReckeySQL_ = GetSQL(SQL.PP$REC$KEYS$SQL, &CheckRec_);
   &Yo = True;
   &inside = False;
   While &oReckeySQL_.Fetch(&sFldName)
      If (&sFldName = &CheckField_) Then
         &Yo = True;
         Return &Yo;
      Else
         &Yo = False;
      End-If;
      &inside = True;
   End-While;
   
   REM *** This is to cater for those records which DO NOT have a key ***;
   If (&inside = False) And
         (&Yo = True) Then
      &Yo = False;
   End-If;
   REM *** Ones which return a false will be flushed ***;
   Return &Yo
End-Function;

REM *** Remove records from the Component/Record Scroll which do not follow the key structure of the Components Search Keys ***;
Function FlushCompRecScroll()
   REM *** This is a generic function ***;
   REM Records INSTALLATION & INSTALLATION_XX will also be filtered by this function;
   &RS_Level0 = GetLevel0();
   &RowLevel0 = &RS_Level0.getRow(1);
   &RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMP_WRK);
   &RS_Level11 = &RowLevel0.GetRowset(Scroll.PP_COMPSRCHFLDS);
   For &RS1rows_ = &RS_Level1.ActiveRowCount To 1 Step - 1
      &Rec_Level1 = &RS_Level1.getRow(&RS1rows_).GetRecord(Record.PP_COMP_WRK);
      &Rec_Level11 = &RS_Level11.getRow(1).GetRecord(Record.PP_COMPSRCHFLDS);
      &RecName_ = &Rec_Level1.DESCR100_2.Value;
      &FieldName_ = &Rec_Level11.FIELDNAME1.Value;
      &Bool_ = True;
      &Bool_ = CheckFieldInRec(&RecName_, &FieldName_);
      If Not (&Bool_) Then
         &RS_Level1.DeleteRow(&RS1rows_);
      Else
         rem do nothing;
      End-If;
   End-For;
   
End-Function;

REM *** Create a new project ***;
import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Local string &sFromProjectID_, &sToProjectID_;
Local SQL &oCompLvl0_, &oCompLvl1_, &oCompLvl2_;

REM *** Retrieve From and To Project Names from the Page ***;
&sFromProjectID_ = PP_COMP_SAVEAS.PROJECT_ID_TARGET.Value;
&sToProjectID_ = PP_COMP_SAVEAS.PROJECT_ID_TO.Value;

If (&sFromProjectID_ <> &sToProjectID_) Then
   
   try
      REM *** Ensure a clean run ***;
      SQLExec("DELETE PS_PP_COMP_QRY WHERE PROJECT_ID_TARGET = :1", &sToProjectID_);
      SQLExec("DELETE PS_PP_COMP_QRY_1 WHERE PROJECT_ID_TARGET = :1", &sToProjectID_);
      SQLExec("DELETE PS_PP_COMP_QRY_2 WHERE PROJECT_ID_TARGET = :1", &sToProjectID_);
      REM *** Retrieve SQL Objects for all the levels ***;
      &oCompLvl0_ = GetSQL(SQL.ANZ$COMP$COPY$LVL0$SQL, &sToProjectID_, &sFromProjectID_);
      &oCompLvl1_ = GetSQL(SQL.ANZ$COMP$COPY$LVL1$SQL, &sToProjectID_, &sFromProjectID_);
      &oCompLvl2_ = GetSQL(SQL.ANZ$COMP$COPY$LVL2$SQL, &sToProjectID_, &sFromProjectID_);
      REM *** Close all the SQL Objects ***;
      &oCompLvl0_.Close();
      &oCompLvl1_.Close();
      &oCompLvl2_.Close();
      MessageBox(0, "", 0, 0, "Project " | &sFromProjectID_ | " has been copied to " | &sToProjectID_);
   catch Exception &ex
      Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
      REM Error (&handler.getMessageText(&ex));
      MessageBox(0, "", 0, 0, "Unable to copy the Project > " | &sFromProjectID_ | " - " | &handler.getMessageText(&ex));
      REM Error (&handler.getMessageExplainText(&ex));
   end-try;
Else
   Error ("From Project and To Project cannot be same");
End-If;

import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Component array of string &recArray_, &SqlStmtsArr_, &chkDupRecNameArr_;
Component string &Clause_;
Local Rowset &RS0_, &RS1_, &RS2_;
Local Row &Row1_;
Local Record &Rec1_, &Rec2_;
Local number &I_, &J_;
Local string &WhereClause_, &TempClause_;
Local SQL &SQLObject_, &SQLObjectFetch_;

Function getSQLTableName(&sRecName_ As string) Returns string
   
   Local string &SQLTABLENAME;
   SQLExec("SELECT SQLTABLENAME FROM PSRECDEFN WHERE RECNAME = :1", &sRecName_, &SQLTABLENAME);
   If &SQLTABLENAME = "" Or
         &SQLTABLENAME = " " Then
      Return ("PS_" | &sRecName_);
   Else
      Return (&SQLTABLENAME);
   End-If;
   
End-Function;

&SqlStmtsArr_ = CreateArrayRept("", 0);
&chkDupRecNameArr_ = CreateArrayRept("", 0);

try
   &sANZWRNumber_ = PP_COMP_QRY.WORK_ID.Value;
   &sANZProjectDescr_ = PP_COMP_QRY.DESCR50_MIXED.Value;
   If All(&sANZWRNumber_) Then
      REM *** WHERE CLAUSE Fields at Level 1 ***;
      &ProjectID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
      &RS0_ = GetLevel0();
      &Row1_ = &RS0_.GetRow(1);
      &RS1_ = &Row1_.GetRowset(Scroll.PP_COMP_QRY_1);
      PP_COMP_QRY.SQL_STATEMENT.Value = "";
      &WhereClause_ = "";
      &Clause_ = "";
      &RecordObject_ = CreateRecord(@("RECORD.PP_COMP_QRY_3"));
      &SQLObject_ = CreateSQL("INSERT INTO %Table(:1) VALUES(:2, :3, :4, :5, :6)");
      &SQLObjectDelete_ = CreateSQL("DELETE %TABLE(:1) WHERE PROJECT_ID_TARGET = :2");
      REM *** FLUSH THE TABLE ***;
      &SQLObjectDelete_.execute(&RecordObject_, &ProjectID_);
      rem &SQLObjectFetch_ = CreateSQL("SELECT WHERE_CLAUSE FROM %Table(:1) WHERE ANZ_SQL_STMT_TYPE = :2", &RecordObject_, "E");
      rem &SQLObjectFetch_ = CreateSQL("SELECT 'EXPORT ' + 'PS_' + RECORDNAME + ' WHERE ' + WHERE_CLAUSE [STMT] FROM %Table(:1) WHERE ANZ_SQL_STMT_TYPE = :2", &RecordObject_, "E");
      &SQLObjectFetch_ = CreateSQL("SELECT RTRIM(RECORDNAME), WHERE_CLAUSE_LONG FROM %Table(:1) WHERE PROJECT_ID_TARGET = :2 AND ANZ_SQL_STMT_TYPE = :3", &RecordObject_, &ProjectID_, &STMTType_);
      &SQLObjectFetch_.ReuseCursor = True;
      REM *** Check to make sure that the User has set the values intelligently ***;
      &Clause_ = &Clause_ | Char(13) | "--Please be aware that table(s) below may have triggers on them  ";
      &Clause_ = &Clause_ | Char(13) | "--Verification  ";
      &Clause_ = &Clause_ | Char(13) | "SELECT db_name() as [DATABASE NAME], getdate() as [AS OF DATE STATE];";
      For &I_ = 1 To &RS1_.ActiveRowCount
         REM *** Level1 has the record names ***;
         &Rec1_ = &RS1_.GetRow(&I_).GetRecord(Record.PP_COMP_QRY_1);
         &RS2_ = &RS1_.GetRow(&I_).GetRowset(Scroll.PP_COMP_QRY_2);
         rem MessageBox(0, "", 0, 0, "Coming for Record --- " | &Rec1_.RECORDNAME.Value);
         &WhereClause_ = "";
         REM *** Make sure that the user is aware of any dependent triggers on SYNCID and SYNCDTTM ***;
         <*
   If (&I_ = 1) Then
      &Clause_ = "---Please be aware that table(s) below may have triggers on them---";
   Else
      REM *** DO NOTHING ***;
   End-If;
   REM *** COUNT(1) ***;
   &Clause_ = &Clause_ | Char(13) | "--Verification";
   &Clause_ = &Clause_ | Char(13) | "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " COUNT(1)[ROW COUNT] FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** EXPORT ***;
   &Clause_ = &Clause_ | Char(13) | "--EXPORT CLAUSE(S) -- SOURCE";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_EXP.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\XXXXX_EXP.DAT;";
   &Clause_ = &Clause_ | Char(13) | "EXPORT PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** DELETE ***;
   &Clause_ = &Clause_ | Char(13) | "--DELETE CLAUSE(S) -- TARGET";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_DEL.LOG;";
   &Clause_ = &Clause_ | Char(13) | "DELETE PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** IMPORT ***;
   &Clause_ = &Clause_ | Char(13) | "--IMPORT CLAUSE(S) -- TARGET";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_IMP.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET INPUT C:\TEMP\XXXXX_EXP.DAT;";
   &Clause_ = &Clause_ | Char(13) | "IMPORT PS_" | &Rec1_.RECORDNAME.Value | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** SELECT ***;
   &Clause_ = &Clause_ | Char(13) | "--SELECT CLAUSE(S) -- Config Workbook";
   &Clause_ = &Clause_ | Char(13) | "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** Assign the clause to the PageField ***;
   PP_COMP_QRY.SQL_STATEMENT.Value = &Clause_;*>
         For &J_ = 1 To &RS2_.ActiveRowCount
            rem &WhereClause_ = "";
            REM *** Level2 has the WHERE criteria ***;
            &Rec2_ = &RS2_.GetRow(&J_).GetRecord(Record.PP_COMP_QRY_2);
            rem MessageBox(0, "", 0, 0, "Coming for Record --- " | &Rec2_.RECORDNAME.Value | " AND KeyName " | &Rec2_.KEYNAME.Value);
            Evaluate &Rec2_.PP_MATCH_KIND.Value
            When = 1 /*** = ***/;
               If None(&WhereClause_) Then
                  &WhereClause_ = &WhereClause_ | &Rec2_.KEYNAME.Value | " = '" | &Rec2_.WHERE_CLAUSE.Value | "'";
               Else
                  &WhereClause_ = &WhereClause_ | " AND " | &Rec2_.KEYNAME.Value | " = '" | &Rec2_.WHERE_CLAUSE.Value | "'";
               End-If;
               If None(&Rec2_.WHERE_CLAUSE.Value) Then
                  MessageBox(0, "", 0, 0, "Please provide a value for Row Number " | &J_);
               End-If;
               Break;
            When = 2 /*** IN ***/;
               If None(&WhereClause_) Then
                  &WhereClause_ = &WhereClause_ | &Rec2_.KEYNAME.Value | " IN " | &Rec2_.WHERE_CLAUSE.Value;
               Else
                  &WhereClause_ = &WhereClause_ | " AND " | &Rec2_.KEYNAME.Value | " IN " | &Rec2_.WHERE_CLAUSE.Value;
               End-If;
               If (Len(&Rec2_.WHERE_CLAUSE.Value) = 2) Then
                  MessageBox(0, "", 0, 0, "Please provide a valid IN CLAUSE for Row Number " | &J_);
               End-If;
               Break;
            When = 7 /*** LIKE ***/;
               If None(&WhereClause_) Then
                  &WhereClause_ = &WhereClause_ | &Rec2_.KEYNAME.Value | " LIKE '" | &Rec2_.WHERE_CLAUSE.Value | "%'";
               Else
                  &WhereClause_ = &WhereClause_ | " AND " | &Rec2_.KEYNAME.Value | " LIKE '" | &Rec2_.WHERE_CLAUSE.Value | "%'";
               End-If;
               If (&Rec2_.WHERE_CLAUSE.Value = "%") Then
                  rem MessageBox(0, "", 0, 0, "Row Number " | &J_ | " will not be part of the WHERE CLAUSE");
               End-If;
               Break;
            When-Other
               Error ("Invalid Option");
               Break;
            End-Evaluate;
         End-For;
         REM *** DELETE ***;
         &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "D", &WhereClause_);
         REM *** EXPORT SOURCE ***;
         &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "E", &WhereClause_);
         REM *** EXPORT TARGET ***;
         &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "T", &WhereClause_);
         REM *** IMPORT ***;
         &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "I", "");
         REM *** VERIFICATION ***;
         &sCorrectRecName_ = getSQLTableName(&Rec1_.RECORDNAME.Value);
         /* &VerClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " COUNT(1)[ROW COUNT] FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";*/
         &VerClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " COUNT(1)[ROW COUNT] FROM " | &sCorrectRecName_ | " WHERE " | &WhereClause_ | ";";
         REM *** Push the Rec Names into an array ***;
         &chkDupRecNameArr_.Push(&Rec1_.RECORDNAME.Value);
         &sAdditionalNotes_ = &Rec1_.ADDITIONAL_NOTE.Value;
         rem &Clause_ = &Clause_ | Char(13) | &VerClause_ | Char(13) | "--" | &sAdditionalNotes_;
         &Clause_ = &Clause_ | Char(13) | &VerClause_;
         &SqlStmtsArr_.Push(&VerClause_);
         REM *** CONFIG WORKBOOK ***;
         /* &ConfigClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";"; */
         &ConfigClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM " | &sCorrectRecName_ | " WHERE " | &WhereClause_ | ";";
         rem &Clause_ = &Clause_ | Char(13) | "--SELECT CLAUSE(S) -- Config Workbook";
         &Clause_ = &Clause_ | Char(13) | &ConfigClause_;
         REM *** DO NOT PUSH THIS CLAUSE ***;
         rem &SqlStmtsArr_.Push(&ConfigClause_);
      End-For;
      &chkDupRecNameArr_.Sort("A");
      <*
REM *** Find out if User has added the same record more than once ***;
For &i = 1 To &chkDupRecNameArr_.Len
   &Temp = &chkDupRecNameArr_ [&i];
   For &j = 1 To &chkDupRecNameArr_.Len
      If (&i <> &j) Then
         &NewTemp = &chkDupRecNameArr_ [&j];
         If (&Temp = &NewTemp) Then
            MessageBox(0, "", 0, 0, "Duplicate Record Exists");
            MessageBox(0, "", 0, 0, "Please combine the Where Clauses and delete the redundant row(s)");
            MessageBox(0, "", 0, 0, "Where Clause for Record Name(s) " | &Temp | " could be combined");
            Break;
         End-If;
      End-If;
   End-For;
End-For;
*>
      rem writing export source;
      &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--EXPORT CLAUSE(S) SOURCE  ";
      /*
      &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_EXP.LOG;";
      &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\XXXXX_EXP.DAT;";
      */
      &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
      &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
      &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.LOG;";
      &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.DAT;";
      REM *** EXPORT CLAUSES SOURCE ***;
      &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "E");
      While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
         &sActualRecNameEXP_ = getSQLTableName(&RecName_);
         /* &ExportClause_ = "EXPORT PS_" | &RecName_ | " WHERE " | &TempClause_ | ";"; */
         &ExportClause_ = "EXPORT " | &sActualRecNameEXP_ | " WHERE " | &TempClause_ | ";";
         &Clause_ = &Clause_ | Char(13) | &ExportClause_;
         REM *** No Need to push DMS Statements ***;
         rem &SqlStmtsArr_.Push(&ExportClause_);
      End-While;
      
      REM *** Need to explicitly specify the Export Clause for the Target Environment ***;
      &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--TARGET EXPORT CLAUSE(S)  ";
      &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
      &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
      &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.LOG;";
      &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.DAT;";
      REM *** EXPORT CLAUSES TARGET ***;
      &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "T");
      While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
         &sActualRecNameEXP_ = getSQLTableName(&RecName_);
         /* &ExportClause_ = "EXPORT PS_" | &RecName_ | " WHERE " | &TempClause_ | ";"; */
         &ExportClause_ = "EXPORT " | &sActualRecNameEXP_ | " WHERE " | &TempClause_ | ";";
         &Clause_ = &Clause_ | Char(13) | &ExportClause_;
         REM *** No Need to push DMS Statements ***;
         rem &SqlStmtsArr_.Push(&ExportClause_);
      End-While;
      
      &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--DELETE CLAUSE(S) TARGET  ";
      &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
      &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
      &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_02_TGTDELETE.LOG;";
      REM *** DELETE CLAUSES ***;
      &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "D");
      While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
         &sActualRecNameDEL_ = getSQLTableName(&RecName_);
         /* &DeleteClause_ = "DELETE PS_" | &RecName_ | " WHERE " | &TempClause_ | ";"; */
         &DeleteClause_ = "DELETE " | &sActualRecNameDEL_ | " WHERE " | &TempClause_ | ";";
         &Clause_ = &Clause_ | Char(13) | &DeleteClause_;
         REM *** No Need to push DMS Statements ***;
         rem &SqlStmtsArr_.Push(&DeleteClause_);
      End-While;
      
      &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--IMPORT CLAUSE(S) TARGET  ";
      &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
      &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
      &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_03_TGTIMPORT.LOG;";
      &Clause_ = &Clause_ | Char(13) | "SET INPUT C:\TEMP\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.DAT;";
      REM *** IMPORT CLAUSES ***;
      &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "I");
      While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
         &sActualRecNameIMP_ = getSQLTableName(&RecName_);
         /* &ImportClause_ = "IMPORT PS_" | &RecName_ | ";"; */
         &ImportClause_ = "IMPORT " | &sActualRecNameIMP_ | ";";
         &Clause_ = &Clause_ | Char(13) | &ImportClause_;
         REM *** No Need to push DMS Statements ***;
         rem &SqlStmtsArr_.Push(&ImportClause_);
      End-While;
      REM *** ASSIGN TO PAGE FIELD ***;
      PP_COMP_QRY.SQL_STATEMENT.Value = &Clause_;
   Else
      MessageBox(0, "", 0, 0, "Please provide a valid WR number before generating files");
   End-If;
   
catch Exception &ex
   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM Error (&handler.getMessageText(&ex));
   MessageBox(0, "", 0, 0, "Exception Logged while generating SQL > " | &handler.getMessageText(&ex));
   REM Error (&handler.getMessageExplainText(&ex));
end-try;

Component array of string &recArray_;
Local Rowset &RS_Level0, &RS_Level1, &RS_Level11, &RS_Level2;
Local Row &RowLevel0, &RowLevel1;
Local Record &Rec_Level1, &Rec_Level2, &Rec_Level11;
Local string &sComponentName_;
Local number &J, &iRowCount_, &K, &JK, &iSrchCount_;



REM *** Retrieve the current component name ***;
&sComponentName_ = PP_COMP_QRY.COMPONENT_ID.Value;
REM *** Retrieve Comp Buffer ***;
&RS_Level0 = GetLevel0();
&RowLevel0 = &RS_Level0.GetRow(1);
&RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMP_QRY_1);
&RS_Level11 = &RowLevel0.GetRowset(Scroll.PP_COMPSRCHFLDS);
REM *** CHECK ARRAY LENGTH ***;
rem MessageBox(0, "", 0, 0, "Add To Project > Array Length " | &recArray_.Len);
REM *** ***;
REM *** Populate the Level 1 Scroll ***;
REM *** ***;
For &JK = 1 To &recArray_.Len
   &iRowCount_ = &RS_Level1.ActiveRowCount;
   If All(&RS_Level1.GetRow(&iRowCount_).GetRecord(Record.PP_COMP_QRY_1).COMPONENT_ID.Value) Then
      REM *** This ensures that the additional blank row is updated ***;
      &RS_Level1.InsertRow(&iRowCount_);
      rem &RS_Level1.InsertRow(1);
      &iRowCount_ = &iRowCount_ + 1;
   End-If;
   rem MessageBox(0, "", 0, 0, "RecName > " | &recArray_ [&JK] | " > " | &JK);
   &Rec_Level1 = &RS_Level1.GetRow(&iRowCount_).GetRecord(Record.PP_COMP_QRY_1);
   &Rec_Level1.COMPONENT_ID.Value = &sComponentName_;
   &Rec_Level1.RECORDNAME.Value = &recArray_ [&JK];
   &Rec_Level1.RECORDNAME.DisplayOnly = True;
   REM *** ***;
   REM *** Populate the WHERE CLAUSE GRID ***;
   REM *** ***;
   &RS_Level2 = &RS_Level1.GetRow(&iRowCount_).GetRowset(Scroll.PP_COMP_QRY_2);
   For &K = 1 To &RS_Level11.ActiveRowCount
      &InsertRows_ = &RS_Level11.RowCount;
      If &K <> 1 Then
         &RS_Level2.InsertRow(&K - 1);
      End-If;
      &RowLevel1 = &RS_Level11.GetRow(&K);
      &Rec_Level2 = &RS_Level2.GetRow(&K).GetRecord(Record.PP_COMP_QRY_2);
      &Rec_Level11 = &RS_Level11.GetRow(&K).GetRecord(Record.PP_COMPSRCHFLDS);
      &Rec_Level2.KEYNAME.Value = &Rec_Level11.FIELDNAME1.Value;
      &Rec_Level2.PP_MATCH_KIND.Value = &Rec_Level11.PP_MATCH_KIND.Value;
      &Rec_Level2.WHERE_CLAUSE.Value = &Rec_Level11.WHERE_CLAUSE.Value;
      rem &Rec_Level2.Insert();
   End-For;
   rem &Rec_Level1.Insert();
End-For;
PP_GENERIC_WRK.DESCR2.Enabled = True;

REM *** Send Email ***;
import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Declare Function SendMailTo_ PeopleCode PP_GENERIC_WRK.DESCR5 FieldFormula;

/*** Main Line ***/
try
   /* must have something defined in EMAIL_TO */
   If None(PP_COMP_QRY.DESCR200.Value) Then
      MessageBox(0, "Message Not Found", 210, 42, "Message Not Found");
   Else
      Local integer &rcEmail;
      /* This Email ID should be provided on the Control ID page for the Process */
      &pEmailAddress = PP_COMP_QRY.DESCR200.Value;
      &pEmailAddress = EscapeHTML(&pEmailAddress);
      /* Retrieve Subject from Message Catalog */
      Local string &Subject = "The Target Project " | PP_COMP_QRY.PROJECT_ID_TARGET.Value | " has been created.";
      /* Add additional text in the email body from Message Catalog */
      &txt1 = MsgGetExplainText(21000, 204, "Message Not Found");
      rem Create the email text;
      Local string &email = &txt1 | Char(13);
      rem &ErrorFileName = "D:\temp\" | &LVL0REC.SCM_ATTACH_ID.Value | &LVL0REC.FILENAME.Value;
      rem Local string &fileName = &LVL0REC.SCM_ATTACH_ID.Value | &LVL0REC.FILENAME.Value;
      rem &rcEmail = &objMail.SendMailTo_(&pEmailAddress, &Subject, &ErrorFileName, &fileName, &email);
      &rcEmail = SendMailTo_(&pEmailAddress, &Subject, "", "", &email);
      If &rcEmail <> 1 Then
         /* error processing */
         MessageBox(0, "", 0, 0, "Report could not be emailed to: " | &pEmailAddress);
      Else
         MessageBox(0, "", 0, 0, "Email successfully sent to : " | &pEmailAddress);
      End-If;
   End-If;
   
catch Exception &ex
   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM *** Display the Message Text and Message Explain Text and WARN THE USER!!! ***;
   REM Error (&handler.getMessageText(&ex));
   MessageBox(0, "", 0, 0, "Unable to send mail for : " | &handler.getMessageText(&ex));
   REM Error (&handler.getMessageExplainText(&ex));
end-try;

/* Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* SCM_PORTAL */
import SCM_UTILITIES:Portal:portalURL;

Function GetUrl_() Returns string
   
   try
      Local SCM_UTILITIES:Portal:portalURL &GetPortalURL_ = create SCM_UTILITIES:Portal:portalURL();
      Local string &URL;
      rem How do I by pass the sign-on?;
      &URL = &GetPortalURL_.GenerateComponentPortalURL("PP_COMP_QRY", "PP_COMP_QRY", "PP_COMP_QRY_PG", "U", Null);
      Return &URL;
   catch Exception &ec
      Return "";
   end-try;
End-Function;

Function SendMailTo_(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer
   
   Local integer &rcEmail;
   Local string &msgBody, &emailText_, &URL_, &encodedText;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   rem I dnt think that the function actually works;
   Local boolean &EmailIDValidate_ = ValidateEmailAddress(&emailAddress);
   
   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;
   
   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   rem &msgBody = GetHTMLText(HTML.ANZ_EMAIL_SKELETON, &emailAddress, "", "", "", "", "", "", "", "");
   &URL_ = GetUrl_();
   rem &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", MsgGetText(18130, 15031, "EWN_Notification"), MsgGetText(18130, 15032, "Process_Name"), MsgGetText(18130, 15033, "Category"), MsgGetText(18130, 15030, "GoTo"), MsgGetText(18130, 15020, "Message_Detail"));
   &emailText_ = GetHTMLText(HTML.ANZ_COMP_DRILLDOWN, "Target Project Bundle has been created and is ready for migration", PP_COMP_QRY.PROJECT_ID_TARGET.Value, "Target Project Creation Notification", "Target Project ID: ", "Created By: ", %OperatorId, "Updated On: ", %PerfTime);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   Local boolean &ret = EncodeText(&emailText_, "ISO_8859-1", "Q", &encodedText);
   rem uncomment the line below to revert the changes. currently commented to test the EncodeText function;
   rem &htmlPart.Text = &emailText_;
   rem encoding somehow doesn't seem to work;
   &htmlPart.Text = &encodedText;
   &htmlPart.ContentType = "text/html";
   /* Always use these MCFEmail Class Properties --START */
   rem Use the From to receive the read receipt;
   &email.From = "prashant.prakash@anz.com"; /* Sending the mail */
   &email.Priority = 1;
   &email.Importance = "high";
   &email.Sensitivity = "private";
   &email.Disposition = "attachment";
   rem &email.IsReturnReceiptReqd = True;
   &email.BounceTo = "prashant.prakash@anz.com";
   rem always returns false;
   &email.ReplyTo = "prashant.prakash@anz.com";
   /* Always use these MCFEmail Class Properties --END */
   &multiPart.AddBodyPart(&htmlPart);
   rem &multiPart.AddBodyPart(&textPart);
   Local string &ContentType_ = &multiPart.GetContentType();
   /* The attachment somehow does not come along with the email
   &multiPart.SubType = "alternative; differences=Content-type";
   */
   &email.MultiPart = &multiPart;
   REM *** Attach the generated files ***;
   &sTgtProjID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
   &DMSFile_path = "D:\Temp\" | &sTgtProjID_ | "\ANZWR*.dms";
   &ANZGenFileArrayDMS_ = FindFiles(&DMSFile_path, %FilePath_Absolute);
   For &iArrLenDMS_ = 1 To &ANZGenFileArrayDMS_.Len
      &fileName = &ANZGenFileArrayDMS_ [&iArrLenDMS_];
      &completeFileName = &fileName;
      &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   End-For;
   &SQLFile_path = "D:\Temp\" | &sTgtProjID_ | "\ANZWR*.sql";
   rem MessageBox(0, "", 0, 0, "File Path -- " | &File_path);
   &ANZGenFileArraySQL_ = FindFiles(&SQLFile_path, %FilePath_Absolute);
   For &iArrLenSQL_ = 1 To &ANZGenFileArraySQL_.Len
      &fileName = &ANZGenFileArraySQL_ [&iArrLenSQL_];
      &completeFileName = &fileName;
      &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   End-For;
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   Else
      rem &rcEmail will be blank. Need to set it here;
   End-If;
   rem &rcEmail = &email.Send();
   Return &rcEmail;
End-Function;


Local SQL &RecSrchKeysSQL_;

&RS0_ = GetLevel0();
&Row1_ = &RS0_.GetRow(1);
&RS1_ = &Row1_.GetRowset(Scroll.PP_COMP_QRY_1);
&LVL0REC = &RS0_.GetRow(1).GetRecord(Record.PP_COMP_QRY);
&sTgtProjID_ = &LVL0REC.PROJECT_ID_TARGET.Value;
<*
For &I_ = 1 To &RS1_.ActiveRowCount
   &Rec1_ = &RS1_.GetRow(&I_).GetRecord(Record.PP_COMP_QRY_1);
   &RS2_ = &RS1_.GetRow(&I_).GetRowset(Scroll.PP_COMP_QRY_2);
   REM *** Lvl 2 ***;
   For &J_ = 1 To &RS2_.ActiveRowCount
      &Rec2_ = &RS2_.GetRow(&J_).GetRecord(Record.PP_COMP_QRY_2);
      &RecSrchKeysSQL_ = GetSQL(SQL.PP$REC$KEYS$SQL, &Rec2_.RECORDNAME.Value);
      rem ScrollFlush();
      &I = 1;
      While &RecSrchKeysSQL_.Fetch(&sFieldName_)
         If &I <> 1 Then
            REM *** This ensures that the additional blank row is not there ***;
            &RS2_.InsertRow(&I - 1);
         End-If;
         &Rec2_.KEYNAME.Value = &sFieldName_;
         &Rec2_.PP_MATCH_KIND.Value = "7";
         &Rec2_.WHERE_CLAUSE.Value = "";
         &I = &I + 1;
      End-While;
   End-For;
End-For;
*>
&RS2_ = &RS1_.GetRow(CurrentRowNumber()).GetRowset(Scroll.PP_COMP_QRY_2);
&Rec2_ = &RS2_.GetRow(1).GetRecord(Record.PP_COMP_QRY_2);
&sCompID_ = &Rec2_.COMPONENT_ID.Value;
&sRecName_ = &Rec2_.RECORDNAME.Value;
&RecSrchKeysSQL_ = GetSQL(SQL.PP$REC$KEYS$SQL, &Rec2_.RECORDNAME.Value);
REM *** BE CAREFUL, I'M MESSING WITH THE BUFFER ***;
ScrollFlush(Record.PP_COMP_QRY_1, CurrentRowNumber(), Record.PP_COMP_QRY_2);
rem ScrollFlush(Scroll.PP_COMP_QRY_1, CurrentRowNumber(), Record.PP_COMP_QRY_2);
SQLExec("DELETE FROM PS_PP_COMP_QRY_2 WHERE PROJECT_ID_TARGET = :1 AND COMPONENT_ID = :2 AND RECORDNAME = :3", &sTgtProjID_, &sCompID_, &sRecName_);
&I = 1;
While &RecSrchKeysSQL_.Fetch(&sFieldName_)
   If &I <> 1 Then
      REM *** This ensures that the additional blank row is not there ***;
      &RS2_.InsertRow(&I - 1);
   End-If;
   &RS2_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_2).KEYNAME.Value = &sFieldName_;
   &RS2_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_2).PP_MATCH_KIND.Value = "7";
   &RS2_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_2).WHERE_CLAUSE.Value = "%";
   &I = &I + 1;
End-While;

<*
Local SQL &oSQL_ = GetSQL(SQL.ANZ$SP_HELPTRIGGER$SQL, "'PS_DEPT_TBL'");
rem Local string &ANZSQLStringValue_ = &oSQL_.Value;
rem SQLExec(&ANZSQLStringValue_, "PS_DEPT_TBL", &sTrigNm);
While &oSQL_.Fetch(&sTrigNm)
   MessageBox(0, "", 0, 0, "&sTrigNm " | &sTrigNm);
End-While;
*>

import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Component array of string &SqlStmtsArr_;

REM *** Run the SQL's to capture incorrect clauses ***;
If All(&SqlStmtsArr_) Then
   For &ArrLen_ = 1 To &SqlStmtsArr_.Len
      try
         rem MessageBox(0, "", 0, 0, "Clause " | &SqlStmtsArr_ [&ArrLen_]);
         &Clause_ = &SqlStmtsArr_ [&ArrLen_];
         &SQL = &Clause_;
         &SQL = RTrim(&SQL);
         &SQL = LTrim(&SQL);
         If SQLExec(&SQL, &tableName, &rowCount) Then
            &RTNCD = "" | %SqlRows | " " | MsgGetText(30000, 5, "Message not found");
         Else
            &RTNCD = MsgGetText(30000, 4, "Message not found");
         End-If;
         rem WinMessage(&RTNCD, 64);
         
      catch Exception &ex
         Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
         REM *** Display the Message Text and Message Explain Text and WARN THE USER!!! ***;
         REM Error (&handler.getMessageText(&ex));
         &Found_ = Find("'", &Clause_, 9);
         &ExceptionTblName_ = Substring(&Clause_, 9, (&Found_ - 9));
         rem MessageBox(0, "", 0, 0, "&ExceptionTblName_ " | &ExceptionTblName_);
         MessageBox(0, "", 0, 0, "Exception Logged for Table Name > " | &ExceptionTblName_ | " - " | &handler.getMessageText(&ex));
         MessageBox(0, "", 0, 0, "Please review the generated SQL Statements for inconsistencies");
         REM Error (&handler.getMessageExplainText(&ex));
      end-try;
   End-For;
End-If;

Declare Function CreateQueryURL PeopleCode WEBLIB_QUERY.QRYGENFUNCS FieldFormula;

PP_GENERIC_WRK.URL_1.Value = CreateQueryURL("PP_DUP_REC_QRY", True);

If All(PP_COMP_QRY.PROJECT_ID_TARGET.Value) Then
   PP_GENERIC_WRK.URL_1.Value = PP_GENERIC_WRK.URL_1.Value | "&BIND1=" | PP_COMP_QRY.PROJECT_ID_TARGET.Value;
End-If;


import ANZ_BATCH_LOG:*;
import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Component string &ANZstrSlash_;
Local File &ANZTAIBSExtractFile;
Local string &ANZFileName_, &ANZFilePath_, &ANZTAIBSExtractData_;
Local SQL &ANZTAIBSExtractSQL_;
Local number &AnzExtractLineCount_;


Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_;

try
   REM *** Check Logging Object ***;
   If (None(&msgLog_)) Then
      &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
   End-If;
   REM *** Check if User has supplied a File Path ***;
   If ANZ_TAIBS_AET.OVERRIDE_FILE.Value = "Y" Then
      &ANZFilePath_ = ANZ_TAIBS_AET.PATHNAME.Value;
      &msgLog_.println_to_stdout("File Path Overridden = " | &ANZFilePath_);
   Else
      &ANZFilePath_ = GetURL(URL.ANZ_LEDGERS);
      &msgLog_.println_to_stdout("File Path NOT Overridden = " | &ANZFilePath_);
   End-If;
   REM *** Initialize Line Counter ***;
   &AnzExtractLineCount_ = 0;
   REM *** Append the AS_OF_DATE from the Run Control Page to the File Name ***;
   &ANZAsofDate_ = ANZ_TAIBS_AET.AS_OF_DATE.Value;
   &ANZAsofDate_ = Substitute(&ANZAsofDate_, "-", "");
   &ANZOrigFileName_ = ANZ_TAIBS_AET.FILENAME.Value;
   &ANZUpperORLower_ = Right(&ANZOrigFileName_, 3);
   Evaluate &ANZUpperORLower_
   When "TXT"
      &ANZOrigFileName_ = Substitute(&ANZOrigFileName_, ".TXT", "_" | &ANZAsofDate_ | ".TXT");
      Break;
   When "txt"
      &ANZOrigFileName_ = Substitute(&ANZOrigFileName_, ".txt", "_" | &ANZAsofDate_ | ".TXT");
      Break;
   When-Other
      Break;
   End-Evaluate;
   &ANZFileName_ = &ANZFilePath_ | &ANZstrSlash_ | &ANZOrigFileName_;
   REM *** Log File Path & Name ***;
   &msgLog_.println_to_stdout("File Path and Name = " | &ANZFileName_);
   REM *** File Creation ***;
   <*
   If FileExists(&ANZFileName_, %FilePath_Absolute) Then
      &msgLog_.println_to_stderr("File " | ANZ_TAIBS_AET.FILENAME.Value | " already exists");
      Error ("File " | ANZ_TAIBS_AET.FILENAME.Value | " already exists");
   Else
   *>
   &ANZTAIBSExtractFile = GetFile(&ANZFileName_, "W", %FilePath_Absolute);
   rem MessageBox(0, "", 0, 0, "AS_OF_DATE " | ANZ_TAIBS_AET.AS_OF_DATE.Value);
   &msgLog_.println_to_stdout("TAIBS Extract File Opened in Write Mode > " | %PerfTime);
   rem End-If;
   REM *** Check if File is Open ***;
   If &ANZTAIBSExtractFile.IsOpen Then
      &msgLog_.println_to_stdout("TAIBS Extract File Opened successfully for writing > " | %PerfTime);
      &ANZTAIBSExtractSQL_ = CreateSQL("SELECT ANZ_TOTAL FROM %Table(ANZ_TBS3_TAO) WHERE  PROCESS_INSTANCE = :1", ANZ_TAIBS_AET.PROCESS_INSTANCE.Value);
      REM *** Write Detail Record ***;
      Evaluate &ANZTAIBSExtractSQL_.Status
      When = %SQLStatus_OK
         &msgLog_.println_to_stdout("SQL Status !OK! for TAIBS Extract Cursor > " | %PerfTime);
         &ANZTAIBSExtractSQL_.TraceName = "Write Extract File - TAIBS";
         &ANZTAIBSExtractSQL_.ReuseCursor = True;
         rem &ANZData_ = CreateArrayAny();
         REM *** Fetch the data ***;
         While (&ANZTAIBSExtractSQL_.Fetch(&ANZTAIBSExtractData_))
            &ANZTAIBSExtractFile.WriteLine(&ANZTAIBSExtractData_);
            &AnzExtractLineCount_ = &AnzExtractLineCount_ + 1;
         End-While;
         Break;
      When = %SQLStatus_NotFound
         &msgLog_.println_to_stdout("Invalid SQL Status for Cursor");
         &msgLog_.println_to_stderr("Invalid SQL Status for Cursor");
         Error ("LINE Not Found");
         Break;
      When = %SQLStatus_Duplicate
         &msgLog_.println_to_stdout("Duplicate Line");
         &msgLog_.println_to_stderr("Duplicate Line");
         Error ("DUPLICATE LINE");
         Break;
      End-Evaluate;
   End-If;
   REM *** Keep Tab on File ***;
   &msgLog_.println_to_stdout("No of Lines written = " | &AnzExtractLineCount_);
   &msgLog_.println_to_stdout("Writing to File ended at " | %PerfTime);
   
catch Exception &ex
   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM *** Display the Message Text and Message Explain Text and then FAIL it!!! ***;
   MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageText(&ex));
   &msgLog_.println_to_stdout("Exception Logged > " | &handler.getMessageText(&ex));
   &msgLog_.println_to_stderr("Exception Logged > " | &handler.getMessageExplainText(&ex));
   REM Error (&handler.getMessageText(&ex));
   rem Error (&handler.getMessageExplainText(&ex));
   Exit (1);
end-try;


import ANZ_BATCH_LOG:*;

/* Create Class Object for Logging */
Component string &ANZstrSlash_;
Local ANZ_BATCH_LOG:ANZ_BATCH_LOG &msgLog_;

If (None(&msgLog_)) Then
   &msgLog_ = create ANZ_BATCH_LOG:ANZ_BATCH_LOG();
End-If;



Local Record &ANZStateRec_ = GetRecord(Record.ANZ_TAIBS_AET);

/* Capture Run Control Details */
&ANZOperatorID_ = %OperatorId;
&ANZRunControlID_ = &ANZStateRec_.RUN_CNTL_ID.Value;
&ANZPrcsInstance_ = &ANZStateRec_.PROCESS_INSTANCE.Value;
&ANZPrcsOutputDir_ = &ANZStateRec_.PRCSOUTPUTDIR.Value;
rem &ANZBusinessUnit = &ANZStateRec_.BUSINESS_UNIT.Value;


/* Create the Log file in the following path */
&ANZFileDir_ = &ANZPrcsOutputDir_;
/* Create file names for stdout and stderr */
&ANZStdOut_ = "ANZ_TAIBS_AE_" | &ANZPrcsInstance_ | ".txt";
&ANZStdErr_ = "ANZ_TAIBS_AE_" | &ANZPrcsInstance_ | ".log";
/* Determine the file path separator character. First check for backslash then forwardslash. */
&ANZiTempPos = Find("\", &ANZFileDir_);
If &ANZiTempPos = 0 Then
   &ANZiTempPos = Find("/", &ANZFileDir_);
   &ANZstrSlash_ = "/";
Else
   &ANZstrSlash_ = "\";
End-If;
&ANZStdOutFile_ = &ANZFileDir_ | &ANZstrSlash_ | &ANZStdOut_;
&ANZStdErrFile_ = &ANZFileDir_ | &ANZstrSlash_ | &ANZStdErr_;
/* redirect stdout */
&msgLog_.redirect_stdout(&ANZStdOutFile_);
/* redirect stderr */
&msgLog_.redirect_stderr(&ANZStdErrFile_);
/* Generate Batch Log Report */
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("*                 PS Global to PS China Ledger Export            *");
&msgLog_.println_to_stdout("*                  Batch Process Log Report                      *");
&msgLog_.println_to_stdout("*                        Ledger Export                           *");
&msgLog_.println_to_stdout("*                                                                *");
&msgLog_.println_to_stdout("******************************************************************");
&msgLog_.println_to_stdout("");
&msgLog_.println_to_stdout("                 Generated On : " | %Datetime);
&msgLog_.println_to_stdout("                 Generated By : " | &ANZOperatorID_);
&msgLog_.println_to_stdout("             Process Instance : " | &ANZPrcsInstance_);
&msgLog_.println_to_stdout("               Run Control ID : " | &ANZRunControlID_);
&msgLog_.println_to_stdout("            Redirected Stdout : " | &ANZStdOutFile_);
&msgLog_.println_to_stdout("            Redirected Stderr : " | &ANZStdErrFile_);

&msgLog_.println_to_stderr("--><-- Error File redirected --><--");


/* ANZWR20908, ANZ001, Prashant Prakash, 04/02/2010 */
/* Adding the Add Attachment Functionality for IPFs. */

/* Begin ANZ001, Prashant Prakash, 04/02/2010 */
Local Rowset &RS_LEVEL0, &RS_Level1;
Local Record &LVL0REC;
Local Row &Row_Level1;
Local string &ANZIPFStatus_;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

Evaluate %Component
When = Component.ANZNZ_IPF_ENTRY
   ANZNZ_IPF_DRV.ATTACHADD.Enabled = True;
   Break;
When = Component.ANZNZ_IPF_APPR
   ANZNZ_IPF_DRV.ATTACHADD.Enabled = False;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
   rem Disable the Action and Go Button;
   rem ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION.Enabled = False;
   rem ANZNZ_IPFWF_DRV.ANZNZ_IPF_GOPB.Enabled = False;
   Break;
When-Other
   Break;
End-Evaluate;

rem Retrieve the IPF Status;
&ANZIPFStatus_ = &LVL0REC.ANZNZ_IPF_STATUS.Value;

REM Enable/Disable the Delete Attachment button based on the status of the IPF;
Evaluate &ANZIPFStatus_
When = "A" /* Approved */

When = "B" /* Confirmed */

When = "P" /* Pending Approval */

When = "X" /* Closed */

   rem Maske sure you enable the AddAttachment for the Workbench guys;
   If %Component = Component.ANZNZ_IPF_VMUDTL Then
      ANZNZ_IPF_DRV.ATTACHADD.Enabled = True;
   Else
      ANZNZ_IPF_DRV.ATTACHADD.Enabled = False;
   End-If;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
   For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
      &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
      &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
      rem users should be able to view the attachments;
      &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.SCM_DOWNLOAD).Enabled = True;
   End-For;
   rem Disable the Action and Go Button;
   rem ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION.Enabled = False;
   rem ANZNZ_IPFWF_DRV.ANZNZ_IPF_GOPB.Enabled = False;
   Break;
When = "N" /* New */

When = "C" /* Cancelled */

   For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount

      If All(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = True;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = True;
      Else
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
      End-If;
   End-For;
   Break;
When = "D" /* Rejected */

   For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount

      rem This case needs to be handled separately since the fields where visible to the Approver after rejecting the IPF;
      If (%Component = Component.ANZNZ_IPF_APPR) Then
         /* Approver is viewing the page after rejection */
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
      Else
         /* IPF creator is viewing the page after rejection */
         If All(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
            ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
            &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = True;
            &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = True;
         End-If;
      End-If;
   End-For;
   Break;
When-Other;
   rem Invalid IPF Status;
   Break;
End-Evaluate;

For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount

   If &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value = "" Then
      &RS_Level1.HideAllRows();
   Else
      &RS_Level1.ShowAllRows();
   End-If;
End-For;

/* End ANZ001, Prashant Prakash, 04/02/2010 */


/* ANZWR20908, ANZ001, Prashant Prakash, 05/02/2010 */
/* Keeping tab of attachments being added. */

/* Begin ANZ001, Prashant Prakash, 05/02/2010 */

&DATETIME = %Datetime;
If None(ANZ_IPF_ATTACH.ADD_DTTM) And
      RecordNew(ANZ_IPF_ATTACH.ADD_DTTM) And
      RecordChanged(ANZ_IPF_ATTACH.ADD_DTTM) Then
   ANZ_IPF_ATTACH.ADD_DTTM = &DATETIME;
   ANZ_IPF_ATTACH.LAST_MAINT_OPRID = %OperatorId;
End-If;

/* End ANZ001, Prashant Prakash, 05/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 04/02/2010 */
/* Adding the Add Attachment Functionality for IPFs.
*/

/* ANZWR32413, ANZ002, Jyothirmayi P, 29/12/2010*/
/* Added the Uploaded/Uploading file extension validation */

/* Begin ANZ001, Prashant Prakash, 04/02/2010 */

import SCM_ARCH_ATTACH:UI:*;

/* Begin, ANZ002, Jyothirmayi P, 29/12/2010*/
import SCM_UTILITIES:ExceptionUtilities:*;
import ANZ_UPDFILE_VAL:*;

Function Attach_Scroll_Refresh(&RS_Level1_var As Rowset)


   Local number &ANZCounterI_;

   For &ANZCounterI_ = 1 To &RS_Level1_var.ActiveRowCount

      If &RS_Level1_var.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value = "" Then
         &RS_Level1_var.HideAllRows();
      Else
         &RS_Level1_var.ShowAllRows();
      End-If;
   End-For;
End-Function;

/* End, ANZ002, Jyothirmayi P, 29/12/2010*/

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Row &Row_Level1, &RSRow_;
Local string &scrollname, &recname;
Local Record &LVL0REC;

rem MAKE SURE THAT THE BELOW VARIABLES ARE ALWAYS DECLARED AS COMPONENT;
rem CHANGING THE SCOPE WILL AFFECT THE FUNCTIONALITY;
Component SCM_ARCH_ATTACH:UI:AttachmentHandler &scm_app_interface_comp;
Component Row &Row;

&scrollname = "Scroll.ANZ_IPF_ATTACH";
&recname = "Record.ANZ_IPF_ATTACH";

/**************** Call SCM Arch team attach code - Begin *********************/
If (None(&scm_app_interface_comp)) Then
   &scm_app_interface_comp = create SCM_ARCH_ATTACH:UI:AttachmentHandler();
End-If;


&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

Local Rowset &rs = GetLevel0()(1).GetRowset(@&scrollname);
&Row = &scm_app_interface_comp.InsertRowUploadAtt(&RS_Level1, &recname);

/* Begin, ANZ002, Jyothirmayi P, 29/12/2010*/
/* Validate if the file attached has valid extension */
Local boolean &value = False;
Local string &anz_component = %Component;

try

If None(&validate) Then
   &validate = create ANZ_UPDFILE_VAL:ANZ_Upload_File_Validation();
End-If;

/*Process each row of the Attachment scroll buffer for file extension validation*/
For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
   &ANZSCMAttachID_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
   &ANZAttVersion_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.ATT_VERSION).Value;
   &ATTACHUSERFILE_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;

   If &ANZSCMAttachID_ <> "" Then
      /*Call the method to validate the file extension specific to the current component*/
      &value = &validate.ANZ_File_extn_validate(&anz_component, &ATTACHUSERFILE_);
      If Not &value Then
         &ATTACHUSERFILE_PV = "";
         /* Fetch the matching userfilename for existing files under PV_ATTACHMENTS table*/
         Local Rowset &RS1 = CreateRowset(Record.PV_ATTACHMENTS);
         &RS1.Fill("WHERE SCM_ATTACH_ID=:1 and ATTACHUSERFILE = :2", &ANZSCMAttachID_, &ATTACHUSERFILE_);
         &ATTACHUSERFILE_PV = &RS1.GetRow(1).GetRecord(Record.PV_ATTACHMENTS).GetField(Field.ATTACHUSERFILE).Value;

         If &ATTACHUSERFILE_PV = "" Then
            /*The control comes here for the new file being uploaded if has invalid extension*/
            &RS_Level1.Refresh(); /* Refresh the Attachement Scroll*/
            Attach_Scroll_Refresh(&RS_Level1); /* Clear the scroll from the page if the 1st file being uploaded is invalid*/
            Error MsgGet(20011, 5, "The Upload File do not have a valid extension.", &ATTACHUSERFILE_);
         Else
            /*The control comes here for the old file uploaded if has invalid extension*/
            MessageBox(0, "", 20011, 6, "The existing Uploaded File do not have a valid extension, please delete it if not required in future.", &ATTACHUSERFILE_PV);
         End-If;
      End-If;
   End-If;

End-For;
catch Exception &exp

Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
REM *** Display the Message Text and Message Explain Text and then FAIL it!!! ***;
REM Error (&handler.getMessageText(&exp));
MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageText(&exp));
rem Error (&handler.getMessageExplainText(&exp));
end-try;
/* End, ANZ002, Jyothirmayi P, 29/12/2010*/

rem Find out who's adding the attachment;
If %Component = Component.ANZNZ_IPF_VMUDTL Then
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).ShowRequiredFieldCue = True;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
Else
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = True;
   &RS_Level1.GetRow(1).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).ShowRequiredFieldCue = True;
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = True;
   &RS_Level1.GetRow(1).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = True
End-If;
/* Begin, ANZ002, Jyothirmayi P, 29/12/2010*/
/* Moved the below code into the function Attach_Scroll_Refresh for reusability

For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
   If &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value = "" Then
      &RS_Level1.HideAllRows();
   Else
      &RS_Level1.ShowAllRows();
   End-If;
End-For;*/
Attach_Scroll_Refresh(&RS_Level1);

/* End, ANZ002, Jyothirmayi P, 29/12/2010*/
/* End ANZ001, Prashant Prakash, 04/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 05/02/2010 */
/* Adding the Add Attachment Functionality for IPFs. */

/* Begin ANZ001, Prashant Prakash, 05/02/2010 */

import SCM_CS_ATTACHMENTS:*;

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Row &Row_Level1;
Local Record &LVL0REC;
Local string &FTP_URL;
Local number &ANZCounterI_;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

&FTP_URL = GetURL(URL.PV);
&KEY_TBL = Record.ANZ_IPF_ATTACH;

If Not All(&ANZAdmin_) Then
   &ANZAdmin_ = create SCM_CS_ATTACHMENTS:Admin();
End-If;

For &ANZCounterI_ = &RS_Level1.ActiveRowCount To 1 Step - 1
   &ANZSCMAttachID_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
   &ANZAttVersion_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.ATT_VERSION).Value;
   &ATTACHSYSFILENAME = &ANZSCMAttachID_ | &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
   rem MessageBox(0, "", 0, 0, "&ATTACHSYSFILENAME " | &ATTACHSYSFILENAME);
   rem Local string &ANZAttachUrl = &ANZAdmin_.FormUrlFilePath(&ANZSCMAttachID_, &ANZAttVersion_, "N");
   rem &ANZSysFileName = &ANZAdmin_.FindSysFileName(&ANZSCMAttachID_, &ANZAttVersion_);
   If (&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Value = "Y") Then
      Local number &ANZDelRetCode_ = DeleteAttachment(&FTP_URL, &ATTACHSYSFILENAME);
      rem Local number &ANZDelRetCode_ = DeleteAttachment(&ANZAttachUrl, &ANZSysFileName);
      If &ANZDelRetCode_ <> %Attachment_Success Then
         /** throw error **/
         &ANZAdmin_.ErrorHandling(&DelRetCode, "");
         rem Warning (MsgGetText(137, 1, "File Attachment Status"));
      Else
         &RS_Level1.DeleteRow(&ANZCounterI_);
         If (&RS_Level1.ActiveRowCount = 1) And
               None(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
            &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Enabled = False;
            &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.DESCR100).Enabled = False;
         End-If;
         &ANZAdmin_.DeletePVAttach(&ANZSCMAttachID_, &ANZAttVersion_);
         /** commenting the delete here as PS has a delivered method to do that **/
         rem SQLExec("DELETE FROM PS_PV_ATTACHMENTS WHERE SCM_ATTACH_ID = :1", &ANZSCMAttachID_);
         rem SQLExec("DELETE FROM PS_ANZ_IPF_ATTACH WHERE SCM_ATTACH_ID = :1", &ANZSCMAttachID_);
      End-If;
   Else
      rem User has not selected any file for deletion or find out if there are any files which have to be deleted;
      If (&RS_Level1.ActiveRowCount = 1) And
            None(&RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
         ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
      End-If;
   End-If;
End-For;
If (&RS_Level1.ActiveRowCount = 1) And
      None(&RS_Level1.GetRow(1).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) Then
   ANZNZ_IPF_DRV.DELETE_BUTTON.Enabled = False;
End-If;

/*
If Not (&RS_Level1(CurrentRowNumber()).Selected) Then
   &ANZalreadyselected_ = "N";
End-If;
If (&ANZalreadyselected_ = "N") Then
   MessageBox(0, "", 0, 0, "Please select at least one file");
End-If;
&ANZSCMAttachID_ = &RS_Level1.GetRow(CurrentRowNumber()).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
&ATTACHSYSFILENAME = &ANZSCMAttachID_ | &RS_Level1.GetRow(CurrentRowNumber()).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
MessageBox(0, "", 0, 0, "&ATTACHSYSFILENAME " | &ATTACHSYSFILENAME);
*/
/* End ANZ001, Prashant Prakash, 05/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 04/02/2010 */
/* Ensure that the user selects at least one file/attachment for deletion */

/* Begin ANZ001, Prashant Prakash, 04/02/2010 */

Local Rowset &RS_LEVEL0, &RS_Level1;
Local Record &LVL0REC;
Local Row &Row_Level1;
Local string &check_box, &selected;
Local number &ANZCounterI_;

&RS_LEVEL0 = GetLevel0();
&LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
&Row_Level1 = &RS_LEVEL0.GetRow(1);
&RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);
&selected = "N";

For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
   &check_box = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZNZ_IPF_DRV).GetField(Field.ACTIVE_FLG).Value;
   If &check_box = "Y" Then
      &selected = "Y";
   End-If;
End-For;
If &selected = "Y" Then
   rem EndModal(1);
Else
   Error MsgGet(21500, 67, "Please select one or more lines.");
End-If;


/* End ANZ001, Prashant Prakash, 04/02/2010 */

/* ANZWR20908, ANZ001, Prashant Prakash, 05/02/2010 */
/* Ensure that the user uploads at least one supporting document prior to submitting the IPF */

/* Begin ANZ001, Prashant Prakash, 05/02/2010 */
Function ValidateIPFAttachment(&ANZIPFBU_ As string, &ANZIPFID_ As string)


   &RS_LEVEL0 = GetLevel0();
   &LVL0REC = &RS_LEVEL0.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
   &Row_Level1 = &RS_LEVEL0.GetRow(1);
   &RS_Level1 = &Row_Level1.GetRowset(Scroll.ANZ_IPF_ATTACH);

   If None(&RS_Level1.GetRow(1).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value) And
         (&LVL0REC.ANZNZ_IPF_ID.value = "NEXT") Then
      rem SQLExec("SELECT COUNT(1) FROM PS_ANZ_IPF_ATTACH WHERE BUSINESS_UNIT = :1 AND ANZNZ_IPF_ID = :2", &ANZIPFBU_, &ANZIPFID_, &ANZAttachCount_);
      rem If (&ANZAttachCount_ = 0) Then;
      SetCursorPos(Page.ANZ_IPF_ATTACHMENT, ANZNZ_IPF_DRV.ATTACHADD);
      Error (MsgGet(21500, 66, "Message Not Found"));
      rem End-If;
   Else
      For &ANZCounterI_ = 1 To &RS_Level1.ActiveRowCount
         &ANZSCMAttachID_ = &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.SCM_ATTACH_ID).Value;
         &ATTACHSYSFILENAME = &ANZSCMAttachID_ | &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.PV_ATTACH_WRK).GetField(Field.ATTACHUSERFILE).Value;
         &RS_Level1.GetRow(&ANZCounterI_).GetRecord(Record.ANZ_IPF_ATTACH).GetField(Field.FILENAMECONCAT).Value = &ATTACHSYSFILENAME;
      End-For;
   End-If;

End-Function;

ValidateIPFAttachment(ANZNZ_IPFHEADER.BUSINESS_UNIT.Value, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value);

/* End ANZ001, Prashant Prakash, 05/02/2010 */

SELECT CASE WHEN ROLEUSER_ALT IS NULL THEN ROLEUSER WHEN ROLEUSER_ALT IS NOT NULL AND GETDATE() BETWEEN EFFDT_FROM AND EFFDT_TO THEN ROLEUSER_ALT ELSE ROLEUSER END AS ROLEUSER, ROLEUSER AS INUSER FROM PS_ROLEXLATOPR WHERE ROLEUSER = :1

/* ANZNZWR01836, ANZ001, Sameer Khanna, 01/04/2005 */
/* ANZNZWR04393, ANZ002, Sameer Khanna, 14/02/2007 */
/* ANZWR18632, ANZ003, Prashant Prakash, 10/12/2009 */
/* Begin ANZ001, Sameer Khanna, 01/04/2005 */
/* Go Button processing on the IPF Entry page */
/* to change the fields depending on what has been chosen */

Declare Function ANZ_DisableRecordFields PeopleCode ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS FieldFormula;
Declare Function ANZ_DisableAllIPFPageFields PeopleCode ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS FieldFormula;
Component string &IsComponentInError;
/* Begin ANZ002, Sameer Khanna, 14/02/2007 */
Declare Function ANZ_MarkWLWithAction PeopleCode ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS FieldFormula;

/* Begin ANZ003, Prashant Prakash, 11/12/2009 */
Function CreateApprovalHierarchy

   Local string &ANZFlushApprHierarchy_ = "DELETE ANZ_IPF_APPR_HIERARCHY WHERE BUSINESS_UNIT = :1 AND ANZNZ_IPF_ID = :2";
   rem Flush the Approval Hierarchy Table for the current IPF;
   SQLExec(&ANZFlushApprHierarchy_, ANZNZ_IPFHEADER.BUSINESS_UNIT.Value, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value);
   rem &ANZCTESQLString_ = MsgGetExplainText(21500, 64, "Msg not found");
   Local SQL &ANZCTESQLString_ = GetSQL(SQL.ANZ_IPF_APPR_HIER_2_SQL);
   Local string &ANZSQLStringValue_ = &ANZCTESQLString_.Value;
   rem Issue reported when people have delegate setup;
   Local SQL &ANZIdentifyDelegateSQL_ = GetSQL(SQL.ANZ_IPF_IDENTIFY_DELEGATE_SQL, ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value);
   If &ANZIdentifyDelegateSQL_.Fetch(&ANZRoleUser_, &ANZInUser_) Then <*
      /* This check needs to be in place to cater for multiple levels of delegation. 
         For example 3A delegates 1A and 4A delegates 3A. In this case the SQL will fail 
      */
      &ANZIndex_ = 0;
      Repeat
         &ANZIndex_ = &ANZIndex_ + 1;
         MessageBox(0, "", 0, 0, "&ANZIndex_ " | &ANZIndex_);
         &ANZRecursiveDelegateSQL_ = GetSQL(SQL.ANZ_IPF_IDENTIFY_DELEGATE_SQL, &ANZRoleUser_);
         If &ANZRecursiveDelegateSQL_.Fetch(&ANZRoleUser_, &ANZInUser_) Then
            MessageBox(0, "", 0, 0, "&ANZRoleUser_ " | &ANZRoleUser_ | " &ANZInUser_ " | &ANZInUser_);
            &ANZDrillDownRoleUser_ = &ANZRoleUser_;
         End-If;
      Until (&ANZRoleUser_ = &ANZInUser_ Or
         &ANZIndex_ >= 100);
      MessageBox(0, "", 0, 0, "SQL - > " | &ANZIdentifyDelegateSQL_.Value);
   *>
   Else
      &ANZRoleUser_ = ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value;
   End-If;
   rem MessageBox(0, "", 0, 0, "&ANZRoleUser_ " | &ANZRoleUser_ | " Approver " | ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value | " Drill " | &ANZDrillDownRoleUser_);
   &ANZIdentifyDelegateSQL_.Close();
   rem &ANZRecursiveDelegateSQL_.Close();
   rem Using CTE find the Approval Hierarchy;
   rem SQLExec(&ANZSQLStringValue_, ANZNZ_IPFHEADER.ANZNZ_IPF_APPROVER.Value, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value, ANZNZ_IPFHEADER.GROSS_AMT.Value, ANZNZ_IPFHEADER.BUSINESS_UNIT.Value);
   SQLExec(&ANZSQLStringValue_, &ANZRoleUser_, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value, ANZNZ_IPFHEADER.GROSS_AMT.Value, ANZNZ_IPFHEADER.BUSINESS_UNIT.Value);

End-Function;

/* End ANZ003, Prashant Prakash, 11/12/2009 */

/* End ANZ002, Sameer Khanna, 14/02/2007 */
Evaluate ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION
When = "C"

   /* If C (Cancelled), disable everything)*/

   DoSaveNow();

   If &IsComponentInError <> "True" Then

      ANZ_DisableAllIPFPageFields();
      /* including the action and Go fields */
      ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION.Enabled = False;
      ANZNZ_IPFWF_DRV.ANZNZ_IPF_GOPB.Enabled = False;
      ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS = "C";
      /* Begin ANZ002, Sameer Khanna, 14/02/2007 */
      /* Mark it with cancelled status*/
      ANZ_MarkWLWithAction(ANZNZ_IPFHEADER.BUSINESS_UNIT, ANZNZ_IPFHEADER.ANZNZ_IPF_ID, %OperatorId, ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS);
      /* End ANZ002, Sameer Khanna, 14/02/2007 */
      DoSave();
   End-If;
   Break;
When = "P"

   /* When P (Pending approval), disable the page */
   DoSaveNow();

   If &IsComponentInError <> "True" Then
      /* Begin ANZ003, Prashant Prakash, 11/12/2009 */
      rem Commenting it here as the User may still want to change the Approver if the Hierarchy is broken;
      rem ANZ_DisableAllIPFPageFields();
      /* including the action and Go fields */
      ANZNZ_IPFWF_DRV.ANZNZ_IPFOPRACTION.Enabled = False;
      ANZNZ_IPFWF_DRV.ANZNZ_IPF_GOPB.Enabled = False;
      /* End ANZ003, Prashant Prakash, 11/12/2009 */
      /* Begin ANZ002, Sameer Khanna, 14/02/2007 */
      /* See if currently rejected, then it must be for resubitting. No need for initial submission as it does not have an associated worklist */
      If ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS = "D" Then
         /* This has been a case of rejected IPF resubmitted */
         ANZ_MarkWLWithAction(ANZNZ_IPFHEADER.BUSINESS_UNIT, ANZNZ_IPFHEADER.ANZNZ_IPF_ID, %OperatorId, "R");
      End-If;
      /* End ANZ002, Sameer Khanna, 14/02/2007 */
      ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS = "P";

      DoSave();
      /* Begin ANZ003, Prashant Prakash, 11/12/2009 */
      rem CreateApprovalHierarchy();
      ANZNZ_IPFWF_DRV.APPROVAL_HISTORY.Visible = True;
      /* End ANZ003, Prashant Prakash, 11/12/2009 */

   End-If;
   Break;
When = "N"

   /* When New, Simply save the page No need for workflow */
   DoSave();
   /* Begin ANZ003, Prashant Prakash, 11/12/2009 */
   rem CreateApprovalHierarchy();
   ANZNZ_IPFWF_DRV.APPROVAL_HISTORY.Visible = True;
   /* End ANZ003, Prashant Prakash, 11/12/2009 */
   Break;
End-Evaluate;

/* End ANZ001, Sameer Khanna, 01/04/2005 */

/* ANZNZWR01836, ANZ001, Sameer Khanna, 01/04/2005 */
/* Begin ANZ001, Sameer Khanna, 01/04/2005 */
/* For the workflow scenarios, may invoke Virtual Router and other workflow related tasks */
/* Depending on what has been requested in the save edit event */


/* ANZWR02405, ANZ002, Sameer Khanna, 29/09/2005 */
/* In case of approval from Owner, creator to get a mail */

/* ANZWR02392, ANZ003, Sameer Khanna, 26/11/2005 */
/* Changes for denial worklist routing */

/* ANZWR02648, ANZ004, Sameer Khanna, 23/02/2006 */
/* Change the WF Routing so that the user is taken to the Worklist item directly from the email link */
/* rather than the Worklist page. The code provides a way to find the correct worklist name, in such */
/* cases, where %WLName variable is blank */

/* ANZWR18632, ANZ005, Prashant Prakash, 03/12/2009 */
/* Throwing a forced exception when the Approval Chain is broken. */

Declare Function ANZ_DebugMessage PeopleCode ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS FieldFormula;
Declare Function Virtual_Router PeopleCode APPR_VA0_WRK.FUNCLIB_02 FieldFormula;

Component string &NextWFOperation;
Component string &DoMarkWorklist;
Component string &IsComponentInError;

/* Begin ANZ003, Sameer Khanna, 26/11/2005 */
Declare Function ANZ_MarkWLItemWorked PeopleCode ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS FieldFormula;
Component string &RemoveDeniedWL;
Component string &ANZ_WLNAME;
Component string &ANZ_WLINSTANCE;

/* End ANZ003, Sameer Khanna, 26/11/2005 */
/* Begin ANZ005, Prashant Prakash, 03/12/2009 */
REMARK Encapsulating the entire Workflow PeopleCode in try-catch statement;
try
/* End ANZ005, Prashant Prakash, 03/12/2009 */
If &IsComponentInError <> "True" Then
   Evaluate &NextWFOperation
   When = "CallVirtualRouter"

      ANZ_DebugMessage("From WF event Calling VR");
      APPR_FIELDS_WRK.APPR_VR_ROW = 0;

      Virtual_Router();

      If None(ANZNZ_IPFHEADER.APPR_INSTANCE) Then
         ANZ_DebugMessage("In None(APPR_INSTANCE)");
         ANZNZ_IPFHEADER.APPR_INSTANCE = APPR_FIELDS_WRK.APPR_INSTANCE;
         ANZ_DebugMessage("APPR_INSTANCE" | ANZNZ_IPFHEADER.APPR_INSTANCE);
      End-If;

      Break;

   When = "SendForVerification"
      &ret = TriggerBusinessEvent(BusProcess."ANZNZ_IPF_APPR_BP", BusActivity."ANZNZ_IPF_APPR_ACT", BusEvent."ANZ_IPF_VERIFY");
      Break;

   When = "SendVerificationResult" ;
      If ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS = "D" Then
         ANZ_DebugMessage("Sending Verification failure mail");
         rem sameerk-start;
         rem &ret = TriggerBusinessEvent(BusProcess.ANZNZ_IPF_APPR_BP, BusActivity.ANZNZ_IPF_APPR_ACT, BusEvent.ANZ_IPF_REJECT);
         &ret = TriggerBusinessEvent(BusProcess."ANZNZ_IPF_APPR_BP", BusActivity."ANZNZ_IPF_DENY_ACT", BusEvent."ANZ_IPF_DENIED");
         rem sameerk-stop;
         ANZ_DebugMessage("result of Sending Verification failure mail:" | &ret);
      End-If;

      /* Begin ANZ002, Sameer Khanna, 29/09/2005 */
      /* In case of Owner's approval and owners DFA > gross amount */
      /* Trigger mail to the creator */
      If ANZNZ_IPFHEADER.ANZNZ_IPF_STATUS = "A" Then
         &ret = TriggerBusinessEvent(BusProcess.ANZNZ_IPF_APPR_BP, BusActivity."ANZNZ_IPF_APPR_ACT", BusEvent."ANZ_IPF_AUTH");
      End-If;
      /* End ANZ002, Sameer Khanna, 29/09/2005 */
      Break;

   End-Evaluate;
   rem WinMessage("&RemoveDeniedWL: " | &RemoveDeniedWL, 0);
   rem WinMessage("&DoMarkWorklist : " | &DoMarkWorklist, 0);


   If &DoMarkWorklist = "Yes" Then
      &DoMarkWorklist = "";
      /* Begin ANZ004, Sameer Khanna, 23/02/2006 */
      /* Mark the Worklist if that is possible */
      If %WLName <> "" Then
         /* End ANZ004, Sameer Khanna, 23/02/2006 */
         &ret = MarkWLItemWorked();
         /* Begin ANZ004, Sameer Khanna, 23/02/2006 */
         /* Else mark it done yourself. */
      Else
         ANZ_MarkWLItemWorked(%OperatorId);
      End-If;
      /* End ANZ004, Sameer Khanna, 23/02/2006 */
      If %Page = Page.ANZNZ_IPF_APPR_PG Then
         /* Disable the page fields */
         ANZNZ_IPFWF_DRV.ANZNZ_IPF_APPRPB.Enabled = False;
         ANZNZ_IPFWF_DRV.ANZNZ_IPF_REJECTPB.Enabled = False;
         ANZNZ_IPFHEADER.COMMENTS_2000.Enabled = False;
      End-If;
      /* Begin ANZ003, Sameer Khanna, 26/11/2005 */
   Else
      If &RemoveDeniedWL = "Yes" Then
         ANZ_MarkWLItemWorked(ANZNZ_IPFHEADER.OPRID);
      End-If;
      /* End ANZ003, Sameer Khanna, 26/11/2005 */
   End-If;
End-If;
catch Exception &E

throw CreateException(21500, 63, "Message Not Found");
end-try;
/* End ANZ001, Sameer Khanna, 01/04/2005 */

/* ANZWR18632, ANZ001, Prashant Prakash, 27/11/2009 */
/* Added code to default the Payment Terms Code Description on the IPF Arrpoval Page. 
   Since it is the same defaulting logic being used, it should be put in a function.
*/

/* Begin ANZ001, Prashant Prakash, 27/11/2009 */
Local SQL &ANZVendorLocAddr_, &ANZVendorPymntTermsCode_;
Local SQL &ANZVendorLocPTC_, &ANZVendorLocYPTC_;
Local string &ANZVendorSETID_, &ANZSQLString1_, &ANZVendorPTermsCode_, &ANZPymntTermsCode_;
Local Rowset &LVL0RS;
Local Record &LVL0REC;

&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);

If All(&LVL0REC.VENDOR_ID.Value) Then

   REMARK Retrieve the Vendor SETID;
   &ANZVendorSETID_ = GetSetId("BUSINESS_UNIT", &LVL0REC.BUSINESS_UNIT.Value, "VENDOR", "");
   rem MessageBox(0, "", 0, 0, "&ANZVendorSETID_ " | &ANZVendorSETID_);
   REMARK Now retrieve the Default Location and Primary Address for the Vendor ID selected on the page;
   &ANZVendorLocAddr_ = GetSQL(SQL.ANZ_IPF_VENDOR_SETID_SQL, &ANZVendorSETID_, &LVL0REC.VENDOR_ID.Value);
   While &ANZVendorLocAddr_.Fetch(&ANZVenDefLoc_, &ANZVenDefAddr_);
      rem MessageBox(0, "", 0, 0, "1 " | &ANZVenDefLoc_ | " 2 " | &ANZVenDefAddr_);
      &LVL0REC.VNDR_LOC.Value = &ANZVenDefLoc_;
      &LVL0REC.ADDRESS_SEQ_NUM.Value = &ANZVenDefAddr_;
   End-While;

   REMARK Display the Payment Terms Description for the Vendor;

   &ANZSQLString1_ = "SELECT PYMNT_TERMS_CD FROM PS_VENDOR_LOC WHERE SETID = :1 AND VENDOR_ID = :2 AND VNDR_LOC = :3";
   rem MessageBox(0, "", 0, 0, "1 -> " | &ANZVendorSETID_ | " 2 -> " | ANZNZ_IPFHEADER.VENDOR_ID.Value | " 3 -> " | ANZNZ_IPFHEADER.VNDR_LOC.Value);
   &ANZVendorLocPTC_ = CreateSQL(&ANZSQLString1_, &ANZVendorSETID_, &LVL0REC.VENDOR_ID.Value, &LVL0REC.VNDR_LOC.Value);
   While &ANZVendorLocPTC_.Fetch(&ANZVendorPTermsCode_)

      rem MessageBox(0, "", 0, 0, "Vendor Payment Terms Code " | &ANZVendorPTermsCode_);

      If All(&ANZVendorPTermsCode_) Then
         rem MessageBox(0, "", 0, 0, "If");
         REMARK Retrieve the description of the Payment Terms Code from PS_PYMT_TRMS_HDR;
         &ANZVendorLocYPTC_ = GetSQL(SQL.ANZ_IPF_VNDR_PYMT_TRMS_CD1_SQL, &LVL0REC.BUSINESS_UNIT.Value, &ANZVendorPTermsCode_);
         While &ANZVendorLocYPTC_.Fetch(&ANZPTCSETID_, &ANZPTCode_, &ANZPymntTermsDescr_);
            ANZNZ_IPF_DRV.DESCR.Value = &ANZPymntTermsDescr_;
         End-While;
      Else
         rem MessageBox(0, "", 0, 0, "Else");
         REMARK Retrieve the Payment Terms Code from AP BU Definition;
         &ANZVendorPymntTermsCode_ = GetSQL(SQL.ANZ_IPF_VNDR_PYMT_TERMS_CD_SQL, &LVL0REC.BUSINESS_UNIT.Value);
         While &ANZVendorPymntTermsCode_.Fetch(&ANZPymntTermsCodeDescr_);
            ANZNZ_IPF_DRV.DESCR.Value = &ANZPymntTermsCodeDescr_;
         End-While;
      End-If;
   End-While;
End-If;

/* End ANZ001, Prashant Prakash, 27/11/2009 */

/* ANZWR18632, ANZ001, Prashant Prakash, 11/12/2009 */
/* Begin ANZ001, Prashant Prakash, 11/12/2009 */
/* Reintialize the scroll to fetch the latest information */
Component string &ANZApprSymbolFlag_;
Local Rowset &ANZLEVEL1_;
Local number &ANZROW_;

If (ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value <> "NEXT") Then
   ScrollFlush(Record.ANZ_IPF_APPR_VW);
   ScrollSelect(1, Record.ANZ_IPF_APPR_VW, Record.ANZ_IPF_APPR_VW);

   Local string &ANZValidateIPFHierarchy_ = "SELECT 'X' FROM ANZ_IPF_APPR_HIERARCHY where ANZNZ_IPF_ID = :1 and %substring(ROLEUSER, 1, 2) = '->'";
   &ANZApprSymbolFlag_ = "";
   SQLExec(&ANZValidateIPFHierarchy_, ANZNZ_IPFHEADER.ANZNZ_IPF_ID.Value, &ANZApprSymbolFlag_);
   rem Define the Styles;
   &err_style = "PSERROR";
   &normal_style = "PSHYPERLINK";

   &ANZLEVEL1_ = GetRowset(Scroll.ANZ_IPF_APPR_VW);
   &ANZROW_ = &ANZLEVEL1_.RowCount;

   If All(&ANZApprSymbolFlag_) Then
      /* Approval Chain is in order */
      For &I = 1 To &ANZLEVEL1_.ActiveRowCount
         &ANZTempPos_ = Find("->", &ANZLEVEL1_.GetRow(&I).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.Value);
         &ANZRoleUser_ = Substitute(&ANZLEVEL1_.GetRow(&I).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.Value, "->", "");
         &ANZRoleUser_ = Substitute(&ANZRoleUser_, "<-", "");
         &ANZLEVEL1_.GetRow(&I).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.Value = &ANZRoleUser_;
         &ANZLEVEL1_.GetRow(&I).GetRecord(Record.ANZNZ_IPFOPR_VW).OPRDEFNDESC.Value = &ANZLEVEL1_.GetRow(&I).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.GetRelated(ANZNZ_IPFOPR_VW.OPRDEFNDESC).Value;
         If (&ANZTempPos_ <> 0) Then
            ANZNZ_IPF_DRV.LEGAL_DESCR.Visible = False;
            &ANZLEVEL1_.GetRow(&I).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.Style = &normal_style;
         End-If;
      End-For;
   Else
      /* Approval Chain is broken */
      If All(&ANZLEVEL1_.GetRow(&ANZROW_).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.Value) Then
         ANZNZ_IPF_DRV.LEGAL_DESCR.Visible = True;
         ANZNZ_IPF_DRV.LEGAL_DESCR.Value = MsgGetExplainText(21500, 65, "Message Not Found");
         &ANZLEVEL1_.GetRow(&ANZROW_).GetRecord(Record.ANZ_IPF_APPR_VW).ROLEUSER.Style = &err_style;
      End-If;
   End-If;
End-If;
/* End ANZ001, Prashant Prakash, 11/12/2009 */

/* ANZNZWR01836, ANZ001, Sameer Khanna, 01/04/2005 */
/* ANZWR18632, ANZ002, Prashant Prakash, 25/11/2009 */
/* Begin ANZ001, Sameer Khanna, 01/04/2005 */
/* Sets the cursor on the Invoice ID field initially */

SetCursorPos(%Page, ANZNZ_IPFHEADER.INVOICE_ID, 1);

/* End ANZ001, Sameer Khanna, 01/04/2005 */

/* Begin ANZ002, Prashant Prakash, 25/11/2009 */

Local SQL &ANZVendorLocAddr_, &ANZVendorPymntTermsCode_;
Local SQL &ANZVendorLocPTC_, &ANZVendorLocYPTC_;
Local string &ANZVendorSETID_, &ANZSQLString1_, &ANZVendorPTermsCode_, &ANZPymntTermsCode_;
Local Rowset &LVL0RS;
Local Record &LVL0REC;

&LVL0RS = GetLevel0();
&LVL0REC = &LVL0RS.GetRow(1).GetRecord(Record.ANZNZ_IPFHEADER);
rem Hide the Approval Hierarchy Hyperlink;
If %Mode = "A" Then
   ANZNZ_IPFWF_DRV.APPROVAL_HISTORY.Visible = False;
Else
   ANZNZ_IPFWF_DRV.APPROVAL_HISTORY.Visible = True;
End-If;
If All(&LVL0REC.VENDOR_ID.Value) Then

   REMARK Retrieve the Vendor SETID;
   &ANZVendorSETID_ = GetSetId("BUSINESS_UNIT", &LVL0REC.BUSINESS_UNIT.Value, "VENDOR", "");
   rem MessageBox(0, "", 0, 0, "&ANZVendorSETID_ " | &ANZVendorSETID_);

   REMARK Display the Payment Terms Description for the Vendor;

   &ANZSQLString1_ = "SELECT PYMNT_TERMS_CD FROM PS_VENDOR_LOC WHERE SETID = :1 AND VENDOR_ID = :2 AND VNDR_LOC = :3";
   rem MessageBox(0, "", 0, 0, "1 -> " | &ANZVendorSETID_ | " 2 -> " | ANZNZ_IPFHEADER.VENDOR_ID.Value | " 3 -> " | ANZNZ_IPFHEADER.VNDR_LOC.Value);
   &ANZVendorLocPTC_ = CreateSQL(&ANZSQLString1_, &ANZVendorSETID_, &LVL0REC.VENDOR_ID.Value, &LVL0REC.VNDR_LOC.Value);
   While &ANZVendorLocPTC_.Fetch(&ANZVendorPTermsCode_)

      rem MessageBox(0, "", 0, 0, "Vendor Payment Terms Code " | &ANZVendorPTermsCode_);

      If All(&ANZVendorPTermsCode_) Then
         REMARK Retrieve the description of the Payment Terms Code from PS_PYMT_TRMS_HDR;
         &ANZVendorLocYPTC_ = GetSQL(SQL.ANZ_IPF_VNDR_PYMT_TRMS_CD1_SQL, &LVL0REC.BUSINESS_UNIT.Value, &ANZVendorPTermsCode_);
         While &ANZVendorLocYPTC_.Fetch(&ANZPTCSETID_, &ANZPTCode_, &ANZPymntTermsDescr_);
            ANZNZ_IPF_DRV.DESCR.Value = &ANZPymntTermsDescr_;
         End-While;
      Else
         REMARK Retrieve the Payment Terms Code from AP BU Definition;
         &ANZVendorPymntTermsCode_ = GetSQL(SQL.ANZ_IPF_VNDR_PYMT_TERMS_CD_SQL, &LVL0REC.BUSINESS_UNIT.Value);
         While &ANZVendorPymntTermsCode_.Fetch(&ANZPymntTermsCodeDescr_);
            ANZNZ_IPF_DRV.DESCR.Value = &ANZPymntTermsCodeDescr_;
         End-While;
      End-If;
   End-While;
End-If;
/* End ANZ002, Prashant Prakash, 25/11/2009 */

SELECT A.FIELDNAME FROM PSRECFIELDDB A WHERE RECNAME = :1 AND (A.USEEDIT - ((A.USEEDIT / 2) * 2)) <> 0 ORDER BY A.FIELDNUM

Declare Function setcheckbox PeopleCode PP_COMP_WRK.CHECKED FieldFormula;
Component array of string &recArray_;

rem Component integer &ORDER_COUNT;

&RS_Comp = GetRowset();
&I = CurrentRowNumber();

&CheckBool_ = setcheckbox(&RS_Comp, &I);
REM *** Enable the Generate Clause Button ONLY when the user has selected some of the records ***; <*
If Not (&CheckBool_) Then
   PP_GENERIC_WRK.DESCR2.Enabled = False;
Else
   PP_GENERIC_WRK.DESCR2.Enabled = True;
End-If;
*>
PP_GENERIC_WRK.DESCR3.Enabled = True;

Component array of string &recArray_;

Function setcheckbox(&RS_Comp As Rowset, &I As integer) Returns boolean

   If &RS_Comp.GetRow(&I).PP_COMP_WRK.CHECKED.Value = "Y" Then
      &sCompRecordName = &RS_Comp.GetRow(&I).PP_COMP_WRK.DESCR100_2.Value;
      For &J = 1 To &RS_Comp.ActiveRowCount
         &sRecordName = &RS_Comp.GetRow(&J).PP_COMP_WRK.DESCR100_2.Value;
         If &I <> &J Then
            If (&sCompRecordName = &sRecordName) Then
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Value = "Y";
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Enabled = False;
               &Bool_ = True;
            End-If;
            REM *** MAKE SURE YOU PUSH DISTINCT RECNAMES ***;
            &Found = &recArray_.Find(&sCompRecordName);
            If (&Found = 0) Then
               rem MessageBox(0, "", 0, 0, "Pushing > " | &I);
               &recArray_.Push(&sCompRecordName);
            End-If;
         End-If;
      End-For;
   Else
      &sCompRecordName = &RS_Comp.GetRow(&I).PP_COMP_WRK.DESCR100_2.Value;
      For &J = 1 To &RS_Comp.ActiveRowCount
         &sRecordName = &RS_Comp.GetRow(&J).PP_COMP_WRK.DESCR100_2.Value;
         If &I <> &J Then
            If (&sCompRecordName = &sRecordName) Then
               REM *** REMOVE THE RECORD(S) WHICH THE USER HAS DESELECTED ***;
               &Found = &recArray_.Find(&sCompRecordName);
               If ((&Found <> 0) And
                     (&RS_Comp.GetRow(&I).PP_COMP_WRK.CHECKED.Value = "N")) Then
                  rem MessageBox(0, "", 0, 0, "Popping > " | &I);
                  &recArray_.Pop();
               End-If;
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Value = "N";
               &RS_Comp.GetRow(&J).PP_COMP_WRK.CHECKED.Enabled = True;
               &Bool_ = False;
            End-If;
         End-If;
      End-For;
   End-If;
   Return &Bool_;
End-Function;

import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Local string &sTgtProjID_, &sDirPath_, &sAllSQLs_;
Local string &strClauseName_, &sFileStr_;
Local File &oALLSQLs_;
Local array of string &AS;
Local number &M;

Function GetFileAsString(&oFile As File) Returns string

   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;

   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");

   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();

   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);

      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();

   /*open up the file again so that addition things could be written to file */
   rem &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);

   Return &sFullFileContent;

End-Function;

Function ParseSQLFile(&strFilePart_ As string) Returns string

   Local string &strClause_, &ANZMatchBegin_;
   Local File &oSRCEXP_, &oTGTEXP_, &oTGTDEL_;
   Local File &oTGTIMP_, &oVERSQL_;

   REM *** DO NOT CLEAN THE FILE ***;
   rem &strFilePart_ = RTrim(Clean(&strFilePart_));
   rem &strFilePart_ = Substitute(&strFilePart_, Char(26), " "); /* Added this line to remove invalid characters */
   REM *** Search for the EXPORT/DELETE/IMPORT Clauses in the file ***;
   &ANZMatchBegin_ = Substring(&strFilePart_, 1, 3);
   Evaluate &ANZMatchBegin_
   When "EXP" /* EXPORT TABLE NAME SOURCE */

      REM *** Write 2 Export Files ***;
      &oSRCEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.dms", "W", %FilePath_Absolute);
      &oSRCEXP_.WriteLine(&strFilePart_);
      &oTGTEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.dms", "W", %FilePath_Absolute);
      &oTGTEXP_.WriteLine(&strFilePart_);
      Break;
   When "DEL" /* DELETE TABLE NAME */

      REM *** Write 1 Delete File ***;
      &oTGTDEL_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_02_TGTDELETE.dms", "W", %FilePath_Absolute);
      &oTGTDEL_.WriteLine(&strFilePart_);
      Break;
   When "IMP" /* IMPORT TABLE NAME */

      REM *** Write 1 Import File ***;
      &oTGTIMP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_03_TGTIMPORT.dms", "W", %FilePath_Absolute);
      &oTGTIMP_.WriteLine(&strFilePart_);
      Break;
   When "TAR" /* EXPORT TABLE NAME TARGET */
      &oTGTEXP_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.dms", "W", %FilePath_Absolute);
      &oTGTEXP_.WriteLine(&strFilePart_);
      Break;
   When-Other;
      rem It might be Comments or Verification statements;
      &oVERSQL_ = GetFile("D:\Temp\" | &sTgtProjID_ | "\ANZWR" | &sANZWRNumber_ | "_99_VerificationSQLs.sql", "W", %FilePath_Absolute);
      &oVERSQL_.WriteLine(&strFilePart_);
      Break;
   End-Evaluate;

   Return &strClause_;
End-Function;

/****************************/
REM ** Generate ExcelSheet **;
/****************************/
Function PPGenerateExcel4EachRecord()

   REM *** This function is responsible to generate ONE SpreadSheet/RECORD ***;
   Local File &RecSSFile_;
   Local ApiObject &Rec_QryObj_;
   Local Rowset &oRecSSRS_;
   Local string &sRecSSString_, &sSQLString_;
   Local Record &oRecSS_;
   Local string &sRecSS_, &sWhereClauseLong_;
   Local integer &iNumofRows_;

   try
   REM *** Make a new Directory to place all the generated SpreadSheets ***;
   &sRecDirPath_ = &sDirPath_ | "\" | "XLS";
   REM *** Make sure you clean the directory ***;
   rem RemoveDirectory(&sRecDirPath_, %FilePath_Absolute + %Remove_Subtree);
   REM *** Create a fresh directory ***;
   CreateDirectory(&sRecDirPath_, %FilePath_Absolute);
   REM *** This should be called within a loop ***;
   &oPP3SQL_ = GetSQL(SQL.PP_COMPRECFETCH_SQL, &sTgtProjID_, "E");
   While &oPP3SQL_.Fetch(&sRecSS_, &sWhereClauseLong_)

      rem &REC = CreateRecord(@("RECORD." | &sRecSS_));
      &RecSSFile_ = GetFile(&sRecDirPath_ | "\" | &sRecSS_ | "_" | %DbName | ".xls", "W", %FilePath_Absolute);
      REM *** Check to see if File is Open ***;
      If &RecSSFile_.IsOpen Then
         REM *** Be careful about the Users' language code on the User Profile ***;
         &Rec_QryObj_ = %Session.GetQuery();
         /* Initialising the Rowset & Values */
         &oRecSSRS_ = CreateRowset(@("RECORD." | &sRecSS_));
         &iNumofRows_ = &oRecSSRS_.Fill(" WHERE " | &sWhereClauseLong_);
         &sRecSSString_ = &Rec_QryObj_.FormatResultString(&oRecSSRS_, %Query_XLS, 1, &oRecSSRS_.ActiveRowCount);
         &RecSSFile_.WriteLine(&sRecSSString_);
      Else
         Error ("Error: Opening of File Failed");
      End-If;
      &RecSSFile_.Close();
   End-While;
   REM *** Exception Block ***;
   catch Exception &ex

   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM *** Display the Message Text and Message Explain Text and then FAIL it!!! ***;
   rem Error (&handler.getMessageText(&ex));
   MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageText(&ex));
   rem Error (&handler.getMessageExplainText(&ex));
   end-try;

End-Function;

/****************************/
REM *** ~~~ MAIN LINE ~~~ ***;
/****************************/
try
REM *** Physical Location of the Files is important to fix ***;
&sTgtProjID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
&sANZWRNumber_ = PP_COMP_QRY.WORK_ID.Value;
If All(&sANZWRNumber_) Then
   &sDirPath_ = "D:\Temp\" | &sTgtProjID_;
   If (PP_GENERIC_WRK.ADVANCED_FLAG = "Y") Then
      REM *** Make sure you clean the directory ***;
      RemoveDirectory(&sDirPath_, %FilePath_Absolute + %Remove_Subtree);
      REM *** Create a fresh directory ***;
      CreateDirectory(&sDirPath_, %FilePath_Absolute);
      &oALLSQLs_ = GetFile(&sDirPath_ | "\ANZWR" | &sANZWRNumber_ | "ALLSQLs_" | %Datetime | ".txt", "W", %FilePath_Absolute);
      &sAllSQLs_ = PP_COMP_QRY.SQL_STATEMENT.Value;
      &oALLSQLs_.WriteLine(&sAllSQLs_);
      &sFileStr_ = GetFileAsString(&oALLSQLs_);
      rem Parse the file;
      &AS = CreateArrayRept("", 0);
      &AS = Split(&sFileStr_, "--");
      For &M = 1 To &AS.Len
         &strClauseName_ = ParseSQLFile(&AS [&M]);
         /*
         If All(&strClauseName_) Then
            &Temp_ = " " | &strClauseName_ | ";" | &Temp_;
         Else
            rem Comments or SET Statements encountered;
         End-If;
         */
      End-For;
      MessageBox(0, "", 0, 0, "Files generated successfully under -- " | &sDirPath_);
   End-If;
Else
   MessageBox(0, "", 0, 0, "Please provide a valid WR number before generating files");
   PP_GENERIC_WRK.ADVANCED_FLAG.Value = "N";
End-If;
REM *** Call the function to generate spreadsheets for each record in the Project ***;
PPGenerateExcel4EachRecord();

catch Exception &ex

Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
REM Error (&handler.getMessageText(&ex));
MessageBox(0, "", 0, 0, "Unable To Create Directory : " | &handler.getMessageText(&ex));
REM Error (&handler.getMessageExplainText(&ex));
end-try;

Declare Function PopulateSearchKeys PeopleCode PP_GENERIC_WRK.DESCR1 FieldFormula;
Declare Function FlushCompRecScroll PeopleCode PP_GENERIC_WRK.DESCR1 FieldFormula;
Local number &I;

&sComponentName_ = PP_COMP_QRY.COMPONENT_ID.Value;
&oCompSQL_ = GetSQL(SQL.PP$COMP$SQL, &sComponentName_);
REM *** Keep this handy to check the actual SQL statement ***;
Local string &sSQLStringVal_ = &oCompSQL_.Value;

&RS_Level0 = GetLevel0();
&RowLevel0 = &RS_Level0.getRow(1);

&RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMP_WRK);
ScrollFlush(Record.PP_COMP_WRK);
REM *** Set the counter to 1. Please be aware that aware that at this point there is an additional blank row which needs to be deleted later ***;
&I = 1;
While &oCompSQL_.Fetch(&L3_, &L2, &L1, &L0, &sPageName, &sSearchRecName, &sRecName, &sParentRecName, &sFieldName, &sTableEditName, &sLabelIDName, &sLabelTextName)

   If &I <> 1 Then
      REM *** This ensures that the additional blank row is not there ***;
      &RS_Level1.InsertRow(&I - 1);
   End-If;
   &Rec_Level1 = &RS_Level1.getRow(&I).GetRecord(Record.PP_COMP_WRK);
   &Rec_Level1.DESCR100E.Value = &L3_;
   &Rec_Level1.DESCR100F.Value = &L2;
   &Rec_Level1.DESCR100G.Value = &L1;
   &Rec_Level1.DESCR100H.Value = &L0;
   &Rec_Level1.DESCR100.Value = &sPageName;
   &Rec_Level1.DESCR100_2.Value = &sRecName;
   &Rec_Level1.DESCR100_3.Value = &sParentRecName;
   &Rec_Level1.DESCR100_4.Value = &sFieldName;
   &Rec_Level1.DESCR100A.Value = &sTableEditName;
   &Rec_Level1.DESCR100B.Value = &sLabelIDName;
   &Rec_Level1.DESCR100C.Value = &sLabelTextName;
   &Rec_Level1.DESCR100D.Value = &sSearchRecName;
   &I = &I + 1;
End-While;

&sSrchRecName_ = &RS_Level1.getRow(1).GetRecord(Record.PP_COMP_WRK).GetField(Field.DESCR100D).Value;
PopulateSearchKeys(&sSrchRecName_);
REM *** Cater for records which do not conform to the key structure of the Component ***;
rem FlushCompRecScroll();


import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Component array of string &recArray_, &SqlStmtsArr_, &chkDupRecNameArr_;
Component string &Clause_;
Local Rowset &RS0_, &RS1_, &RS2_;
Local Row &Row1_;
Local Record &Rec1_, &Rec2_;
Local number &I_, &J_;
Local string &WhereClause_, &TempClause_;
Local SQL &SQLObject_, &SQLObjectFetch_;

Function getSQLTableName(&sRecName_ As string) Returns string

   Local string &SQLTABLENAME;
   SQLExec("SELECT SQLTABLENAME FROM PSRECDEFN WHERE RECNAME = :1", &sRecName_, &SQLTABLENAME);
   If &SQLTABLENAME = "" Or
         &SQLTABLENAME = " " Then
      Return ("PS_" | &sRecName_);
   Else
      Return (&SQLTABLENAME);
   End-If;

End-Function;

&SqlStmtsArr_ = CreateArrayRept("", 0);
&chkDupRecNameArr_ = CreateArrayRept("", 0);

try
&sANZWRNumber_ = PP_COMP_QRY.WORK_ID.Value;
&sANZProjectDescr_ = PP_COMP_QRY.DESCR50_MIXED.Value;
If All(&sANZWRNumber_) Then
   REM *** WHERE CLAUSE Fields at Level 1 ***;
   &ProjectID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
   &RS0_ = GetLevel0();
   &Row1_ = &RS0_.GetRow(1);
   &RS1_ = &Row1_.GetRowset(Scroll.PP_COMP_QRY_1);
   PP_COMP_QRY.SQL_STATEMENT.Value = "";
   &WhereClause_ = "";
   &Clause_ = "";
   &RecordObject_ = CreateRecord(@("RECORD.PP_COMP_QRY_3"));
   &SQLObject_ = CreateSQL("INSERT INTO %Table(:1) VALUES(:2, :3, :4, :5, :6)");
   &SQLObjectDelete_ = CreateSQL("DELETE %TABLE(:1) WHERE PROJECT_ID_TARGET = :2");
   REM *** FLUSH THE TABLE ***;
   &SQLObjectDelete_.execute(&RecordObject_, &ProjectID_);
   rem &SQLObjectFetch_ = CreateSQL("SELECT WHERE_CLAUSE FROM %Table(:1) WHERE ANZ_SQL_STMT_TYPE = :2", &RecordObject_, "E");
   rem &SQLObjectFetch_ = CreateSQL("SELECT 'EXPORT ' + 'PS_' + RECORDNAME + ' WHERE ' + WHERE_CLAUSE [STMT] FROM %Table(:1) WHERE ANZ_SQL_STMT_TYPE = :2", &RecordObject_, "E");
   &SQLObjectFetch_ = CreateSQL("SELECT RTRIM(RECORDNAME), WHERE_CLAUSE_LONG FROM %Table(:1) WHERE PROJECT_ID_TARGET = :2 AND ANZ_SQL_STMT_TYPE = :3", &RecordObject_, &ProjectID_, &STMTType_);
   &SQLObjectFetch_.ReuseCursor = True;
   REM *** Check to make sure that the User has set the values intelligently ***;
   &Clause_ = &Clause_ | Char(13) | "--Please be aware that table(s) below may have triggers on them  ";
   &Clause_ = &Clause_ | Char(13) | "--Verification  ";
   &Clause_ = &Clause_ | Char(13) | "SELECT db_name() as [DATABASE NAME], getdate() as [AS OF DATE STATE];";
   For &I_ = 1 To &RS1_.ActiveRowCount

      REM *** Level1 has the record names ***;
      &Rec1_ = &RS1_.GetRow(&I_).GetRecord(Record.PP_COMP_QRY_1);
      &RS2_ = &RS1_.GetRow(&I_).GetRowset(Scroll.PP_COMP_QRY_2);
      rem MessageBox(0, "", 0, 0, "Coming for Record --- " | &Rec1_.RECORDNAME.Value);
      &WhereClause_ = "";
      REM *** Make sure that the user is aware of any dependent triggers on SYNCID and SYNCDTTM ***; <*
   If (&I_ = 1) Then
      &Clause_ = "---Please be aware that table(s) below may have triggers on them---";
   Else
      REM *** DO NOTHING ***;
   End-If;
   REM *** COUNT(1) ***;
   &Clause_ = &Clause_ | Char(13) | "--Verification";
   &Clause_ = &Clause_ | Char(13) | "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " COUNT(1)[ROW COUNT] FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** EXPORT ***;
   &Clause_ = &Clause_ | Char(13) | "--EXPORT CLAUSE(S) -- SOURCE";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_EXP.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\XXXXX_EXP.DAT;";
   &Clause_ = &Clause_ | Char(13) | "EXPORT PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** DELETE ***;
   &Clause_ = &Clause_ | Char(13) | "--DELETE CLAUSE(S) -- TARGET";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_DEL.LOG;";
   &Clause_ = &Clause_ | Char(13) | "DELETE PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** IMPORT ***;
   &Clause_ = &Clause_ | Char(13) | "--IMPORT CLAUSE(S) -- TARGET";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_IMP.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET INPUT C:\TEMP\XXXXX_EXP.DAT;";
   &Clause_ = &Clause_ | Char(13) | "IMPORT PS_" | &Rec1_.RECORDNAME.Value | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** SELECT ***;
   &Clause_ = &Clause_ | Char(13) | "--SELECT CLAUSE(S) -- Config Workbook";
   &Clause_ = &Clause_ | Char(13) | "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13);
   REM *** Assign the clause to the PageField ***;
   PP_COMP_QRY.SQL_STATEMENT.Value = &Clause_;*>
      For &J_ = 1 To &RS2_.ActiveRowCount

         rem &WhereClause_ = "";
         REM *** Level2 has the WHERE criteria ***;
         &Rec2_ = &RS2_.GetRow(&J_).GetRecord(Record.PP_COMP_QRY_2);
         rem MessageBox(0, "", 0, 0, "Coming for Record --- " | &Rec2_.RECORDNAME.Value | " AND KeyName " | &Rec2_.KEYNAME.Value);
         Evaluate &Rec2_.PP_MATCH_KIND.Value
         When = 1 /*** = ***/
            ;
            If None(&WhereClause_) Then
               &WhereClause_ = &WhereClause_ | &Rec2_.KEYNAME.Value | " = '" | &Rec2_.WHERE_CLAUSE.Value | "'";
            Else
               &WhereClause_ = &WhereClause_ | " AND " | &Rec2_.KEYNAME.Value | " = '" | &Rec2_.WHERE_CLAUSE.Value | "'";
            End-If;
            If None(&Rec2_.WHERE_CLAUSE.Value) Then
               MessageBox(0, "", 0, 0, "Please provide a value for Row Number " | &J_);
            End-If;
            Break;
         When = 2 /*** IN ***/
            ;
            If None(&WhereClause_) Then
               &WhereClause_ = &WhereClause_ | &Rec2_.KEYNAME.Value | " IN " | &Rec2_.WHERE_CLAUSE.Value;
            Else
               &WhereClause_ = &WhereClause_ | " AND " | &Rec2_.KEYNAME.Value | " IN " | &Rec2_.WHERE_CLAUSE.Value;
            End-If;
            If (Len(&Rec2_.WHERE_CLAUSE.Value) = 2) Then
               MessageBox(0, "", 0, 0, "Please provide a valid IN CLAUSE for Row Number " | &J_);
            End-If;
            Break;
         When = 7 /*** LIKE ***/
            ;
            REM *** The Code below ensures that multiple '%' signs are not appended to the Where Clause ***;
            &ANZSuffix_ = Right(&Rec2_.WHERE_CLAUSE.Value, 1);
            If (&ANZSuffix_ = "%") Then
               &ANZWhereClauseNEW_ = &Rec2_.WHERE_CLAUSE.Value | "'";
            Else
               &ANZWhereClauseNEW_ = &Rec2_.WHERE_CLAUSE.Value | "%'";
            End-If;
            If None(&WhereClause_) Then
               &WhereClause_ = &WhereClause_ | &Rec2_.KEYNAME.Value | " LIKE '" | &ANZWhereClauseNEW_;
            Else
               &WhereClause_ = &WhereClause_ | " AND " | &Rec2_.KEYNAME.Value | " LIKE '" | &ANZWhereClauseNEW_;
            End-If;
            If (&Rec2_.WHERE_CLAUSE.Value = "%") Then
               rem MessageBox(0, "", 0, 0, "Row Number " | &J_ | " will not be part of the WHERE CLAUSE");
            End-If;
            Break;
         When-Other
            Error ("Invalid Option");
            Break;
         End-Evaluate;
      End-For;
      REM *** DELETE ***;
      &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "D", &WhereClause_);
      REM *** EXPORT SOURCE ***;
      &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "E", &WhereClause_);
      REM *** EXPORT TARGET ***;
      &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "T", &WhereClause_);
      REM *** IMPORT ***;
      &SQLObject_.Execute(&RecordObject_, &Rec1_.PROJECT_ID_TARGET.Value, &Rec1_.COMPONENT_ID.Value, &Rec1_.RECORDNAME.Value, "I", "");
      REM *** VERIFICATION ***;
      &sCorrectRecName_ = getSQLTableName(&Rec1_.RECORDNAME.Value);
      /* &VerClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " COUNT(1)[ROW COUNT] FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";";*/
      &VerClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " COUNT(1)[ROW COUNT] FROM " | &sCorrectRecName_ | " WHERE " | &WhereClause_ | ";";
      REM *** Push the Rec Names into an array ***;
      &chkDupRecNameArr_.Push(&Rec1_.RECORDNAME.Value);
      &sAdditionalNotes_ = &Rec1_.ADDITIONAL_NOTE.Value;
      rem &Clause_ = &Clause_ | Char(13) | &VerClause_ | Char(13) | "--" | &sAdditionalNotes_;
      &Clause_ = &Clause_ | Char(13) | &VerClause_;
      &SqlStmtsArr_.Push(&VerClause_);
      REM *** CONFIG WORKBOOK ***;
      /* &ConfigClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM PS_" | &Rec1_.RECORDNAME.Value | " WHERE " | &WhereClause_ | ";"; */
      /* &ConfigClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM " | &sCorrectRecName_ | " WHERE " | &WhereClause_ | ";"; */
      REM *** Taking the high road here. Hardcoding the ORDER BY Clause ***;
      &ConfigClause_ = "SELECT " | "'" | &Rec1_.RECORDNAME.Value | "'[TABLE NAME]," | " * FROM " | &sCorrectRecName_ | " WHERE " | &WhereClause_ | " ORDER BY 1, 2;";
      rem &Clause_ = &Clause_ | Char(13) | "--SELECT CLAUSE(S) -- Config Workbook";
      &Clause_ = &Clause_ | Char(13) | &ConfigClause_;
      REM *** DO NOT PUSH THIS CLAUSE ***;
      rem &SqlStmtsArr_.Push(&ConfigClause_);
   End-For;
   &chkDupRecNameArr_.Sort("A"); <*
REM *** Find out if User has added the same record more than once ***;
For &i = 1 To &chkDupRecNameArr_.Len
   &Temp = &chkDupRecNameArr_ [&i];
   For &j = 1 To &chkDupRecNameArr_.Len
      If (&i <> &j) Then
         &NewTemp = &chkDupRecNameArr_ [&j];
         If (&Temp = &NewTemp) Then
            MessageBox(0, "", 0, 0, "Duplicate Record Exists");
            MessageBox(0, "", 0, 0, "Please combine the Where Clauses and delete the redundant row(s)");
            MessageBox(0, "", 0, 0, "Where Clause for Record Name(s) " | &Temp | " could be combined");
            Break;
         End-If;
      End-If;
   End-For;
End-For;
*>
   rem writing export source;
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--EXPORT CLAUSE(S) SOURCE  ";
   /*
      &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\XXXXX_EXP.LOG;";
      &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\XXXXX_EXP.DAT;";
      */
   &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
   &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.DAT;";
   REM *** EXPORT CLAUSES SOURCE ***;
   &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "E");
   While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
      &sActualRecNameEXP_ = getSQLTableName(&RecName_);
      /* &ExportClause_ = "EXPORT PS_" | &RecName_ | " WHERE " | &TempClause_ | ";"; */
      &ExportClause_ = "EXPORT " | &sActualRecNameEXP_ | " WHERE " | &TempClause_ | ";";
      &Clause_ = &Clause_ | Char(13) | &ExportClause_;
      REM *** No Need to push DMS Statements ***;
      rem &SqlStmtsArr_.Push(&ExportClause_);
   End-While;

   REM *** Need to explicitly specify the Export Clause for the Target Environment ***;
   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--TARGET EXPORT CLAUSE(S)  ";
   &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
   &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET OUTPUT C:\TEMP\ANZWR" | &sANZWRNumber_ | "_01_TGTEXPORT.DAT;";
   REM *** EXPORT CLAUSES TARGET ***;
   &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "T");
   While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
      &sActualRecNameEXP_ = getSQLTableName(&RecName_);
      /* &ExportClause_ = "EXPORT PS_" | &RecName_ | " WHERE " | &TempClause_ | ";"; */
      &ExportClause_ = "EXPORT " | &sActualRecNameEXP_ | " WHERE " | &TempClause_ | ";";
      &Clause_ = &Clause_ | Char(13) | &ExportClause_;
      REM *** No Need to push DMS Statements ***;
      rem &SqlStmtsArr_.Push(&ExportClause_);
   End-While;

   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--DELETE CLAUSE(S) TARGET  ";
   &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
   &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_02_TGTDELETE.LOG;";
   REM *** DELETE CLAUSES ***;
   &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "D");
   While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
      &sActualRecNameDEL_ = getSQLTableName(&RecName_);
      /* &DeleteClause_ = "DELETE PS_" | &RecName_ | " WHERE " | &TempClause_ | ";"; */
      &DeleteClause_ = "DELETE " | &sActualRecNameDEL_ | " WHERE " | &TempClause_ | ";";
      &Clause_ = &Clause_ | Char(13) | &DeleteClause_;
      REM *** No Need to push DMS Statements ***;
      rem &SqlStmtsArr_.Push(&DeleteClause_);
   End-While;

   &Clause_ = &Clause_ | Char(13) | Char(13) | Char(13) | "--IMPORT CLAUSE(S) TARGET  ";
   &Clause_ = &Clause_ | Char(13) | "REM WR: " | &sANZWRNumber_ | ";";
   &Clause_ = &Clause_ | Char(13) | "REM Description: " | &sANZProjectDescr_ | ";";
   &Clause_ = &Clause_ | Char(13) | "SET LOG C:\TEMP\ANZWR" | &sANZWRNumber_ | "_03_TGTIMPORT.LOG;";
   &Clause_ = &Clause_ | Char(13) | "SET INPUT C:\TEMP\ANZWR" | &sANZWRNumber_ | "_00_SRCEXPORT.DAT;";
   REM *** IMPORT CLAUSES ***;
   &SQLObjectFetch_.Execute(&RecordObject_, &ProjectID_, "I");
   While &SQLObjectFetch_.Fetch(&RecName_, &TempClause_)
      &sActualRecNameIMP_ = getSQLTableName(&RecName_);
      /* &ImportClause_ = "IMPORT PS_" | &RecName_ | ";"; */
      &ImportClause_ = "IMPORT " | &sActualRecNameIMP_ | ";";
      &Clause_ = &Clause_ | Char(13) | &ImportClause_;
      REM *** No Need to push DMS Statements ***;
      rem &SqlStmtsArr_.Push(&ImportClause_);
   End-While;
   REM *** ASSIGN TO PAGE FIELD ***;
   PP_COMP_QRY.SQL_STATEMENT.Value = &Clause_;
Else
   MessageBox(0, "", 0, 0, "Please provide a valid WR number before generating files");
End-If;

catch Exception &ex

Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
REM Error (&handler.getMessageText(&ex));
MessageBox(0, "", 0, 0, "Exception Logged while generating SQL > " | &handler.getMessageText(&ex));
REM Error (&handler.getMessageExplainText(&ex));
end-try;

Component array of string &recArray_;
Local Rowset &RS_Level0, &RS_Level1, &RS_Level11, &RS_Level2;
Local Row &RowLevel0, &RowLevel1;
Local Record &Rec_Level1, &Rec_Level2, &Rec_Level11;
Local string &sComponentName_;
Local number &J, &iRowCount_, &K, &JK, &iSrchCount_;



REM *** Retrieve the current component name ***;
&sComponentName_ = PP_COMP_QRY.COMPONENT_ID.Value;
REM *** Retrieve Comp Buffer ***;
&RS_Level0 = GetLevel0();
&RowLevel0 = &RS_Level0.GetRow(1);
&RS_Level1 = &RowLevel0.GetRowset(Scroll.PP_COMP_QRY_1);
&RS_Level11 = &RowLevel0.GetRowset(Scroll.PP_COMPSRCHFLDS);
REM *** CHECK ARRAY LENGTH ***;
rem MessageBox(0, "", 0, 0, "Add To Project > Array Length " | &recArray_.Len);
REM *** ***;
REM *** Populate the Level 1 Scroll ***;
REM *** ***;
For &JK = 1 To &recArray_.Len
   &iRowCount_ = &RS_Level1.ActiveRowCount;
   If All(&RS_Level1.GetRow(&iRowCount_).GetRecord(Record.PP_COMP_QRY_1).COMPONENT_ID.Value) Then
      REM *** This ensures that the additional blank row is updated ***;
      &RS_Level1.InsertRow(&iRowCount_);
      rem &RS_Level1.InsertRow(1);
      &iRowCount_ = &iRowCount_ + 1;
   End-If;
   rem MessageBox(0, "", 0, 0, "RecName > " | &recArray_ [&JK] | " > " | &JK);
   &Rec_Level1 = &RS_Level1.GetRow(&iRowCount_).GetRecord(Record.PP_COMP_QRY_1);
   &Rec_Level1.COMPONENT_ID.Value = &sComponentName_;
   &Rec_Level1.RECORDNAME.Value = &recArray_ [&JK];
   &Rec_Level1.ADDITIONAL_NOTE.Value = "";
   &Rec_Level1.RECORDNAME.DisplayOnly = True;
   REM *** ***;
   REM *** Populate the WHERE CLAUSE GRID ***;
   REM *** ***;
   &RS_Level2 = &RS_Level1.GetRow(&iRowCount_).GetRowset(Scroll.PP_COMP_QRY_2);
   For &K = 1 To &RS_Level11.ActiveRowCount
      &InsertRows_ = &RS_Level11.RowCount;
      If &K <> 1 Then
         &RS_Level2.InsertRow(&K - 1);
      End-If;
      &RowLevel1 = &RS_Level11.GetRow(&K);
      &Rec_Level2 = &RS_Level2.GetRow(&K).GetRecord(Record.PP_COMP_QRY_2);
      &Rec_Level11 = &RS_Level11.GetRow(&K).GetRecord(Record.PP_COMPSRCHFLDS);
      &Rec_Level2.KEYNAME.Value = &Rec_Level11.FIELDNAME1.Value;
      &Rec_Level2.PP_MATCH_KIND.Value = &Rec_Level11.PP_MATCH_KIND.Value;
      &Rec_Level2.WHERE_CLAUSE.Value = &Rec_Level11.WHERE_CLAUSE.Value;
      rem &Rec_Level2.Insert();
   End-For;
   rem &Rec_Level1.Insert();
End-For;
PP_GENERIC_WRK.DESCR2.Enabled = True;

/* Import MCF for sending mails */
import PT_MCF_MAIL:*;
/* SCM_PORTAL */
import SCM_UTILITIES:Portal:portalURL;

Function GetUrl_() Returns string

   try
   Local SCM_UTILITIES:Portal:portalURL &GetPortalURL_ = create SCM_UTILITIES:Portal:portalURL();
   Local string &URL;
   rem How do I by pass the sign-on?;
   &URL = &GetPortalURL_.GenerateComponentPortalURL("PP_COMP_QRY", "PP_COMP_QRY", "PP_COMP_QRY_PG", "U", Null);
   Return &URL;
   catch Exception &ec
   Return "";
   end-try;
End-Function;

Function SendMailTo_(&emailAddress As string, &subject As string, &completeFileName As string, &fileName As string, &emailBody As string) Returns integer

   Local integer &rcEmail;
   Local string &msgBody, &emailText_, &URL_, &encodedText;
   Local PT_MCF_MAIL:MCFOutboundEmail &email = create PT_MCF_MAIL:MCFOutboundEmail();
   rem I dnt think that the function actually works;
   Local boolean &EmailIDValidate_ = ValidateEmailAddress(&emailAddress);

   &email.Recipients = &emailAddress;
   &email.Subject = &subject;
   &email.Text = &emailBody;
   /* Change the ContentType */
   Local PT_MCF_MAIL:MCFBodyPart &textPart;
   Local PT_MCF_MAIL:MCFBodyPart &htmlPart;
   Local PT_MCF_MAIL:MCFMultipart &multiPart;

   rem &textPart = create PT_MCF_MAIL:MCFBodyPart();
   &multiPart = create PT_MCF_MAIL:MCFMultipart();
   rem &multiPart.AddBodyPart(&textPart);
   rem &msgBody = GetHTMLText(HTML.ANZ_EMAIL_SKELETON, &emailAddress, "", "", "", "", "", "", "", "");
   &URL_ = GetUrl_();
   rem &emailText_ = GetHTMLText(HTML.ANZ_EMAIL_TEXT, &URL_, "Process could not be scheduled as the DMS contains PeopleTools Tables", "", "ANZDMS", "Data Mover", MsgGetText(18130, 15031, "EWN_Notification"), MsgGetText(18130, 15032, "Process_Name"), MsgGetText(18130, 15033, "Category"), MsgGetText(18130, 15030, "GoTo"), MsgGetText(18130, 15020, "Message_Detail"));
   &emailText_ = GetHTMLText(HTML.ANZ_COMP_DRILLDOWN, "Target Project Bundle has been created and is ready for migration", PP_COMP_QRY.PROJECT_ID_TARGET.Value, "Target Project Creation Notification", "Target Project ID: ", "Created By: ", %OperatorId, "Updated On: ", %PerfTime);
   &htmlPart = create PT_MCF_MAIL:MCFBodyPart();
   Local boolean &ret = EncodeText(&emailText_, "ISO_8859-1", "Q", &encodedText);
   rem uncomment the line below to revert the changes. currently commented to test the EncodeText function;
   rem &htmlPart.Text = &emailText_;
   rem encoding somehow doesn't seem to work;
   &htmlPart.Text = &encodedText;
   &htmlPart.ContentType = "text/html";
   /* Always use these MCFEmail Class Properties --START */
   rem Use the From to receive the read receipt;
   &email.From = "prashant.prakash@anz.com"; /* Sending the mail */
   &email.Priority = 1;
   &email.Importance = "high";
   &email.Sensitivity = "private";
   &email.Disposition = "attachment";
   rem &email.IsReturnReceiptReqd = True;
   &email.BounceTo = "prashant.prakash@anz.com";
   rem always returns false;
   &email.ReplyTo = "prashant.prakash@anz.com";
   /* Always use these MCFEmail Class Properties --END */
   &multiPart.AddBodyPart(&htmlPart);
   rem &multiPart.AddBodyPart(&textPart);
   Local string &ContentType_ = &multiPart.GetContentType();
   /* The attachment somehow does not come along with the email
   &multiPart.SubType = "alternative; differences=Content-type";
   */
   &email.MultiPart = &multiPart;
   REM *** Attach the generated files ***;
   &sTgtProjID_ = PP_COMP_QRY.PROJECT_ID_TARGET.Value;
   &DMSFile_path = "D:\Temp\" | &sTgtProjID_ | "\ANZWR*.dms";
   &ANZGenFileArrayDMS_ = FindFiles(&DMSFile_path, %FilePath_Absolute);
   For &iArrLenDMS_ = 1 To &ANZGenFileArrayDMS_.Len
      &fileName = &ANZGenFileArrayDMS_ [&iArrLenDMS_];
      &completeFileName = &fileName;
      &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   End-For;
   &SQLFile_path = "D:\Temp\" | &sTgtProjID_ | "\ANZWR*.sql";
   rem MessageBox(0, "", 0, 0, "File Path -- " | &File_path);
   &ANZGenFileArraySQL_ = FindFiles(&SQLFile_path, %FilePath_Absolute);
   For &iArrLenSQL_ = 1 To &ANZGenFileArraySQL_.Len
      &fileName = &ANZGenFileArraySQL_ [&iArrLenSQL_];
      &completeFileName = &fileName;
      &email.AddAttachment(&completeFileName, %FilePath_Absolute, &fileName, "", "", "");
   End-For;
   If FileExists(&completeFileName, %FilePath_Absolute) Then
      &rcEmail = &email.Send();
   Else
      rem &rcEmail will be blank. Need to set it here;
   End-If;
   rem &rcEmail = &email.Send();
   Return &rcEmail;
End-Function;

Local SQL &RecSrchKeysSQL_;

&RS0_ = GetLevel0();
&Row1_ = &RS0_.GetRow(1);
&RS1_ = &Row1_.GetRowset(Scroll.PP_COMP_QRY_1);
&LVL0REC = &RS0_.GetRow(1).GetRecord(Record.PP_COMP_QRY);
&sTgtProjID_ = &LVL0REC.PROJECT_ID_TARGET.Value; <*
For &I_ = 1 To &RS1_.ActiveRowCount
   &Rec1_ = &RS1_.GetRow(&I_).GetRecord(Record.PP_COMP_QRY_1);
   &RS2_ = &RS1_.GetRow(&I_).GetRowset(Scroll.PP_COMP_QRY_2);
   REM *** Lvl 2 ***;
   For &J_ = 1 To &RS2_.ActiveRowCount
      &Rec2_ = &RS2_.GetRow(&J_).GetRecord(Record.PP_COMP_QRY_2);
      &RecSrchKeysSQL_ = GetSQL(SQL.PP$REC$KEYS$SQL, &Rec2_.RECORDNAME.Value);
      rem ScrollFlush();
      &I = 1;
      While &RecSrchKeysSQL_.Fetch(&sFieldName_)
         If &I <> 1 Then
            REM *** This ensures that the additional blank row is not there ***;
            &RS2_.InsertRow(&I - 1);
         End-If;
         &Rec2_.KEYNAME.Value = &sFieldName_;
         &Rec2_.PP_MATCH_KIND.Value = "7";
         &Rec2_.WHERE_CLAUSE.Value = "";
         &I = &I + 1;
      End-While;
   End-For;
End-For;
*>
&RS2_ = &RS1_.GetRow(CurrentRowNumber()).GetRowset(Scroll.PP_COMP_QRY_2);
&Rec2_ = &RS2_.GetRow(1).GetRecord(Record.PP_COMP_QRY_2);
&sCompID_ = &Rec2_.COMPONENT_ID.Value;
&sRecName_ = &Rec2_.RECORDNAME.Value;
&RecSrchKeysSQL_ = GetSQL(SQL.PP$REC$KEYS$SQL, &Rec2_.RECORDNAME.Value);
REM *** BE CAREFUL, I'M MESSING WITH THE BUFFER ***;
ScrollFlush(Record.PP_COMP_QRY_1, CurrentRowNumber(), Record.PP_COMP_QRY_2);
rem ScrollFlush(Scroll.PP_COMP_QRY_1, CurrentRowNumber(), Record.PP_COMP_QRY_2);
SQLExec("DELETE FROM PS_PP_COMP_QRY_2 WHERE PROJECT_ID_TARGET = :1 AND COMPONENT_ID = :2 AND RECORDNAME = :3", &sTgtProjID_, &sCompID_, &sRecName_);
&I = 1;
While &RecSrchKeysSQL_.Fetch(&sFieldName_)

   If &I <> 1 Then
      REM *** This ensures that the additional blank row is not there ***;
      &RS2_.InsertRow(&I - 1);
   End-If;
   &RS2_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_2).KEYNAME.Value = &sFieldName_;
   &RS2_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_2).PP_MATCH_KIND.Value = "7";
   &RS2_.GetRow(&I).GetRecord(Record.PP_COMP_QRY_2).WHERE_CLAUSE.Value = "%";
   &I = &I + 1;
End-While;
<*
Local SQL &oSQL_ = GetSQL(SQL.ANZ$SP_HELPTRIGGER$SQL, "'PS_DEPT_TBL'");
rem Local string &ANZSQLStringValue_ = &oSQL_.Value;
rem SQLExec(&ANZSQLStringValue_, "PS_DEPT_TBL", &sTrigNm);
While &oSQL_.Fetch(&sTrigNm)
   MessageBox(0, "", 0, 0, "&sTrigNm " | &sTrigNm);
End-While;
*>


import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Component array of string &SqlStmtsArr_;

REM *** Run the SQL's to capture incorrect clauses ***;
If All(&SqlStmtsArr_) Then
   For &ArrLen_ = 1 To &SqlStmtsArr_.Len
      try
      rem MessageBox(0, "", 0, 0, "Clause " | &SqlStmtsArr_ [&ArrLen_]);
      &Clause_ = &SqlStmtsArr_ [&ArrLen_];
      &SQL = &Clause_;
      &SQL = RTrim(&SQL);
      &SQL = LTrim(&SQL);
      If SQLExec(&SQL, &tableName, &rowCount) Then
         &RTNCD = "" | %SqlRows | " " | MsgGetText(30000, 5, "Message not found");
      Else
         &RTNCD = MsgGetText(30000, 4, "Message not found");
      End-If;
      rem WinMessage(&RTNCD, 64);

      catch Exception &ex

      Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
      REM *** Display the Message Text and Message Explain Text and WARN THE USER!!! ***;
      REM Error (&handler.getMessageText(&ex));
      &Found_ = Find("'", &Clause_, 9);
      &ExceptionTblName_ = Substring(&Clause_, 9, (&Found_ - 9));
      rem MessageBox(0, "", 0, 0, "&ExceptionTblName_ " | &ExceptionTblName_);
      MessageBox(0, "", 0, 0, "Exception Logged for Table Name > " | &ExceptionTblName_ | " - " | &handler.getMessageText(&ex));
      MessageBox(0, "", 0, 0, "Please review the generated SQL Statements for inconsistencies");
      REM Error (&handler.getMessageExplainText(&ex));
      end-try;
   End-For;
End-If;


Declare Function CreateQueryURL PeopleCode WEBLIB_QUERY.QRYGENFUNCS FieldFormula;

PP_GENERIC_WRK.URL_1.Value = CreateQueryURL("PP_DUP_REC_QRY", True);

If All(PP_COMP_QRY.PROJECT_ID_TARGET.Value) Then
   PP_GENERIC_WRK.URL_1.Value = PP_GENERIC_WRK.URL_1.Value | "&BIND1=" | PP_COMP_QRY.PROJECT_ID_TARGET.Value;
End-If;

REM PP;
import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Component string &ANZFinalStr_;

Declare Function KeepTrackofFile PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;

REM *** DO NOT TUCH ***;
&ANZFinalStr_ = "D:\psoft\auf0dev1a\DecodePCODE-0.20-binary\";
&sExecString = "\DecodePCODE-0.20-binary\DecodePCODE.bat";
&home_ = GetEnv("PS_HOME");

try
&ANZPrjName_ = PP_GENERIC_WRK.DESCR100.Value;
CommitWork();
/* +++ DO NOT CHANGE THE LINE BELOW +++ */
rem &sExecString = "\\psoau227dev83\psoft\auf0dev1a" | &sExecString | " " | PP_GENERIC_WRK.DESCR100.Value;
REM *** PASS PROJECT NAME ***;
&sExecString = &home_ | &sExecString | " " | PP_GENERIC_WRK.DESCR100.Value;
rem MessageBox(0, "", 0, 0, "&sExecString > " | &sExecString);
REM *** CALL BATCH FILE ***;
Exec(&sExecString, %Exec_Synchronous + %FilePath_Absolute);
MessageBox(0, "", 0, 0, "Files have been generated under " | &sExecString);
REM *** Create a new Text File which has all *.pcode and *.sql ***;
KeepTrackofFile(&ANZFinalStr_, &ANZPrjName_);

catch Exception &expObj_;
Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
REM *** Display the Message Text and Message Explain Text ***;
MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageExplainText(&expObj_));
rem Error (&handler.getMessageExplainText(&expObj_));
end-try;

REM *** Read ReleaseNote.log for the project ***;
import SCM_UTILITIES:ExceptionUtilities:ExceptionHandler;

Declare Function FileCopy PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;
Declare Function GetFileAsString PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;
Declare Function GenerateProjectXL PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;
Declare Function GenerateProjectItemXL PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;
Declare Function GenerateWordDoc PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;
Declare Function FormatReleaseNotesXL PeopleCode PP_GENERIC_WRK.DESCR_FO FieldFormula;

Component File &ANZPrjFile_, &ANZPrjItmFile_;
Local ApiObject &ANZPrjQryObj_;
Component Rowset &ANZPrjRS_;
Component string &ANZFinalStr_, &ANZPrjName_, &FileName_Path_, &ANZCompMasterXLFile_, &ANZRelNoteXL_;
Component string &ANZCompXLFile_, &ANZMasterXLFilePath_, &ANZMasterXLFileName_;
Component string &ANZPCodeExt_, &ANZSQLExt_;

rem try;
&ANZPCodeExt_ = ".pcode";
&ANZSQLExt_ = ".sql";

&ANZPrjName_ = PP_GENERIC_WRK.DESCR100.Value;
rem &ANZFinalStr_ = "D:\psoft\auf0dev1a\DecodePCODE-0.20-binary\";
&FileName_Path_ = "\\207.43.103.86\psoft\auf0dev1a\DecodePCODE-0.20-binary\";
REM *** Pass ReleaseNote_ from here, this will be changed to ReleaseNotes_ by VBS ***;
&ANZRelNoteXL_ = "ReleaseNote_" | &ANZPrjName_ | "_" | %Date | ".xls";
&ANZCompXLFile_ = &FileName_Path_ | &ANZRelNoteXL_;
&FileName_DTL_ = "\\207.43.103.86\psoft\auf0dev1a\DecodePCODE-0.20-binary\ProjectObjects_" | &ANZPrjName_ | "_" | %Date | ".xls";
&ANZMasterXLFilePath_ = "\\207.43.103.86\psoft\auf0dev1a\DecodePCODE-0.20-binary\";
&ANZMasterXLFileName_ = "MasterWorkBook.xls";
&ANZCompMasterXLFile_ = &ANZMasterXLFilePath_ | &ANZMasterXLFileName_;
&ANZPrjFile_ = GetFile(&ANZCompXLFile_, "W", %FilePath_Absolute);
&ANZPrjItmFile_ = GetFile(&FileName_DTL_, "W", %FilePath_Absolute);
REM *** The variable &strTempFile_ should always point to ReleaseNote ***;
&strTempFile_ = "D:\psoft\auf0dev1a\DecodePCODE-0.20-binary\ReleaseNote.log";
REM *** Copy that file for each PeopleTools Project ***;
FileCopy(&strTempFile_, "D:\psoft\auf0dev1a\DecodePCODE-0.20-binary\", "ReleaseNote_" | &ANZPrjName_ | ".log");
&strTempFileNew_ = "D:\psoft\auf0dev1a\DecodePCODE-0.20-binary\ReleaseNote_" | &ANZPrjName_ | ".log";
&file_ = GetFile(&strTempFileNew_, "R", "A", %FilePath_Absolute);
REM *** Read the new file ***;
&FileString_ = GetFileAsString(&file_);
REM *** Now generate XL ***;
GenerateProjectXL(&ANZFinalStr_, &FileString_, &ANZPrjName_);
REM *** Generate Project Item XL ***;
GenerateProjectItemXL(&ANZPrjName_);
REM *** Sample VBS for .doc ***;
GenerateWordDoc(&ANZPrjName_);
REM *** Call VBS to format the XL ***;
FormatReleaseNotesXL(&ANZPrjName_);
REM *** And delete new file ***;
If &file_.IsOpen Then
   MessageBox(0, "", 0, 0, "Deleting " | &file_.Name);
   rem &file_.Delete();
Else
   MessageBox(0, "", 0, 0, "File " | &file_.Name | " is not open");
End-If; <*   
catch Exception &expObj_;
   Local SCM_UTILITIES:ExceptionUtilities:ExceptionHandler &handler = create SCM_UTILITIES:ExceptionUtilities:ExceptionHandler();
   REM *** Display the Message Text and Message Explain Text ***;
   MessageBox(0, "", 0, 0, "Exception Logged > " | &handler.getMessageExplainText(&expObj_));
   rem Error (&handler.getMessageExplainText(&expObj_));
end-try;
*>

Component File &ANZPrjFile_, &ANZPrjItmFile_;
Component Rowset &ANZPrjRS_;
Component string &ANZFinalStr_, &ANZPrjName_, &FileName_Path_, &ANZCompMasterXLFile_, &ANZRelNoteXL_;
Component string &ANZCompXLFile_, &ANZMasterXLFilePath_, &ANZMasterXLFileName_;
Local File &MYFILE, &ANZPTFormatFile_;
Local string &ANZCol1_, &ANZCol2_, &ANZCol3_, &ANZCol4_, &ANZCol5_;
Component string &ANZPCodeExt_, &ANZSQLExt_;
Local SQL &ANZPrjSQL_, &ANZPrjItemSQL_;

Function GetFileAsString(&oFile As File) Returns string

   /* Local variables */
   Local number &nBufSize = 1000;
   Local number &readSize = 0;
   Local number &chunkCount = 0;
   Local string &sFullFileName;
   Local JavaObject &joFileIn;
   Local JavaObject &joBufferedReader;
   Local JavaObject &byteArray;
   Local JavaObject &joByteOutputStream;
   Local JavaObject &arrRef;
   Local string &sFullFileContent;

   /* Initialize variables */
   &joFileIn = CreateJavaObject("java.io.FileInputStream", &oFile.Name);
   &joBufferedReader = CreateJavaObject("java.io.BufferedInputStream", &joFileIn);
   &byteArray = CreateJavaArray("byte[]", &nBufSize);
   &joByteOutputStream = CreateJavaObject("java.io.ByteArrayOutputStream");

   /* Close File object, release lock over file so we can read it in */
   &sFullFileName = &oFile.Name;
   &oFile.Close();

   /* This reads the file exactly how it is on disk */
   &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);
   While &readSize <> - 1
      &chunkCount = &chunkCount + 1;
      &joByteOutputStream.write(&byteArray, 0, &readSize);
      &readSize = &joBufferedReader.read(&byteArray, 0, &nBufSize);

      /* for every 1500 reads turn buffer to string and add to file string, 
         this prevents java from getting an out of memory error, */
      If &chunkCount > 1499 Then
         &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();
         &joByteOutputStream.reset();
         &chunkCount = 0;
      End-If;
   End-While;
   &joBufferedReader.close();
   &sFullFileContent = &sFullFileContent | &joByteOutputStream.toString();

   /*open up the file again so that addition things could be written to file */
   &oFile.Open(&sFullFileName, "A", "", %FilePath_Absolute);

   Return &sFullFileContent;

End-Function;

/** This method will copy a file to another location **/
Function FileCopy(&strOldFileInfo, &strNewFilePath, &strNewFileName)

   Local File &oOldFile;
   Local File &oNewFile;
   Local string &strFileName;
   Local string &strData;
   Local integer &iPos, &iTempPos;

   &oOldFile = GetFile(&strOldFileInfo, "R", "A", %FilePath_Absolute);
   &strFileName = &oOldFile.Name;
   &iTempPos = Find("\", &strFileName);
   While &iTempPos > 0 And
            &iTempPos < Len(&strFileName)
      &iPos = &iTempPos;
      &iTempPos = Find("\", &strFileName, &iTempPos + 1);
   End-While;
   rem &strFileName = Substring(&strFileName, &iPos + 1, Len(&strFileName));
   &oNewFile = GetFile(&strNewFilePath | &strNewFileName, "W", "A", %FilePath_Absolute);

   While &oOldFile.ReadLine(&strData);
      &oNewFile.WriteLine(&strData);
   End-While;

   &oOldFile.Close();
   &oNewFile.Close();

End-Function;

Function FormatReleaseNotesXL(&ANZProjectName_ As string)

   REM *** Format XL for each PeopleTools Project ***;
   &ANZPTFormatFile_ = GetFile(&ANZFinalStr_ | &ANZProjectName_ | "\PTFormat.vbs", "W", %FilePath_Absolute);
   REM &ANZPTFormatFile_.WriteLine(MsgGetExplainText(24000, 2, "Message Not Found", &FileName_Path_));
   &ANZPTFormatFile_.WriteLine(MsgGetExplainText(24000, 3, "Message Not Found", &ANZCompXLFile_, &ANZCompMasterXLFile_, &ANZRelNoteXL_, &ANZMasterXLFileName_));
   REM *** DO NOT TUCH ***;
   &sExecDocString = "\DecodePCODE-0.20-binary\" | &ANZProjectName_ | "\PTFormat.vbs";
   &home_ = GetEnv("PS_HOME");
   REM *** VVVIMP to close the file as I'm creating this vbs file ***;
   &ANZPTFormatFile_.Close();
   CommitWork();
   &sExecDocString = &home_ | &sExecDocString;
   &sExecDocString = "cscript //Nologo " | &sExecDocString;
   REM *** CALL VBS ***;
   Exec(&sExecDocString, %Exec_Synchronous + %FilePath_Absolute);

End-Function;

Function KeepTrackofFile(&ANZFinalStr_ As string, &ANZProjectName_ As string)

   &ANZPTFile_ = GetFile(&ANZFinalStr_ | &ANZProjectName_ | "\PTGenFiles.bat", "W", %FilePath_Absolute);
   &ANZPTFile_.WriteLine("pushd d:\psoft\auf0dev1a\DecodePCODE-0.20-binary\" | &ANZProjectName_);
   &ANZPTFile_.WriteLine("dir *.pcode /s/b >PTGenFiles.txt");
   &ANZPTFile_.WriteLine("dir *.sql /s/b >>PTGenFiles.txt");

   REM *** DO NOT TUCH ***;
   &sExecString = "\DecodePCODE-0.20-binary\" | &ANZProjectName_ | "\PTGenFiles.bat";
   &home_ = GetEnv("PS_HOME");
   REM *** VVVIMP to close the file as I'm creating this batch file ***;
   &ANZPTFile_.Close();
   CommitWork();
   REM *** NO NEED TO PASS PROJECT NAME ***;
   &sExecString = &home_ | &sExecString;
   REM *** CALL BATCH FILE ***;
   Exec(&sExecString, %Exec_Synchronous + %FilePath_Absolute);

End-Function;

Function GenNewFile(&ANZProjectName_ As string) Returns string

   &TEXT = "";
   While &MYFILE.ReadLine(&TEXT);
      Return &TEXT;
   End-While;
   rem &MYFILE.Close();
   Return &BlankStr_;

End-Function;

Function GenFilePath(&ANZProjectName_ As string) Returns string

   &TEXT = "";
   Evaluate &ANZCol1_
   When = "8"

   When = "Record_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "9"

   When = "Menu_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | "\" | &ANZCol5_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "30"

   When = "SQL"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol2_ | &ANZSQLExt_;
      Return &TEXT;
      Break;
   When = "39"

   When = "Message_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "40"

   When = "Subscription_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "42"

   When = "Component_Interface_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "43"

   When = "Application_Engine_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | RTrim(LTrim(Substring(&ANZCol3_, 1, 8))) | "\" | RTrim(LTrim(Substring(&ANZCol3_, 9, 3))) | "\" | RTrim(LTrim(Substring(&ANZCol3_, 12, 7))) | "\" | RTrim(LTrim(Substring(&ANZCol3_, 21, 10))) | "\" | &ANZCol4_ | "\" | &ANZCol5_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "44"

   When = "Page_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "45"

   When = "Page_Field_PeopleCode"

      REM *** HAVE NOT SEEN THIS OBJECTTYPE ***;
      REM &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZPCodeExt_;
      &TEXT = "NA";
      Return &TEXT;
      Break;
   When = "46"

   When = "Component_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "47"

   When = "Component_Record_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | "\" | &ANZCol5_ | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "48"

   When = "Component_Record_Field_PeopleCode"
      &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | "\" | RTrim(LTrim(Substring(&ANZCol5_, 1, 18))) | "\" | RTrim(LTrim(Substring(&ANZCol5_, 19, 12))) | &ANZPCodeExt_;
      Return &TEXT;
      Break;
   When = "58"

   When = "App_Package_PeopleCode"

      REM *** Need to Check &ANZCol4_ & &ANZCol5_ ***;
      If All(&ANZCol4_) Then
         If All(&ANZCol5_) Then
            &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | "\" | &ANZCol5_ | &ANZPCodeExt_;
         Else /* For &ANZCol5_ */
            &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | "\" | &ANZCol2_ | "\" | &ANZCol3_ | "\" | &ANZCol4_ | &ANZPCodeExt_;
         End-If; /* For &ANZCol5_ */
      Else /* For &ANZCol4_ */
         &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | "\" | &ANZCol2_ | "\" | &ANZCol3_ | &ANZPCodeExt_;
      End-If; /* For &ANZCol5_ */
      Return &TEXT;
      Break;
   When = "66"

   When = "CI_Property_PeopleCode"

      REM *** HAVE NOT SEEN THIS OBJECTTYPE ***;
      REM &TEXT = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZPCodeExt_;
      &TEXT = "NA";
      Return &TEXT;
      Break;
   When-Other;
      &BlankStr_ = "NA";
      Return &BlankStr_;
      Break;
   End-Evaluate
End-Function;

Function GenerateProjectXL(&ANZFinalStr_ As string, &FileStr_ As string, &ANZProjectName_ As string)

   REM *** Generate XL for each PeopleTools Project ***;
   If &ANZPrjFile_.IsOpen Then
      REM *** Be careful about the Users' language code on the User Profile ***;
      &ANZPrjQryObj_ = %Session.GetQuery();
      /* Initialising the Rowset & Values */
      &ANZPrjSQL_ = GetSQL(SQL.ANZ$PROJECT$EXTR$SQL, &ANZProjectName_);
      REM *** Create XL with path information ***;
      &ANZPrjRS_ = CreateRowset(Record.ANZ_PRJEXTR_DVW);
      &MYFILE = GetFile(&ANZFinalStr_ | &ANZProjectName_ | "\PTGenFiles.txt", "R", %FilePath_Absolute);
      &I = 1;
      While &ANZPrjSQL_.Fetch(&ANZCol1_, &ANZCol2_, &ANZCol3_, &ANZCol4_, &ANZCol5_)

         If &I <> 1 Then
            REM *** This ensures that the additional blank row is not there ***;
            &ANZPrjRS_.InsertRow(&I - 1);
         End-If;
         &Rec_Level1 = &ANZPrjRS_.GetRow(&I).GetRecord(Record.ANZ_PRJEXTR_DVW);
         &Rec_Level1.DESCR100.Value = &ANZCol1_;
         &Rec_Level1.DESCR100A.Value = &ANZCol2_;
         &Rec_Level1.DESCR100B.Value = &ANZCol3_;
         &Rec_Level1.DESCR100C.Value = &ANZCol4_;
         &Rec_Level1.DESCR100D.Value = &ANZCol5_;
         rem &ANZActualFilePath_ = GenNewFile(&ANZProjectName_);
         &ANZActualFilePath_ = GenFilePath(&ANZProjectName_);
         rem &Rec_Level1.DESCR2000.Value = &ANZFinalStr_ | &ANZPrjName_ | "\" | &ANZCol1_ | "\" | &ANZCol2_ | "\" | Substring(&ANZCol3_, 1, 8) | "\" | Substring(&ANZCol3_, 9, 3) | "\" | Substring(&ANZCol3_, 12, 7) | "\" | Substring(&ANZCol3_, 21, 10) | "\" | &ANZCol4_ | "\";
         REM *** Check File Existence ***;
         If FileExists(&ANZActualFilePath_, %FilePath_Absolute) Then
            &Rec_Level1.DESCR2000.Value = Substitute(&ANZActualFilePath_, " ", "^");
         Else
            &Rec_Level1.DESCR2000.Value = "NA";
         End-If;
         &I = &I + 1;
      End-While;
      &ANZPrjString_ = &ANZPrjQryObj_.FormatResultString(&ANZPrjRS_, %Query_XLS, 1, &ANZPrjRS_.ActiveRowCount);
      /* Writing the XL file */
      &ANZPrjFile_.WriteLine(&ANZPrjString_);
   Else
      Error ("Error: Opening of File Failed");
   End-If;
   &ANZPrjFile_.Close();

End-Function;

Function GenerateWordDoc(&ANZProjectName_ As string)

   REM *** Generate DOC file ***;
   &ANZPTDocFile_ = GetFile(&ANZFinalStr_ | &ANZProjectName_ | "\PTFiles.vbs", "W", %FilePath_Absolute);
   REM *** PTProjectName, PROJECTDESCR, DESCRLONG ***;
   SQLExec("SELECT PROJECTDESCR, DESCRLONG FROM PSPROJECTDEFN WHERE PROJECTNAME = :1", &ANZProjectName_, &ANZProjectDescr_, &ANZProjectDescrLong_);
   &ANZPTDocFile_.WriteLine(MsgGetExplainText(24000, 1, "Message Not Found", &ANZProjectName_, Clean(&ANZProjectDescr_), Clean(&ANZProjectDescrLong_)));
   REM *** DO NOT TUCH ***;
   &sExecDocString = "\DecodePCODE-0.20-binary\" | &ANZProjectName_ | "\PTFiles.vbs";
   &home_ = GetEnv("PS_HOME");
   REM *** VVVIMP to close the file as I'm creating this vbs file ***;
   &ANZPTDocFile_.Close();
   CommitWork();
   &sExecDocString = &home_ | &sExecDocString;
   &sExecDocString = "cscript //Nologo " | &sExecDocString;
   REM *** CALL BATCH FILE ***;
   Exec(&sExecDocString, %Exec_Synchronous + %FilePath_Absolute);

End-Function;

Function GenerateProjectItemXL(&ANZProjectName_ As string)

   If &ANZPrjItmFile_.IsOpen Then
      REM *** Be careful about the Users' language code on the User Profile ***;
      &ANZPrjItmObj_ = %Session.GetQuery();
      /* Initialising the Rowset & Values */
      REM *** Create detailed Project Item XL ***;
      &ANZPrjItemSQL_ = GetSQL(SQL.ANZ$PROJECT$ITEM$LIST$SQL, &ANZProjectName_);
      &ANZPrjItemRS_ = CreateRowset(Record.ANZ_PRJ_ITM_WRK);
      &J = 1;
      While &ANZPrjItemSQL_.Fetch(&ANZItemCol1_, &ANZItemCol2_, &ANZItemCol3_, &ANZItemCol4_, &ANZItemCol5_)

         If &J <> 1 Then
            REM *** This ensures that the additional blank row is not there ***;
            &ANZPrjItemRS_.InsertRow(&J - 1);
         End-If;
         &Rec_ItemLevel1 = &ANZPrjItemRS_.GetRow(&J).GetRecord(Record.ANZ_PRJ_ITM_WRK);
         &Rec_ItemLevel1.DESCR200.Value = &ANZItemCol1_;
         &Rec_ItemLevel1.DESCR254.Value = &ANZItemCol2_;
         &Rec_ItemLevel1.DESCR254_1.Value = &ANZItemCol3_;
         &Rec_ItemLevel1.DESCR254_FROM.Value = &ANZItemCol4_;
         &Rec_ItemLevel1.DESCR254_IN.Value = &ANZItemCol5_;
         &J = &J + 1;
      End-While;
      REM *** Generate a string containing the entire content of the input ***;
      &ANZPrjItemString_ = &ANZPrjItmObj_.FormatResultString(&ANZPrjItemRS_, %Query_XLS, 1, &ANZPrjItemRS_.ActiveRowCount);
      /* Writing the XL file */
      &ANZPrjItmFile_.WriteLine(&ANZPrjItemString_);
   Else
      Error ("Error: Opening of File Failed");
   End-If;
   &ANZPrjItmFile_.Close();

End-Function;


delete from PS_SET_CNTRL_REC

insert into PS_SET_CNTRL_REC
(SETCNTRLVALUE
,REC_GROUP_ID 
,RECNAME 
,SETID) 
select 
A.SETCNTRLVALUE
,A.REC_GROUP_ID
,B.RECNAME
,A.SETID
FROM PS_SET_CNTRL_GROUP A, PS_REC_GROUP_REC B 
WHERE B.REC_GROUP_ID = A.REC_GROUP_ID
AND NOT EXISTS (SELECT 'X' FROM PS_SET_CNTRL_REC C
WHERE C.SETCNTRLVALUE = A.SETCNTRLVALUE
AND C.REC_GROUP_ID = A.REC_GROUP_ID
AND C.RECNAME = B.RECNAME);


--This query will return the list of the tables which contains the list of fields specified
select distinct a.name, b.name
from syscolumns a
join sysobjects b
	on b.id = a.id
join sysindexes c
	on c.id = b.id
join PSRECDEFN R
        on b.name = 'PS_' + R.RECNAME
where (a.name in ('FILE_DIRECTORY', 'PATHNAME', 'URL', 'OUTDEST')
	or a.name like '%FILEPATH'
        or a.name like '%PATH')
and b.type = 'U'
and b.name not like '%_TMP%'
and b.name not like '%_T_A%'
and b.name not like '%_AET'
and b.name not like '%_TAO%'
and b.name like 'PS\_%' ESCAPE '\'
and R.LASTUPDOPRID <> 'PPLSOFT'
AND R.LASTUPDOPRID <> 'VP1'
and c.rowcnt > 0
and a.xtype in (select xtype
			from systypes
			where lower(name) in ('varchar', 'char', 'nvarchar', 'nchar'))
order by b.name, a.name



--TNW
--EXPORT CLAUSE(S) SOURCE  
REM WR: 28452;
REM Description: ACE Taiwan Config Project;
SET LOG C:\TEMP\ANZWR28452_00_SRCEXPORT.LOG;
SET OUTPUT C:\TEMP\ANZWR28452_00_SRCEXPORT.DAT;
EXPORT PS_DST_CNTRL_HDR WHERE DST_CNTRL_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_DST_CNTRL_TBL WHERE DST_CNTRL_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_DST_DETL_CNTRL WHERE DST_CNTRL_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ADB_ADJ_TBL WHERE ADB LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ADB_DEFN_TBL WHERE ADB LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ADB_FLDS_TBL WHERE ADB LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ADB_FLDV_TBL WHERE ADB LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ADB_REQ WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%ADBCALCX%';
EXPORT PS_OPR_DEF_TBL_FS WHERE OPRID = 'PSBATCH';
EXPORT PS_ADB_INCR_CONTRL WHERE ADB LIKE '%' AND ADB_PERIOD_TYPE LIKE '%' AND BUSINESS_UNIT IN ('00121','00141','07428');
EXPORT PS_ANZ_BALC_DEPT_L WHERE ACCOUNT LIKE '%' AND AFFILIATE LIKE '%' AND ANZ_SUB_SYSTEM LIKE '%' AND DEPTID LIKE '%' AND PRODUCT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ANZ_PROFILE_TBL WHERE SETID = 'TWN01';
EXPORT PS_ANZ_PSPPE_FILE2 WHERE ANZ_FILE_ID IN ('APPCONV1') OR ANZ_FILE_ID LIKE 'TW%';
EXPORT PS_BANK_ACCT_CHRT WHERE SETID = 'TWN01';
EXPORT PS_BANK_ACCT_CURR WHERE SETID = 'TWN01';
EXPORT PS_BANK_CF_OPTIONS WHERE SETID = 'TWN01';
EXPORT PS_BNK_ID_QUAL_TBL WHERE BANK_ID_QUAL = '055';
EXPORT PS_BUL_JE_RA_CFS WHERE ACT_BAL_GRP LIKE '%' AND BUSINESS_UNIT IN ('00121','07428','00141') AND CHARTFIELD LIKE '%' AND LEDGER_GROUP LIKE '%';
EXPORT PS_BUL_JE_RA_SET WHERE ACT_BAL_GRP LIKE '%' AND BUSINESS_UNIT IN ('00121','07428','00141') AND LEDGER_GROUP LIKE '%';
EXPORT PS_BUS_UNIT_SCR_AP WHERE SETID IN ('00121' , '07428');
EXPORT PS_BU_LED_TBL WHERE BUSINESS_UNIT IN ('00121' , '00141','07428');
EXPORT PS_EFT_LAYOUT_TBL WHERE EFT_LAYOUT_CD = 'TWNREM';
EXPORT PS_IU_INTER_CF WHERE IU_INTER_TMPLT_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_IU_INTER_GRP WHERE IU_INTER_TMPLT_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ORIGIN_AP WHERE SETID = 'TWN01';
EXPORT PS_ORIGIN_PROCURE WHERE SETID = 'TWN01';
EXPORT PS_PRCSRUNCNTLDTL WHERE OPRID = 'PSBATCH' AND PRCSNAME LIKE 'ANZG003A%' AND RUNCNTLID LIKE 'TWN%G003%D3%';
EXPORT PS_RUN_ANZ_AML_V WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAP_ANZVNDREXT_D1';
EXPORT PS_RUN_ANZ_AML_V_S WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAP_ANZVNDREXT_D1';
EXPORT PS_RUN_ANZ_BAL1FTP WHERE OPRID = 'PSBATCH' AND REQUEST_ID LIKE '%' AND RUN_CNTL_ID LIKE '%TWN%';
EXPORT PS_RUN_ANZ_PYCYCL WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'PAP_ANZ_AP_PCJOB_TWN_D1';
EXPORT PS_SEC_LEDGER_CLS WHERE OPRCLASS IN ('PPL00000','PPL00001','PPL00003','PPLTWN01','PPLTWN02');
EXPORT PS_SET_CNTRL_REC WHERE SETCNTRLVALUE IN ('00121','00141','07428', 'TWN01');
EXPORT PS_SRC_JE_AS_CFS WHERE ACT_BAL_GRP LIKE '%' AND CHARTFIELD LIKE '%' AND EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('FCN','PTR','VSP');
EXPORT PS_SRC_JE_AS_SET WHERE ACT_BAL_GRP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('FCN','PTR','VSP');
EXPORT PS_SRC_JE_BS_CFS WHERE ACT_BAL_GRP LIKE '%' AND CHARTFIELD LIKE '%' AND EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('FCN','PTR','VSP');
EXPORT PS_SRC_JE_BS_SET WHERE ACT_BAL_GRP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('FCN','PTR','VSP');
EXPORT PS_SRC_JE_ES_CFS WHERE ACT_BAL_GRP LIKE '%' AND CHARTFIELD LIKE '%' AND EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('FCN','PTR','VSP');
EXPORT PS_SRC_JE_ES_SET WHERE ACT_BAL_GRP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('FCN','PTR','VSP');
EXPORT PS_TAX_AUTH_HDR WHERE SETID = 'TWN01';
EXPORT PS_VAT_ACCT_TBL WHERE SETID = 'TWN01';
EXPORT PS_VAT_DEFAULTS WHERE VAT_DRIVER IN ('BUS_UNIT_OPT_AP' , 'BUS_UNIT_TBL_AP' ,  'BUS_UNIT_TBL_AM'  , 'COUNTRY_VAT_TBL' , 'ORIGIN_AP_OPT' , 'VAT_ENT_RGSTRN') AND VAT_DRIVER_KEY1 IN ('00121' , '07428' , 'TWN' , 'TWN01' , 'TWNVAT');
EXPORT PS_VAT_DEFAULT_HDR WHERE VAT_DRIVER IN ('BUS_UNIT_OPT_AP' , 'BUS_UNIT_TBL_AP' , 'BUS_UNIT_TBL_AM' , 'COUNTRY_VAT_TBL' , 'ORIGIN_AP_OPT' , 'VAT_ENT_RGSTRN') AND VAT_DRIVER_KEY1 IN ('00121' , '07428' , 'TWN' , 'TWN01' , 'TWNVAT');
EXPORT PS_VAT_SEARCH_TRF WHERE VAT_DRIVER_KEY1 LIKE 'TWN%';
EXPORT PS_VENDOR WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_ADDR WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_ADDR_PHN WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_CNTCT WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_ID_NBRS WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_INVOICE WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_LOC WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_PAY WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_WTHD WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VENDOR_WTHD_JUR WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_ADDR_SCROL WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_BANK_ACCT WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_CNTCT_PHN WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_CNTCT_SCR WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_GOV_CERT WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_GOV_SRC WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_HDR_IND_CL WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_IND_CLASS WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_LOC_ID_NBR WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_LOC_SCROL WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_RPT_ELEM WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_URL WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_VNDR_VAT_RGSTRN WHERE SETID = 'TWN01' AND VENDOR_ID = 'TW00000001';
EXPORT PS_ALLOC_AMT_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_BASF_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_BASV_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_OFFV_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_POOLF_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_POOLV_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_RNDLN_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_STEP_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_TARGV_TBL WHERE EFFDT LIKE '%' AND PROCESS_STEP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_GROUP_TBL WHERE PROCESS_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_GRSTP_TBL WHERE PROCESS_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ALLOC_REQUEST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%FSALLC%';
EXPORT PS_AMPS1000_OPT WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAM_AMPS1000_D1';
EXPORT PS_AMPS1000_RQST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAM_AMPS1000_D1';
EXPORT PS_ANZ_ACCOUNT_MAP WHERE SETID = 'TWN01';
EXPORT PS_ANZ_ACCT_STRUCT WHERE SETID = 'TWN01';
EXPORT PS_ANZ_BALC_APPL WHERE ANZ_SUB_SYSTEM LIKE '%TW%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_ANZ_BALC_SRCE WHERE ANZ_SUB_SYSTEM LIKE '%TW%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_RUN_ANZ_BAL_FTP WHERE ANZ_SUB_SYSTEM LIKE '%' AND LEDGER LIKE '%' AND OPRID = 'PSBATCH' AND REQUEST_ID LIKE '%' AND RUN_CNTL_ID LIKE '%TWN%';
EXPORT PS_ANZ_BALC_COA WHERE ACCOUNT LIKE '%' AND AFFILIATE LIKE '%' AND ANZ_SUB_SYSTEM LIKE '%' AND PRODUCT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_RUN_ANZ_BALC_BU WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TW%';
EXPORT PS_RUN_ANZ_BALC_LD WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TW%';
EXPORT PS_ANZ_BALC_CUR_TO WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TW%';
EXPORT PS_RUN_ANZ_BALCRPT WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TW%';
EXPORT PS_RUN_ANZ_BALC_RQ WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TW%';
EXPORT PS_ANZ_BSBCOST_MAP WHERE ANZ_BSB_COSTCENTRE LIKE '%' AND EFFDT LIKE '%' AND SETID LIKE 'TWN01%';
EXPORT PS_ANZ_CF_EXCL_MAP WHERE BUSINESS_UNIT_FROM LIKE '%' AND BUSINESS_UNIT_TO LIKE '%' AND DEPTID LIKE '%' AND DEPTID_TO LIKE '%' AND SETID LIKE 'TWN01%';
EXPORT PS_ANZ_COUNTRY_TBL WHERE SETID = 'TWN01';
EXPORT PS_ANZ_EOD_UPDATE WHERE ANZ_RUN_CNTRL_SET = 'TWN_BATCH_UPDATE' AND OPRID = 'PSBATCH' AND PRCSNAME LIKE '%' AND PRCSTYPE LIKE '%' AND RECNAME LIKE '%';
EXPORT PS_RUN_ANZ_EXRTFTP WHERE OPRID LIKE 'PSBATCH%' AND REQUEST_ID LIKE '%' AND RUN_CNTL_ID LIKE '%PGL_ANZ_EXRT%';
EXPORT PS_RUN_ANZ_EXT1FTP WHERE OPRID LIKE 'PSBATCH%' AND REQUEST_ID LIKE '%' AND RUN_CNTL_ID LIKE '%PGL_ANZ_EXRT%';
EXPORT PS_ANZ_EXCPTN_MAP WHERE SETID = 'TWN01';
EXPORT PS_ANZF_FTP_PARAMS WHERE BUSINESS_UNIT IN ('00121','00141','07428');
EXPORT PS_ANZ_GIW_LDP_TBL WHERE ANZ_EXTRACT_SET = 'TWN';
EXPORT PS_ANZ_GIW_LEDGS WHERE ANZ_EXTRACT_SET = 'TWN';
EXPORT PS_ANZ_IB_ACCT_EXT WHERE ANZ_SUB_SYSTEM = 'SMSTR_TW' AND SETID = 'TWN01';
EXPORT PS_ANZ_IB_DEPT_EXT WHERE ANZ_SUB_SYSTEM = 'SMSTR_TW' AND SETID = 'TWN01';
EXPORT PS_ANZ_IB_EXTPARM WHERE ANZ_SUB_SYSTEM = 'SMSTR_TW' AND SETID = 'TWN01';
EXPORT PS_ANZ_INT_CONTROL WHERE ANZ_SUB_SYSTEM IN ('TWNGIW','SMSTR_TW') AND PRCSNAME IN ('ANZ0665E','ANZGF03A');
EXPORT PS_ANZ_SUB_SYS_TBL WHERE ANZ_SUB_SYSTEM LIKE '%TW%';
EXPORT PS_ANZ_PROC_DATE WHERE ANZ_DATE_TYPE IN ('FINACLE_PROCESS_DATE','MIDANZ_PROCESS_DATE') AND COUNTRY LIKE '%' AND SETID LIKE '%';
EXPORT PS_ANZ_PSPPE_FILES WHERE ANZ_FILE_ID IN ('APPCONV1') OR ANZ_FILE_ID LIKE 'TW%';
EXPORT PS_ANZ_PYCYCL_MAS1 WHERE PAY_CYCLE IN ('TWNDLY', 'TWNTAX');
EXPORT PS_ANZ_PYCYCL_MAST WHERE PAY_CYCLE IN ('TWNDLY', 'TWNTAX');
EXPORT PS_RUN_ANZ_REVSUM WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_ANZG0805_D1';
EXPORT PS_RUN_ANZ_REV_OP WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_ANZG0805_D1';
EXPORT PS_BANK_BRANCH_TBL WHERE BANK_CD LIKE '%' AND BRANCH_NAME LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_ACCT_CPTY WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_ACCT_DEFN WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND BRANCH_NAME LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_ACCT_MTHD WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_ACCT_RECON WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_CD_TBL WHERE BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_COLCT_LYT WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_COLCT_MTHD WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_COLCT_PROP WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_HURDLE_RTE WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_MTHD_PROP WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_PYMNT_LYT WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_SIGNATORY WHERE BANK_ACCT_KEY LIKE '%' AND BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BOOK_DEFN_TBL WHERE BOOK LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BUL_CNTL_BUD WHERE BUSINESS_UNIT IN ('00121' , '00141' , '07428');
EXPORT PS_BU_LED_COMB_TBL WHERE BUSINESS_UNIT IN ('00121' , '00141' , '07428');
EXPORT PS_BU_LED_GRP_TBL WHERE BUSINESS_UNIT IN ('00121' , '00141' , '07428');
EXPORT PS_BUS_CAL_HOLIDAY WHERE HOLIDAY_LIST_ID = 'TWN';
EXPORT PS_BUS_CAL_HOL_DFN WHERE HOLIDAY_LIST_ID = 'TWN';
EXPORT PS_BUS_UNIT_INTFC WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_BU_AP_GL_OPT WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_WTHD_BU_HDR WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_WTHD_BU_JUR WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_AP_BU_TAX_CF WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_BUS_UNIT_TBL_AP WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_BUS_UNIT_TBL_FS WHERE BUSINESS_UNIT IN ('00121' , '00141' , '07428');
EXPORT PS_BUS_UNIT_TBL_GL WHERE BUSINESS_UNIT IN ('00121' , '00141' , '07428');
EXPORT PS_ANZ_DUPINV_STEP WHERE SETID IN ('00121' , '07428');
EXPORT PS_BUS_UNIT_OPT_AP WHERE SETID IN ('00121' , '07428');
EXPORT PS_BUS_UNIT_TBL_AM WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_BU_BOOK_TBL WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_CLOSE_ADJP_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_DEFN_TBL WHERE CLOSING_SET LIKE '%' AND CLOSING_TYPE LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_DFLT_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_FROM_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_LINE_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_OFFST_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_PLFWD_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_TO_TBL WHERE CLOSING_SET LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CLOSE_REQBU_TBL WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%GLPCLOSE%';
EXPORT PS_CLOSE_REQUEST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%GLPCLOSE%';
EXPORT PS_UNCLOSE_PI_TBL WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%GLPCLOSE%';
EXPORT PS_CM_LC_COMPONENT WHERE MISC_CHARGE_CODE LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_BLD_REQ WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_FSCEBD_D1';
EXPORT PS_COMB_EXT_PG_REQ WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_FSCEBD_D1';
EXPORT PS_COMBO_CF_DEFN WHERE COMBO_DEFN_NAME LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_GROUP_TBL WHERE PROCESS_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_GRRUL_TBL WHERE PROCESS_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_CF2_REQ WHERE COMBINATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_CF2_TBL WHERE COMBINATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_CF_TBL WHERE COMBINATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_FLDS_TBL WHERE SETID = 'TWN01';
EXPORT PS_COMBO_RULE_TBL WHERE COMBINATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_VAL2_TBL WHERE COMBINATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COMBO_VAL_TBL WHERE COMBINATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_BANK_RATINGS WHERE BANK_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_COUNTRY_TBL WHERE COUNTRY = 'TWN';
EXPORT PS_COUNTRY_VAT_TBL WHERE COUNTRY = 'TWN';
EXPORT PS_CURR_GROUP_TBL WHERE PROCESS_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_GRSTP_TBL WHERE PROCESS_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_REQUEST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%FSPCCURR%';
EXPORT PS_LED_GRP_FLD_TBL WHERE LEDGER_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_LED_GRP_LED_TBL WHERE LEDGER_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_LED_GRP_TBL WHERE LEDGER_GROUP LIKE '%' AND SETID = 'TWN01';
EXPORT PS_FILE_DIR_FS WHERE FILE_EXTENSION LIKE '%' AND SETID = 'TWN01';
EXPORT PSNVSBOOK WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PSNVSBOOKREQUST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_INTFC_APAM_OPT WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_INTFC_APAM_RQST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_IU_INTER_TMPLT WHERE IU_INTER_TMPLT_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_IU_INTER_TRAN WHERE IU_INTER_TMPLT_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_JRNL_EDIT_REQ WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('TWN_PGL_GLJEDIT_ALO_D1','TWN_PGL_GLJEDIT_FTP_D1','TWN_PGL_GLJEDIT_FIN_D1','TWN_PGL_GLJEDIT_SJE_D1');
EXPORT PS_JRNL_POST_REQ WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('TWN_PGL_GLPPPOST_MAN_D1','PGL_GLPPPOST_ONL_D1_4817019','PGL_ADBPOST_D1','TWN_PGL_GLADBPST_D1');
EXPORT PS_JGEN_DOC_MAP WHERE APPL_JRNL_ID IN ('INT_FIN7','INT_VISPLS','INT_PTTRSN') AND EFFDT LIKE '%' AND SETID = 'APP01';
EXPORT PS_JRNLGEN_APPL_ID WHERE APPL_JRNL_ID IN ('INT_FIN7','INT_VISPLS','INT_PTTRSN') AND EFFDT LIKE '%' AND SETID = 'APP01';
EXPORT PS_JRNLGEN_SUMV WHERE APPL_JRNL_ID IN ('INT_FIN7','INT_VISPLS','INT_PTTRSN') AND EFFDT LIKE '%' AND SETID = 'APP01';
EXPORT PS_JRNLGEN_REQUEST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('TWN_PGL_FSJGEN_AM_D1','TWN_PGL_FSJGEN_FIN_D1','TWN_PGL_FSJGEN_AP_D1');
EXPORT PS_LEDGER_SET_LED WHERE LEDGER_SET LIKE '%';
EXPORT PS_LEDGER_SET_TBL WHERE LEDGER_SET LIKE '%';
EXPORT PS_LED_TMPLT_TBL WHERE LEDGER_TEMPLATE IN ('VLAADBYREG','VLACTREG','VLAADBMREG');
EXPORT PS_LOCATION_TBL WHERE LOCATION LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_STEP_RVALV WHERE CURR_STEP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_STPGN_TBL WHERE CURR_STEP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_STPLS_TBL WHERE CURR_STEP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_FIN_BU_LGRP_TBL WHERE BUSINESS_UNIT IN ('00121','07428','00141');
EXPORT PS_FIN_OPEN_ADJ WHERE BUSINESS_UNIT IN ('00121','07428','00141');
EXPORT PS_FIN_OPEN_OPTN WHERE BUSINESS_UNIT IN ('00121','07428','00141');
EXPORT PS_FIN_OPEN_PERIOD WHERE BUSINESS_UNIT IN ('00121','07428','00141');
EXPORT PS_ORIGIN_AP_OPT WHERE ORIGIN LIKE '%' AND SETID = 'TWN01';
EXPORT PS_VNDR_PAYGRP_TBL WHERE PYMNT_GROUP_CD LIKE '%' AND SETID = 'TWN01';
EXPORT PS_FIN_BU_MAPPING WHERE BUSINESS_UNIT IN ('00121' , '07428');
EXPORT PS_PROFILE_BK_TBL WHERE PROFILE_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_PROFILE_DET_TBL WHERE PROFILE_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_PROFILE_PARCHD WHERE PROFILE_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_PROFILE_PARC_BK WHERE PROFILE_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_PROFILE_PARC_CF WHERE PROFILE_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_PROFILE_TBL WHERE PROFILE_ID LIKE '%' AND SETID = 'TWN01';
EXPORT PS_PST_PYMT_RUN_AP WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_PST_PYMT_RUN_BK WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_PST_VCHR_PYMNT WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_PST_VCHR_RUN_AP WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_PST_VCHR_RUN_BU WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_PYCYCL WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_BNK WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_BNK_OVR WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_BU WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_MTHD WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_NETTING WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_PAYGRP WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_SOURCE WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_STAT WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYCYCL_WRK_OPT WHERE PAY_CYCLE IN ('TWNDLY' , 'TWNTAX');
EXPORT PS_PYMNT_HNDL_TBL WHERE SETID = 'TWN01';
EXPORT PS_CURR_STEP_RVALF WHERE CURR_STEP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_STEP_TBL WHERE CURR_STEP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_CURR_STP_TGTF WHERE CURR_STEP LIKE '%' AND EFFDT LIKE '%' AND SETID = 'TWN01';
EXPORT PS_RUNCTLANZ0746A2 WHERE LANGUAGE_CD LIKE '%' AND OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_ANZ0746A_D1';
EXPORT PS_RUNCTL_ANZ0746A WHERE LANGUAGE_CD LIKE '%' AND OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_ANZ0746A_D1';
EXPORT PS_RUNCTL_ANZGF03A WHERE LANGUAGE_CD = 'ENG' AND OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_ANZGF03A_D1';
EXPORT PS_AMAEDIST_RQST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAM_AMAMAEDIST_D1';
EXPORT PS_AMDPCALC_RQST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAM_AMDEPRCALC_D1';
EXPORT PS_RUN_CNTL_AM WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('TWN_PAM_AMAMAEDIST_D1','TWN_PAM_AMDEPRCALC_D1');
EXPORT PS_DEPR_CLOSE_RQST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAM_AMDPCLOSE_M1';
EXPORT PS_AMDPREPT_RQST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PAM_AMDPREPT_D1';
EXPORT PS_PO_POSTAGE_PARM WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_RUN_CTL_ANZ0234 WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_RUN_CTL_ANZ1031 WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%';
EXPORT PS_ANZ_JNL_LED_ACT WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%1344%';
EXPORT PS_ANZ_JNL_LED_DEP WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%1344%';
EXPORT PS_ANZ_JNL_LED_NOD WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%1344%';
EXPORT PS_RUNCTL_ANZ1344 WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%1344%';
EXPORT PS_RUN_ANZ_BUPROOF WHERE OPRID = 'PSBATCH' AND REQUEST_NBR LIKE '%' AND RUN_CNTL_ID LIKE 'TWN%G002%';
EXPORT PS_RUN_ANZ_DTB WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%G003A%';
EXPORT PS_RUN_ANZ_DTB_CF WHERE OPRID = 'PSBATCH' AND REQUEST_NBR LIKE '%' AND RUN_CNTL_ID LIKE 'TWN%G003A%';
EXPORT PS_RUN_ANZ_DTB_CFV WHERE OPRID = 'PSBATCH' AND REQUEST_NBR LIKE '%' AND RUN_CNTL_ID LIKE 'TWN%G003A%';
EXPORT PS_RUN_ANZ_DTB_RQS WHERE OPRID = 'PSBATCH' AND REQUEST_NBR LIKE '%' AND RUN_CNTL_ID LIKE 'TWN%G003A%';
EXPORT PS_RUN_ANZ_DWH_BL WHERE OPRID LIKE 'PSBATCH%' AND RUN_CNTL_ID LIKE '%';
EXPORT PS_RUN_ANZ_DWH_BL1 WHERE OPRID LIKE 'PSBATCH%' AND RUN_CNTL_ID LIKE '%';
EXPORT PS_RUN_ANZ_DWH_BL2 WHERE OPRID LIKE 'PSBATCH%' AND RUN_CNTL_ID LIKE '%';
EXPORT PS_RUN_ANZ_EOD_UPD WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_ANZEODUPD_D1';
EXPORT PS_ANZ_GIW_BU_DEPT WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('TWN_ANZ1090B_FUL_TWN_A1','TWN_ANZ1090B_PAR_TWN_A1');
EXPORT PS_RUN_ANZ_GL_EXTR WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('APP_ANZ0665_PRD_APP01_D1','PGL_ANZ0665F_SETID_D1','PGL_ANZ0665_BUS_D1','PGL_ANZ0665D_ALL_D1') or RUN_CNTL_ID like '%TWN%' or RUN_CNTL_ID like '%ANZ0665%DWH%';
EXPORT PS_ANZ_ACT_EXT_LED WHERE LEDGER LIKE '%' AND OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE '%HFM%TWN%';
EXPORT PS_ANZ_AVG_EXT_LED WHERE LEDGER LIKE '%' AND OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE '%HFM%TWN%';
EXPORT PS_ANZ_HFM_TREESEL WHERE ANZ_NODE_BU_IND LIKE '%' AND ANZ_TREENODE_BU LIKE '%' AND OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE '%HFM%TWN%' AND SETID LIKE '%' AND TREE_NAME LIKE '%';
EXPORT PS_RUN_ANZ_HFM WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID IN ('PGL_HFM_EOP_ASI_M9') OR RUN_CNTL_ID LIKE '%HFM%TWN%';
EXPORT PS_SEC_BU_CLS WHERE OPRCLASS IN ('PPL00000','PPL00001','PPL00003','PPLTWN01','PPLTWN02');
EXPORT PS_SEC_LEDGER_CLSW WHERE OPRCLASS IN ('PPL00000','PPL00001','PPL00003','PPLTWN01','PPLTWN02');
EXPORT PS_SEC_SETID_CLS WHERE OPRCLASS IN ('PPL00000','PPL00001','PPL00003','PPLTWN01','PPLTWN02');
EXPORT PS_SETID_TBL WHERE SETID IN ('00121','07428','00141','TWN01');
EXPORT PS_SET_CNTRL_GROUP WHERE SETCNTRLVALUE IN ('TWN01' , '00121' , '00141' , '07428');
EXPORT PS_SET_CNTRL_TBL WHERE SETCNTRLVALUE IN ('TWN01' , '00121' , '00141' , '07428');
EXPORT PS_SET_CNTRL_TREE WHERE SETCNTRLVALUE IN ('TWN01' , '00121' , '00141' , '07428');
EXPORT PS_SHIPTO_TBL WHERE EFFDT LIKE '%' AND SETID = 'TWN01' AND SHIPTO_ID LIKE '%';
EXPORT PS_SHIPTO_VNDR_LOC WHERE SETID = 'TWN01' AND SHIPTO_ID LIKE '%';
EXPORT PS_SUT_CALC_PARMS WHERE EFFDT LIKE '%' AND SETID = 'TWN01' AND SHIPTO_ID LIKE '%';
EXPORT PS_SUT_DFLT_TBL WHERE SETID = 'TWN01' AND SHIPTO_ID LIKE '%';
EXPORT PS_SUT_EXCPTN_TBL WHERE EFFDT LIKE '%' AND SETID = 'TWN01' AND SHIPTO_ID LIKE '%';
EXPORT PS_RUN_CNTL_SJE WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID = 'TWN_PGL_GLSJE_D1';
EXPORT PS_SOURCE_TBL WHERE EFFDT LIKE '%' AND SETID = 'APP01' AND SOURCE IN ('VSP','FCN','PTR','MRX');
EXPORT PS_LED_DEFN_TBL WHERE LEDGER LIKE '%' AND SETID = 'TWN01';
EXPORT PS_LED_FLDS_TBL WHERE LEDGER LIKE '%' AND SETID = 'TWN01';
EXPORT PS_LED_SUMV_TBL WHERE LEDGER LIKE '%' AND SETID = 'TWN01';
EXPORT PS_TAX_AUTHORITY WHERE EFFDT LIKE '%' AND SETID = 'TWN01' AND TAX_AUTHORITY_CD LIKE '%';
EXPORT PS_VAT_PSB_TBL WHERE SETID = 'TWN01' AND TAX_AUTHORITY_CD LIKE '%';
EXPORT PS_TAX_CD WHERE SETID = 'TWN01' AND TAX_CD LIKE '%';
EXPORT PS_TAX_HEADER_TBL WHERE SETID = 'TWN01' AND TAX_CD LIKE '%';
EXPORT PS_VAT_DST_TBL WHERE SETID = 'TWN01' AND TAX_CD LIKE '%';
EXPORT PS_VAT_ENTITY WHERE VAT_ENTITY = 'TWNVAT';
EXPORT PS_VAT_ENT_BU_GL WHERE VAT_ENTITY = 'TWNVAT';
EXPORT PS_VAT_ENT_RGSTRN WHERE VAT_ENTITY = 'TWNVAT';
EXPORT PS_VAT_TXN_CD WHERE SETID = 'TWN01' AND VAT_TXN_TYPE_CD LIKE '%';
EXPORT PS_VAT_USE_TBL WHERE EFFDT LIKE '%' AND SETID = 'TWN01' AND VAT_USE_ID LIKE '%';
EXPORT PS_VENDOR_CONTROL WHERE SETID = 'TWN01';
EXPORT PS_WTHD_BU_CAT WHERE WTHD_TYPE IN ('TW001', 'TW002');
EXPORT PS_BU_WTHD_ENT_FLD WHERE WTHD_ENTITY = 'TWTAX';
EXPORT PS_WTHD_CATEGORY WHERE WTHD_ENTITY = 'TWTAX';
EXPORT PS_WTHD_ENTITY_DFN WHERE WTHD_ENTITY = 'TWTAX';
EXPORT PS_WTHD_ENTITY_DTL WHERE WTHD_ENTITY = 'TWTAX';
EXPORT PS_WTHD_ENTITY_HDR WHERE WTHD_ENTITY = 'TWTAX';
EXPORT PS_WTHD_ENT_FIELDS WHERE WTHD_ENTITY = 'TWTAX';
EXPORT PS_WTHD_JUR_TBL WHERE WTHD_TYPE IN ('TW001','TW002');
EXPORT PS_WTHD_RULE_DTL WHERE WTHD_RULE IN ('TW001', 'TW002');
EXPORT PS_WTHD_RULE_HDR WHERE WTHD_RULE IN ('TW001', 'TW002');
EXPORT PS_WTHD_RULE_TIER WHERE WTHD_RULE IN ('TW001' , 'TW002');
EXPORT PS_WTHD_CLASS_TBL WHERE WTHD_TYPE IN ('TW001','TW002');
EXPORT PS_WTHD_TYPE_TBL WHERE WTHD_TYPE IN ('TW001','TW002');
EXPORT PS_WTHD_VNDR_CAT WHERE WTHD_TYPE IN ('TW001','TW002');

-- Programmer Name: Prashant Prakash
-- Date: 13/12/2010
--
-- Description:
-- Run Control Insert Script
-- TO be run in TARGET
--------------------------------------------------------------------

--PSPRCSRUNCNTL
INSERT INTO PSPRCSRUNCNTL
SELECT * FROM 
(SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ADB_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ALLOC_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_AMAEDIST_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_AMDPCALC_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_AMDPREPT_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_AMPS1000_OPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_AMPS1000_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ANZ_BALC_CUR_TO WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ANZ_GIW_BU_DEPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ANZ_JNL_LED_ACT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ANZ_JNL_LED_DEP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ANZ_JNL_LED_NOD WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_CLOSE_REQBU_TBL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_CLOSE_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_COMBO_BLD_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_COMB_EXT_PG_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_CURR_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_DEPR_CLOSE_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_INTFC_APAM_OPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_INTFC_APAM_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_JRNLGEN_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_JRNL_EDIT_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_JRNL_POST_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_PO_POSTAGE_PARM WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PSNVSBOOK WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PSNVSBOOKREQUST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_PST_PYMT_RUN_AP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_PST_PYMT_RUN_BK WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_PST_VCHR_PYMNT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_PST_VCHR_RUN_AP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_PST_VCHR_RUN_BU WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUNCTLANZ0746A2 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUNCTL_ANZ0746A WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUNCTL_ANZ1344 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUNCTL_ANZGF03A WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_BAL1FTP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_BALCRPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_BALC_LD WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_BALC_RQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_BAL_FTP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_BUPROOF WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_DTB WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_DTB_CF WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_DTB_CFV WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_DTB_RQS WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_EOD_UPD WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_GL_EXTR WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_PYCYCL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_REVSUM WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_REV_OP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_CNTL_AM WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_CNTL_SJE WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_CTL_ANZ0234 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_CTL_ANZ1031 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_UNCLOSE_PI_TBL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_ALLOC_REQUEST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%FSALLC%%'
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_DWH_BL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_EXRTFTP WHERE OPRID = 'PSBATCH'
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID AS RUNCNTLID,1 AS VERSION,'PSNT' AS SERVERNAME,2 AS OUTDESTTYPE,15 AS OUTDESTFORMAT,'' AS SRVRDESTFILE,'' AS SRVRDESTPRINTER,'' AS CLNTDESTFILE,'' AS CLNTDESTPRINTER,2 AS RUNLOCATION,getdate() AS LASTUPDDTTM,'PSBATCH' AS LASTUPDOPRID FROM PS_RUN_ANZ_AML_V WHERE OPRID = 'PSBATCH'
) X
WHERE NOT EXISTS
(SELECT 'S' FROM PSPRCSRUNCNTL Y WHERE Y.OPRID = X.OPRID AND Y.RUNCNTLID = X.RUNCNTLID);

--PS_PRCSRUNCNTL
INSERT INTO PS_PRCSRUNCNTL
SELECT * FROM (
SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ADB_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ALLOC_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_AMAEDIST_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_AMDPCALC_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_AMDPREPT_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_AMPS1000_OPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_AMPS1000_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ANZ_BALC_CUR_TO WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ANZ_GIW_BU_DEPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ANZ_JNL_LED_ACT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ANZ_JNL_LED_DEP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ANZ_JNL_LED_NOD WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_CLOSE_REQBU_TBL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_CLOSE_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_COMBO_BLD_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_COMB_EXT_PG_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_CURR_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_DEPR_CLOSE_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_INTFC_APAM_OPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_INTFC_APAM_RQST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_JRNLGEN_REQUEST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_JRNL_EDIT_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_JRNL_POST_REQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_PO_POSTAGE_PARM WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PSNVSBOOK WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PSNVSBOOKREQUST WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_PST_PYMT_RUN_AP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_PST_PYMT_RUN_BK WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_PST_VCHR_PYMNT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_PST_VCHR_RUN_AP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_PST_VCHR_RUN_BU WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUNCTLANZ0746A2 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUNCTL_ANZ0746A WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUNCTL_ANZ1344 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUNCTL_ANZGF03A WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_BAL1FTP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_BALCRPT WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_BALC_LD WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_BALC_RQ WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_BAL_FTP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_BUPROOF WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_DTB WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_DTB_CF WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_DTB_CFV WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_DTB_RQS WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_EOD_UPD WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_GL_EXTR WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_PYCYCL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_REVSUM WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_REV_OP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_CNTL_AM WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_CNTL_SJE WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_CTL_ANZ0234 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_CTL_ANZ1031 WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_UNCLOSE_PI_TBL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_ALLOC_REQUEST WHERE OPRID = 'PSBATCH' AND RUN_CNTL_ID LIKE 'TWN%FSALLC%%'
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_DWH_BL WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_EXRTFTP WHERE OPRID = 'PSBATCH' 
UNION SELECT DISTINCT OPRID,RUN_CNTL_ID,'ENG' AS LANGUAGE_CD,'O' AS LANGUAGE_OPTION FROM PS_RUN_ANZ_AML_V WHERE OPRID = 'PSBATCH' 
)
X
WHERE NOT EXISTS
(SELECT 'S' FROM PS_PRCSRUNCNTL Y WHERE Y.OPRID = X.OPRID AND Y.RUN_CNTL_ID = X.RUN_CNTL_ID);

--Export SOURCE

SET LOG C:\Temp\ANZConfigTool_100111.LOG;
SET OUTPUT C:\Temp\ANZConfigTool_100111.DAT;

UPDATE PS_PP_COMP_QRY SET SQL_STATEMENT = ' '

EXPORT PS_PP_COMP_QRY;
EXPORT PS_PP_COMP_QRY_1;
EXPORT PS_PP_COMP_QRY_2;

--Import TARGET

SET LOG C:\Temp\ANZConfigTool_100111_IMP.LOG;
SET INPUT C:\Temp\ANZConfigTool_100111.DAT;

DELETE PS_PP_COMP_QRY;
DELETE PS_PP_COMP_QRY_1;
DELETE PS_PP_COMP_QRY_2;

IMPORT *;

select REC_GROUP_ID, COUNT(1)[Record Count] from PS_REC_GROUP_REC GROUP BY REC_GROUP_ID
order by 2 desc


select * FROM PS_SETID_TBL WHERE SETID = 'CHN01'
SELECT * FROM PS_SET_CNTRL_TBL WHERE SETCNTRLVALUE = '07404'
--FIND INVALID RECORD GROUPS for a SETCNTRLVALUE
SELECT * FROM PS_SET_CNTRL_GROUP WHERE SETCNTRLVALUE = '07404'
AND REC_GROUP_ID NOT IN (SELECT REC_GROUP_ID FROM PS_REC_GROUP_REC)

SELECT REC_GROUP_ID FROM PS_REC_GROUP_TBL 
WHERE EXISTS 
(SELECT REC_GROUP_ID , COUNT(1) FROM PS_REC_GROUP_REC GROUP BY REC_GROUP_ID
HAVING COUNT(1) > 0)
ORDER BY 1

SELECT REC_GROUP_ID FROM PS_REC_GROUP_TBL 
WHERE REC_GROUP_ID IN (SELECT REC_GROUP_ID FROM PS_REC_GROUP_REC WHERE RECNAME <> ' ')

Function IScript_loadJQueryJS()
   %Response.Write("elementPage = document.documentElement;");
   %Response.Write("element = document.createElement('script');");
   %Response.Write("element.setAttribute('type','text/javascript');");
   %Response.Write("element.setAttribute('src','%JavaScript(JQUERY_JS)');");
   %Response.Write("elementPage.appendChild(element);");
   
   %Response.Write("element = document.createElement('script');");
   %Response.Write("element.setAttribute('type','text/javascript');");
   %Response.Write("element.setAttribute('src','%JavaScript(KPPP_CON_MENU_JS)');");
   %Response.Write("elementPage.appendChild(element);");
End-Function;

Function IScript_loadCntxMnu
   %Response.Write("elementPage = document.documentElement;");
   %Response.Write("element = document.createElement('script');");
   %Response.Write("element.setAttribute('type','text/javascript');");
   %Response.Write("element.setAttribute('src','%JavaScript(JQUERY_CONTEXT_MENU_JS)');");
   %Response.Write("elementPage.appendChild(element);");
   
   %Response.Write("element = document.createElement('link');");
   %Response.Write("element.setAttribute('href','%StyleSheet(KPPP_CON_MENU_CSS)');");
   %Response.Write("element.setAttribute('rel','stylesheet');");
   %Response.Write("element.setAttribute('type','text/css');");
   %Response.Write("elementPage.appendChild(element);");
   
   /*%Response.Write("element = document.createElement('script');");
   %Response.Write("element.setAttribute('type','text/javascript');");
   %Response.Write("element.setAttribute('src','%JavaScript(CREATENREGISTERCUSTOMMENU)');");
   %Response.Write("elementPage.appendChild(element);");*/
   %Response.Write("createNRegisterCustomMenu();");
End-Function;
