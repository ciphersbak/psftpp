import AM_IOT:JsonService;
import AM_IOT:Constants;

class AssetGroup
   method AssetGroup();
   method fetchAssetGroups(&sIoTOrgID_ As string) Returns boolean;
   /* Count IoT Asset Groups - Make use of mongoDB Query Syntax */
   method countAssetGroups(&sIoTOrgID_ As string, &sParameter_ As string, &sSearchVal_ As string) Returns number;
   method createAssetGroup(&sIoTOrgID_ As string, &sIoTGroupName_ As string, &sIoTGroupDescr_ As string) Returns boolean;
private
   instance AM_IOT:JsonService &oJsonService_;
   instance AM_IOT:Constants &oConstantService_;
   instance string &sIoTResponse_;
   
end-class;

method AssetGroup
   
   &oJsonService_ = create AM_IOT:JsonService();
   &oConstantService_ = create AM_IOT:Constants();
end-method;

method fetchAssetGroups
   /+ &sIoTOrgID_ as String +/
   /+ Returns Boolean +/
   
   Local integer &i, &j, &m_doccount_, &m_doc_, &nItemsChildCnt_, &nArrLen_, &nArrCount_;
   Local JsonObject &oJObjAssetGroupFetch_;
   Local Record &recPSIoTAssetGroups_;
   Local string &sFetchAssetGroupURI_, &sModFetchAssetGroupURI_, &sMethodName_;
   Local boolean &bUpdate_;
   
   &sFetchAssetGroupURI_ = "";
   &sModFetchAssetGroupURI_ = "";
   &sMethodName_ = "AssetGroup:fetchAssetGroups";
   Local time &startTime_ = %PerfTime;
   
   try
      rem &sFetchAssetGroupURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_ASSETGROUP");
      &sFetchAssetGroupURI_ = &oJsonService_.fetchEndpoint("FETCH_ASSETGROUP");
      If &sFetchAssetGroupURI_ <> "" Then
         &sModFetchAssetGroupURI_ = &oJsonService_.SubstituteURI(&sFetchAssetGroupURI_, &sIoTOrgID_); /* Replace <orgId> */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModFetchAssetGroupURI_, "GET", "", False); /* Send the request to IoT */
      Else
         rem cannot fetch asset groups;
         &oJsonService_.LogRequest(&sMethodName_ | " FETCH IoT ASSET GROUP FAILED! ", "");
         Return False;
      End-If;
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   &oJObjAssetGroupFetch_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   If &oJObjAssetGroupFetch_.IsJsonArray(&oConstantService_.IoTResponseArray_) Then
      &oJsonService_.LogRequest("Fetching IoT Asset Groups : ", &sModFetchAssetGroupURI_);
      Local JsonArray &jArray_ = &oJObjAssetGroupFetch_.GetJsonArray(&oConstantService_.IoTResponseArray_);
      If &jArray_.Size > 0 Then /* Read Array */
         &m_doccount_ = &jArray_.Length();
         For &i = 1 To &m_doccount_
            Local JsonObject &jObject_ = &jArray_.GetJsonObject(&i);
            If &jObject_.IsExist("id") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceID_, String(&jObject_.GetProperty("id")));
            End-If;
            If &jObject_.IsExist("name") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceName_, String(&jObject_.GetProperty("name")));
            End-If;
            Local boolean &bDescription_ = False;
            If &jObject_.IsExist("description") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceDescription_, String(&jObject_.GetProperty("description")));
               &bDescription_ = True;
            End-If;
            If &jObject_.IsExist("type") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceType_, String(&jObject_.GetProperty("type")));
            End-If;
            If &jObject_.IsExist("assetsCount") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceOrganisation_, String(&jObject_.GetProperty("assetsCount")));
            End-If;
            If &jObject_.IsExist("organizationId") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceOrganisation_, String(&jObject_.GetProperty("organizationId")));
            End-If;
            Local boolean &bParentID_ = False;
            If &jObject_.IsExist("parentId") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceOrganisation_, String(&jObject_.GetProperty("parentId")));
               &bParentID_ = True;
            End-If;
            
            If &jObject_.IsExist("links") Then
               Local JsonArray &ojObjLinksArray_ = &jObject_.GetJsonArray("links");
               If &ojObjLinksArray_.Size > 0 Then /* Read Array */
                  &m_doc_ = &ojObjLinksArray_.Length();
                  For &j = 1 To &m_doc_
                     Local JsonObject &jObjLinks_ = &ojObjLinksArray_.GetJsonObject(&j);
                     If &jObjLinks_.GetProperty("rel") = "self" Then
                        rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceSelfLink_, String(&jObjLinks_.GetProperty("href")));
                     End-If;
                  End-For;
               End-If;
            End-If;
            
            REM Insert into New Asset Group Table;
            &recPSIoTAssetGroups_ = CreateRecord(Record.AM_IOT_ASSETGRP);
            &recPSIoTAssetGroups_.AM_IOT_GROUP_ID.Value = &jObject_.GetProperty("id");
            &recPSIoTAssetGroups_.AM_IOT_GROUP_NAME.Value = &jObject_.GetProperty("name");
            If &bDescription_ Then
               &recPSIoTAssetGroups_.AM_IOT_GROUP_DESCR.Value = &jObject_.GetProperty("description");
            Else
               &recPSIoTAssetGroups_.AM_IOT_GROUP_DESCR.Value = "";
            End-If;
            rem &recPSIoTAssetGroups_.AM_IOT_ASSET_TYPE.Value = &jObject_.GetProperty("type");
            &recPSIoTAssetGroups_.AM_IOT_GROUP_ASCNT.Value = &jObject_.GetProperty("assetsCount");
            &recPSIoTAssetGroups_.AM_IOT_ORG_ID.Value = &jObject_.GetProperty("organizationId");
            If &bParentID_ Then
               &recPSIoTAssetGroups_.AM_IOT_PARENT_ID.Value = &jObject_.GetProperty("parentId");
            Else
               &recPSIoTAssetGroups_.AM_IOT_PARENT_ID.Value = "";
            End-If;
            &recPSIoTAssetGroups_.AM_IOT_GROUP_URL.Value = &jObjLinks_.GetProperty("href");
            &recPSIoTAssetGroups_.AM_LASTUPDT_DTTM.Value = %Datetime;
            &recPSIoTAssetGroups_.AM_LASTUPDT_OPRID.Value = %OperatorId;
            &bUpdate_ = &recPSIoTAssetGroups_.Update(&recPSIoTAssetGroups_);
            If Not &bUpdate_ Then
               &recPSIoTAssetGroups_.Insert();
            End-If;
            
         End-For;
      End-If;
      Return True;
   Else
      rem Its not an array;
      &oJsonService_.LogRequest("IoT Asset Groups Response is NOT AN ARRAY : ", "");
      Return False;
   End-If;
   
end-method;

method createAssetGroup
   /+ &sIoTOrgID_ as String, +/
   /+ &sIoTGroupName_ as String, +/
   /+ &sIoTGroupDescr_ as String +/
   /+ Returns Boolean +/
   
   Local string &sCreateAssetGroupURI_, &sModCreateAssetGroupURI_, &sRequestJSONUpd_, &sMethodName_;
   
   &sCreateAssetGroupURI_ = "";
   &sModCreateAssetGroupURI_ = "";
   &sMethodName_ = "AssetGroup:createAssetGroup";
   Local time &startTime_ = %PerfTime;
   
   try
      Local JsonBuilder &oJsonBldrUpd_ = CreateJsonBuilder(); /* Create Payload */
      If &oJsonBldrUpd_.StartObjectReturnsTrue("") Then
         &oJsonBldrUpd_.AddProperty("name", &sIoTGroupName_);
         &oJsonBldrUpd_.AddProperty("description", &sIoTGroupDescr_);
         &oJsonBldrUpd_.AddProperty("type", "STATIC");
         &oJsonBldrUpd_.AddProperty("parentId", "");
         &oJsonBldrUpd_.EndObject("");
      End-If;
      &sRequestJSONUpd_ = &oJsonBldrUpd_.ToString();
      rem &sCreateAssetGroupURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "CREATE_ASSETGROUP");
      &sCreateAssetGroupURI_ = &oJsonService_.fetchEndpoint("CREATE_ASSETGROUP");
      If &sCreateAssetGroupURI_ <> "" Then
         &sModCreateAssetGroupURI_ = &oJsonService_.SubstituteURI(&sCreateAssetGroupURI_, &sIoTOrgID_); /* Replace <orgId> */
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sCreateAssetGroupURI_, "POST", &sRequestJSONUpd_, False); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModCreateAssetGroupURI_, "POST", &sRequestJSONUpd_, False); /* Send the request to IoT */
      Else
         rem cannot create asset group;
         &oJsonService_.LogRequest(&sMethodName_ | " CREATE ASSET GROUP Failed! ", "");
         Return False;
      End-If;
      
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   Return True;
   
end-method;

method countAssetGroups
   /+ &sIoTOrgID_ as String, +/
   /+ &sParameter_ as String, +/
   /+ &sSearchVal_ as String +/
   /+ Returns Number +/
   
   Local number &nAssetGroupsInIoT_;
   Local string &sFetchAssetGroupURI_, &sModFetchAssetGroupURI_, &sMethodName_;
   Local string &sModQueryStringFinal_;
   Local JsonObject &oJObjIoTAssetGroupCount_;
   &sFetchAssetGroupURI_ = "";
   &sModFetchAssetGroupURI_ = "";
   &sMethodName_ = "AssetGroup:countAssetGroups";
   
   &sModQueryStringFinal_ = &oJsonService_.substituteMongoDBQry(&sMethodName_, "description", "PS");
   Local time &startTime_ = %PerfTime;
   
   try
      &sFetchAssetGroupURI_ = &oJsonService_.fetchEndpoint("FETCH_ASSETGROUP");
      If &sFetchAssetGroupURI_ <> "" Then
         &sModFetchAssetGroupURI_ = &oJsonService_.SubstituteURI(&sFetchAssetGroupURI_, &sIoTOrgID_); /* Replace <orgId> */
         If &sModQueryStringFinal_ <> "" Then
            &sModFetchAssetGroupURI_ = &sModFetchAssetGroupURI_ | "/count/" | &sModQueryStringFinal_;
         Else
            &sModFetchAssetGroupURI_ = &sModFetchAssetGroupURI_ | "/count";
         End-If;
         &oJsonService_.LogRequest(&sMethodName_ | " COUNT IoT Asset Groups URL : ", &sModFetchAssetGroupURI_);
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModFetchAssetGroupURI_, "GET", "", False); /* Send the request to IoT */
      Else
         rem cannot count Asset Groups;
         &oJsonService_.LogRequest(&sMethodName_ | " COUNT IoT Asset Groups Failed! ", "");
         Return 0;
      End-If;
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return 0;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   &oJObjIoTAssetGroupCount_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   &nAssetGroupsInIoT_ = &oJsonService_.countIoTArtifacts(&sMethodName_, &oJObjIoTAssetGroupCount_);
   Return &nAssetGroupsInIoT_;
   /* 
   If &oJObjIoTAssetGroupCount_.IsExist("count") Then
      &oJsonService_.LogRequest(&sMethodName_ | " COUNT OF IoT Asset Groups : ", String(&oJObjIoTAssetGroupCount_.GetProperty("count")));
      &nAssetGroupsInIoT_ = &oJObjIoTAssetGroupCount_.GetProperty("count");
      Return &nAssetGroupsInIoT_;
   Else
      Return 0;
   End-If;
   */
end-method;
