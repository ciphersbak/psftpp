REM PP START;
REM Check Asset's existence and UPDATE;
Local string &sFilePath_, &sIOTAssetEndPoint_, &sIOTAssetName_, &sAssetURI_, &sAuthInfo_, &sAuthEnc_, &sAuthHeader_;
Local File &oLogFile_;
Local Message &oGenRqstRESTMsg_, &oGenRspnsRESTMsg_;
Local IBInfo &IBInfo_;
Local boolean &bRet;
Local object &oString_, &oEncoder_;

&sFilePath_ = "C:\Temp\PSIoTAssetUpdateLog_" | %Datetime | ".out";
&oLogFile_ = GetFile(&sFilePath_, "W", %FilePath_Absolute);
rem &sIOTAssetEndPoint_ = "https://slc16lnq.us.oracle.com/assetMonitoring/clientapi/v2/assets"; /* REST endpoint for fetching assets */
&sIOTAssetEndPoint_ = "https://slc15dmc.us.oracle.com/assetMonitoring/clientapi/v2/assets"; /* REST endpoint for fetching assets */
&sIOTAssetName_ = GetLevel0().GetRow(1).ASSET.BUSINESS_UNIT.Value | GetLevel0().GetRow(1).ASSET.ASSET_ID.Value;
&sAssetURI_ = &sIOTAssetEndPoint_ | "/" | &sIOTAssetName_; /* Construct Canonical HREF */
&oGenRqstRESTMsg_ = CreateMessage(Operation.IB_GENERIC_REST_POST); /* Use the delivered IB REST POST SvOp */

&IBInfo_ = &oGenRqstRESTMsg_.IBInfo;
&bRet = &IBInfo_.LoadConnectorProp("HTTPTARGET");
&IBInfo_.ConnectorOverride = True;
&IBInfo_.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
&IBInfo_.IBConnectorInfo.ConnectorName = "HTTPTARGET";
&sAuthInfo_ = "iot:welcome1"; /* This should ideally be hidden */
&oString_ = CreateJavaObject("java.lang.String", &sAuthInfo_);
&oEncoder_ = CreateJavaObject("sun.misc.BASE64Encoder");
&sAuthEnc_ = &oEncoder_.encodeBuffer(&oString_.getBytes());
&sAuthHeader_ = &sAuthEnc_;
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic " | &sAuthHeader_, %HttpHeader); /* V IMP */
rem &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("SearchUser", %UserId, %HttpHeader);
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Content-Type", "application/json; encoding=""UTF-8""", %HttpHeader);
&bRet = &IBInfo_.IBConnectorInfo.DeleteConnectorProperties("URL");
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("URL", &sAssetURI_, %HttpProperty);
&bRet = &IBInfo_.IBConnectorInfo.DeleteConnectorProperties("Method");
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Method", "GET", %HttpProperty); /* Change this based on HTTP Verbs */

If &oLogFile_.IsOpen Then
   &oLogFile_.WriteLine("---------" | "Request URI : " | %Datetime | "---------");
   &oLogFile_.WriteLine(&sAssetURI_);
   &oLogFile_.WriteLine("---------" | "---------");
End-If;

try
   &oGenRspnsRESTMsg_ = %IntBroker.ConnectorRequest(&oGenRqstRESTMsg_, True); /* Response received from IoT */
   If &oGenRspnsRESTMsg_.ResponseStatus <> %IB_Status_Success Then
      If &oLogFile_.IsOpen Then /* write to file */
         &oLogFile_.WriteLine("---------" | "Error : " | %Datetime | "---------");
         &oLogFile_.WriteLine(&oGenRspnsRESTMsg_.GetContentString());
         &oLogFile_.WriteLine("---------" | "---------");
      End-If;
      MessageBox(0, "", 0, 0, "BU/Asset : " | &sIOTAssetName_ | " does not exist in IOT : " | &oGenRspnsRESTMsg_.HTTPResponseCode);
      rem throw &oGenRspnsRESTMsg_.IBException;
   Else
      MessageBox(0, "", 0, 0, "Response Received : Asset Exists " | &oGenRspnsRESTMsg_.HTTPResponseCode);
      /* Asset exists, update location */
      Local JsonBuilder &jsonbldr_ = CreateJsonBuilder(); /* Create Payload */
      If &jsonbldr_.StartObjectReturnsTrue("") Then
         &jsonbldr_.AddProperty("name", &sIOTAssetName_);
         rem &jsonbldr_.AddProperty("type", "HARDWARE"); /* Asset Type predefined in IoT */
         &jsonbldr_.AddProperty("type", "RunwaySweepingAssetType"); /* Asset Type predefined in IoT */
         &effdtm_ = %Datetime;
         &date_ = DateTimeToISO(&effdtm_);
         &jsonbldr_.AddProperty("description", "PATCHed Asset " | %UserId | "_" | &date_);
         rem &jsonbldr_.AddProperty("geoLocation", "13.196859665896742, 77.70419643159327"); /* Hardcoded to make it work with DS example */
         &jsonbldr_.AddProperty("geoLocation", "17.2403, 78.4294"); /* Hardcoded to make it work with DS example */
         &jsonbldr_.AddProperty("assignedPlaceName", "HYDERABAD1"); /* Assigned Place predefined as part of imported project in DS */
         &jsonbldr_.AddProperty("eamId", &iotAssetName_); /* eamId is the External Asset ID */
         If &jsonbldr_.StartArrayReturnsTrue("tags") Then
            &assetTag_ = "PP TAG NEW";
            &jsonbldr_.AddElement(&assetTag_);
            &jsonbldr_.EndArray("tags");
         End-If;
         <* When you are using assignedPlaceName, do not specify storagePlaces
         If &jsonbldr_.StartArrayReturnsTrue("storagePlaces") Then /* Asset Location predefined in IoT */
            &assetLocation_ = "Hyderabad 1";
            &jsonbldr_.AddElement(&assetLocation_);
            &jsonbldr_.EndArray("storagePlaces");
         End-If; *>
         <* 
         If &jsonbldr_.StartArrayReturnsTrue("attributes") Then /* Devices, Device ID should be unique and should not be tagged to an existing asset */
            &jsonbldr_.StartObject("attributes");
            rem &jsonbldr_.AddElement("RunwaySweepingAssetTypeDM");
            rem &jsonbldr_.AddElement("11DD08B2-7367-4E22-BE00-05F915660A23");
            &jsonbldr_.AddProperty("name", "RunwaySweepingAssetTypeDM");
            rem &jsonbldr_.AddProperty("value", "11DD08B2-7367-4E22-BE00-05F915660A23");
            rem &jsonbldr_.AddProperty("value", "3343992D-81A2-487B-94E4-E5E327570FDA");
            &jsonbldr_.AddProperty("value", "3E67902D-0EA5-42CF-812C-A752FA77F8DA");
            &jsonbldr_.EndObject("attributes");
            &jsonbldr_.EndArray("attributes");
         End-If;        
         If &jsonbldr_.StartArrayReturnsTrue("groupNames") Then /* Asset Group predefined in IoT */
            &assetGroup_ = "DUMMY_GROUP_1";
            &jsonbldr_.AddElement(&assetGroup_);
            &jsonbldr_.EndArray("groupNames");
         End-If;
         *>
         &jsonbldr_.EndObject("");
      End-If;
      &SomeJSONStr_ = &jsonbldr_.ToString();
      MessageBox(0, "", 0, 0, "" | &SomeJSONStr_);
      If &oLogFile_.IsOpen Then /* write to file */
         &oLogFile_.WriteLine("---------" | "PATCH Request : " | %Datetime | "---------");
         &oLogFile_.WriteLine(&jsonbldr_.ToString());
         &oLogFile_.WriteLine("---------" | "---------");
      End-If;
      &oGenRqstRESTMsg_ = CreateMessage(Operation.IB_GENERIC_REST_POST); /* Use the delivered IB REST POST SvOp */
      &bRet_ = &oGenRqstRESTMsg_.SetContentString(&jsonbldr_.ToString()); /* Assign the JSON String to the Request Message */
      &IBInfo_ = &oGenRqstRESTMsg_.IBInfo;
      
      &bRet = &IBInfo_.LoadConnectorProp("HTTPTARGET");
      &IBInfo_.ConnectorOverride = True;
      &IBInfo_.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
      &IBInfo_.IBConnectorInfo.ConnectorName = "HTTPTARGET";
      &sAuthInfo_ = "iot:welcome1"; /* This should ideally be hidden */
      &oString_ = CreateJavaObject("java.lang.String", &sAuthInfo_);
      &oEncoder_ = CreateJavaObject("sun.misc.BASE64Encoder");
      &sAuthEnc_ = &oEncoder_.encodeBuffer(&oString_.getBytes());
      &sAuthHeader_ = &sAuthEnc_;
      &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic " | &sAuthHeader_, %HttpHeader); /* V IMP */
      rem &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("SearchUser", %UserId, %HttpHeader);
      &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Content-Type", "application/json; encoding=""UTF-8""", %HttpHeader);
      &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("X-HTTP-Method-Override", "PATCH", %HttpHeader); /* V IMP */
      &bRet = &IBInfo_.IBConnectorInfo.DeleteConnectorProperties("URL");
      &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("URL", &sAssetURI_, %HttpProperty);
      &bRet = &IBInfo_.IBConnectorInfo.DeleteConnectorProperties("Method");
      &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Method", "POST", %HttpProperty); /* Change this based on HTTP Verbs */
      rem &bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Method", "PATCH", %HttpProperty); /* Change this based on HTTP Verbs */
      
      &oGenRspnsRESTMsg_ = %IntBroker.ConnectorRequest(&oGenRqstRESTMsg_, True); /* Response received from IoT */
      If &oGenRspnsRESTMsg_.ResponseStatus <> %IB_Status_Success Then
         
         MessageBox(0, "", 0, 0, "Update Failed: " | &oGenRspnsRESTMsg_.HTTPResponseCode);
         rem throw &oGenRspnsRESTMsg_.IBException;
      Else
         If &oLogFile_.IsOpen Then /* write to file */
            &oLogFile_.WriteLine("---------" | "Response : " | %Datetime | "---------");
            &oLogFile_.WriteLine(&oGenRspnsRESTMsg_.GetContentString());
            &oLogFile_.WriteLine("---------" | "---------");
         End-If;
         MessageBox(0, "", 0, 0, "Asset updated " | &oGenRspnsRESTMsg_.HTTPResponseCode);
      End-If;
   End-If;
catch Exception &e
   throw &e;
end-try;

REM PP END;
