import AM_IOT:*;
import AM_IOT:JsonService;
import AM_IOT:AssetIncidents;

If None(&oLogObj_) Then
   &oLogObj_ = create AM_IOT:JsonService();
End-If;

If None(&oAMIoTIncidents_) Then
   &oAMIoTIncidents = create AM_IOT:AssetIncidents();
End-If;

Local boolean &bFetchIncidents_;
rem &bFetchIncidents_ = &oAMIoTIncidents.fetchIncidents("");

rem &sIOTIncidentEndpoint_ = "https://slc16jgp.us.oracle.com/assetMonitoring/clientapi/v2/incidents"; /* REST endpoint for fetching assets */
&sIOTIncidentEndpoint_ = "https://slc16jgp.us.oracle.com/assetMonitoring/privateclientapi/v2/orgs/98602F93-E886-4427-80D5-89B94F360BC0/incidents?orderBy=lastModifiedTime:dsc"; /* REST endpoint for fetching assets */
rem &sAssetURIFields_ = "?fields=id,name,type,description,geoLocation,assignedPlace,attributes,lastReportedTimeAsString&limit=1000&orderBy='lastReportedTimeAsString' desc";
&sAssetURIFields_ = "?fields=id,name,type,description,geoLocation,assignedPlace,attributes,lastReportedTimeAsString&limit=1000";
rem &sIncidentURI_ = &sIOTIncidentEndpoint_ | &sAssetURIFields_;
&sIncidentURI_ = &sIOTIncidentEndpoint_;
&oGenRqstRESTMsg_ = CreateMessage(Operation.IB_GENERIC_REST_POST); /* Use the delivered IB REST POST SvOp */

&IBInfo_ = &oGenRqstRESTMsg_.IBInfo;
&bRet = &IBInfo_.LoadConnectorProp("HTTPTARGET");
&IBInfo_.ConnectorOverride = True;
&IBInfo_.IBConnectorInfo.ConnectorClassName = "HttpTargetConnector";
&IBInfo_.IBConnectorInfo.ConnectorName = "HTTPTARGET";
&sAuthInfo_ = "iot:welcome1"; /* This should ideally be hidden */
&oString_ = CreateJavaObject("java.lang.String", &sAuthInfo_);
&oEncoder_ = CreateJavaObject("sun.misc.BASE64Encoder");
&sAuthEnc_ = &oEncoder_.encodeBuffer(&oString_.getBytes());
&sAuthHeader_ = &sAuthEnc_;
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Authorization", "Basic " | &sAuthHeader_, %HttpHeader); /* V IMP */
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Content-Type", "application/json; encoding=""UTF-8""", %HttpHeader);
&bRet = &IBInfo_.IBConnectorInfo.DeleteConnectorProperties("URL");
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("URL", &sIOTIncidentEndpoint_, %HttpProperty);
&bRet = &IBInfo_.IBConnectorInfo.DeleteConnectorProperties("Method");
&bRet = &IBInfo_.IBConnectorInfo.AddConnectorProperties("Method", "GET", %HttpProperty); /* Change this based on HTTP Verbs */


try
   &startTime_ = %PerfTime;
   &oGenRspnsRESTMsg_ = %IntBroker.ConnectorRequest(&oGenRqstRESTMsg_, True); /* Response received from IoT */
   If &oGenRspnsRESTMsg_.ResponseStatus <> %IB_Status_Success Then
      MessageBox(0, "", 0, 0, "GET Failed: " | &oGenRspnsRESTMsg_.HTTPResponseCode);
   Else
      rem MessageBox(0, "", 0, 0, "GET successful: " | &oGenRspnsRESTMsg_.HTTPResponseCode);
      &endTime_ = %PerfTime;
      &timeDiff_ = NumberToString("%6.3", Value(&endTime_ - &startTime_));
      Local string &content_ = &oGenRspnsRESTMsg_.GetContentString();
      Local JsonParser &parser_ = CreateJsonParser(); /* Parse the reponse */
      Local boolean &status_ = &parser_.Parse(&content_);
      Local JsonObject &jObj_ = &parser_.GetRootObject();
      Local number &bbbnbr_ = &jObj_.GetChildCount();
      Local integer &i, &j, &m_doccount_, &m_doc_;
      /* 
      &RS_Level1_ = &RowLevel0.GetRowset(Scroll.PP_IOTASSET_DTL);
      ScrollFlush(Record.PP_IOTASSET_DTL);
      */
      REM *** Set the counter to 1. Please be aware that aware that at this point there is an additional blank row which needs to be deleted later ***;
      &rec = 1;
      rem MessageBox(0, "", 0, 0, "Parse JSON and store asset information");
      rem &sFileColHeading_ = "IOT_ASSET_ID" | "," | "ASSET_NAME" | "," | "ASSET_TYPE" | "," | "ASSET_DESCRIPTION" | "," | "ASSET_GEOLOCATION" | "," | "ASSET_LASTRPTDDTTM" | "," | "ASSET_ASSIGNED_PLACE" | "," | "ASSET_DEVICE_ID" | "," | "ASSET_SELF_LINK";
      rem &oLogFile_.WriteLine(&sFileColHeading_);
      If &jObj_.IsExist("hasMore") Then
         rem MessageBox(0, "", 0, 0, "hasMore " | &jObj_.GetProperty("hasMore"));
      End-If;
      If &jObj_.IsJsonArray("items") Then
         &oLogObj_.LogRequest("+++++++Parsing JSON Response+++++++", "");
         rem Local JsonObject &messages_ = &jObj_.GetJsonObject("id");
         rem &sFileString_ = &sFileString_;
         Local JsonArray &jArray_ = &jObj_.GetJsonArray("items");
         If &jArray_.Size > 0 Then /* Read Array */
            &m_doccount_ = &jArray_.Length();
            For &i = 1 To &m_doccount_
               Local JsonObject &jObject_ = &jArray_.GetJsonObject(&i);
               &oLogObj_.LogRequest("<><><><><><> New Incident START <><><><><><>", "");
               &oLogObj_.LogRequest("IoT Incident ID : ", String(&jObject_.GetProperty("id")));
               &oLogObj_.LogRequest("IoT Incident Type : ", String(&jObject_.GetProperty("type")));
               &oLogObj_.LogRequest("IoT Incident State : ", String(&jObject_.GetProperty("state")));
               &oLogObj_.LogRequest("IoT Incident Summary : ", String(&jObject_.GetProperty("summary")));
               Local boolean &bDescription_ = False;
               If &jObject_.IsExist("description") Then
                  &oLogObj_.LogRequest("IoT Incident Description : ", String(&jObject_.GetProperty("description")));
                  rem &sFileString_ = &jObject_.GetProperty("id") | "," | &jObject_.GetProperty("name") | "," | &jObject_.GetProperty("type") | "," | &jObject_.GetProperty("description");
                  &bDescription_ = True;
               End-If;
               &oLogObj_.LogRequest("IoT Incident Rule : ", String(&jObject_.GetProperty("rule")));
               &oLogObj_.LogRequest("IoT Incident Priority : ", String(&jObject_.GetProperty("priority")));
               &oLogObj_.LogRequest("IoT Incident geoLocation : ", String(&jObject_.GetProperty("geoLocation")));
               &oLogObj_.LogRequest("IoT Incident createdBy : ", String(&jObject_.GetProperty("createdBy")));
               &oLogObj_.LogRequest("IoT Incident createdTimeAsString : ", String(&jObject_.GetProperty("createdTimeAsString")));
               &oLogObj_.LogRequest("IoT Incident lastModifiedTimeAsString : ", String(&jObject_.GetProperty("lastModifiedTimeAsString")));
               &oLogObj_.LogRequest("IoT Incident incidentTimeAsString : ", String(&jObject_.GetProperty("incidentTimeAsString")));
               &oLogObj_.LogRequest("IoT Incident organisationId : ", String(&jObject_.GetProperty("organizationId")));
               
               rem &sFileString_ = &jObject_.GetProperty("id") | "," | &jObject_.GetProperty("name") | "," | &jObject_.GetProperty("type");
               rem &oLogFile_.WriteLine(&sFileString_);
               
               REM Try and make it dynamic;
               For &nItemsChiildCnt_ = 1 To &jObject_.ChildCount
                  rem &oLogObj_.LogRequest("Item Child : ", "Property (Key : Value) (" | &jObject_.GetPropertyNameAt(&nItemsChiildCnt_) | " : " | &jObject_.GetProperty(&jObject_.GetPropertyNameAt(&nItemsChiildCnt_)) | ")");
                  If &jObject_.IsJsonArray(&jObject_.GetPropertyNameAt(&nItemsChiildCnt_)) Then
                     Local JsonArray &ojObjDynamicArray_ = &jObject_.GetJsonArray(&jObject_.GetPropertyNameAt(&nItemsChiildCnt_));
                     If &ojObjDynamicArray_.Size > 0 Then
                        &nArrLen_ = &ojObjDynamicArray_.Length();
                        For &nArrCount_ = 1 To &nArrLen_
                           rem Local JsonObject &ojObjDynamicArrayObj_ = &ojObjDynamicArray_.GetJsonObject(&nArrCount_);
                           rem &oLogObj_.LogRequest("Link Child : ", "Property (Key : Value) (" | &ojObjDynamicArrayObj_.GetPropertyNameAt(&nArrCount_) | " : " | &ojObjDynamicArrayObj_.GetProperty(&jObject_.GetPropertyNameAt(&nArrCount_)) | ")");
                           rem &oLogObj_.LogRequest("Inside Some JsonArray(s) : ", String(&ojObjDynamicArray_.GetElement(&nArrCount_)));
                        End-For;
                     End-If;
                  Else
                     If &jObject_.IsJsonObject(&jObject_.GetPropertyNameAt(&nItemsChiildCnt_)) Then
                        rem MessageBox(0, "", 0, 0, "hgshd : " | &jObject_.GetPropertyNameAt(&nItemsChiildCnt_));
                     End-If;
                  End-If;
               End-For;
               
               If &jObject_.IsExist("contextInformation") Then
                  Local JsonObject &oJsonContext_ = &jObject_.GetJsonObject("contextInformation");
                  Local JsonArray &ojObjContextArray_ = &oJsonContext_.GetJsonArray("affectedObjects");
                  If &ojObjContextArray_.Size > 0 Then /* Read affectedObjects Array */
                     &mc_doc_ = &ojObjContextArray_.Length();
                     For &jc = 1 To &mc_doc_
                        Local JsonObject &jObjContext_ = &ojObjContextArray_.GetJsonObject(&jc);
                        &oLogObj_.LogRequest("IoT Asset ID : ", String(&jObjContext_.GetProperty("id")));
                        &oLogObj_.LogRequest("IoT Asset Name : ", String(&jObjContext_.GetProperty("name")));
                     End-For;
                  End-If; /* affectedObjects END */
                  Local JsonArray &ojObjOccurrencesArray_ = &oJsonContext_.GetJsonArray("occurrences");
                  If &ojObjOccurrencesArray_.Size > 0 Then /* Read occurrences Array */
                     &tc_doc_ = &ojObjOccurrencesArray_.Length();
                     For &tc = 1 To &tc_doc_
                        Local JsonObject &jObjOccurrences_ = &ojObjOccurrencesArray_.GetJsonObject(&tc);
                        REM id and incidentId are no longer part of the payload starting 19.1.1;
                        rem &oLogObj_.LogRequest("IoT ID : ", String(&jObjOccurrences_.GetProperty("id")));
                        rem &oLogObj_.LogRequest("IoT Incident ID : ", String(&jObjOccurrences_.GetProperty("incidentId")));
                        Local JsonArray &ojObjSatisfiedPredicatesArray_ = &jObjOccurrences_.GetJsonArray("satisfiedPredicates");
                        If &ojObjSatisfiedPredicatesArray_.Size > 0 Then /* Read satisfiedPredicates Array */
                           &pc_doc_ = &ojObjSatisfiedPredicatesArray_.Length();
                           For &pc = 1 To &pc_doc_
                              Local JsonObject &jObjSatisfiedPredicates_ = &ojObjSatisfiedPredicatesArray_.GetJsonObject(&pc);
                              &oLogObj_.LogRequest("Type ", String(&jObjSatisfiedPredicates_.GetProperty("type")));
                              If &jObjSatisfiedPredicates_.IsExist("information") Then
                                 Local JsonObject &jSatisfiedPredicatesInfo_ = &jObjSatisfiedPredicates_.GetJsonObject("information");
                                 If &jSatisfiedPredicatesInfo_.IsExist("observedValue") Then
                                    &oLogObj_.LogRequest("IoTIncidentObservedValue_ : ", String(&jSatisfiedPredicatesInfo_.GetProperty("observedValue")));
                                 End-If;
                                 If &jSatisfiedPredicatesInfo_.IsExist("attributeName") Then
                                    &oLogObj_.LogRequest("IoTIncidentAttributeName_ : ", String(&jSatisfiedPredicatesInfo_.GetProperty("attributeName")));
                                 End-If;
                                 If &jSatisfiedPredicatesInfo_.IsExist("thresholdValue") Then
                                    &oLogObj_.LogRequest("IoTIncidentThresholdValue_ : ", String(&jSatisfiedPredicatesInfo_.GetProperty("thresholdValue")));
                                 End-If;
                                 If &jSatisfiedPredicatesInfo_.IsExist("operator") Then
                                    &oLogObj_.LogRequest("IoTIncidentOperator_ : ", String(&jSatisfiedPredicatesInfo_.GetProperty("operator")));
                                 End-If;
                              End-If;
                              rem &oLogObj_.LogRequest(&oConstantService_.IoTIncidentID_, String(&jObjOccurrences_.GetProperty("incidentId")));
                           End-For;
                        End-If; /* satisfiedPredicates END */
                     End-For;
                  End-If; /* occurrences END */
                  
               End-If; /* contextInformation END */
               
               If &jObject_.IsExist("links") Then
                  Local JsonArray &ojObjLinksArray_ = &jObject_.GetJsonArray("links");
                  If &ojObjLinksArray_.Size > 0 Then /* Read Array */
                     &m_doc_ = &ojObjLinksArray_.Length();
                     For &j = 1 To &m_doc_
                        Local JsonObject &jObjLinks_ = &ojObjLinksArray_.GetJsonObject(&j);
                        If &jObjLinks_.GetProperty("rel") = "self" Then
                           &oLogObj_.LogRequest("Incident ID Self Link : ", String(&jObjLinks_.GetProperty("href")));
                           &oLogObj_.LogRequest("<><><><><><> New Incident END <><><><><><>", "");
                           rem &sFileString_ = &sFileString_ | "," | &jObjLinks_.GetProperty("href");
                        End-If;
                     End-For;
                  End-If;
               End-If;
               rem &oLogFile_.WriteLine(&sFileString_);
               /* 
               If &rec <> 1 Then
                  REM *** This ensures that the additional blank row is not there ***;
                  &RS_Level1.InsertRow(&rec - 1);
               End-If;
               &Rec_Level1 = &RS_Level1.GetRow(&rec).GetRecord(Record.PP_IOTASSET_DTL);
               &Rec_Level11 = &RS_Level1.GetRow(&rec).GetRecord(Record.X_PP_DEV_WRK_X);
               &Rec_Level1.ACTIONDTTM.Value = %Datetime;
               &Rec_Level1.DESCR100.Value = &jObject_.GetProperty("id");
               &Rec_Level1.DESCR100A.Value = &jObject_.GetProperty("name");
               &Rec_Level1.DESCR100B.Value = &jObject_.GetProperty("type");
               If &bDescription_ Then
                  &Rec_Level1.DESCR100C.Value = &jObject_.GetProperty("description");
               End-If;
               If &bPlace_ Then
                  &Rec_Level1.DESCR100D.Value = &ojObjPayload_.GetProperty("name");
               Else
                  &Rec_Level1.DESCR100D.Value = "";
               End-If;
               If &bCoordinates_ Then
                  &Rec_Level1.DESCR100F.Value = &jObject_.GetProperty("geoLocation");
               Else
                  &Rec_Level1.DESCR100F.Value = "";
               End-If;
               If &bDeviceID_ Then
                  &Rec_Level1.DESCR100E.Value = &ojObjAttrib_.GetProperty(&ojObjAttrib_.GetPropertyNameAt(1));
                  &GRIDCOL_ = &GRID_.GetColumn("IOT_DEVICE_ID");
                  &GRIDCOL_.Visible = True;
                  &GRIDCOL_.Enabled = True;
                  rem &recPP_DR_REC_.DESCR100J.Enabled = True;
                  &Rec_Level11.DESCR100J.Label = String(&Rec_Level1.DESCR100E.Value);
               Else
                  &Rec_Level1.DESCR100E.Value = "";
                  &Rec_Level11.DESCR100J.Label = &Rec_Level1.DESCR100E.Value;
               End-If;
               &Rec_Level1.URLS.Value = &jObjLinks_.GetProperty("href");
               &GRIDCOL_ = &GRID_.GetColumn("SELF_LINK");
               &GRIDCOL_.Visible = True;
               &GRIDCOL_.Enabled = True;
               rem &Rec_Level11.DESCR254_TO.Label = String(&Rec_Level1.URLS.Value);
               &rec = &rec + 1;
               REM PP ADDED 19SEPT2018;
               &Rec_Level1.Insert();
               */
            End-For; /* items Array */
         End-If;
      End-If;
      MessageBox(0, "", 0, 0, "Total Incidents : " | &m_doccount_);
      rem &oLogFile_.WriteLine(&sFileString_);
   End-If;
   
catch Exception &e
   &fileListXmlDoc_ = &oGenRspnsRESTMsg_.GetXmlDoc();
   MessageBox(0, "", 0, 0, "Exception: " | &fileListXmlDoc_.GenFormattedXmlString());
   MessageBox(0, "", 0, 0, "Node Value : " | &fileListXmlDoc_.DocumentElement.GetElementsByTagName("data")[1].GetCDataValue());
   throw &e;
end-try;
