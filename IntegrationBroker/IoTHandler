REM Handler to deal with incoming messages from IoT;
import PS_PT:Integration:IRequestHandler;

class PPIoTService implements PS_PT:Integration:IRequestHandler
   method PPIoTService();
   method onRequest(&MSG As Message) Returns Message;
   method onError(&MSG As Message) Returns string;
   method LogRequest(&function As string, &request As string);
   property string sFilePath_;
   property string sString_;
   property string sSensorData_;
   property File oLogFile_;
end-class;

method PPIoTService
   
   %This.sFilePath_ = "C:\Temp\IoT_PS_Log_RUNWAYSWEEPING.out";
   If FileExists(%This.sFilePath_, %FilePath_Absolute) Then
      %This.oLogFile_ = GetFile(%This.sFilePath_, "A", "", %FilePath_Absolute);
      %This.sString_ = %This.sString_;
      %This.sSensorData_ = %This.sSensorData_;
   Else
      %This.oLogFile_ = GetFile(&sFilePath_, "W", %FilePath_Absolute);
      %This.sString_ = "";
      %This.sSensorData_ = "";
   End-If;
   
end-method;

method onRequest
   /+ &MSG as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   Local Message &response;
   Local Document &Doc_Tmpl, &Doc1;
   Local Compound &COM1;
   Local Record &oRecIoTSensorData_, &oRecIoTSensorChild_;
   Local string &curr_cd;
   Local SQL &SQL1;
   Local number &m_doccount_, &recCounter_;
   
   /*****HTTP POST method************/
   If &MSG.HTTPMethod = %IntBroker_HTTP_POST Then
      /* Get the document message */
      &Doc1 = &MSG.GetDocument();
      &COM1 = &Doc1.DocumentElement;
      <* 
      If %This.oLogFile_.IsOpen Then
         %This.oLogFile_.WriteLine("---------" | "Incoming Message : " | %PerfTime | "---------");
         %This.oLogFile_.WriteLine(&MSG.GetContentString());
         %This.oLogFile_.WriteLine("---------" | "---------");
      End-If;
      *>
      %This.LogRequest("PPIOTSERVICE.PPIoTService.OnRequest: ", &MSG.GetContentString());
      &oRecIoTSensorData_ = CreateRecord(Record.PP_AMIOT_MSGTBL); /* Ssensor Header Information */
      &oRecIoTSensorChild_ = CreateRecord(Record.PP_AMIOT_SENSOR); /* Ssensor Child Information */
      &oRecIoTSensorData_.GetField(Field.DESCR200).Value = &COM1.GetPropertyByName("id").Value;
      &oRecIoTSensorData_.GetField(Field.DESCR254).Value = &COM1.GetPropertyByName("clientId").Value;
      &oRecIoTSensorData_.GetField(Field.DESCR254_1).Value = &COM1.GetPropertyByName("source").Value;
      &oRecIoTSensorData_.GetField(Field.DESCR254B).Value = &COM1.GetPropertyByName("priority").Value;
      &oRecIoTSensorData_.GetField(Field.DESCR254_FROM).Value = &COM1.GetPropertyByName("reliability").Value;
      &oRecIoTSensorData_.GetField(Field.DESCR254_IN).Value = &COM1.GetPropertyByName("type").Value;
      &oRecIoTSensorData_.GetField(Field.DESCR254_MIXED).Value = &COM1.GetPropertyByName("eventTime").value;
      &oRecIoTSensorData_.GetField(Field.DESCR254_MIXED2).Value = &COM1.GetPropertyByName("receivedTime").value;
      &oRecIoTSensorData_.GetField(Field.DESCR254_TO).Value = &COM1.GetPropertyByName("sentTime").value;
      If Not &oRecIoTSensorData_.Insert() Then
         &oRecIoTSensorData_.Update();
      End-If;
      
      Local string &content_ = &MSG.GetContentString();
      Local JsonParser &parser_ = CreateJsonParser(); /* Parse the reponse */
      Local boolean &status_ = &parser_.Parse(&content_);
      Local JsonObject &jObj_ = &parser_.GetRootObject();
      Local number &bbbnbr_ = &jObj_.GetChildCount();
      Local integer &i, &nItemsChildCnt_, &nArrLen_, &nArrCount_, &nDataChildCnt_;
      
      If &jObj_.IsJsonArray("") Then
         rem %This.LogRequest("PPIOTSERVICE.PPIoTService.OnRequest.JSONArray ", String(&bbbnbr_) | &jObj_.ToString());
      End-If;
      
      %This.sString_ = &COM1.GetPropertyByName("id").Value | "," | &COM1.GetPropertyByName("clientId").Value | "," | &COM1.GetPropertyByName("source").Value | "," | &COM1.GetPropertyByName("priority").Value | "," | &COM1.GetPropertyByName("reliability").Value | "," | &COM1.GetPropertyByName("type").Value | "," | &COM1.GetPropertyByName("eventTime").value | "," | &COM1.GetPropertyByName("receivedTime").value | "," | &COM1.GetPropertyByName("sentTime").value;
      %This.oLogFile_.WriteLine(%This.sString_);
      rem &oRecIoTSensorData_ = CreateRecord(Record.PP_AMIOT_MSGTBL); /* Capture sensor information */
      rem If &jObj_.IsExist("id") Then;
      If &jObj_.IsJsonArray("") Then
         %This.LogRequest("Parsing JSON Response", "");
         rem Local JsonObject &messages_ = &jObj_.GetJsonObject("id");
         Local JsonArray &jArray_ = &jObj_.GetJsonArray("");
         If &jArray_.Size > 0 Then /* Read Array */
            &m_doccount_ = &jArray_.Length();
            For &i = 1 To &m_doccount_
               Local JsonObject &jObject_ = &jArray_.GetJsonObject(&i);
               <* LOG PP 30-AUG2018
               %This.LogRequest("id : ", String(&jObject_.GetProperty("id")));
               %This.LogRequest("clientId : ", String(&jObject_.GetProperty("clientId")));
               %This.LogRequest("source : ", String(&jObject_.GetProperty("source")));
               %This.LogRequest("priority : ", String(&jObject_.GetProperty("priority")));
               %This.LogRequest("reliability : ", String(&jObject_.GetProperty("reliability")));
               %This.LogRequest("type : ", String(&jObject_.GetProperty("type")));
               %This.LogRequest("direction : ", String(&jObject_.GetProperty("direction")));
               %This.LogRequest("eventTime : ", String(&jObject_.GetProperty("eventTime")));
               %This.LogRequest("receivedTime : ", String(&jObject_.GetProperty("receivedTime")));
               %This.LogRequest("sentTime : ", String(&jObject_.GetProperty("sentTime")));
               *>
               <* WHY HERE PP
               &oRecIoTSensorData_.GetField(Field.DESCR200).Value = &COM1.GetPropertyByName("id").Value;
               &oRecIoTSensorData_.GetField(Field.DESCR254).Value = &COM1.GetPropertyByName("clientId").Value;
               &oRecIoTSensorData_.GetField(Field.DESCR254_1).Value = &COM1.GetPropertyByName("source").Value;
               &oRecIoTSensorData_.GetField(Field.DESCR254B).Value = &COM1.GetPropertyByName("priority").Value;
               &oRecIoTSensorData_.GetField(Field.DESCR254_FROM).Value = &COM1.GetPropertyByName("reliability").Value;
               &oRecIoTSensorData_.GetField(Field.DESCR254_IN).Value = &COM1.GetPropertyByName("type").Value;
               &oRecIoTSensorData_.GetField(Field.DESCR254_MIXED).Value = &COM1.GetPropertyByName("eventTime").value;
               &oRecIoTSensorData_.GetField(Field.DESCR254_MIXED2).Value = &COM1.GetPropertyByName("receivedTime").value;
               &oRecIoTSensorData_.GetField(Field.DESCR254_TO).Value = &COM1.GetPropertyByName("sentTime").value;
               *>
               For &nItemsChildCnt_ = 1 To &jObject_.ChildCount
                  %This.LogRequest("Sensor Info : ", "Property (Key : Value) (" | &jObject_.GetPropertyNameAt(&nItemsChildCnt_) | " : " | &jObject_.GetProperty(&jObject_.GetPropertyNameAt(&nItemsChildCnt_)) | ")");
                  If &jObject_.IsJsonArray(&jObject_.GetPropertyNameAt(&nItemsChildCnt_)) Then
                     Local JsonArray &ojObjPayloadArray_ = &jObject_.GetJsonArray(&jObject_.GetPropertyNameAt(&nItemsChildCnt_));
                     If &ojObjPayloadArray_.Size > 0 Then
                        &nArrLen_ = &ojObjPayloadArray_.Length();
                        For &nArrCount_ = 1 To &nArrLen_
                           rem Local JsonObject &jObjPayloadArrObj_ = &ojObjPayloadArray_.GetJsonObject(&nArrCount_);
                           rem &oLogObj_.LogRequest("Link Child : ", "Property (Key : Value) (" | &jObjPayloadArrObj_.GetPropertyNameAt(&nArrCount_) | " : " | &jObjPayloadArrObj_.GetProperty(&jObject_.GetPropertyNameAt(&nArrCount_)) | ")");
                           %This.LogRequest("Inside Some JsonArray(s) : ", String(&ojObjPayloadArray_.GetElement(&nArrCount_)));
                        End-For;
                     End-If;
                  End-If;
               End-For;
               If &jObject_.IsExist("payload") Then
                  Local JsonObject &ojObjPayload_ = &jObject_.GetJsonObject("payload");
                  %This.LogRequest("format : ", String(&ojObjPayload_.GetProperty("format")));
                  If &ojObjPayload_.IsExist("data") Then
                     Local JsonObject &ojObjData_ = &ojObjPayload_.GetJsonObject("data");
                     /* These will be added to the JSON if Annotations are specified for the Stream */
                     rem %This.LogRequest("$(souce)_description : ", String(&ojObjData_.GetProperty("$(souce)_description")));
                     rem %This.LogRequest("$(source)_id : ", String(&ojObjData_.GetProperty("$(source)_id")));
                     <* LOG PP 30-AUG2018
                     %This.LogRequest("engineVibration : ", String(&ojObjData_.GetProperty("engineVibration")));
                     %This.LogRequest("engineTemp : ", String(&ojObjData_.GetProperty("engineTemp")));
                     %This.LogRequest("fuelLevel : ", String(&ojObjData_.GetProperty("fuelLevel")));
                     %This.LogRequest("hydraulicPressure : ", String(&ojObjData_.GetProperty("hydraulicPressure")));
                     %This.LogRequest("engineOilPressure : ", String(&ojObjData_.GetProperty("engineOilPressure")));
                     %This.LogRequest("speed : ", String(&ojObjData_.GetProperty("speed")));
                     %This.LogRequest("ora_longitude : ", String(&ojObjData_.GetProperty("ora_longitude")));
                     %This.LogRequest("ora_latitude : ", String(&ojObjData_.GetProperty("ora_latitude")));
                     *>
                     /* Insert data into Sensor CHILD Table */
                     &oRecIoTSensorChild_.GetField(Field.DESCR200).Value = String(&jObject_.GetProperty("id"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254).Value = String(&jObject_.GetProperty("clientId"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_1).Value = String(&jObject_.GetProperty("source"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254B).Value = String(&ojObjData_.GetProperty("engineVibration"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_FROM).Value = String(&ojObjData_.GetProperty("engineTemp"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_IN).Value = String(&ojObjData_.GetProperty("fuelLevel"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_MIXED).Value = String(&ojObjData_.GetProperty("hydraulicPressure"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_MIXED2).Value = String(&ojObjData_.GetProperty("engineOilPressure"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_TO).Value = String(&ojObjData_.GetProperty("speed"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR254_MIXED_STG).Value = String(&ojObjData_.GetProperty("ora_longitude"));
                     &oRecIoTSensorChild_.GetField(Field.DESCR240).Value = String(&ojObjData_.GetProperty("ora_latitude"));
                     If Not (&oRecIoTSensorChild_.Insert()) Then
                        &oRecIoTSensorChild_.Update();
                     End-If;
                     %This.sSensorData_ = String(&jObject_.GetProperty("id")) | "," | String(&jObject_.GetProperty("clientId")) | "," | String(&jObject_.GetProperty("source")) | "," | String(&ojObjData_.GetProperty("engineVibration")) | "," | String(&ojObjData_.GetProperty("engineTemp")) | "," | String(&ojObjData_.GetProperty("fuelLevel")) | "," | String(&ojObjData_.GetProperty("hydraulicPressure")) | "," | String(&ojObjData_.GetProperty("engineOilPressure")) | "," | String(&ojObjData_.GetProperty("speed")) | "," | String(&ojObjData_.GetProperty("ora_longitude")) | "," | String(&ojObjData_.GetProperty("ora_latitude"));
                     %This.oLogFile_.WriteLine(%This.sSensorData_);
                     For &nDataChildCnt_ = 1 To &ojObjData_.ChildCount
                        %This.LogRequest("Sensor Data : ", "Property (Key : Value) (" | &ojObjData_.GetPropertyNameAt(&nDataChildCnt_) | " : " | &ojObjData_.GetProperty(&ojObjData_.GetPropertyNameAt(&nDataChildCnt_)) | ")");
                        If &ojObjData_.IsJsonArray(&ojObjData_.GetPropertyNameAt(&nDataChildCnt_)) Then
                        End-If;
                     End-For;
                  End-If;
               End-If;
            End-For;
         End-If;
         
      End-If;
      
      &response = CreateMessage(Operation.PPIOT_RUNWAYSWEEPMC_POST, %IntBroker_Response); /* Create the response message */
   End-If;
   Return &response;
   
end-method;

method onError
   /+ &MSG as Message +/
   /+ Returns String +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnError +/
   Local integer &nMsgNumber, &nMsgSetNumber;
   Local string &str;
   &nMsgNumber = &MSG.IBException.MessageNumber;
   &nMsgSetNumber = &MSG.IBException.MessageSetNumber;
   &str = &MSG.IBException.DefaultText;
   %This.LogRequest("PPIOTSERVICE.PPIoTService.OnError: ", &str);
   
   Return &str;
end-method;

method LogRequest
   /+ &function as String, +/
   /+ &request as String +/
   Local string &startMarking = "***START***";
   Local string &endMarking = "***END***";
   Local string &newStr = Char(13);
   Local integer &length = Len(&request);
   If &length < 4096 Then
      WriteToLog(%ApplicationLogFence_Error, &function | &request);
   Else
      /* 4096 - ( 256 * 2 ) */
      Local integer &segmentSize = 3586;
      Local integer &segmentCout = &length / &segmentSize;
      Local integer &segmentMod = Mod(&length, &segmentSize);
      Local integer &index = 0;
      Local string &segmentStr = "";
      Local integer &startPos = 1;
      For &index = 1 To &segmentCout Step 1
         &segmentStr = Substring(&request, &startPos, &segmentSize);
         WriteToLog(%ApplicationLogFence_Error, &function | "Part " | &index | " :" | &newStr | &startMarking | &segmentStr | &endMarking);
         &startPos = &startPos + &segmentSize;
      End-For;
      If &segmentMod <> 0 Then
         &index = &index + 1;
         &segmentStr = Substring(&request, &startPos, &segmentMod);
         WriteToLog(%ApplicationLogFence_Error, &function | "Part " | &index | " :" | &newStr | &startMarking | &segmentStr | &endMarking);
      End-If;
   End-If;
end-method;
