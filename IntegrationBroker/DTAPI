rem construct multipart/form-data and send to IDR;
import X_PP_IB_HNDLR_X:StringBuffer;
import X_PP_IB_HNDLR_X:PS2IDR;

Local PTDirectTransferObject &oPTDT_;
Local integer &iURL_, &iAuth_, &iHeader_, &iBody_, &iMethod_, &iRtnCode_, &iRetCode_;
Local string &sBody_, &sIDRResponse_, &sFileStr_, &sDBCharset_, &sBoundary_, &sLocalURL_, &sUploadedFile_, &sFileExtension_, &sContentType_;
Local JsonBuilder &oJSONbld_;
Local JsonParser &oJSONParser_;
Local JsonObject &oJSONObj_;
Local Rowset &RS_LEVEL0_, &RS_MIMETABLE_;
Local Row &RowLevel0_;
Local Record &recPP_DEV_WRK_;
Local boolean &bBool_;
Local string &sCRLF_;
Local File &oFile_;

SetTracePC(2048);
&sCRLF_ = Char(13) | Char(10);

&sLocalURL_ = "record://X_PPXML_ATT_X";
&iRetCode_ = AddAttachment(&sLocalURL_, "", "", &sUploadedFile_, 0); /* Upload Image file */

If &iRetCode_ <> %Attachment_Success Then /* Check return code (integer or constant) */
   Exit;
End-If;

try
   &iRetCode_ = GetAttachment(&sLocalURL_, &sUploadedFile_, "", "PS_FILEDIR"); /* Get the uploaded Image file */
catch Exception &error_
   &iRetCode_ = GetAttachment(&sLocalURL_, &sUploadedFile_, "/files/" | &sUploadedFile_, "PS_SERVDIR");
end-try;

If &iRetCode_ <> %Attachment_Success Then
   MessageBox(0, "", 158, 653, "Error retrieving file from database");
   Exit;
End-If;

Local array of string &asSplitArray_ = Split(&sUploadedFile_, ".");
If &asSplitArray_.Len > 1 Then
   rem MessageBox(0, "", 0, 0, "File extension : " | &asSplitArray_ [&asSplitArray_.Len]);
   &sFileExtension_ = &asSplitArray_ [&asSplitArray_.Len];
Else
   MessageBox(0, "", 0, 0, "Extension unknown");
End-If;


/* Query MIME mapping table to get content-type based on file extension. Lowers the file extension before searching */
&RS_MIMETABLE_ = CreateRowset(Record.PTFILE_MIMEMAP);
&RS_MIMETABLE_.Fill("WHERE FILEEXTN = :1", Lower(&sFileExtension_));
&sContentType_ = &RS_MIMETABLE_(1).PTFILE_MIMEMAP.CONTENT_TYPE.Value;
rem MessageBox(0, "", 0, 0, "Content-Type: " | &sContentType_);

REM Retrieve values from buffer;
&RS_LEVEL0_ = GetLevel0();
&RowLevel0_ = &RS_LEVEL0_.GetRow(1);
&recPP_DEV_WRK_ = &RS_LEVEL0_.GetRow(1).GetRecord(Record.X_PP_DEV_WRK_X);
&recPP_DEV_WRK_.ADDITIONAL_NOTE.Value = "";
&recPP_DEV_WRK_.ADDITIONAL_DATA.Value = "";
&sBoundary_ = "PABoundary";
Local time &startTime_ = %PerfTime;
&oPTDT_ = CreateDirecttransferObject();

&iURL_ = &oPTDT_.SetURL("YOUR REST ENDPOINT");
rem &iAuth_ = &oPTDT_.SetAuth("<user>:<password>");
&iHeader_ = &oPTDT_.SetHeader("SET YOUR HEADERS");
&iHeader_ = &oPTDT_.SetHeader("SET YOUR HEADERS");
&iHeader_ = &oPTDT_.SetHeader("Content-Type: multipart/form-data; boundary=" | &sBoundary_);

rem &oFile_ = GetFile("/tmp/CustomLogoReceipt4_sm.jpg", "R", %FilePath_Absolute);
&oFile_ = GetFile(GetEnv("PS_SERVDIR") | "/files/" | &sUploadedFile_, "R", %FilePath_Absolute);
If &oFile_.IsOpen Then
   &sFileStr_ = &oFile_.GetBase64StringFromBinary();
   &oFile_.Close();
   rem &oFile_.Delete();
Else
   MessageBox(0, "", 0, 0, "File isn't open");
End-If;
&sBody_ = "";
Local X_PP_IB_HNDLR_X:StringBuffer &oStringBuffer_ = create X_PP_IB_HNDLR_X:StringBuffer(&sBody_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("--");
&sSomething_ = &oStringBuffer_.Append(&sBoundary_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("Content-Disposition: form-data; name=""engine""");
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("VALUE");
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("--");
&sSomething_ = &oStringBuffer_.Append(&sBoundary_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("Content-Disposition: form-data; name=""documentFile""");
&sSomething_ = &oStringBuffer_.Append(";");
rem &sSomething_ = &oStringBuffer_.Append(" filename=""CustomLogoReceipt4_sm.jpg""");
&sSomething_ = &oStringBuffer_.Append(" filename=""" | &sUploadedFile_ | """");
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
rem &sSomething_ = &oStringBuffer_.Append("Content-Type: image/jpeg"); /* currently hardcoded, but refer IANA Media Types */
&sSomething_ = &oStringBuffer_.Append("Content-Type: " | &sContentType_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("Content-Transfer-Encoding: BASE64");
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append(&sFileStr_);
&sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sSomething_ = &oStringBuffer_.Append("--");
&sSomething_ = &oStringBuffer_.Append(&sBoundary_);
&sSomething_ = &oStringBuffer_.Append("--");
rem &sSomething_ = &oStringBuffer_.Append(&sCRLF_);
&sBody_ = &sSomething_.Value;

&iBody_ = &oPTDT_.SetBody(&sBody_);
&iMethod_ = &oPTDT_.SetMethod("POST");
&sIDRResponse_ = &oPTDT_.SyncTransfer();

If None(&oIDRCall_) Then
   &oIDRCall_ = create X_PP_IB_HNDLR_X:PS2IDR();
End-If;

Local time &endTime_ = %PerfTime;
&oIDRCall_.logPollSpanTime("FieldChange", &startTime_, &endTime_);

&recPP_DEV_WRK_.ADDITIONAL_NOTE.Value = &sBody_;
&recPP_DEV_WRK_.ADDITIONAL_DATA.Value = &sIDRResponse_;
Local File &oOutputFile_ = GetFile(GetEnv("PS_SERVDIR") | "/files/" | "IDRResponse_" | %Date | "_" | %PerfTime | ".out", "W", %FilePath_Absolute);
&oOutputFile_.WriteString(&sIDRResponse_);
&oOutputFile_.Close();

/* See if we can use a JSON column in the DB */
&sID_ = GetJavaClass("java.util.UUID").randomUUID().toString();
Local SQL &sqlINSERT_ = CreateSQL("INSERT INTO %Table(PA_PS_2_IDR) (ACEEVALID, DATETIMEVAL1, ADDITIONAL_DATA) VALUES (:1, %dateTimeIn(:2), %TextIn(:3))");
&sqlINSERT_.Execute(&sID_, %Datetime, &sIDRResponse_);
rem SQLExec("INSERT INTO PS_PA_PS_2_IDR (ACEEVALID, DATETIMEVAL1, ADDITIONAL_DATA) VALUES (:1, %dateTimeIn(:2), %TextIn(:3))", &sID_, %Datetime, &sIDRResponse_);
CommitWork();

try
   &oJSONObj_ = &oIDRCall_.objJsonParser(&sIDRResponse_);
   If &oJSONObj_.IsExist("predictionResult") Then
      Local JsonObject &oJSpredResult_ = &oJSONObj_.GetJsonObject("predictionResult");
      If &oJSONObj_.IsExist("name") Then
         MessageBox(0, "", 0, 0, "Name exists");
      End-If;
   Else
      MessageBox(0, "", 0, 0, "Not Found");
   End-If;
   
catch Exception &eIDR_
   MessageBox(0, "", 0, 0, " ERROR: ", &eIDR_.ToString());
   throw &eIDR_;
end-try;
&oPTDT_.Reset();
SetTracePC(0);
