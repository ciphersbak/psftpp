import PS_PT:Integration:IRequestHandler;

class PPGetCIXMLJSON implements PS_PT:Integration:IRequestHandler
   method PPGetCIXMLJSON();
   method OnRequest(&MSG_ As Message) Returns Message;
   method OnError(&request_ As Message) Returns string;
   
   method getXMLNodeFromCI(&CIObject As ApiObject, &boolRootCollection As boolean, &property As ApiObject, &xmlNodeElement As XmlNode);
   method getJSONFromXMLDoc(&xmlDocObj As XmlDoc, &strSpaces As string) Returns string;
   method getJSONFromXMLNode(&xmlDocObj As XmlDoc, &xmlNode As XmlNode, &strSpaces As string) Returns string;
   method isXMLNodeIsCollection(&xmlNode As XmlNode) Returns boolean;
   method getJSONFromDuplicateXMLNode(&xmlDocObj As XmlDoc, &xmlNode As XmlNode, &strSpaces As string) Returns string;
   method strEncode(&input As string) Returns string;
   property File logXMLFile_;
   property File logJSONFile_;
   property XmlDoc returnXMLDoc_;
   property XmlNode xmlNodeResponse_;
   rem property string strJSONString_;
   property string strComponentInterfaceName_;
   property string CRLF_;
   property string emptyspaces_;
   
private
   instance JavaObject &meta_chars_;
   instance JavaObject &unsafe_chars_pattern_;
   instance JavaObject &int_;
   
   method init();
   Constant &strPPIBSvcOpName_ = "X_PP_IB_SVOP_X";
   Constant &sXMLVersionStr_ = "<?xml version='1.0'?><Response/>";
   Constant &sGeneratedXMLDoc_ = "Generated XMLDoC: ";
   Constant &fileReqStartandBegin_ = "~~~~~~~~~~~~REQ~~~~~~~~~~~~~~";
   Constant &nMsgSetNbr#_ = 18022;
   Constant &nMsgNbr#_ = 54;
   Constant &sSessionFailureMsg_ = "Could not establish a SESSION connection";
   Constant &sCIGetFailureMsg_ = "Could not get an instance of CI";
   REM refer JSON Grammar below;
   Constant &c_#leftcurlybraces_ = "{";
   Constant &c_#rightcurlybraces_ = "}";
   Constant &c_#leftsquarebraces_ = "[";
   Constant &c_#rightsquarebraces_ = "]";
   Constant &c_#cs_ = ", ";
   Constant &c_#comma_ = ",";
   Constant &c_#semicolon_ = ":";
   Constant &c_#aliases_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   
end-class;

/* constructor */
method PPGetCIXMLJSON
   %Super = create PS_PT:Integration:IRequestHandler();
   %This.CRLF_ = Char(13);
   %This.emptyspaces_ = "    ";
end-method;

method OnRequest
   /+ &MSG_ as Message +/
   /+ Returns Message +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnRequest +/
   
   REM ** Method is always called and initiates calls for XML/JSON generation;
   /*
    * Make sure CI name is correctly set;
    * Based on the CI being used, the Get Keys will change;
    * Read the request XML to get the Search Keys, Store them in variables &KEY_VALUEX_;
    * CI Operation - GET;
    * XML is first generated for given GET Keys and is then converted into JSON
    */
   
   Local ApiObject &Session_, &CI_WEB_PROF_;
   Local ApiObject &PROPINFO_0, &PROPITEM_0, &PROPINFO_1, &PROPITEM_1, &PROPINFO_2, &PROPITEM_2;
   Local ApiObject &CISession_, &CIInstance_, &CIMessageCollection_;
   Local string &str_, &str2_, &msgName_, &KEY_VALUE1_;
   Local number &KEY_VALUE2_;
   Local Rowset &LevelZRS_, &RS_;
   Local boolean &ret_;
   Local XmlDoc &xmlstr_;
   Local string &somestring_, &sMethodName_, &strJSONString_;
   Local Message &request_, &respMsg_;
   Local boolean &bDebug_;
   rem Local string &CRLF_ = Char(13) | Char(10);
   Local number &I, &J, &K;
   Local string &S1;
   Local array of XmlNode &xmlNode1_, &xmlNode2_, &xmlNode3_;
   
   try
      &sMethodName_ = "PPGetCIXMLJSON:OnRequest";
      &bDebug_ = True;
      /* Get Request Message */
      &MSG_ = %IntBroker.GetMessage();
      &request_ = &MSG_;
      Local XmlDoc &RespXMLDoc_ = &request_.GetXmlDoc();
      If &bDebug_ Then;
         %This.logXMLFile_ = GetFile("X_PPGetCIXMLJSON_X_" | %PerfTime | ".txt", "W");
         /* Log the request received. */
         &str_ = &request_.GetContentString();
         %This.logXMLFile_.WriteLine(&fileReqStartandBegin_);
         rem %This.logXMLFile_.WriteLine(&request_.GenXMLString());
         rem %This.logXMLFile_.WriteLine(%This.CRLF_);
         %This.logXMLFile_.WriteLine(&RespXMLDoc_.GenFormattedXmlString());
         %This.logXMLFile_.WriteLine(%This.CRLF_);
         %This.logXMLFile_.WriteLine(&fileReqStartandBegin_);
      End-If;
      rem &RS_ = &request_.GetRowset();
      /* Get Session and set the Message Mode */
      &CISession_ = %Session;
      &CISession_.PSMessagesMode = 1;
      /* Clear all the errors in the collection, Delete all messages in queue */
      &CIMessageCollection_ = &CISession_.PSMessages;
      &CIMessageCollection_.DeleteAll();
      rem %This.strComponentInterfaceName_ = "PP_WEB_PROF_HIST_CI"; /* Set the CI name here */
      &xmlNode1_ = &RespXMLDoc_.GetElementsByTagName("CI_NAME");
      %This.strComponentInterfaceName_ = &xmlNode1_ [1].NodeValue;
      If All(&CISession_) Then
         /* Get the Component Interface */
         &CIInstance_ = &CISession_.GetCompIntfc(@("CompIntfc." | %This.strComponentInterfaceName_));
         &CIInstance_.InteractiveMode = False;
         &CIInstance_.GetHistoryItems = True;
         &CIInstance_.EditHistoryItems = True;
         &CIInstance_.StopOnFirstError = True;
         Local integer &intChildIndex;
         Local XmlNode &xmlNodeRootNode = &RespXMLDoc_.DocumentElement;
         REM We start the below loop from 2 because the first node is always the CI NAME and we have read that earlier;
         For &intChildIndex = 2 To &xmlNodeRootNode.ChildNodeCount
            Local XmlNode &xmlNodeKeyNode = &xmlNodeRootNode.GetChildNode(&intChildIndex);
            &CIInstance_.setpropertybyname(&xmlNodeKeyNode.NodeName, &xmlNodeKeyNode.NodeValue);
         End-For;
         If Not &CIInstance_.get() Then
            Error (&sCIGetFailureMsg_);
            Exit (1);
         End-If;
      Else
         Error MsgGet(&nMsgSetNbr#_, &nMsgNbr#_, &sSessionFailureMsg_);
         Exit (1);
      End-If;
      &respMsg_ = CreateMessage(@("Operation." | &strPPIBSvcOpName_), %IntBroker_Response); /* Set the SVOP */
      
      %This.returnXMLDoc_ = CreateXmlDoc(&sXMLVersionStr_); /* Create the response XML */
      %This.xmlNodeResponse_ = %This.returnXMLDoc_.DocumentElement.AddElement("Get_" | %This.strComponentInterfaceName_); /* Create the Root Node for Response XML */
      REM Call method to create XMLDoc;
      %This.getXMLNodeFromCI(&CIInstance_, True, &CIInstance_, %This.xmlNodeResponse_); /* Generate XML, First call is always with True for root collection*/
      %This.logXMLFile_.WriteLine(&sGeneratedXMLDoc_);
      %This.logXMLFile_.WriteLine(%This.returnXMLDoc_.GenFormattedXmlString()); /* Write the generated XML to file */
      &respMsg_.SetXmlDoc(%This.returnXMLDoc_);
      rem &strJSONString_ = %This.getJSONFromXMLDoc(%This.returnXMLDoc_); /* Use the generated XML as input to convert to JSON */
      &strJSONString_ = %This.getJSONFromXMLDoc(&respMsg_.GetXmlDoc(), %This.emptyspaces_); /* Use the generated XML as input to convert to JSON */
      %This.logJSONFile_ = GetFile("/tmp/" | %This.strComponentInterfaceName_ | "_JSON_" | %PerfTime | ".txt", "W", %FilePath_Absolute);
      %This.logJSONFile_.WriteLine(&strJSONString_);
      %This.logJSONFile_.Close();
      %This.logXMLFile_.Close();
      
      Return &respMsg_;
   catch Exception &ex
      &ex.Output();
      Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", &sMethodName_));
   end-try;
   
end-method;

method OnError
   /+ &request_ as Message +/
   /+ Returns String +/
   /+ Extends/implements PS_PT:Integration:IRequestHandler.OnError +/
   
   Local integer &msgNumber_, &msgSetNumber_;
   &msgNumber_ = &request_.IBException.MessageNumber;
   &msgSetNumber_ = &request_.IBException.MessageSetNumber;
   Return &request_.IBException.ToString( True);
   
end-method;

method getXMLNodeFromCI
   /+ &CIObject as ApiObject, +/
   /+ &boolRootCollection as Boolean, +/
   /+ &property as ApiObject, +/
   /+ &xmlNodeElement as XmlNode +/
   
   Local integer &intPropertyInfoCollectionIndex;
   Local ApiObject &propertyInfoCollection, &CICollection;
   Local XmlNode &xmlNodeChildNode, &xmlNodeValueNode;
   Local XmlNode &xmlNodeRootElement;
   If &boolRootCollection Then
      &xmlNodeRootElement = &xmlNodeElement.AddElement("PROPERTIES"); /* All CIs have this at Level Zero */
      /* Since this is the root collection, it will only have one row */
      &propertyInfoCollection = &CIObject.PropertyInfoCollection;
      For &intPropertyInfoCollectionIndex = 1 To &propertyInfoCollection.Count
         &property = &propertyInfoCollection.Item(&intPropertyInfoCollectionIndex);
         If &property.IsCollection Then
            &CICollection = &CIObject.GetPropertyByName(&property.Name);
            &xmlNodeChildNode = &xmlNodeRootElement.AddElement(&property.Name);
            %This.getXMLNodeFromCI(&CICollection, False, &property, &xmlNodeChildNode); /* Boolean is set to False as it is for levels other than level ZERO */
         Else
            &xmlNodeChildNode = &xmlNodeRootElement.AddElement(&property.Name);
            &xmlNodeValueNode = &xmlNodeChildNode.AddText(&CIObject.GetPropertyByName(&property.Name));
         End-If;
      End-For;
   Else
      /* For all levels except ZERO, there can be multiple rows for collection(s) */
      Local integer &intCICollectionIndex;
      %This.logXMLFile_.WriteLine("Name: " | &property.Name | " count: " | &CIObject.Count);
      Local string &strCollectionName = &property.Name;
      &propertyInfoCollection = &property.PropertyInfoCollection;
      For &intCICollectionIndex = 1 To &CIObject.Count
         If &intCICollectionIndex > 1 Then
            &xmlNodeElement = &xmlNodeElement.ParentNode.AddElement(&strCollectionName);
         End-If;
         Local ApiObject &lvlCIObject = &CIObject.Item(&intCICollectionIndex);
         rem %This.logXMLFile_.WriteLine("Count of &propertyInfoCollection: " | &propertyInfoCollection.Name);
         For &intPropertyInfoCollectionIndex = 1 To &propertyInfoCollection.Count
            &property = &propertyInfoCollection.Item(&intPropertyInfoCollectionIndex);
            rem %This.logXMLFile_.WriteLine("Property Name: " | &property.Name);
            If &property.IsCollection Then
               &CICollection = &lvlCIObject.GetPropertyByName(&property.Name);
               &xmlNodeChildNode = &xmlNodeElement.AddElement(&property.Name);
               %This.getXMLNodeFromCI(&CICollection, False, &property, &xmlNodeChildNode); /* Boolean is set to False as it is for levels other than level ZERO */
            Else
               &xmlNodeChildNode = &xmlNodeElement.AddElement(&property.Name);
               &xmlNodeValueNode = &xmlNodeChildNode.AddText(&lvlCIObject.GetPropertyByName(&property.Name));
            End-If;
         End-For;
      End-For;
   End-If;
end-method;

method getJSONFromXMLDoc
   /+ &xmlDocObj as XmlDoc, +/
   /+ &strSpaces as String +/
   /+ Returns String +/
   
   Local XmlNode &xmlNodeRootElement = &xmlDocObj.DocumentElement;
   Local string &strJSONString_;
   
   REM JSON Grammar - https://tools.ietf.org/html/rfc7159;
   /* These are the six structural characters:
    * begin-array     = ws %x5B ws  ; [ left square bracket
    * begin-object    = ws %x7B ws  ; { left curly bracket
    * end-array       = ws %x5D ws  ; ] right square bracket
    * end-object      = ws %x7D ws  ; } right curly bracket
    * name-separator  = ws %x3A ws  ; : colon
    * value-separator = ws %x2C ws  ; , comma
    * Insignificant whitespace is allowed before or after any of the six
    * structural characters.
    * ws = *(
    *         %x20 /              ; Space
    *         %x09 /              ; Horizontal tab
    *         %x0A /              ; Line feed or New line
    *         %x0D )              ; Carriage return
    */
   &strJSONString_ = &c_#leftcurlybraces_ | %This.CRLF_; /* Opening left curly braces for the JSON string */
   rem &strJSONString_ = &strJSONString_ | %This.getJSONFromXMLNode(&xmlDocObj, &xmlNodeRootElement.GetChildNode(1), &strSpaces);
   &strJSONString_ = &strJSONString_ | %This.getJSONFromXMLNode(&xmlDocObj, &xmlNodeRootElement, &strSpaces);
   &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_) - 2) | %This.CRLF_ | &c_#rightcurlybraces_; /* Closing right curly braces for the JSON string */
   Return &strJSONString_;
end-method;


method getJSONFromXMLNode
   /+ &xmlDocObj as XmlDoc, +/
   /+ &xmlNode as XmlNode, +/
   /+ &strSpaces as String +/
   /+ Returns String +/
   
   Local integer &intChildLoopIndex;
   Local XmlNode &xmlNodeChildNode;
   Local string &strJSONString_;
   
   If %This.isXMLNodeIsCollection(&xmlNode) Then
      rem &strJSONString_ = &strJSONString_ |&strSpaces| """" | &xmlNode.NodeName | """:[{";
      &strJSONString_ = &strJSONString_ | &strSpaces | """" | &xmlNode.NodeName | """" | &c_#semicolon_ | &c_#leftsquarebraces_ | &c_#leftcurlybraces_ | %This.CRLF_;
      rem MessageBox(0, "", 0, 0, "&xmlNode.NodeName : " | &xmlNode.NodeName);
      For &intChildLoopIndex = 1 To &xmlNode.ChildNodeCount
         &xmlNodeChildNode = &xmlNode.GetChildNode(&intChildLoopIndex);
         rem MessageBox(0, "", 0, 0, "&xmlNodeChildNode : " | &xmlNodeChildNode.NodeName);
         If %This.isXMLNodeIsCollection(&xmlNodeChildNode) Then
            rem If &xmlDocObj.DocumentElement.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len > 1 Then;
            If &xmlNode.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len > 1 Then
               rem &strJSONString_ = &strJSONString_ | %This.getJSONFromDuplicateXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               &strJSONString_ = &strJSONString_ | %This.getJSONFromDuplicateXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               &intChildLoopIndex = &intChildLoopIndex + &xmlDocObj.DocumentElement.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len - 1;
               rem MessageBox(0, "", 0, 0, "IsCollection IF JSON String: " | &strJSONString_);
            Else
               rem &strJSONString_ = &strJSONString_ | %This.getJSONFromXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               &strJSONString_ = &strJSONString_ | %This.getJSONFromXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               rem MessageBox(0, "", 0, 0, "IsCollection ELSE JSON String: " | &strJSONString_);
            End-If;
         Else
            rem &strJSONString_ = &strJSONString_ |&strSpaces| """" | &xmlNodeChildNode.NodeName | """: """ | %This.strEncode(&xmlNodeChildNode.NodeValue) | """,";
            &strJSONString_ = &strJSONString_ | &strSpaces | %This.emptyspaces_ | """" | &xmlNodeChildNode.NodeName | """: """ | %This.strEncode(&xmlNodeChildNode.NodeValue) | """" | &c_#comma_ | %This.CRLF_;
            rem MessageBox(0, "", 0, 0, "ELSE Not a collection JSON String: " | &strJSONString_);
         End-If;
      End-For;
      rem &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_)- 2) | "}],";
      &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_) - 2) | %This.CRLF_ | &strSpaces | &c_#rightcurlybraces_ | &c_#rightsquarebraces_ | &c_#comma_ | %This.CRLF_;
      rem MessageBox(0, "", 0, 0, "After FOR JSON String: " | &strJSONString_);
   End-If;
   
   Return &strJSONString_;
end-method;

method getJSONFromDuplicateXMLNode
   /+ &xmlDocObj as XmlDoc, +/
   /+ &xmlNode as XmlNode, +/
   /+ &strSpaces as String +/
   /+ Returns String +/
   Local integer &intXmlNodeIndex;
   Local XmlNode &xmlNodeChildNode;
   Local string &strJSONString_;
   
   /*
    * This method is needed to identify repeating XMLTags;
    * In JSON, the names within an object SHOULD be UNIQUE;
    * If there is a better library, please feel free to use that;
    */
   rem &strJSONString_ = &strJSONString_ |&strSpaces| """" | &xmlNode.NodeName | """:[";
   &strJSONString_ = &strJSONString_ | &strSpaces | """" | &xmlNode.NodeName | """" | &c_#semicolon_ | &c_#leftsquarebraces_ | "";
   rem MessageBox(0, "", 0, 0, "Duplicate JSON String: " | &strJSONString_);
   Local boolean &boolFirstTime = True;
   While True
      rem &strJSONString_ = &strJSONString_ |&strSpaces| "{";
      If &boolFirstTime Then
         &boolFirstTime = False;
         &strJSONString_ = &strJSONString_ | &c_#leftcurlybraces_ | %This.CRLF_;
         rem MessageBox(0, "", 0, 0, "Duplicate Bool True JSON String: " | &strJSONString_);
      Else
         &strJSONString_ = &strJSONString_ | &strSpaces | &c_#leftcurlybraces_ | %This.CRLF_;
         rem MessageBox(0, "", 0, 0, "Duplicate Bool False JSON String: " | &strJSONString_);
      End-If;
      For &intXmlNodeIndex = 1 To &xmlNode.ChildNodeCount
         &xmlNodeChildNode = &xmlNode.GetChildNode(&intXmlNodeIndex);
         If %This.isXMLNodeIsCollection(&xmlNodeChildNode) Then
            rem MessageBox(0, "", 0, 0, "Duplicate &xmlNodeChildNode: " | &xmlNodeChildNode.NodeName);
            rem If &xmlDocObj.DocumentElement.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len > 1 Then;
            If &xmlNode.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len > 1 Then
               rem &strJSONString_ = &strJSONString_ | %This.getJSONFromDuplicateXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               &strJSONString_ = &strJSONString_ | %This.getJSONFromDuplicateXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               rem MessageBox(0, "", 0, 0, &xmlNodeChildNode.NodeName | ".length = " | &xmlNode.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len);
               &intXmlNodeIndex = &intXmlNodeIndex + &xmlNode.GetElementsByTagName(&xmlNodeChildNode.NodeName).Len - 1;
            Else
               rem &strJSONString_ = &strJSONString_ | %This.getJSONFromXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               &strJSONString_ = &strJSONString_ | %This.getJSONFromXMLNode(&xmlDocObj, &xmlNodeChildNode, &strSpaces | %This.emptyspaces_);
               rem MessageBox(0, "", 0, 0, "Duplicate &strJSONString_: " | &strJSONString_);
            End-If;
         Else
            rem &strJSONString_ = &strJSONString_ |&strSpaces| """" | &xmlNodeChildNode.NodeName | """: """ | %This.strEncode(&xmlNodeChildNode.NodeValue) | """,";
            &strJSONString_ = &strJSONString_ | &strSpaces | %This.emptyspaces_ | """" | &xmlNodeChildNode.NodeName | """: """ | %This.strEncode(&xmlNodeChildNode.NodeValue) | """" | &c_#comma_ | %This.CRLF_;
         End-If;
      End-For;
      rem &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_)- 2) | "},";
      &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_) - 2) | %This.CRLF_ | &strSpaces | &c_#rightcurlybraces_ | &c_#comma_ | %This.CRLF_;
      If &xmlNode.NodeName <> &xmlNode.NextSibling.NodeName Then
         Break;
      End-If;
      &xmlNode = &xmlNode.NextSibling;
   End-While;
   rem &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_)- 2) | "],";
   &strJSONString_ = Substring(&strJSONString_, 1, Len(&strJSONString_) - 2) | &c_#rightsquarebraces_ | &c_#comma_ | %This.CRLF_;
   rem MessageBox(0, "", 0, 0, "Return Duplicate : " | &strJSONString_);
   Return &strJSONString_;
end-method;

method strEncode
   /+ &input as String +/
   /+ Returns String +/
   
   Local JavaObject &matcher;
   Local string &output = &input;
   Local string &replacement;
   Local string &match;
   Local number &offset = 1;
   
   REM ** Run lazy init if needed;
   REM ** Protects against Stateless PeopleCode/Stateful JVM;
   %This.init();
   
   &matcher = &unsafe_chars_pattern_.matcher(CreateJavaObject("java.lang.String", &input));
   
   While &matcher.find()
      &match = &matcher.group();
      
      If (&meta_chars_.containsKey(&match)) Then
         REM ** replace meta characters first;
         &replacement = &meta_chars_.get(&match).toString();
      Else
         REM ** not meta, so convert to a unicode escape sequence;
         &replacement = "\u" | Right("0000" | &int_.toHexString(Code(&match)), 4);
      End-If;
      &output = Replace(&output, &matcher.start() + &offset, (&matcher.end() - &matcher.start()), &replacement);
      
      REM ** move the starting position based on the size of the string after replacement;
      &offset = &offset + Len(&replacement) - (&matcher.end() - &matcher.start());
   End-While;
   
   Return &output;
end-method;

method init
   REM ** None only works on local vars, so get a pointer;
   Local JavaObject &int = &int_;
   
   REM ** if &int has no value, then initialize all JavaObject vars;
   /*
    * JavaObject vars will have no value in two scenarios:
    *
    *   1. First use, never initialized
    *   2. Think time function, global variable, anything that causes state
    *      serialization.
    *
    * The first case is obvious. The second case, however, is not. PeopleSoft
    * allows you to make App Classes Global and Component scoped objects, but
    * not JavaObject variables. By using JavaObject variables in Component and
    * Global scope, you can get into a bit of trouble. Retesting these values
    * on each use ensures they are always initialized. The same will happen if
    * you use a think-time function like Prompt or a Yes/No/Cancel MessageBox.
    */
   If (None(&int)) Then
      REM ** Lazy initialize Integer class;
      &int_ = GetJavaClass("java.lang.Integer");
      
      REM ** Lazy initialize the regular expression;
      REM ** List other unsafe characters;
      &unsafe_chars_pattern_ = GetJavaClass("java.util.regex.Pattern").compile("[\\""\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]");
      
      REM ** Lazy initialize the hashtable;
      &meta_chars_ = CreateJavaObject("java.util.Hashtable");
      
      REM ** setup meta characters;
      &meta_chars_.put(Char(8), "\b");
      &meta_chars_.put(Char(9), "\t");
      &meta_chars_.put(Char(10), "\n");
      &meta_chars_.put(Char(12), "\f");
      &meta_chars_.put(Char(13), "\r");
      &meta_chars_.put("\", "\\");
      &meta_chars_.put("""", "\""");
   End-If;
   
end-method;

method isXMLNodeIsCollection /* DO NOT DELETE THIS METHOD */
   /+ &xmlNode as XmlNode +/
   /+ Returns Boolean +/
   REM This condition checks for XML Nodes which have an end tag e.g., <XML_NODE_NAME></XML_NODE_NAME>;
   If &xmlNode.GetChildNode(1).NodeName = "#text" Then /* WTF IS THIS */
      Return False; /* IsProperty */
   End-If;
   REM This condition checks for XML Nodes which do not have an end tag e.g., <XML_NODE_NAME/>;
   If &xmlNode.ChildNodeCount = 0 Then
      Return False;
   End-If;
   
   Return True; /* IsCollection */
end-method;
