import X_PP_IB_HNDLR_X:StringBuffer;
import X_PP_IB_HNDLR_X:ServiceIntegration;

Local Rowset &RS_LEVEL0_;
Local Row &RowLevel0_;
Local Record &recPP_DEV_WRK_;
Local integer &iAttCode_;
Local string &sSvcResponse_, &sBody_;
Local array of string &arrSvcResponse_, &arrHdr_, &arrBody_;
Component array of array of string &arrReturnValues_;
Local time &startTime_, &endTime_;

&arrHdr_ = CreateArrayRept("", 0);
&arrBody_ = CreateArrayRept("", 0);
&arrReturnValues_ = CreateArrayRept(CreateArray("", 0), 0);

REM Retrieve values from buffer;
&RS_LEVEL0_ = GetLevel0();
&RowLevel0_ = &RS_LEVEL0_.GetRow(1);
&recPP_DEV_WRK_ = &RS_LEVEL0_.GetRow(1).GetRecord(Record.X_PP_DEV_WRK_X);
&recPP_DEV_WRK_.ADDITIONAL_NOTE.Value = "";
&recPP_DEV_WRK_.ADDITIONAL_DATA.Value = "";
&recPP_DEV_WRK_.ANALYSIS.Value = "";

If None(&oSvcCall_) Then
   &oSvcCall_ = create X_PP_IB_HNDLR_X:ServiceIntegration();
End-If;
REM Populate Header Array;
&arrHdr_.Push("appId: YOUR VALUE");
&arrHdr_.Push("tenantId: test");
REM Populate Body Array in this sequence;
&arrBody_.Push("engine");
&arrBody_.Push("documentFile");
&startTime_ = %PerfTime;

/* Upload file for Svc to analyse. Uploads file to either PS_FILEDIR or PS_SERVDIR */
&iAttCode_ = &oSvcCall_.uploadAttachment(); /* Depending upon how you store attachments, this may not be required */
/* Assumes that the class is aware of the uploaded file */
&arrSvcResponse_ = &oSvcCall_.callService(&arrHdr_, &arrBody_, ""); /* Initiate the call to Svc */
&recPP_DEV_WRK_.ADDITIONAL_NOTE.Value = &arrSvcResponse_ [1]; /* PS Body/Payload */
rem &bSome_ = &oSvcCall_.regexPattern(&arrSvcResponse_ [2]);
rem MessageBox(0, "", 0, 0, "Found : " | &bSome_);
rem &sEncodedResp_ = &oSvcCall_.strEncode(&arrSvcResponse_ [2]);
rem &sEncodedResp_ = Substitute(&arrSvcResponse_ [2], "/[^\u0000-\u007F]+/g", "");
&recPP_DEV_WRK_.ADDITIONAL_DATA.Value = &arrSvcResponse_ [2]; /* Svc Response Payload */
rem &recPP_DEV_WRK_.ADDITIONAL_DATA.Value = &sEncodedResp_;
rem You can also use &oSvcCall_.sSvcRespPayload_;
If &oSvcCall_.bCallSvc_ Then;
   &oSvcCall_.parseSvcResponse(&arrSvcResponse_ [2]); /* Parse Svc Response */
Else
   MessageBox(0, "", 0, 0, "JSON parsing skipped");
End-If;

&sFieldValue_ = "";
If &arrReturnValues_.Len > 1 Then
   For &iArrCnt_ = 1 To &arrReturnValues_.Len
      &sFieldValue_ = &sFieldValue_ | " FieldName : " | &arrReturnValues_ [&iArrCnt_][1] | Rept(" ", (22 - Len(&arrReturnValues_ [&iArrCnt_][1]))) | Char(9) | " :  Value : " | &arrReturnValues_ [&iArrCnt_][2] | Char(13) | Char(10);
   End-For;
   rem &recPP_DEV_WRK_.ANALYSIS.Value = &oSvcCall_.sGUID_ | Char(13) | Char(10) | &sFieldValue_;
   &recPP_DEV_WRK_.ANALYSIS.Value = &sFieldValue_;
End-If;
&endTime_ = %PerfTime;
Local string &sTimeTaken_ = NumberToString("%6.3", Value(&endTime_ - &startTime_)) | " (s)";
&recPP_DEV_WRK_.DESCR4.Value = &sTimeTaken_;
rem &oSvcCall_.regenerateFile("BZFOLI.pdf");
