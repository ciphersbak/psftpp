import AM_IOT:JsonService;
import AM_IOT:Constants;

class AssetIncidents
   method AssetIncidents();
   method fetchIncidents(&sIoTOrgID_ As string) Returns boolean;
   method updateIncident(&sIoTOrgID_ As string, &sIoTIncidentID_ As string) Returns boolean;
   property string sFetchIncidentsURIQueryParams_;
   property string sFetchAssetIncidentsURI_;
private
   instance AM_IOT:JsonService &oJsonService_;
   instance AM_IOT:Constants &oConstantService_;
   instance string &sIoTResponse_;
   
end-class;

method AssetIncidents
   
   &oJsonService_ = create AM_IOT:JsonService();
   &oConstantService_ = create AM_IOT:Constants();
end-method;

method fetchIncidents
   /+ &sIoTOrgID_ as String +/
   /+ Returns Boolean +/
   
   Local integer &i, &j, &m_doccount_, &m_doc_, &nItemsChildCnt_, &nArrLen_, &nArrCount_, &jc, &mc_doc_, &tc, &tc_doc_, &pc, &pc_doc_;
   Local JsonObject &oJObjAssetIncidentFetch_;
   Local Record &recPSIoTAssetIncidents_;
   Local string &sOrigFetchAssetIncidentsURI_, &sMethodName_, &sModFetchAssetIncidentsURI_;
   Local boolean &bUpdate_;
   
   &sOrigFetchAssetIncidentsURI_ = "";
   &sModFetchAssetIncidentsURI_ = "";
   &sMethodName_ = "AssetIncidents:fetchIncidents";
   %This.sFetchIncidentsURIQueryParams_ = "?orderBy=lastModifiedTime:dsc";
   Local time &startTime_ = %PerfTime;
   
   try
      rem %This.sFetchAssetIncidentsURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_INCIDENTS");
      %This.sFetchAssetIncidentsURI_ = &oJsonService_.fetchEndpoint("FETCH_INCIDENTS");
      If %This.sFetchAssetIncidentsURI_ <> "" Then
         &sOrigFetchAssetIncidentsURI_ = %This.sFetchAssetIncidentsURI_;
         &sModFetchAssetIncidentsURI_ = &oJsonService_.SubstituteURI(%This.sFetchAssetIncidentsURI_, &sIoTOrgID_); /* Replace <orgId> */
         rem %This.sFetchAssetIncidentsURI_ = %This.sFetchAssetIncidentsURI_ | %This.sFetchIncidentsURIQueryParams_; /* Add OrderBy */
         %This.sFetchAssetIncidentsURI_ = &sModFetchAssetIncidentsURI_ | %This.sFetchIncidentsURIQueryParams_; /* Add OrderBy */
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, %This.sFetchAssetIncidentsURI_, "GET", "", False); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(%This.sFetchAssetIncidentsURI_, "GET", "", False); /* Send the request to IoT */
      Else
         rem cannot fetch asset incidents;
         &oJsonService_.LogRequest(&sMethodName_ | " FETCH IoT Incidents FAILED! ", "");
         Return False;
      End-If;
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   &oJObjAssetIncidentFetch_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   If &oJObjAssetIncidentFetch_.IsJsonArray(&oConstantService_.IoTResponseArray_) Then
      &oJsonService_.LogRequest("Fetching IoT Incidents : ", "");
      Local JsonArray &jArray_ = &oJObjAssetIncidentFetch_.GetJsonArray(&oConstantService_.IoTResponseArray_);
      If &jArray_.Size > 0 Then /* Read Array */
         &m_doccount_ = &jArray_.Length();
         For &i = 1 To &m_doccount_
            Local JsonObject &jObject_ = &jArray_.GetJsonObject(&i);
            If &jObject_.IsExist("id") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentID_, String(&jObject_.GetProperty("id")));
            End-If;
            If &jObject_.IsExist("type") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentType_, String(&jObject_.GetProperty("type")));
            End-If;
            If &jObject_.IsExist("state") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentState_, String(&jObject_.GetProperty("state")));
            End-If;
            If &jObject_.IsExist("summary") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentSummary_, String(&jObject_.GetProperty("summary")));
            End-If;
            If &jObject_.IsExist("rule") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentRule_, String(&jObject_.GetProperty("rule")));
            End-If;
            If &jObject_.IsExist("priority") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentPriority_, String(&jObject_.GetProperty("priority")));
            End-If;
            If &jObject_.IsExist("geoLocation") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentAssetGeoLocation_, String(&jObject_.GetProperty("geoLocation")));
            End-If;
            If &jObject_.IsExist("createdBy") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentCreatedBy_, String(&jObject_.GetProperty("createdBy")));
            End-If;
            If &jObject_.IsExist("createdTimeAsString") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentCreatedTimeAsString_, String(&jObject_.GetProperty("createdTimeAsString")));
            End-If;
            If &jObject_.IsExist("lastModifiedTimeAsString") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentLastModifiedTimeAsString_, String(&jObject_.GetProperty("lastModifiedTimeAsString")));
            End-If;
            If &jObject_.IsExist("incidentTimeAsString") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentTimeAsString_, String(&jObject_.GetProperty("incidentTimeAsString")));
            End-If;
            If &jObject_.IsExist("organizationId") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentOrganisationID_, String(&jObject_.GetProperty("organizationId")));
            End-If;
            Local boolean &bDescription_ = False;
            If &jObject_.IsExist("description") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTIncidentDescription_, String(&jObject_.GetProperty("description")));
               &bDescription_ = True;
            End-If;
            
            If &jObject_.IsExist("contextInformation") Then
               Local JsonObject &oJsonContext_ = &jObject_.GetJsonObject("contextInformation");
               Local JsonArray &ojObjContextArray_ = &oJsonContext_.GetJsonArray("affectedObjects");
               If &ojObjContextArray_.Size > 0 Then /* Read affectedObjects Array */
                  &mc_doc_ = &ojObjContextArray_.Length();
                  For &jc = 1 To &mc_doc_
                     Local JsonObject &jObjContext_ = &ojObjContextArray_.GetJsonObject(&jc);
                     &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&jObjContext_.GetProperty("id")));
                     &oJsonService_.LogRequest(&oConstantService_.IoTAssetName_, String(&jObjContext_.GetProperty("name")));
                  End-For;
               End-If; /* affectedObjects END */
               Local JsonArray &ojObjOccurrencesArray_ = &oJsonContext_.GetJsonArray("occurrences");
               If &ojObjOccurrencesArray_.Size > 0 Then /* Read occurrences Array */
                  &tc_doc_ = &ojObjOccurrencesArray_.Length();
                  For &tc = 1 To &tc_doc_
                     Local JsonObject &jObjOccurrences_ = &ojObjOccurrencesArray_.GetJsonObject(&tc);
                     &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&jObjOccurrences_.GetProperty("id")));
                     &oJsonService_.LogRequest(&oConstantService_.IoTIncidentID_, String(&jObjOccurrences_.GetProperty("incidentId")));
                     Local JsonArray &ojObjSatisfiedPredicatesArray_ = &jObjOccurrences_.GetJsonArray("satisfiedPredicates");
                     If &ojObjSatisfiedPredicatesArray_.Size > 0 Then /* Read satisfiedPredicates Array */
                        &pc_doc_ = &ojObjSatisfiedPredicatesArray_.Length();
                        For &pc = 1 To &pc_doc_
                           Local JsonObject &jObjSatisfiedPredicates_ = &ojObjSatisfiedPredicatesArray_.GetJsonObject(&pc);
                           &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&jObjSatisfiedPredicates_.GetProperty("type")));
                           If &jObjSatisfiedPredicates_.IsExist("information") Then
                              Local JsonObject &jSatisfiedPredicatesInfo_ = &jObjSatisfiedPredicates_.GetJsonObject("information");
                              If &jSatisfiedPredicatesInfo_.IsExist("observedValue") Then
                                 &oJsonService_.LogRequest(&oConstantService_.IoTIncidentObservedValue_, String(&jSatisfiedPredicatesInfo_.GetProperty("observedValue")));
                              End-If;
                              If &jSatisfiedPredicatesInfo_.IsExist("attributeName") Then
                                 &oJsonService_.LogRequest(&oConstantService_.IoTIncidentAttributeName_, String(&jSatisfiedPredicatesInfo_.GetProperty("attributeName")));
                              End-If;
                              If &jSatisfiedPredicatesInfo_.IsExist("thresholdValue") Then
                                 &oJsonService_.LogRequest(&oConstantService_.IoTIncidentThresholdValue_, String(&jSatisfiedPredicatesInfo_.GetProperty("thresholdValue")));
                              End-If;
                              If &jSatisfiedPredicatesInfo_.IsExist("operator") Then
                                 &oJsonService_.LogRequest(&oConstantService_.IoTIncidentOperator_, String(&jSatisfiedPredicatesInfo_.GetProperty("operator")));
                              End-If;
                           End-If;
                           rem &oJsonService_.LogRequest(&oConstantService_.IoTIncidentID_, String(&jObjOccurrences_.GetProperty("incidentId")));
                        End-For;
                     End-If; /* satisfiedPredicates END */
                  End-For;
               End-If; /* occurrences END */
               
            End-If; /* contextInformation END */
            
            If &jObject_.IsExist("links") Then
               Local JsonArray &ojObjLinksArray_ = &jObject_.GetJsonArray("links");
               If &ojObjLinksArray_.Size > 0 Then /* Read links Array */
                  &m_doc_ = &ojObjLinksArray_.Length();
                  For &j = 1 To &m_doc_
                     Local JsonObject &jObjLinks_ = &ojObjLinksArray_.GetJsonObject(&j);
                     If &jObjLinks_.GetProperty("rel") = "self" Then
                        &oJsonService_.LogRequest(&oConstantService_.IoTPlaceSelfLink_, String(&jObjLinks_.GetProperty("href")));
                     End-If;
                  End-For;
               End-If;
            End-If; /* links END */
            REM Insert into New Asset Incident Table;
            /* 
            &recPSIoTAssetIncidents_ = CreateRecord(Record.AM_IOT_INCIDENT);
            &recPSIoTAssetIncidents_.AM_IOT_ASSET_ID.Value = &jObject_.GetProperty("id");
            &recPSIoTAssetIncidents_.AM_IOT_ASSET_NAME.Value = &jObject_.GetProperty("name");
            &recPSIoTAssetIncidents_.AM_IOT_ASSET_TYPE.Value = &jObject_.GetProperty("type");
            If &bDescription_ Then
               &recPSIoTAssetIncidents_.ASSET_DESCR.Value = &jObject_.GetProperty("description");
            Else
               &recPSIoTAssetIncidents_.ASSET_DESCR.Value = "";
            End-If;
            &recPSIoTAssetIncidents_.AM_IOT_ASSET_URL.Value = &jObjLinks_.GetProperty("href");
            &recPSIoTAssetIncidents_.AM_LASTUPDT_DTTM.Value = %Datetime;
            &bUpdate_ = &recPSIoTAssetIncidents_.Update(&recPSIoTAssetIncidents_);
            If Not &bUpdate_ Then
               &recPSIoTAssetIncidents_.Insert();
            End-If;
            */
         End-For;
      End-If;
      Return True;
   Else
      rem Its not an array;
      &oJsonService_.LogRequest("IoT Incidents Response is NOT AN ARRAY : ", "");
      Return False;
   End-If;
   
end-method;

method updateIncident
   /+ &sIoTOrgID_ as String, +/
   /+ &sIoTIncidentID_ as String +/
   /+ Returns Boolean +/
   
   Local string &sUpdateIncidentURI_, &sModUpdateIncidentURI_, &sRequestJSONUpd_, &sMethodName_;
   &sUpdateIncidentURI_ = "";
   &sModUpdateIncidentURI_ = "";
   &sRequestJSONUpd_ = "";
   &sMethodName_ = "AssetIncidents:updateIncident";
   Local time &startTime_ = %PerfTime;
   
   try
      Local JsonBuilder &oJsonBldrUpd_ = CreateJsonBuilder(); /* Create Payload */
      If &oJsonBldrUpd_.StartObjectReturnsTrue("") Then
         &oJsonBldrUpd_.AddProperty("id", &sIoTIncidentID_);
         &oJsonBldrUpd_.AddProperty("state", &oConstantService_.IoTIncidentStatusRESOLVED_);
         &oJsonBldrUpd_.EndObject("");
      End-If;
      &sRequestJSONUpd_ = &oJsonBldrUpd_.ToString();
      rem &sUpdateIncidentURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "UPDATE_INCIDENT");
      &sUpdateIncidentURI_ = &oJsonService_.fetchEndpoint("UPDATE_INCIDENT");
      If &sUpdateIncidentURI_ <> "" Then
         &sModUpdateIncidentURI_ = &oJsonService_.SubstituteURI(&sUpdateIncidentURI_, &sIoTOrgID_); /* Replace <orgId> */
         rem &sUpdateIncidentURI_ = &sUpdateIncidentURI_ | &sIoTIncidentID_;
         &sModUpdateIncidentURI_ = &sModUpdateIncidentURI_ | "/" | &sIoTIncidentID_;
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sUpdateIncidentURI_, "POST", &sRequestJSONUpd_, True); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModUpdateIncidentURI_, "POST", &sRequestJSONUpd_, True); /* Send the request to IoT */
         REM Now update AM IoT Incident Table;
         SQLExec("UPDATE PS_SOMETHING SET AM_IOT_INCIDENT_STATUS = 'RESOLVED' WHERE AM_IOT_INCIDENT_ID = :1", &sIoTIncidentID_);
      Else
         rem cannot update incident;
         &oJsonService_.LogRequest(&sMethodName_ | " UPDATE INCIDENT Failed! ", "");
         Return False;
      End-If;
      
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   Return True;
   
end-method;
