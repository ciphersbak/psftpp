import AM_IOT:JsonService;
import AM_IOT:Constants;

class AMOrg
   method AMOrg();
   method fetchOrgs() Returns boolean;
   method fetchOrgByID(&sIoTOrganisationID_ As string) Returns boolean;
   method createOrg(&sIoTOrgName_ As string, &sIoTOrgDescription_ As string) Returns boolean;
   method deleteOrgByID(&sIoTOrganisationID_ As string) Returns boolean;
   property string sFetchAMOrgURIQueryParams_;
   property string sFetchAMOrgURI_;
   
private
   instance AM_IOT:JsonService &oJsonService_;
   instance AM_IOT:Constants &oConstantService_;
   instance string &sIoTResponse_;
   
end-class;

method AMOrg
   
   &oJsonService_ = create AM_IOT:JsonService();
   &oConstantService_ = create AM_IOT:Constants();
end-method;

method fetchOrgs
   /+ Returns Boolean +/
   
   Local integer &i, &j, &m_doccount_, &m_doc_, &nItemsChildCnt_, &nArrLen_, &nArrCount_;
   Local JsonObject &oJObjAMOrgFetch_;
   Local Record &recPSIoTAMOrg_;
   Local string &sOrigFetchAMOrgURI_, &sMethodName_;
   Local boolean &bUpdate_;
   
   &sOrigFetchAMOrgURI_ = "";
   &sMethodName_ = "AMOrg:fetchOrgs";
   %This.sFetchAMOrgURIQueryParams_ = "?limit=100&offset=0";
   Local time &startTime_ = %PerfTime;
   
   try
      rem %This.sFetchAMOrgURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_ORG");
      %This.sFetchAMOrgURI_ = &oJsonService_.fetchEndpoint("FETCH_ORG");
      If %This.sFetchAMOrgURI_ <> "" Then
         &sOrigFetchAMOrgURI_ = %This.sFetchAMOrgURI_;
         %This.sFetchAMOrgURI_ = %This.sFetchAMOrgURI_ | %This.sFetchAMOrgURIQueryParams_; /* Add limit and offset */
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, %This.sFetchAMOrgURI_, "GET", "", False); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(%This.sFetchAMOrgURI_, "GET", "", False); /* Send the request to IoT */
      Else
         rem cannot fetch IoT Org;
         &oJsonService_.LogRequest(&sMethodName_ | " FETCH IoT Orgs FAILED! ", "");
         Return False;
      End-If;
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   &oJObjAMOrgFetch_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   If &oJObjAMOrgFetch_.IsJsonArray(&oConstantService_.IoTResponseArray_) Then
      rem &oJsonService_.LogRequest("Fetching IoT AM Orgs : ", "");
      Local JsonArray &jArray_ = &oJObjAMOrgFetch_.GetJsonArray(&oConstantService_.IoTResponseArray_);
      If &jArray_.Size > 0 Then /* Read Array */
         &m_doccount_ = &jArray_.Length();
         For &i = 1 To &m_doccount_
            Local JsonObject &jObject_ = &jArray_.GetJsonObject(&i);
            If &jObject_.IsExist("id") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTOrgID_, String(&jObject_.GetProperty("id")));
            End-If;
            If &jObject_.IsExist("name") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTOrgName_, String(&jObject_.GetProperty("name")));
            End-If;
            If &jObject_.IsExist("system") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTIncidentOrganisationID_, String(&jObject_.GetProperty("system")));
            End-If;
            Local boolean &bDescription_ = False;
            If &jObject_.IsExist("description") Then
               rem &oJsonService_.LogRequest(&oConstantService_.IoTOrgDescription_, String(&jObject_.GetProperty("description")));
               &bDescription_ = True;
            End-If;
            
            If &jObject_.IsExist("links") Then
               Local JsonArray &ojObjLinksArray_ = &jObject_.GetJsonArray("links");
               If &ojObjLinksArray_.Size > 0 Then /* Read links Array */
                  &m_doc_ = &ojObjLinksArray_.Length();
                  For &j = 1 To &m_doc_
                     Local JsonObject &jObjLinks_ = &ojObjLinksArray_.GetJsonObject(&j);
                     If &jObjLinks_.GetProperty("rel") = "self" Then
                        rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceSelfLink_, String(&jObjLinks_.GetProperty("href")));
                     End-If;
                  End-For;
               End-If;
            End-If; /* links END */
            
            REM Insert into New Asset Org Table;
            &recPSIoTAMOrg_ = CreateRecord(Record.AM_IOT_ORG);
            &recPSIoTAMOrg_.AM_IOT_ORG_ID.Value = &jObject_.GetProperty("id");
            &recPSIoTAMOrg_.AM_IOT_ORG_NAME.Value = &jObject_.GetProperty("name");
            If &bDescription_ Then
               &recPSIoTAMOrg_.AM_IOT_ORG_DESCR.Value = &jObject_.GetProperty("description");
            Else
               &recPSIoTAMOrg_.AM_IOT_ORG_DESCR.Value = "";
            End-If;
            rem &recPSIoTAMOrg_.AM_IOT_ORG_URL.Value = &jObjLinks_.GetProperty("href"); /* Apparently Orgs do not have self link */
            &recPSIoTAMOrg_.AM_IOT_ORG_URL.Value = "";
            &recPSIoTAMOrg_.AM_LASTUPDT_DTTM.Value = %Datetime;
            &recPSIoTAMOrg_.AM_LASTUPDT_OPRID.Value = %OperatorId;
            &bUpdate_ = &recPSIoTAMOrg_.Update(&recPSIoTAMOrg_);
            If Not &bUpdate_ Then
               &recPSIoTAMOrg_.Insert();
            End-If;
         End-For;
      End-If;
      Return True;
   Else
      rem Its not an array;
      &oJsonService_.LogRequest("IoT Org Response is NOT AN ARRAY : ", "");
      Return False;
   End-If;
   
end-method;

method fetchOrgByID
   /+ &sIoTOrganisationID_ as String +/
   /+ Returns Boolean +/
   
   Local integer &i, &j, &m_doccount_, &m_doc_, &nItemsChildCnt_, &nArrLen_, &nArrCount_;
   Local JsonObject &oJObjAMOrgFetch_;
   Local Record &recPSIoTAMOrg_;
   Local string &sOrigFetchAMOrgURI_, &sMethodName_;
   Local boolean &bUpdate_;
   
   &sOrigFetchAMOrgURI_ = "";
   &sMethodName_ = "AMOrg:fetchOrgByID";
   Local time &startTime_ = %PerfTime;
   
   try
      rem %This.sFetchAMOrgURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_ORG");
      %This.sFetchAMOrgURI_ = &oJsonService_.fetchEndpoint("FETCH_ORG");
      If %This.sFetchAMOrgURI_ <> "" Then
         &sOrigFetchAMOrgURI_ = %This.sFetchAMOrgURI_;
         %This.sFetchAMOrgURI_ = %This.sFetchAMOrgURI_ | "/" | &sIoTOrganisationID_;
         &sIoTResponse_ = &oJsonService_.sendRequest(%This.sFetchAMOrgURI_, "GET", "", False); /* Send the request to IoT */
      Else
         rem cannot fetch IoT Org By ID;
         &oJsonService_.LogRequest(&sMethodName_ | " FETCH IoT Org by ID FAILED! ", "");
         Return False;
      End-If;
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> &oConstantService_.MsgSetNbr#_ And
            &ib_exception.MessageNumber <> &oConstantService_.MsgNbr#_ Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   &oJObjAMOrgFetch_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   If &oJObjAMOrgFetch_.IsExist("id") Then
      &oJsonService_.LogRequest("Fetching IoT AM Org By ID : ", &sIoTOrganisationID_);
      rem &oJsonService_.LogRequest(&oConstantService_.IoTOrgID_, String(&oJObjAMOrgFetch_.GetProperty("id")));
      rem &oJsonService_.LogRequest(&oConstantService_.IoTOrgName_, String(&oJObjAMOrgFetch_.GetProperty("name")));
      rem &oJsonService_.LogRequest(&oConstantService_.IoTOrgDescription_, String(&oJObjAMOrgFetch_.GetProperty("description")));
      
      If &oJObjAMOrgFetch_.IsExist("links") Then
         Local JsonArray &ojObjLinksArray_ = &oJObjAMOrgFetch_.GetJsonArray("links");
         If &ojObjLinksArray_.Size > 0 Then /* Read links Array */
            &m_doc_ = &ojObjLinksArray_.Length();
            For &j = 1 To &m_doc_
               Local JsonObject &jObjLinks_ = &ojObjLinksArray_.GetJsonObject(&j);
               If &jObjLinks_.GetProperty("rel") = "self" Then
                  rem &oJsonService_.LogRequest(&oConstantService_.IoTPlaceSelfLink_, String(&jObjLinks_.GetProperty("href")));
               End-If;
            End-For;
         End-If;
      End-If; /* links END */
      
      REM Insert into New Asset Org Table;
      &recPSIoTAMOrg_ = CreateRecord(Record.AM_IOT_ORG);
      &recPSIoTAMOrg_.AM_IOT_ORG_ID.Value = &oJObjAMOrgFetch_.GetProperty("id");
      &recPSIoTAMOrg_.AM_IOT_ORG_NAME.Value = &oJObjAMOrgFetch_.GetProperty("name");
      &recPSIoTAMOrg_.AM_IOT_ORG_DESCR.Value = &oJObjAMOrgFetch_.GetProperty("description");
      &recPSIoTAMOrg_.AM_IOT_ORG_URL.Value = &jObjLinks_.GetProperty("href");
      &recPSIoTAMOrg_.AM_LASTUPDT_DTTM.Value = %Datetime;
      &recPSIoTAMOrg_.AM_LASTUPDT_OPRID.Value = %OperatorId;
      &bUpdate_ = &recPSIoTAMOrg_.Update(&recPSIoTAMOrg_);
      If Not &bUpdate_ Then
         &recPSIoTAMOrg_.Insert();
      End-If;
      
   End-If;
   Return True;
   
end-method;

method createOrg
   /+ &sIoTOrgName_ as String, +/
   /+ &sIoTOrgDescription_ as String +/
   /+ Returns Boolean +/
   
   Local string &sRequestJSON_, &sMethodName_;
   Local JsonParser &oJsonParser_;
   Local JsonBuilder &oJsonBldr_;
   &sRequestJSON_ = "";
   &sMethodName_ = "AMOrg:createOrg";
   
   &oJsonBldr_ = CreateJsonBuilder(); /* Create Org Payload */
   If &oJsonBldr_.StartObjectReturnsTrue("") Then
      &oJsonBldr_.AddProperty("name", &sIoTOrgName_);
      &oJsonBldr_.AddProperty("description", &sIoTOrgDescription_);
      &oJsonBldr_.EndObject("");
   End-If;
   &sRequestJSON_ = &oJsonBldr_.ToString();
   
   &oJsonService_.LogRequest(&sMethodName_ | " Request : ", &sRequestJSON_);
   REM INCOMPLETE;
   Return True;
end-method;

method deleteOrgByID
   /+ &sIoTOrganisationID_ as String +/
   /+ Returns Boolean +/
   
   Return True;
end-method;
