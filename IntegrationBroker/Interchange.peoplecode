--Interchange
class Interchange
   method Interchange();
   method convertXMLtoJSON(&oXmlDoc_ As XmlDoc) Returns string;
   method convertJSONtoXML(&sJSON_ As string) Returns XmlDoc;
   method parseJSON(&sJSONResp_ As string);
   /* Logging and debugging methods */
   method logRequest(&function As string, &request As string);
   method logPollSpanTime(&sMethodName_ As string, &startTime_ As time, &endTime_ As time);
   method debug(&sText As string);
   
private
   
   instance string &sEvalNodeType_;
   instance array of array of any &arrKeyValue_;
   instance array of array of string &arrJsonPath_;
   /* JSON Parser */
   method getJSONParser(&content_ As string) Returns JsonObject;
   /* Evaluate NodeType */
   method evalNodeType(&oEvalJS_ As JsonObject, &sNodeName_ As string, &sPath_ As string, &nCount_ As number) Returns string;
   /* Store JSON in DB */
   method logJSONToDB();
   method cleanArrays(&arrClean_ As array of array of string);
   
   Constant &sRoot_ = "$";
   Constant &bDebug_ = True; /* Change this to True for debugging */
   
end-class;

/* constructor */
method Interchange
end-method;

method convertXMLtoJSON
   /+ &oXmlDoc_ as XmlDoc +/
   /+ Returns String +/
   
   Local JavaObject &ojJSONObj_ = CreateJavaObject("org.json.JSONObject");
   Local JavaObject &ojXmlObject_ = CreateJavaObject("org.json.XML");
   
   Local string &sXmlData_ = &oXmlDoc_.GenXmlString();
   &ojJSONObj_ = &ojXmlObject_.toJSONObject(&sXmlData_);
   
   Return &ojJSONObj_.toString();
end-method;

method convertJSONtoXML
   /+ &sJSON_ as String +/
   /+ Returns XmlDoc +/
   
   Local JavaObject &ojJSONStr_ = CreateJavaObject("java.lang.String", &sJSON_);
   Local JavaObject &ojArgTypes_ = CreateJavaObject("java.lang.Class[]", &ojJSONStr_.getClass());
   
   Local JavaObject &ojJSONClass_ = CreateJavaObject("org.json.JSONObject").getClass();
   Local JavaObject &ojConstructor_ = &ojJSONClass_.getConstructor(&ojArgTypes_);
   Local JavaObject &ojParserObj_ = &ojConstructor_.newInstance(CreateJavaObject("java.lang.Object[]", &ojJSONStr_));
   Local JavaObject &ojRoleJSON_ = &ojJSONClass_.cast(&ojParserObj_);
   
   Local JavaObject &ojXmlObject_ = CreateJavaObject("org.json.XML");
   
   Local string &sXMLData_ = "<?xml version='1.0'?>";
   &sXMLData_ = &sXMLData_ | &ojXmlObject_.toString(&ojRoleJSON_);
   
   Local XmlDoc &XmlDoc_ = CreateXmlDoc(&sXMLData_);
   Return &XmlDoc_;
   
end-method;

/* 
 * Create JSONParser Object 
 */
method getJSONParser
   /+ &content_ as String +/
   /+ Returns JsonObject +/
   
   Local JsonParser &parser_ = CreateJsonParser();
   Local JsonObject &jObj_;
   
   If None(&content_) Then
      Return Null;
   Else
      try
         Local boolean &status_ = &parser_.Parse(&content_);
         If &status_ Then
            &jObj_ = &parser_.GetRootObject();
            Return &jObj_;
         Else
            Return Null; /* Unable to parse the response payload */
         End-If;
         rem Return &jObj_;
      catch Exception &errParse_
         rem MessageBox(0, "", 0, 0, "Error while parsing Svc Payload : " | &errParse_.ToString());
         %This.logRequest(" Error while parsing Svc Payload : " | &errParse_.ToString(), "");
         %This.debug("");
         %This.debug("Error while parsing Svc Payload : " | &errParse_.ToString());
         Error (MsgGetText(18130, 15001, "Unhandled exception occurred in %1.", "getJsonParser"));
      end-try;
   End-If;
   
end-method;

/*
 * Evaluate each JSON Node.
 * JSONPath from config is used in this method to push "key-value" pairs into an array.
 */
method evalNodeType
   /+ &oEvalJS_ as JsonObject, +/
   /+ &sNodeName_ as String, +/
   /+ &sPath_ as String, +/
   /+ &nCount_ as Number +/
   /+ Returns String +/
   
   Local JsonNode &oJSNode_, &oParentJSNode_;
   Local string &sNodeType_, &sSomeStr_, &sMethodName_, &sGetStr_, &sJsonPath_;
   Local JsonObject &oJSLvl1_, &oJSArrLvl1_;
   Local JsonArray &oJSArray1_;
   Local number &nJSLvl1ChildCount_, &nGetNumber_;
   Local integer &iNodeValue_, &iGetInt_, &nArrLen_, &nArrCount_;
   Local float &fGetFloat_;
   Local boolean &bGetBool_;
   
   &oJSNode_ = &oEvalJS_.GetJsonNode("" | &sNodeName_ | "");
   &sJsonPath_ = &sPath_;
   
   Evaluate &oJSNode_.NodeType
   When = 0
      %This.debug("");
      %This.debug(&sNodeName_ | " NodeType : " | "NULL");
      &sNodeType_ = "JSON_NODE_NULL";
      Break;
   When = 1
      rem %This.debug("");
      &sNodeType_ = "JSON_NODE_OBJECT";
      rem &oParentJSNode_ = &oJSNode_.GetParentNode();
      &oJSLvl1_ = &oEvalJS_.GetJsonObject("" | &sNodeName_ | "");
      %This.debug(&sNodeName_ | " NodeType : " | "OBJECT" | " ChildCount : " | &oJSLvl1_.ChildCount);
      &sJsonPath_ = &sPath_ | "." | &sNodeName_;
      rem %This.ensureJSONPathHasLeadingDollar(&sJsonPath_);
      Evaluate &sJsonPath_
      When = "$.predictionResult.categories.Merchant.fields.MerchantName"
         REM Pick this from Configuration, you SHOULD know which KVP to pick;
         &arrJsonPath_.Push(CreateArray(&sNodeName_, &sJsonPath_));
         Break;
      When-Other
         Break;
      End-Evaluate;
      
      For &nJSLvl1ChildCount_ = 1 To &oJSLvl1_.ChildCount
         rem &sPath_ = &sPath_ | "." | &oJSLvl1_.GetPropertyNameAt(&nJSLvl1ChildCount_);
         <* %This.logRequest(" (Key : Value) (" | &oJSLvl1_.GetPropertyNameAt(&nJSLvl1ChildCount_) | " : " | &oJSLvl1_.GetProperty(&oJSLvl1_.GetPropertyNameAt(&nJSLvl1ChildCount_)) | ")", " <-- Path --> " | &sPath_ | "." | &sNodeName_); *>
         rem %This.logRequest(" ", " (Key : Value) (" | &oJSLvl1_.GetPropertyNameAt(&nJSLvl1ChildCount_) | " : " | &oJSLvl1_.GetProperty(&oJSLvl1_.GetPropertyNameAt(&nJSLvl1ChildCount_)) | ")");
         &sSomeStr_ = %This.evalNodeType(&oJSLvl1_, &oJSLvl1_.GetPropertyNameAt(&nJSLvl1ChildCount_), &sPath_ | "." | &sNodeName_, &oJSLvl1_.ChildCount);
      End-For;
      Break;
   When = 2
      %This.debug("");
      %This.debug(&sNodeName_ | " NodeType : " | "ARRAY");
      &sJsonPath_ = &sPath_ | "." | &sNodeName_;
      &sNodeType_ = "JSON_NODE_ARRAY";
      &oJSArray1_ = &oEvalJS_.GetJsonArray("" | &sNodeName_ | "");
      If &oJSArray1_.Size > 0 Then
         &nArrLen_ = &oJSArray1_.Length();
         For &nArrCount_ = 1 To &nArrLen_
            &oJSArrLvl1_ = &oJSArray1_.GetJsonObject(&nArrCount_);
            &sSomeStr_ = %This.evalNodeType(&oJSArrLvl1_, &oJSArrLvl1_.GetPropertyNameAt(&nArrCount_), &sPath_ | "." | &sNodeName_, &oJSArrLvl1_.ChildCount);
         End-For;
      End-If;
      Break;
   When = 3
      rem %This.debug("");
      &arrKeyValue_.Push(CreateArrayAny(&sNodeName_, &oJSNode_.GetJsonValue().GetValue(), &sJsonPath_));
      /* 
      &arrKeyValue_.Push(&sNodeName_);
      &arrKeyValue_ [1].Push(&oJSNode_.GetJsonValue().GetValue());
      &n2DArrCnt_ = &n2DArrCnt_ + 1;
      */
      rem %This.debug(&sNodeName_ | " NodeType : " | "ValueType : " | &oJSNode_.ValueType | " : Value : " | &oJSNode_.GetJsonValue().GetValue());
      <* 
      &iNodeValue_ = &oJSNode_.GetValueType();
      Evaluate &iNodeValue_
      When = 0
         Error ("JSON_VALUE_INVALID");
         Break;
      When = 1
         &iGetInt_ = &oJSNode_.GetInteger();
         %This.debug(&sNodeName_ | " NodeType  " | " Int Value : " | &iGetInt_);
         Break;
      When = 10
         rem DATETIME;
         %This.debug(&sNodeName_ | " NodeType  " | " DATETIME Value : " | &oJSNode_.GetJsonValue().GetValue());
         Break;
      When-Other
         Break;
      End-Evaluate;
      *>
      &sNodeType_ = "JSON_NODE_VALUE";
      Break;
   When-Other
      rem Invalid NodeType;
      &sNodeType_ = "";
      Error ("Invalid JsonNode");
      Break;
   End-Evaluate;
   
   Return &sNodeType_;
end-method;

method parseJSON
   /+ &sJSONResp_ as String +/
   
   Local JsonObject &oJSONObj_;
   Local number &nPredResultChildCount_, &nLvl1ChildCount_, &nLvl2ChildCount_;
   Local number &nCatChildCount_, &nUnderCatgChildCount_, &nFieldsChildCount_;
   Local string &sMethodName_;
   Local integer &i_, &j_, &m_doccount_;
   
   &sMethodName_ = "ServiceIntegration:parseSvcResponse";
   Local time &startTime_ = %PerfTime;
   
   rem &oJSONObj_ = %This.getJSONParser(&sSvcResponse_);
   &oJSONObj_ = %This.getJSONParser(&sJSONResp_);
   If (&oJSONObj_ <> Null) Then
      Local string &sRootNode_ = &oJSONObj_.GetPropertyNameAt(1); /* Get Root Node */
      rem %This.debug(&sRootNode_ | " ChildCount : " | &oJSONObj_.ChildCount);
      If (&oJSONObj_.IsJsonArray("")) Or
            &oJSONObj_.IsJsonArray(&sRootNode_) Then
         %This.debug("");
         %This.debug("Payload starts with an Array : " | &sRootNode_);
         Local JsonArray &oJSArray_ = &oJSONObj_.GetJsonArray(&sRootNode_);
         If &oJSArray_.Size > 0 Then
            &m_doccount_ = &oJSArray_.Length();
            For &i_ = 1 To &m_doccount_
               Local JsonObject &oJSArrObj_ = &oJSArray_.GetJsonObject(&i_);
               &sEvalNodeType_ = %This.evalNodeType(&oJSArrObj_, &oJSArrObj_.GetPropertyNameAt(&i_), &sRoot_, &i_); /* Recursive Call */
            End-For;
         End-If; /* Read Array */
      Else
         If &oJSONObj_.IsJsonObject(&sRootNode_) Then
            %This.debug("");
            %This.debug("Payload starts with an Object : " | &sRootNode_);
            rem %This.debug("&sRootNode_ " | &sRootNode_);
            If &oJSONObj_.IsExist(&sRootNode_) Then
               &sEvalNodeType_ = %This.evalNodeType(&oJSONObj_, &sRootNode_, &sRoot_, 0); /* Recursive Call */
               rem %This.logJSONToDB();
            Else /* predictionResult */
               %This.logRequest(&sMethodName_ | " *** Stop processing; Root Node is NOT : " | &sRootNode_ | " *** ", "");
               %This.debug(" *** Stop processing; Root Node is NOT : " | &sRootNode_ | " *** ");
            End-If; /* predictionResult */
         End-If; /* IsJsonObject */
      End-If; /* IsJsonArray */
      
      %This.logJSONToDB(); /* Store ALL Key-Value Pair(s) */
      %This.cleanArrays(&arrJsonPath_);
   Else
      %This.logRequest(&sMethodName_ | " *** JSON could not be parsed *** ", "");
      %This.debug("");
      %This.debug("JSON could not be parsed");
      rem MessageBox(0, "", 0, 0, "JSON could not be parsed");
   End-If;
   
   Local time &endTime_ = %PerfTime;
   %This.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
end-method;

method logRequest
   /+ &function as String, +/
   /+ &request as String +/
   
   Local string &startMarking = "***START***";
   Local string &endMarking = "***END***";
   Local string &newStr = Char(13);
   Local integer &length = Len(&request);
   If &length < 4096 Then
      WriteToLog(%ApplicationLogFence_Error, &function | &request);
   Else
      /* 4096 - ( 256 * 2 ) */
      Local integer &segmentSize = 3586;
      Local integer &segmentCout = &length / &segmentSize;
      Local integer &segmentMod = Mod(&length, &segmentSize);
      Local integer &index = 0;
      Local string &segmentStr = "";
      Local integer &startPos = 1;
      For &index = 1 To &segmentCout Step 1
         &segmentStr = Substring(&request, &startPos, &segmentSize);
         WriteToLog(%ApplicationLogFence_Error, &function | "Part " | &index | " :" | &newStr | &startMarking | &segmentStr | &endMarking);
         &startPos = &startPos + &segmentSize;
      End-For;
      If &segmentMod <> 0 Then
         &index = &index + 1;
         &segmentStr = Substring(&request, &startPos, &segmentMod);
         WriteToLog(%ApplicationLogFence_Error, &function | "Part " | &index | " :" | &newStr | &startMarking | &segmentStr | &endMarking);
      End-If;
   End-If;
end-method;

method logPollSpanTime
   /+ &sMethodName_ as String, +/
   /+ &startTime_ as Time, +/
   /+ &endTime_ as Time +/
   
   %This.logRequest("Method : " | &sMethodName_ | " Poll Time (s) ", NumberToString("%6.3", Value(&endTime_ - &startTime_)));
end-method;

method debug
   /+ &sText as String +/
   
   If &bDebug_ Then
      WriteToLog(%ApplicationLogFence_Error, &sText);
   End-If;
   
end-method;

method cleanArrays
   /+ &arrClean_ as Array2 of String +/
   
   Local integer &iArrLen_;
   For &iArrLen_ = 1 To &arrClean_.Len
      &arrClean_.Pop();
   End-For;
   
end-method;

method logJSONToDB
   
   Local integer &nArrAnyIndex_, &nJ_;
   Local SQL &sqlInsert_;
   Local Record &recSvcChild_;
   Local string &sMethodName_;
   
   &sMethodName_ = "ServiceIntegration:logJSONToDB";
   Local time &startTime_ = %PerfTime;
   
   &sqlInsert_ = CreateSQL("%INSERT(:1)");
   &recSvcChild_ = CreateRecord(Record.PA_SVC_CHLD);
   &sqlInsert_.BulkMode = True;
   try
      If (&arrKeyValue_.Len > 0) Then
         &nArrAnyIndex_ = 0;
         While &arrKeyValue_.Next(&nArrAnyIndex_);
            &nJ_ = 1;
            &recSvcChild_.ACEEVALID.Value = GetJavaClass("java.util.UUID").randomUUID().toString();
            &recSvcChild_.SEQNBR.Value = &nArrAnyIndex_;
            &recSvcChild_.PTWC_KEYNAME.Value = &arrKeyValue_ [&nArrAnyIndex_][1];
            &nJ_ = &nJ_ + 1;
            &recSvcChild_.PTWC_KEYVALUE.Value = &arrKeyValue_ [&nArrAnyIndex_][2];
            &recSvcChild_.PTPPB_XPATH.Value = &arrKeyValue_ [&nArrAnyIndex_][3];
            rem %This.debug(&recSvcChild_.PTWC_KEYNAME.Value | " : " | &recSvcChild_.PTWC_KEYVALUE.Value);
            &sqlInsert_.Execute(&recSvcChild_);
            rem &nArrAnyIndex_ = &nArrAnyIndex_ + 1;
         End-While;
      Else
         rem %This.debug("");
         %This.debug("Array is EMPTY");
      End-If;
   catch Exception &errLogToDB_
      %This.logRequest(&sMethodName_ | " Error logged while saving JSON : " | &errLogToDB_.ToString(), "");
      rem %This.debug("");
      %This.debug("Error logged while saving JSON : " | &errLogToDB_.ToString());
   end-try;
   CommitWork();
   &sqlInsert_.Close();
   
   Local time &endTime_ = %PerfTime;
   %This.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
end-method;
