import AM_IOT:JsonService;
import AM_IOT:Constants;

class IntegrateAsset
   method IntegrateAsset();
   method createAsset(&sIoTOrgID_ As string, &sIoTAssetName_ As string, &sIoTAssetType_ As string, &sIoTAssetDescr_ As string, &sIoTAssetLocation_ As string) Returns boolean;
   method updateAsset(&sIoTOrgID_ As string, &sIoTAssetName_ As string, &sIoTAssetLocation_ As string) Returns boolean;
   method deleteAsset(&sIoTOrgID_ As string, &sIoTAssetName_ As string) Returns boolean;
   method fetchAssets(&sIoTOrgID_ As string) Returns boolean;
   /* Parse fetchAssets Payload */
   method parseJson(&oParseJson_ As JsonObject);
   property string sPayloadFields_;
   property string sPayloadLimit_;
   property string sFetchAssetURIQueryParams_;
   
private
   rem method objJsonParser(&content As string) Returns JsonObject;
   instance AM_IOT:JsonService &oJsonService_;
   instance AM_IOT:Constants &oConstantService_;
   instance string &sIoTResponse_;
   Constant &sDefaultOrg_ = "ORA_DEFAULT_ORG";
end-class;

method IntegrateAsset
   
   rem Local AM_IOT:JsonService &oJsonService_;
   rem If (None(&oJsonService_)) Then;
   &oJsonService_ = create AM_IOT:JsonService();
   &oConstantService_ = create AM_IOT:Constants();
   rem End-If;
   
end-method;

method createAsset
   /+ &sIoTOrgID_ as String, +/
   /+ &sIoTAssetName_ as String, +/
   /+ &sIoTAssetType_ as String, +/
   /+ &sIoTAssetDescr_ as String, +/
   /+ &sIoTAssetLocation_ as String +/
   /+ Returns Boolean +/
   
   Local string &sRequestJSON_, &sAssetTag_, &sAssetGroup_, &sMethodName_;
   Local string &sCreateAssetURI_, &sModCreateAssetURI_;
   Local JsonParser &oJsonParser_;
   
   &sRequestJSON_ = "";
   &sAssetTag_ = "";
   &sAssetGroup_ = "";
   &sCreateAssetURI_ = "";
   &sModCreateAssetURI_ = "";
   &sMethodName_ = "IntegrateAsset:createAsset";
   
   Local JsonBuilder &oJsonBldr_ = CreateJsonBuilder(); /* Create Payload */
   If &oJsonBldr_.StartObjectReturnsTrue("") Then
      &oJsonBldr_.AddProperty("name", &sIoTAssetName_);
      &oJsonBldr_.AddProperty("type", &sIoTAssetType_);
      &oJsonBldr_.AddProperty("description", &sIoTAssetDescr_);
      rem &oJsonBldr_.AddProperty("geoLocation", "13.196859665896742, 77.70419643159327");
      &oJsonBldr_.AddProperty("assignedPlaceName", &sIoTAssetLocation_);
      &oJsonBldr_.AddProperty("eamId", "PS_" | &sIoTAssetName_); /* eamId is the External Asset ID */
      If &oJsonBldr_.StartArrayReturnsTrue("tags") Then
         &sAssetTag_ = "DUMMY TAG";
         &oJsonBldr_.AddElement(&sAssetTag_);
         &oJsonBldr_.EndArray("tags");
      End-If;
      /* Add Storage Location for Asset
      If &oJsonBldr_.StartArrayReturnsTrue("storagePlaces") Then
         &assetLocation_ = "Bangalore 1";
         &oJsonBldr_.AddElement(&assetLocation_);
         &oJsonBldr_.EndArray("storagePlaces");
      End-If;
      */
      /* Add Asset Group(s)
      If &oJsonBldr_.StartArrayReturnsTrue("groupNames") Then
         REM Asset Group predefined in IoT;
         &sAssetGroup_ = "PeopleSoft Assets";
         &oJsonBldr_.AddElement(&sAssetGroup_);
         &oJsonBldr_.EndArray("groupNames");
      End-If;
      */
      If All(&sIoTOrgID_) Then
         &oJsonBldr_.AddProperty("organizationId", &sIoTOrgID_);
      Else
         &oJsonBldr_.AddProperty("organizationId", &sDefaultOrg_);
      End-If;
      &oJsonBldr_.EndObject("");
   End-If;
   &sRequestJSON_ = &oJsonBldr_.ToString();
   &oJsonService_.LogRequest(&sMethodName_ | " Request : ", &sRequestJSON_);
   
   Local time &startTime_ = %PerfTime;
   try
      rem &sCreateAssetURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "CREATE_ASSET");
      &sCreateAssetURI_ = &oJsonService_.fetchEndpoint("CREATE_ASSET");
      If &sCreateAssetURI_ <> "" Then
         &sModCreateAssetURI_ = &oJsonService_.SubstituteURI(&sCreateAssetURI_, &sIoTOrgID_); /* Replace <orgId> */
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sModCreateAssetURI_, "POST", &sRequestJSON_, False); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModCreateAssetURI_, "POST", &sRequestJSON_, False); /* Send the request to IoT */
      Else
         rem cannot create asset;
         &oJsonService_.LogRequest(&sMethodName_ | " CREATE ASSET Failed! ", "");
         Return False;
      End-If; /* URI is not blank */
   catch Exception &e
      Local Exception &ib_exception = &e;
      /* 
      If Find("External System Contact Error", &ib_exception.ToString()) = 0 Then
               throw &e
      End-If; */
      If &ib_exception.MessageSetNumber <> 158 And
            &ib_exception.MessageNumber <> 10721 Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   Local JsonObject &oJsonObj_;
   &oJsonObj_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   /* &oJsonParser_ = CreateJsonParser(); REM Parse the reponse and retrieve Canonical URL for the asset;
   Local boolean &bStatus_ = &oJsonParser_.Parse(&sIoTResponse_);
   Local JsonObject &oJsonObj_ = &oJsonParser_.GetRootObject();
   */
   Local number &nChildCount_ = &oJsonObj_.GetChildCount();
   Local integer &i, &iArrLen_, &nArrLen_, &nArrCount_;
   Local Record &recPSIoTAssets_;
   Local boolean &bUpdate_;
   
   If &oJsonObj_.IsExist("name") Then
      &oJsonService_.LogRequest(&sMethodName_ | " Response: ", "Parsing JSON");
      Local JsonObject &oJSName_ = &oJsonObj_.GetJsonObject("name");
      rem Local number &somenbr = &oJSName_.GetChildCount();
      Local boolean &bCoordinates_ = False;
      If &oJsonObj_.IsExist("geoLocation") Then
         &oJsonService_.LogRequest(&oConstantService_.IoTAssetGeolocation_, String(&oJsonObj_.GetProperty("geoLocation")));
         &bCoordinates_ = True;
      End-If;
      Local boolean &bPlace_ = False;
      If &oJsonObj_.IsExist("assignedPlace") Then /* assignedPlace START */
         Local JsonObject &ojObjPayload_ = &oJsonObj_.GetJsonObject("assignedPlace");
         &oJsonService_.LogRequest(&oConstantService_.IoTAssetAssignedLocation_, String(&ojObjPayload_.GetProperty("name")));
         &bPlace_ = True;
         
         Local number &nAssignedPlaceChldCnt_;
         For &nAssignedPlaceChldCnt_ = 1 To &ojObjPayload_.ChildCount
            &oJsonService_.LogRequest("assignedPlace Child : ", "Property (Key : Value) (" | &ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_) | " : " | &ojObjPayload_.GetProperty(&ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_)) | ")");
            If &ojObjPayload_.IsJsonArray(&ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_)) Then
               Local JsonArray &ojObjPayloadArray_ = &ojObjPayload_.GetJsonArray(&ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_));
               If &ojObjPayloadArray_.Size > 0 Then
                  &nArrLen_ = &ojObjPayloadArray_.Length();
                  For &nArrCount_ = 1 To &nArrLen_
                     rem Local JsonObject &jObjPayloadArrObj_ = &ojObjPayloadArray_.GetJsonObject(&nArrCount_);
                     &oJsonService_.LogRequest("Inside assignedPlace JsonArray(s) : ", String(&ojObjPayloadArray_.GetElement(&nArrCount_)));
                  End-For;
               End-If;
            End-If;
         End-For;
         
      End-If; /* assignedPlace END */
      Local JsonArray &oJsonArray_ = &oJsonObj_.GetJsonArray("links");
      If &oJsonArray_.Size > 0 Then /* Read Array */
         &iArrLen_ = &oJsonArray_.Length();
         rem &logFile_.WriteLine("Array Length : " | &iArrLen_);
         For &i = 1 To &iArrLen_
            Local JsonObject &oJSObj_ = &oJsonArray_.GetJsonObject(&i);
            If &oJSObj_.GetProperty("rel") = "canonical" Then
               &oJsonService_.LogRequest("Canonical URL : ", &oJSObj_.GetProperty("href"));
            End-If;
         End-For;
      End-If;
      rem attributes;
      If &oJsonObj_.IsExist("attributes") Then
         Local JsonObject &oAssetAttributes_ = &oJsonObj_.GetJsonObject("attributes");
         rem fetch and store --> attribute, deviceModel, deviceId, field combination;
      End-If;
      
      &recPSIoTAssets_ = CreateRecord(Record.AM_IOT_ASSET); /* Insert into AM IOT Asset Table */
      &recPSIoTAssets_.AM_IOT_ASSET_ID.Value = &oJsonObj_.GetProperty("id");
      &recPSIoTAssets_.AM_IOT_ASSET_NAME.Value = &oJsonObj_.GetProperty("name");
      &recPSIoTAssets_.AM_IOT_ASSET_TYPE.Value = &oJsonObj_.GetProperty("type");
      &recPSIoTAssets_.ASSET_DESCR.Value = &oJsonObj_.GetProperty("description");
      If &bPlace_ Then
         &recPSIoTAssets_.AM_IOT_ASSGN_PLACE.Value = &ojObjPayload_.GetProperty("name");
      Else
         &recPSIoTAssets_.AM_IOT_ASSGN_PLACE.Value = "";
      End-If;
      If &bCoordinates_ Then
         &recPSIoTAssets_.AM_IOT_ASSETGEOLOC.Value = &oJsonObj_.GetProperty("geoLocation");
      Else
         &recPSIoTAssets_.AM_IOT_ASSETGEOLOC.Value = "";
      End-If;
      &recPSIoTAssets_.AM_IOT_EAMID.Value = &oJsonObj_.GetProperty("eamId");
      rem &recPSIoTAssets_.AM_IOT_PARENT_ID.Value = &oJsonObj_.GetProperty("parentId");
      &recPSIoTAssets_.AM_IOT_ASSET_URL.Value = &oJSObj_.GetProperty("href");
      &recPSIoTAssets_.AM_LASTUPDT_DTTM.Value = %Datetime;
      &recPSIoTAssets_.AM_LASTUPDT_OPRID.Value = %OperatorId;
      &bUpdate_ = &recPSIoTAssets_.Update(&recPSIoTAssets_);
      If Not &bUpdate_ Then
         &recPSIoTAssets_.Insert();
      End-If;
   End-If;
   Return True;
   
end-method;

method updateAsset
   /+ &sIoTOrgID_ as String, +/
   /+ &sIoTAssetName_ as String, +/
   /+ &sIoTAssetLocation_ as String +/
   /+ Returns Boolean +/
   
   Local string &sUpdateAssetURI_, &sModUpdateAssetURI_, &sFetchAssetURI_, &sModFetchAssetURI_, &sRequestJSONUpd_, &sMethodName_;
   
   &sUpdateAssetURI_ = "";
   &sModUpdateAssetURI_ = "";
   &sFetchAssetURI_ = "";
   &sModFetchAssetURI_ = "";
   &sRequestJSONUpd_ = "";
   &sMethodName_ = "IntegrateAsset:updateAsset";
   Local time &startTime_ = %PerfTime;
   
   try
      rem &sFetchAssetURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_ASSET");
      &sFetchAssetURI_ = &oJsonService_.fetchEndpoint("FETCH_ASSET");
      If &sFetchAssetURI_ <> "" Then
         &sModFetchAssetURI_ = &oJsonService_.SubstituteURI(&sFetchAssetURI_, &sIoTOrgID_); /* Replace <orgId> */
         rem &sFetchAssetURI_ = &sFetchAssetURI_ | &sIoTAssetName_; /* Fetch individual asset */
         &sModFetchAssetURI_ = &sModFetchAssetURI_ | "/" | &sIoTAssetName_; /* Fetch individual asset */
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sModFetchAssetURI_, "GET", "", True); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModFetchAssetURI_, "GET", "", True); /* Send the request to IoT */
         If &sIoTResponse_ <> "" Then /* Response exists, now update the asset */
            Local JsonBuilder &oJsonBldrUpd_ = CreateJsonBuilder(); /* Create Asset PATCH Payload */
            If &oJsonBldrUpd_.StartObjectReturnsTrue("") Then
               &oJsonBldrUpd_.AddProperty("name", &sIoTAssetName_);
               &oJsonBldrUpd_.AddProperty("description", "PATCHed Asset " | %UserId | "_" | %Date);
               &oJsonBldrUpd_.AddProperty("assignedPlaceName", &sIoTAssetLocation_);
               &oJsonBldrUpd_.AddProperty("eamId", "PS_" | &sIoTAssetName_); /* eamId is the External Asset ID */
               &oJsonBldrUpd_.EndObject("");
            End-If;
            &sRequestJSONUpd_ = &oJsonBldrUpd_.ToString();
            rem &sUpdateAssetURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "UPDATE_ASSET"); /* Now update the asset */
            &sUpdateAssetURI_ = &oJsonService_.fetchEndpoint("UPDATE_ASSET"); /* Now update the asset */
            If &sUpdateAssetURI_ <> "" Then
               &sModUpdateAssetURI_ = &oJsonService_.SubstituteURI(&sUpdateAssetURI_, &sIoTOrgID_); /* Replace <orgId> */
               rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sModUpdateAssetURI_, "POST", &sRequestJSONUpd_, True); /* Send the request to IoT */
               &sModUpdateAssetURI_ = &sModUpdateAssetURI_ | "/" | &sIoTAssetName_;
               &sIoTResponse_ = &oJsonService_.sendRequest(&sModUpdateAssetURI_, "POST", &sRequestJSONUpd_, True); /* Send the request to IoT */
            Else
               rem cannot update asset;
               &oJsonService_.LogRequest(&sMethodName_ | " UPDATE ASSET Failed! ", "");
               Return False;
            End-If;
         Else
            Return False;
         End-If; /* UPDATE ASSET */
      Else
         Return False;
      End-If; /* FETCH_ASSET URI does not exist */
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> 158 And
            &ib_exception.MessageNumber <> 10721 Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   Return True;
end-method;

method deleteAsset
   /+ &sIoTOrgID_ as String, +/
   /+ &sIoTAssetName_ as String +/
   /+ Returns Boolean +/
   
   Local string &sDeleteAssetURI_, &sModDeleteAssetURI_, &sFetchAssetURI_, &sModFetchAssetURI_, &sMethodName_;
   
   &sDeleteAssetURI_ = "";
   &sModDeleteAssetURI_ = "";
   &sFetchAssetURI_ = "";
   &sModFetchAssetURI_ = "";
   &sMethodName_ = "IntegrateAsset:deleteAsset";
   
   try
      rem &sFetchAssetURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_ASSET");
      &sFetchAssetURI_ = &oJsonService_.fetchEndpoint("FETCH_ASSET");
      If &sFetchAssetURI_ <> "" Then
         &sModFetchAssetURI_ = &oJsonService_.SubstituteURI(&sFetchAssetURI_, &sIoTOrgID_); /* Replace <orgId> */
         rem &sFetchAssetURI_ = &sFetchAssetURI_ | &sIoTAssetName_; /* Fetch individual asset */
         &sModFetchAssetURI_ = &sModFetchAssetURI_ | "/" | &sIoTAssetName_; /* Fetch individual asset */
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sModFetchAssetURI_, "GET", "", True); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModFetchAssetURI_, "GET", "", True); /* Send the request to IoT */
         If &sIoTResponse_ <> "" Then /* Response exists, now delete the asset */
            rem &sDeleteAssetURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "DELETE_ASSET");
            &sDeleteAssetURI_ = &oJsonService_.fetchEndpoint("DELETE_ASSET");
            If &sDeleteAssetURI_ <> "" Then
               &sModDeleteAssetURI_ = &oJsonService_.SubstituteURI(&sDeleteAssetURI_, &sIoTOrgID_); /* Replace <orgId> */
               &sModDeleteAssetURI_ = &sModDeleteAssetURI_ | "/" | &sIoTAssetName_; /* Asset to be deleted */
               rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sModDeleteAssetURI_, "DELETE", "", False); /* Send the request to IoT */
               &sIoTResponse_ = &oJsonService_.sendRequest(&sModDeleteAssetURI_, "DELETE", "", False); /* Send the request to IoT */
               REM DELETE THAT ASSET FROM AM IOT TABLE AS WELL;
               SQLExec("DELETE FROM PS_" | Record.AM_IOT_ASSET | " WHERE AM_IOT_ASSET_NAME = :1", &sIoTAssetName_);
            Else
               rem cannot delete asset;
               &oJsonService_.LogRequest(&sMethodName_ | " DELETE ASSET Failed! ", "");
               Return False;
            End-If;
         Else
            Return False;
         End-If; /* Asset does not exist */
      Else
         Return False;
      End-If; /* FETCH_ASSET URI does not exist */
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> 158 And
            &ib_exception.MessageNumber <> 10721 Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Return True;
end-method;

method parseJson
   /+ &oParseJson_ as JsonObject +/
   
   Local integer &i, &j, &m_doccount_, &m_doc_, &nItemsChildCnt_, &nArrLen_, &nArrCount_;
   Local Record &recPSIoTAssets_;
   Local boolean &bUpdate_;
   
   If &oParseJson_.IsJsonArray("items") Then
      &oJsonService_.LogRequest("Fetching Assets : ", "");
      Local JsonArray &jArray_ = &oParseJson_.GetJsonArray("items");
      If &jArray_.Size > 0 Then /* Read Array */
         &m_doccount_ = &jArray_.Length();
         For &i = 1 To &m_doccount_
            Local JsonObject &jObject_ = &jArray_.GetJsonObject(&i);
            If &jObject_.IsExist("id") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&jObject_.GetProperty("id")));
            End-If;
            If &jObject_.IsExist("name") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetName_, String(&jObject_.GetProperty("name")));
            End-If;
            If &jObject_.IsExist("type") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetType_, String(&jObject_.GetProperty("type")));
            End-If;
            Local boolean &bEAMID_ = False;
            If &jObject_.IsExist("eamId") Then
               &oJsonService_.LogRequest(&oConstantService_.PSAsset_, String(&jObject_.GetProperty("eamId")));
               &bEAMID_ = True;
            End-If;
            If &jObject_.IsExist("organizationId") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetOrganisation_, String(&jObject_.GetProperty("organizationId")));
            End-If;
            Local boolean &bDescription_ = False;
            If &jObject_.IsExist("description") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetDescription_, String(&jObject_.GetProperty("description")));
               &bDescription_ = True;
            End-If;
            
            REM Try and make it dynamic;
            For &nItemsChildCnt_ = 1 To &jObject_.ChildCount
               &oJsonService_.LogRequest("Item Child : ", "Property (Key : Value) (" | &jObject_.GetPropertyNameAt(&nItemsChildCnt_) | " : " | &jObject_.GetProperty(&jObject_.GetPropertyNameAt(&nItemsChildCnt_)) | ")");
               If &jObject_.IsJsonArray(&jObject_.GetPropertyNameAt(&nItemsChildCnt_)) Then
                  Local JsonArray &ojObjDynamicArray_ = &jObject_.GetJsonArray(&jObject_.GetPropertyNameAt(&nItemsChildCnt_));
                  If &ojObjDynamicArray_.Size > 0 Then
                     &nArrLen_ = &ojObjDynamicArray_.Length();
                     For &nArrCount_ = 1 To &nArrLen_
                        rem Local JsonObject &ojObjDynamicArrayObj_ = &ojObjDynamicArray_.GetJsonObject(&nArrCount_);
                        rem &oLogObj_.LogRequest("Link Child : ", "Property (Key : Value) (" | &ojObjDynamicArrayObj_.GetPropertyNameAt(&nArrCount_) | " : " | &ojObjDynamicArrayObj_.GetProperty(&jObject_.GetPropertyNameAt(&nArrCount_)) | ")");
                        &oJsonService_.LogRequest("Inside Some JsonArray(s) : ", String(&ojObjDynamicArray_.GetElement(&nArrCount_)));
                     End-For;
                  End-If;
               End-If;
            End-For;
            
            Local boolean &bCoordinates_ = False;
            If &jObject_.IsExist("geoLocation") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetGeolocation_, String(&jObject_.GetProperty("geoLocation")));
               &bCoordinates_ = True;
            End-If;
            If &jObject_.IsExist("lastReportedTimeAsString") Then
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetLastReportedTimeAsString_, String(&jObject_.GetProperty("lastReportedTimeAsString")));
            End-If;
            
            Local boolean &bPlace_ = False;
            If &jObject_.IsExist("assignedPlace") Then
               Local JsonObject &ojObjPayload_ = &jObject_.GetJsonObject("assignedPlace");
               &oJsonService_.LogRequest(&oConstantService_.IoTAssetAssignedLocation_, String(&ojObjPayload_.GetProperty("name")));
               &bPlace_ = True;
               rem &oJsonService_.LogRequest("Assigned Place Property Names : ", String(&ojObjPayload_.GetPropertyNames()));
               rem &oJsonArr_ = CreateArrayRept("", 0);
               rem Local array of string &oJsonArr_ = &ojObjPayload_.GetPropertyNames();
               Local number &nAssignedPlaceChldCnt_;
               For &nAssignedPlaceChldCnt_ = 1 To &ojObjPayload_.ChildCount
                  &oJsonService_.LogRequest("assignedPlace Child : ", "Property (Key : Value) (" | &ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_) | " : " | &ojObjPayload_.GetProperty(&ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_)) | ")");
                  If &ojObjPayload_.IsJsonArray(&ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_)) Then
                     Local JsonArray &ojObjPayloadArray_ = &ojObjPayload_.GetJsonArray(&ojObjPayload_.GetPropertyNameAt(&nAssignedPlaceChldCnt_));
                     If &ojObjPayloadArray_.Size > 0 Then
                        &nArrLen_ = &ojObjPayloadArray_.Length();
                        For &nArrCount_ = 1 To &nArrLen_
                           rem Local JsonObject &jObjPayloadArrObj_ = &ojObjPayloadArray_.GetJsonObject(&nArrCount_);
                           &oJsonService_.LogRequest("Inside assignedPlace JsonArray(s) : ", String(&ojObjPayloadArray_.GetElement(&nArrCount_)));
                        End-For;
                     End-If;
                  End-If;
               End-For;
               
            End-If; /* assignedPlace END */
            
            Local boolean &bDeviceID_ = False;
            If &jObject_.IsExist("attributes") Then
               Local JsonObject &ojObjAttrib_ = &jObject_.GetJsonObject("attributes");
               rem &oJsonService_.LogRequest("Attribute Property Count : ", String(&ojObjAttrib_.GetChildCount()));
               rem &oJsonService_.LogRequest("Attribute Property Count : ", String(&ojObjAttrib_.GetPropertyNameAt(1)));
               &oJsonService_.LogRequest("Asset Device ID : ", String(&ojObjAttrib_.GetProperty(&ojObjAttrib_.GetPropertyNameAt(1))));
               &bDeviceID_ = True
            End-If;
            If &jObject_.IsExist("links") Then
               Local JsonArray &ojObjLinksArray_ = &jObject_.GetJsonArray("links");
               If &ojObjLinksArray_.Size > 0 Then /* Read Array */
                  &m_doc_ = &ojObjLinksArray_.Length();
                  For &j = 1 To &m_doc_
                     Local JsonObject &jObjLinks_ = &ojObjLinksArray_.GetJsonObject(&j);
                     If &jObjLinks_.GetProperty("rel") = "self" Then
                        &oJsonService_.LogRequest(&oConstantService_.IoTAssetSelfLink_, String(&jObjLinks_.GetProperty("href")));
                     End-If;
                  End-For;
               End-If;
            End-If;
            If &bEAMID_ Then /* Insert into new table ONLY if EAMID exists */
               &recPSIoTAssets_ = CreateRecord(Record.AM_IOT_ASSET);
               &recPSIoTAssets_.AM_IOT_ASSET_ID.Value = &jObject_.GetProperty("id");
               &recPSIoTAssets_.AM_IOT_ASSET_NAME.Value = &jObject_.GetProperty("name");
               &recPSIoTAssets_.AM_IOT_ASSET_TYPE.Value = &jObject_.GetProperty("type");
               If &bDescription_ Then
                  &recPSIoTAssets_.ASSET_DESCR.Value = &jObject_.GetProperty("description");
               Else
                  &recPSIoTAssets_.ASSET_DESCR.Value = "";
               End-If;
               If &bPlace_ Then
                  &recPSIoTAssets_.AM_IOT_ASSGN_PLACE.Value = &ojObjPayload_.GetProperty("name");
               Else
                  &recPSIoTAssets_.AM_IOT_ASSGN_PLACE.Value = "";
               End-If;
               If &bCoordinates_ Then
                  &recPSIoTAssets_.AM_IOT_ASSETGEOLOC.Value = &jObject_.GetProperty("geoLocation");
               Else
                  &recPSIoTAssets_.AM_IOT_ASSETGEOLOC.Value = "";
               End-If;
               If &bEAMID_ Then
                  &recPSIoTAssets_.AM_IOT_EAMID.Value = &jObject_.GetProperty("eamId");
               Else
                  &recPSIoTAssets_.AM_IOT_EAMID.Value = "";
               End-If;
               &recPSIoTAssets_.AM_IOT_ASSET_URL.Value = &jObjLinks_.GetProperty("href");
               &recPSIoTAssets_.AM_LASTUPDT_DTTM.Value = %Datetime;
               &recPSIoTAssets_.AM_LASTUPDT_OPRID.Value = %OperatorId;
               If All(&recPSIoTAssets_.AM_IOT_EAMID.Value) Then
                  &bUpdate_ = &recPSIoTAssets_.Update(&recPSIoTAssets_);
                  If Not &bUpdate_ Then
                     &recPSIoTAssets_.Insert();
                  End-If;
               Else
                  rem It is not a PS asset, do not insert;
               End-If;
            End-If; /* Insert PS AM IoT Table */
         End-For; /* Loop thru Array Length END */
         &oJsonService_.LogRequest(&oConstantService_.IoTAssetsLoaded_ | &recPSIoTAssets_.AM_LASTUPDT_DTTM.Value | " are : ", String(&m_doccount_));
      End-If; /* Array Size > 0 END */
   End-If; /* IsJsonArray END */
end-method;

method fetchAssets
   /+ &sIoTOrgID_ as String +/
   /+ Returns Boolean +/
   
   Local JsonObject &oJObjAssetFetch_;
   Local string &sOrigFetchAssetURI_, &sFetchAssetURI_, &sModFetchAssetURI_, &sMethodName_;
   Local boolean &bBreakFetch_;
   
   &sOrigFetchAssetURI_ = "";
   &sFetchAssetURI_ = "";
   &sModFetchAssetURI_ = "";
   %This.sPayloadFields_ = "?fields=id,name,type,description,eamId,organizationId,geoLocation,assignedPlace,attributes,lastReportedTimeAsString";
   %This.sPayloadLimit_ = "&limit=100";
   &sMethodName_ = "IntegrateAsset:fetchAssets";
   Local time &startTime_ = %PerfTime;
   
   try
      rem &sFetchAssetURI_ = &oJsonService_.fetchEndpoint(&sIoTInstanceName_, "FETCH_ASSET");
      &sFetchAssetURI_ = &oJsonService_.fetchEndpoint("FETCH_ASSET");
      rem &sOrigFetchAssetURI_ = &sFetchAssetURI_;
      If &sFetchAssetURI_ <> "" Then
         &sModFetchAssetURI_ = &oJsonService_.SubstituteURI(&sFetchAssetURI_, &sIoTOrgID_); /* Replace <orgId> */
         &sOrigFetchAssetURI_ = &sModFetchAssetURI_; /* Assign without parameters */
         %This.sFetchAssetURIQueryParams_ = %This.sPayloadFields_ | %This.sPayloadLimit_;
         rem &sFetchAssetURI_ = &sFetchAssetURI_ | %This.sFetchAssetURIQueryParams_;
         &sModFetchAssetURI_ = &sModFetchAssetURI_ | %This.sFetchAssetURIQueryParams_;
         &oJsonService_.LogRequest(&sMethodName_ | " FETCH ASSET URL : ", &sModFetchAssetURI_);
         rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sModFetchAssetURI_, "GET", "", False); /* Send the request to IoT */
         &sIoTResponse_ = &oJsonService_.sendRequest(&sModFetchAssetURI_, "GET", "", False); /* Send the request to IoT */
      Else
         rem cannot fetch assets;
         &oJsonService_.LogRequest(&sMethodName_ | " FETCH ASSETS Failed! ", "");
         Return False;
      End-If;
   catch Exception &e
      Local Exception &ib_exception = &e;
      
      If &ib_exception.MessageSetNumber <> 158 And
            &ib_exception.MessageNumber <> 10721 Then
         throw &ib_exception;
      End-If;
      Return False;
   end-try;
   
   Local time &endTime_ = %PerfTime;
   &oJsonService_.logPollSpanTime(&sMethodName_, &startTime_, &endTime_);
   
   &oJObjAssetFetch_ = &oJsonService_.objJsonParser(&sIoTResponse_);
   %This.parseJson(&oJObjAssetFetch_); /* First Pass */
   REM Check how many fetches are required;
   If &oJObjAssetFetch_.IsExist("offset") Then
      &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&oJObjAssetFetch_.GetProperty("offset")));
   End-If;
   If &oJObjAssetFetch_.IsExist("limit") Then
      &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&oJObjAssetFetch_.GetProperty("limit")));
   End-If;
   If &oJObjAssetFetch_.IsExist("count") Then
      &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&oJObjAssetFetch_.GetProperty("count")));
   End-If;
   If &oJObjAssetFetch_.IsExist("hasMore") Then
      &oJsonService_.LogRequest(&oConstantService_.IoTAssetID_, String(&oJObjAssetFetch_.GetProperty("hasMore")));
   End-If;
   REM Fetch Recursively;
   &bBreakFetch_ = False;
   While &oJObjAssetFetch_.GetProperty("hasMore") = True /* More data exists */
      &sOrigFetchAssetURI_ = &sOrigFetchAssetURI_ | %This.sPayloadFields_ | "&offset=" | &oJObjAssetFetch_.GetProperty("count") | &sPayloadLimit_;
      rem &sIoTResponse_ = &oJsonService_.sendRequest(&sIoTInstanceName_, &sOrigFetchAssetURI_, "GET", "", False); /* Send the request to IoT */
      &sIoTResponse_ = &oJsonService_.sendRequest(&sOrigFetchAssetURI_, "GET", "", False); /* Send the request to IoT */
      &oJObjAssetFetch_ = &oJsonService_.objJsonParser(&sIoTResponse_);
      rem fetch again;
      %This.parseJson(&oJObjAssetFetch_); /* Subsequent Passes */
      If &oJObjAssetFetch_.GetProperty("hasMore") = False Then
         &bBreakFetch_ = True;
         %This.parseJson(&oJObjAssetFetch_); /* Last Pass */
         Break;
      End-If;
   End-While;
   
   REM logic moved to method parseJson;
   Return True;
   
end-method;
